cscope 15 $HOME/git/memcachedClient/libmemcached-1.0.17               0001877909
	@clients/client_options.h

12 #¥agm®
⁄˚


14 
memˇched_hñp_ãxt_°
 
	tmemˇched_hñp_ãxt_°
;

16 
	ememˇched_›ti⁄s
 {

17 
	mOPT_SERVERS
= 's',

18 
	mOPT_VERSION
= 'V',

19 
	mOPT_HELP
= 'h',

20 
	mOPT_VERBOSE
= 'v',

21 
	mOPT_DEBUG
= 'd',

22 
	mOPT_ANALYZE
= 'a',

23 
	mOPT_FLAG
= 257,

24 
	mOPT_EXPIRE
,

25 
	mOPT_SET
,

26 
	mOPT_REPLACE
,

27 
	mOPT_ADD
,

28 
	mOPT_SLAP_EXECUTE_NUMBER
,

29 
	mOPT_SLAP_INITIAL_LOAD
,

30 
	mOPT_SLAP_TEST
,

31 
	mOPT_SLAP_CONCURRENCY
,

32 
	mOPT_SLAP_NON_BLOCK
,

33 
	mOPT_SLAP_TCP_NODELAY
,

34 
	mOPT_FLUSH
,

35 
	mOPT_HASH
,

36 
	mOPT_BINARY
,

37 
	mOPT_UDP
,

38 
	mOPT_BUFFER
,

39 
	mOPT_USERNAME
,

40 
	mOPT_PASSWD
,

41 
	mOPT_STAT_ARGS
,

42 
	mOPT_SERVER_VERSION
,

43 
	mOPT_QUIET
,

44 
	mOPT_FILE
= 'f'

	@clients/execute.cc

18 
	~<mem_c⁄fig.h
>

19 
	~"˛õ¡s/execuã.h
"

21 
	$execuã_£t
(
memˇched_°
 *
memc
, 
∑ús_°
 *
∑ús
, 
numbî_of
)

23 
x
;

24 
∑ús_£¡
;

26 
x
0, 
∑ús_£¡
0; x < 
numbî_of
; x++)

28 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
, 
∑ús
[
x
].
key
,Öaús[x].
key_Àngth
,

29 
∑ús
[
x
].
vÆue
,Öaús[x].
vÆue_Àngth
,

31 i‡(
	`memˇched_Áûed
(
rc
))

33 
	`Ârötf
(
°dîr
, "%s:%d Failure on insert (%s) of %.*s\n",

34 
__FILE__
, 
__LINE__
,

35 
	`memˇched_œ°_îr‹_mesßge
(
memc
),

36 ()
∑ús
[
x
].
key_Àngth
,Öaús[x].
key
);

39 
	`memˇched_quô
(
memc
);

43 
∑ús_£¡
++;

47  
∑ús_£¡
;

48 
	}
}

54 
	$execuã_gë
(
memˇched_°
 *
memc
, 
∑ús_°
 *
∑ús
, 
numbî_of
)

56 
x
;

57 
ªåõved
;

60 
ªåõved
0,
x
0; x < 
numbî_of
; x++)

62 
size_t
 
vÆue_Àngth
;

63 
uöt32_t
 
Êags
;

65 
„tch_key
()(()
	`øndom
(Ë% 
numbî_of
);

67 
memˇched_ªtu∫_t
 
rc
;

68 *
vÆue

	`memˇched_gë
(
memc
, 
∑ús
[
„tch_key
].
key
,Öaús[„tch_key].
key_Àngth
,

69 &
vÆue_Àngth
, &
Êags
, &
rc
);

71 i‡(
	`memˇched_Áûed
(
rc
))

73 
	`Ârötf
(
°dîr
, "%s:%d Failure onÑead(%s) of %.*s\n",

74 
__FILE__
, 
__LINE__
,

75 
	`memˇched_œ°_îr‹_mesßge
(
memc
),

76 ()
∑ús
[
„tch_key
].
key_Àngth
,Öaús[„tch_key].
key
);

80 
ªåõved
++;

83 ::
	`‰ì
(
vÆue
);

86  
ªåõved
;

87 
	}
}

92 
memˇched_ªtu∫_t
 
	$ˇŒback_cou¡î
(c⁄° 
memˇched_°
 *
±r
,

93 
memˇched_ªsu…_°
 *
ªsu…
,

94 *
c⁄ãxt
)

96 ()
±r
;

97 ()
ªsu…
;

98 *
cou¡î
(*)
c⁄ãxt
;

99 *
cou¡î
= *counter + 1;

101  
MEMCACHED_SUCCESS
;

102 
	}
}

112 
	$execuã_mgë
(
memˇched_°
 *
memc
,

113 c⁄° * c⁄° *
keys
,

114 
size_t
 *
key_Àngth
,

115 
numbî_of
)

117 
ªåõved
= 0;

118 
memˇched_execuã_‚
 
ˇŒbacks
[]{ 
ˇŒback_cou¡î
 };

119 
memˇched_ªtu∫_t
 
rc
;

120 
rc

	`memˇched_mgë_execuã
(
memc
, 
keys
, 
key_Àngth
,

121 (
size_t
)
numbî_of
, 
ˇŒbacks
, &
ªåõved
, 1);

123 i‡(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_NOTFOUND
 ||

124 
rc
 =
MEMCACHED_BUFFERED
 ||Ñ¯=
MEMCACHED_END
)

126 
rc

	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
ªåõved
, 1);

127 i‡(
rc
 !
MEMCACHED_SUCCESS
 &&Ñ¯!
MEMCACHED_NOTFOUND
 &&Ñ¯!
MEMCACHED_END
)

129 
	`Ârötf
(
°dîr
, "%s:%d FailedÅoÉxecute mget: %s\n",

130 
__FILE__
, 
__LINE__
,

131 
	`memˇched_°ªº‹
(
memc
, 
rc
));

132 
	`memˇched_quô
(
memc
);

138 
	`Ârötf
(
°dîr
, "%s:%d FailedÅoÉxecute mget: %s\n",

139 
__FILE__
, 
__LINE__
,

140 
	`memˇched_°ªº‹
(
memc
, 
rc
));

141 
	`memˇched_quô
(
memc
);

145  
ªåõved
;

146 
	}
}

	@clients/execute.h

12 #¥agm®
⁄˚


14 
	~<°dio.h
>

16 
	~<libmemˇched-1.0/memˇched.h
>

17 
	~"˛õ¡s/gíî©‹.h
"

19 #ifde‡
__˝lu•lus


23 
execuã_£t
(
memˇched_°
 *
memc
, 
∑ús_°
 *
∑ús
, 
numbî_of
);

24 
execuã_gë
(
memˇched_°
 *
memc
, 
∑ús_°
 *
∑ús
, 
numbî_of
);

25 
execuã_mgë
(
memˇched_°
 *
memc
, c⁄° * c⁄° *
keys
, 
size_t
 *
key_Àngth
,

26 
numbî_of
);

28 #ifde‡
__˝lu•lus


	@clients/generator.cc

13 
	~<mem_c⁄fig.h
>

15 
	~<°döt.h
>

17 
	~<c°dio
>

18 
	~<c°dlib
>

19 
	~<c°rög
>

20 
	~<io°ªam
>

21 
	~<uni°d.h
>

23 
	~"˛õ¡s/gíî©‹.h
"

26 c⁄° 
	gALPHANUMERICS
[]=

29 
	#ALPHANUMERICS_SIZE
 ((
ALPHANUMERICS
)-1)

	)

31 
size_t
 
	$gë_Æpha_num
()

33  (
size_t
)
	`øndom
(Ë% 
ALPHANUMERICS_SIZE
;

34 
	}
}

36 
	$gë_øndom_°rög
(*
buf„r
, 
size_t
 
size
)

38 *
buf„r_±r

buf„r
;

40 --
size
)

42 *
buf„r_±r
++
ALPHANUMERICS
[
	`gë_Æpha_num
()];

44 *
buf„r_±r
++
ALPHANUMERICS
[
	`gë_Æpha_num
()];

45 
	}
}

47 
	$∑ús_‰ì
(
∑ús_°
 *
∑ús
)

49 i‡(
∑ús
 =
NULL
)

55 
uöt32_t
 
x
0; 
∑ús
[x].
key
; x++)

57 
	`‰ì
(
∑ús
[
x
].
key
);

58 i‡(
∑ús
[
x
].
vÆue
)

60 
	`‰ì
(
∑ús
[
x
].
vÆue
);

64 
	`‰ì
(
∑ús
);

65 
	}
}

67 
∑ús_°
 *
	$∑ús_gíî©e
(
uöt64_t
 
numbî_of
, 
size_t
 
vÆue_Àngth
)

69 
∑ús_°
 *
∑ús
’aús_°*)
	`ˇŒoc
((
size_t
)
numbî_of
 + 1, (pairs_st));

71 i‡(
∑ús
 =
NULL
)

73 
îr‹
;

76 
uöt64_t
 
x
0; x < 
numbî_of
; x++)

78 
∑ús
[
x
].
key
(*)
	`ˇŒoc
(100, ());

80 i‡(
∑ús
[
x
].
key
 =
NULL
)

81 
îr‹
;

83 
	`gë_øndom_°rög
(
∑ús
[
x
].
key
, 100);

84 
∑ús
[
x
].
key_Àngth
= 100;

86 i‡(
vÆue_Àngth
)

88 
∑ús
[
x
].
vÆue
(*)
	`ˇŒoc
(
vÆue_Àngth
, ());

90 i‡(
∑ús
[
x
].
vÆue
 =
NULL
)

91 
îr‹
;

93 
	`gë_øndom_°rög
(
∑ús
[
x
].
vÆue
, 
vÆue_Àngth
);

94 
∑ús
[
x
].
vÆue_Àngth
= value_length;

98 
∑ús
[
x
].
vÆue

NULL
;

99 
∑ús
[
x
].
vÆue_Àngth
= 0;

103  
∑ús
;

104 
îr‹
:

105 
°d
::
˚º
 << "Mem‹y AŒoˇti⁄ faûuª i¿∑ús_gíî©e." << std::
ídl
;

106 
	`exô
(
EXIT_SUCCESS
);

107 
	}
}

	@clients/generator.h

16 #¥agm®
⁄˚


18 
∑ús_°
 
	t∑ús_°
;

20 
	s∑ús_°
 {

21 *
	mkey
;

22 
size_t
 
	mkey_Àngth
;

23 *
	mvÆue
;

24 
size_t
 
	mvÆue_Àngth
;

27 #ifde‡
__˝lu•lus


31 
∑ús_°
 *
∑ús_gíî©e
(
uöt64_t
 
numbî_of
, 
size_t
 
vÆue_Àngth
);

32 
∑ús_‰ì
(
∑ús_°
 *
∑ús
);

34 #ifde‡
__˝lu•lus


	@clients/memaslap.c

16 
	~"mem_c⁄fig.h
"

18 
	~<°dlib.h
>

19 
	~<gë›t.h
>

20 
	~<limôs.h
>

22 #i‡
deföed
(
HAVE_SYS_TIME_H
)

23 
	~<sys/time.h
>

26 #i‡
deföed
(
HAVE_TIME_H
)

27 
	~<time.h
>

31 
	~"ms_sig£gv.h
"

32 
	~"ms_£âög.h
"

33 
	~"ms_thªad.h
"

35 
	#PROGRAM_NAME
 "mem¶≠"

	)

36 
	#PROGRAM_DESCRIPTION
 \

37 "Gíî©e†w‹klﬂdágaö° memˇched sîvîs."

	)

39 #ifde‡
__sun


43 
	#OPTIONSTRING
 *

	)

45 
	#OPTIONSTRING
 c⁄° *

	)

49 
›ti⁄
 
	gl⁄g_›ti⁄s
[]=

51 { (
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
,

52 
OPT_SERVERS
 },

53 { (
OPTIONSTRING
)"thªads", 
ªquúed_¨gumít
, 
NULL
,

54 
OPT_THREAD_NUMBER
 },

55 { (
OPTIONSTRING
)"c⁄cuºícy", 
ªquúed_¨gumít
, 
NULL
,

56 
OPT_CONCURRENCY
 },

57 { (
OPTIONSTRING
)"c⁄n_sock", 
ªquúed_¨gumít
, 
NULL
,

58 
OPT_SOCK_PER_CONN
 },

59 { (
OPTIONSTRING
)"execuã_numbî", 
ªquúed_¨gumít
, 
NULL
,

60 
OPT_EXECUTE_NUMBER
 },

61 { (
OPTIONSTRING
)"time", 
ªquúed_¨gumít
, 
NULL
,

62 
OPT_TIME
 },

63 { (
OPTIONSTRING
)"cfg_cmd", 
ªquúed_¨gumít
, 
NULL
,

64 
OPT_CONFIG_CMD
 },

65 { (
OPTIONSTRING
)"wö_size", 
ªquúed_¨gumít
, 
NULL
,

66 
OPT_WINDOW_SIZE
 },

67 { (
OPTIONSTRING
)"fixed_size", 
ªquúed_¨gumít
, 
NULL
,

68 
OPT_FIXED_LTH
 },

69 { (
OPTIONSTRING
)"vîify", 
ªquúed_¨gumít
, 
NULL
,

70 
OPT_VERIFY
 },

71 { (
OPTIONSTRING
)"divisi⁄", 
ªquúed_¨gumít
, 
NULL
,

72 
OPT_GETS_DIVISION
 },

73 { (
OPTIONSTRING
)"°©_‰eq", 
ªquúed_¨gumít
, 
NULL
,

74 
OPT_STAT_FREQ
 },

75 { (
OPTIONSTRING
)"exp_vîify", 
ªquúed_¨gumít
, 
NULL
,

76 
OPT_EXPIRE
 },

77 { (
OPTIONSTRING
)"ovîwrôe", 
ªquúed_¨gumít
, 
NULL
,

78 
OPT_OVERWRITE
 },

79 { (
OPTIONSTRING
)"ªc⁄√˘", 
no_¨gumít
, 
NULL
,

80 
OPT_RECONNECT
 },

81 { (
OPTIONSTRING
)"udp", 
no_¨gumít
, 
NULL
,

82 
OPT_UDP
 },

83 { (
OPTIONSTRING
)"Á˚book", 
no_¨gumít
, 
NULL
,

84 
OPT_FACEBOOK_TEST
 },

85 { (
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
,

86 
OPT_BINARY_PROTOCOL
 },

87 { (
OPTIONSTRING
)"çs", 
ªquúed_¨gumít
, 
NULL
,

88 
OPT_TPS
 },

89 { (
OPTIONSTRING
)"ªp_wrôe", 
ªquúed_¨gumít
, 
NULL
,

90 
OPT_REP_WRITE_SRV
 },

91 { (
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, 
NULL
,

92 
OPT_VERBOSE
 },

93 { (
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
,

94 
OPT_HELP
 },

95 { (
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
,

96 
OPT_VERSION
 },

101 
ms_sync_lock_öô
();

102 
ms_sync_lock_de°roy
();

103 
ms_globÆ_°ru˘_öô
();

104 
ms_globÆ_°ru˘_de°roy
();

105 
ms_vîsi⁄_comm™d
(c⁄° *
comm™d_«me
);

106 c⁄° *
ms_lookup_hñp
(
ms_›ti⁄s_t
 
›ti⁄
);

107 
öt64_t
 
ms_∑r£_time
();

108 
öt64_t
 
ms_∑r£_size
();

109 
ms_›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

110 
ms_check_∑ø
();

111 
ms_°©i°ic_öô
();

112 
ms_°©s_öô
();

113 
ms_¥öt_°©i°ics
(
ö_time
);

114 
ms_¥öt_mem¶≠_°©s
(
timevÆ
 *
°¨t_time
,

115 
timevÆ
 *
íd_time
);

116 
ms_m⁄ô‹_¶≠_mode
();

125 
__©åibuã__
((
n‹ëu∫
)Ë
	$ms_hñp_comm™d
(c⁄° *
comm™d_«me
, c⁄° *
des¸ùti⁄
)

127 *
hñp_mesßge

NULL
;

129 
	`¥ötf
("%†v%u.%u\n", 
comm™d_«me
, 1U, 0U);

130 
	`¥ötf
(" %s\n\n", 
des¸ùti⁄
);

131 
	`¥ötf
(

136 
x
0; 
l⁄g_›ti⁄s
[x].
«me
; x++)

138 
	`¥ötf
(" -%c, --%s%c\n", 
l⁄g_›ti⁄s
[
x
].
vÆ
,Ü⁄g_›ti⁄s[x].
«me
,

139 
l⁄g_›ti⁄s
[
x
].
has_¨g
 ? '=' : ' ');

141 i‡((
hñp_mesßge
(*)
	`ms_lookup_hñp
(
l⁄g_›ti⁄s
[
x
].
vÆ
)Ë!
NULL
)

143 
	`¥ötf
(" %s\n", 
hñp_mesßge
);

147 
	`¥ötf
(

157 
	`exô
(0);

158 
	}
}

162 
	$ms_sync_lock_öô
()

164 
ms_globÆ
.
öô_lock
.
cou¡
= 0;

165 
	`±hªad_muãx_öô
(&
ms_globÆ
.
öô_lock
.
lock
, 
NULL
);

166 
	`±hªad_c⁄d_öô
(&
ms_globÆ
.
öô_lock
.
c⁄d
, 
NULL
);

168 
ms_globÆ
.
w¨mup_lock
.
cou¡
 = 0;

169 
	`±hªad_muãx_öô
(&
ms_globÆ
.
w¨mup_lock
.
lock
, 
NULL
);

170 
	`±hªad_c⁄d_öô
(&
ms_globÆ
.
w¨mup_lock
.
c⁄d
, 
NULL
);

172 
ms_globÆ
.
run_lock
.
cou¡
= 0;

173 
	`±hªad_muãx_öô
(&
ms_globÆ
.
run_lock
.
lock
, 
NULL
);

174 
	`±hªad_c⁄d_öô
(&
ms_globÆ
.
run_lock
.
c⁄d
, 
NULL
);

176 
	`±hªad_muãx_öô
(&
ms_globÆ
.
quô_muãx
, 
NULL
);

177 
	`±hªad_muãx_öô
(&
ms_globÆ
.
£q_muãx
, 
NULL
);

178 
	}
}

182 
	$ms_sync_lock_de°roy
()

184 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
öô_lock
.
lock
);

185 
	`±hªad_c⁄d_de°roy
(&
ms_globÆ
.
öô_lock
.
c⁄d
);

187 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
w¨mup_lock
.
lock
);

188 
	`±hªad_c⁄d_de°roy
(&
ms_globÆ
.
w¨mup_lock
.
c⁄d
);

190 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
run_lock
.
lock
);

191 
	`±hªad_c⁄d_de°roy
(&
ms_globÆ
.
run_lock
.
c⁄d
);

193 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
quô_muãx
);

194 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
£q_muãx
);

196 i‡(
ms_£âög
.
°©_‰eq
 > 0)

198 
	`±hªad_muãx_de°roy
(&
ms_°©i°ic
.
°©_muãx
);

200 
	}
}

204 
	$ms_globÆ_°ru˘_öô
()

206 
	`ms_sync_lock_öô
();

207 
ms_globÆ
.
föish_w¨mup

Ál£
;

208 
ms_globÆ
.
time_out

Ál£
;

209 
	}
}

213 
	$ms_globÆ_°ru˘_de°roy
()

215 
	`ms_sync_lock_de°roy
();

216 
	}
}

224 
	$ms_vîsi⁄_comm™d
(c⁄° *
comm™d_«me
)

226 
	`¥ötf
("%†v%u.%u\n", 
comm™d_«me
, 1U, 0U);

227 
	`exô
(0);

228 
	}
}

238 c⁄° *
	$ms_lookup_hñp
(
ms_›ti⁄s_t
 
›ti⁄
)

240 
›ti⁄
)

242 
OPT_SERVERS
:

247 
OPT_VERSION
:

250 
OPT_HELP
:

253 
OPT_EXECUTE_NUMBER
:

257 
OPT_THREAD_NUMBER
:

261 
OPT_CONCURRENCY
:

264 
OPT_FIXED_LTH
:

267 
OPT_VERIFY
:

270 
OPT_GETS_DIVISION
:

273 
OPT_TIME
:

278 
OPT_CONFIG_CMD
:

282 
OPT_WINDOW_SIZE
:

287 
OPT_UDP
:

292 
OPT_EXPIRE
:

297 
OPT_OVERWRITE
:

302 
OPT_STAT_FREQ
:

307 
OPT_SOCK_PER_CONN
:

310 
OPT_RECONNECT
:

314 
OPT_VERBOSE
:

318 
OPT_FACEBOOK_TEST
:

322 
OPT_BINARY_PROTOCOL
:

326 
OPT_TPS
:

329 
OPT_REP_WRITE_SRV
:

335 
	}
}

339 
öt64_t
 
	$ms_∑r£_time
()

341 
öt64_t
 
ªt
= 0;

342 
unô

›èrg
[
	`°æí
(optarg) - 1];

344 
›èrg
[
	`°æí
(optarg) - 1]= '\0';

345 
ªt

	`©oi
(
›èrg
);

347 
unô
)

351 
ªt
*= 24;

355 
ªt
*= 60;

359 
ªt
*= 60;

366 
ªt
= -1;

370  
ªt
;

371 
	}
}

375 
öt64_t
 
	$ms_∑r£_size
()

377 
öt64_t
 
ªt
= -1;

378 
unô

›èrg
[
	`°æí
(optarg) - 1];

380 
›èrg
[
	`°æí
(optarg) - 1]= '\0';

381 
î∫o
= 0;

382 
ªt

	`°πﬁl
(
›èrg
, (**)
NULL
, 10);

383 i‡(
î∫o
 != 0)

385 
	`Ârötf
(
°dîr
, "°πﬁl(›èrg,..): %s\n", 
	`°ªº‹
(
î∫o
));

386 
	`exô
(1);

389 
unô
)

393 
ªt
*= 1024;

398 
ªt
*= 1024 * 1024;

403 
ªt
*= 1024 * 1024 * 1024;

407 
ªt
= -1;

411  
ªt
;

412 
	}
}

416 
	$ms_›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

418 
›ti⁄_ödex
= 0;

419 
›ti⁄_rv
;

421 (
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "VhURbaBs:x:T:c:X:v:d:"

423 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1)

425 
›ti⁄_rv
)

430 
OPT_VERSION
:

431 
	`ms_vîsi⁄_comm™d
(
PROGRAM_NAME
);

434 
OPT_HELP
:

435 
	`ms_hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
);

438 
OPT_SERVERS
:

439 
ms_£âög
.
§v_°r

	`°rdup
(
›èrg
);

442 
OPT_CONCURRENCY
:

443 
î∫o
= 0;

444 
ms_£âög
.
nc⁄ns
(
uöt32_t
)
	`°πoul
(
›èrg
, (**Ë
NULL
, 10);

445 i‡(
ms_£âög
.
nc⁄ns
 <0 || 
î∫o
 != 0)

447 
	`Ârötf
(
°dîr
, "Concurrency must be greaterÅhan 0.:-)\n");

448 
	`exô
(1);

452 
OPT_EXECUTE_NUMBER
:

453 
î∫o
= 0;

454 
ms_£âög
.
exec_num
()
	`°πﬁ
(
›èrg
, (**Ë
NULL
, 10);

455 i‡(
ms_£âög
.
exec_num
 <0 || 
î∫o
 != 0)

457 
	`Ârötf
(
°dîr
, "ExecuteÇumber must be greaterÅhan 0.:-)\n");

458 
	`exô
(1);

462 
OPT_THREAD_NUMBER
:

463 
î∫o
= 0;

464 
ms_£âög
.
¡hªads
(
uöt32_t
)
	`°πoul
(
›èrg
, (**Ë
NULL
, 10);

465 i‡(
ms_£âög
.
¡hªads
 <0 || 
î∫o
 != 0)

467 
	`Ârötf
(
°dîr
, "ThreadsÇumber must be greaterÅhan 0.:-)\n");

468 
	`exô
(1);

472 
OPT_FIXED_LTH
:

473 
î∫o
= 0;

474 
ms_£âög
.
fixed_vÆue_size
(
size_t
)
	`°πouŒ
(
›èrg
, (**Ë
NULL
, 10);

475 i‡((
ms_£âög
.
fixed_vÆue_size
 <0 || 
î∫o
 != 0)

476 || (
ms_£âög
.
fixed_vÆue_size
 > 
MAX_VALUE_SIZE
))

478 
	`Ârötf
(
°dîr
, "Value size must be between 0ánd 1M.:-)\n");

479 
	`exô
(1);

483 
OPT_VERIFY
:

484 
ms_£âög
.
vîify_≥r˚¡

	`©of
(
›èrg
);

485 i‡((
ms_£âög
.
vîify_≥r˚¡
 <= 0)

486 || (
ms_£âög
.
vîify_≥r˚¡
 > 1.0))

488 
	`Ârötf
(
°dîr
, "Data verificationÑate must be "

490 
	`exô
(1);

494 
OPT_GETS_DIVISION
:

495 
î∫o
= 0;

496 
ms_£âög
.
mu…_key_num
()
	`°πﬁ
(
›èrg
, (**Ë
NULL
, 10);

497 i‡(
ms_£âög
.
mu…_key_num
 <0 || 
î∫o
 != 0)

499 
	`Ârötf
(
°dîr
, "Multi-get keyÇumber must be greaterÅhan 0.:-)\n");

500 
	`exô
(1);

504 
OPT_TIME
:

505 
ms_£âög
.
run_time
()
	`ms_∑r£_time
();

506 i‡(
ms_£âög
.
run_time
 == -1)

508 
	`Ârötf
(
°dîr
, "Please specifyÅheÑunÅime. :-)\n"

511 
	`exô
(1);

514 i‡(
ms_£âög
.
run_time
 == 0)

516 
	`Ârötf
(
°dîr
, "RunningÅime canÇot be 0. :-)\n");

517 
	`exô
(1);

521 
OPT_CONFIG_CMD
:

522 
ms_£âög
.
cfg_fûe

	`°rdup
(
›èrg
);

525 
OPT_WINDOW_SIZE
:

526 
ms_£âög
.
wö_size
(
size_t
)
	`ms_∑r£_size
();

527 i‡(
ms_£âög
.
wö_size
 =(
size_t
)-1)

529 
	`Ârötf
(

530 
°dîr
,

533 
	`exô
(1);

537 
OPT_UDP
:

538 
ms_£âög
.
udp

åue
;

541 
OPT_EXPIRE
:

542 
ms_£âög
.
exp_vî_≥r

	`©of
(
›èrg
);

543 i‡((
ms_£âög
.
exp_vî_≥r
 <= 0) || (ms_setting.exp_ver_per > 1.0))

545 
	`Ârötf
(
°dîr
, "ExpireÅime verificationÑate must be "

547 
	`exô
(1);

551 
OPT_OVERWRITE
:

552 
ms_£âög
.
ovîwrôe_≥r˚¡

	`©of
(
›èrg
);

553 i‡((
ms_£âög
.
ovîwrôe_≥r˚¡
 <= 0)

554 || (
ms_£âög
.
ovîwrôe_≥r˚¡
 > 1.0))

556 
	`Ârötf
(
°dîr
, "Objects overwriteÑate must be "

558 
	`exô
(1);

562 
OPT_STAT_FREQ
:

563 
ms_£âög
.
°©_‰eq
()
	`ms_∑r£_time
();

564 i‡(
ms_£âög
.
°©_‰eq
 == -1)

566 
	`Ârötf
(
°dîr
, "Please specifyÅhe frequency of dumping "

570 
	`exô
(1);

573 i‡(
ms_£âög
.
°©_‰eq
 == 0)

575 
	`Ârötf
(
°dîr
, "The frequency of dumping statistic information "

577 
	`exô
(1);

581 
OPT_SOCK_PER_CONN
:

582 
î∫o
= 0;

583 
ms_£âög
.
sock_≥r_c⁄n
(
uöt32_t
)
	`°πoul
(
›èrg
, (**Ë
NULL
, 10);

584 i‡(
ms_£âög
.
sock_≥r_c⁄n
 <0 || 
î∫o
 != 0)

586 
	`Ârötf
(
°dîr
, "Number of socks ofÉach concurrency "

588 
	`exô
(1);

592 
OPT_RECONNECT
:

593 
ms_£âög
.
ªc⁄√˘

åue
;

596 
OPT_VERBOSE
:

597 
ms_£âög
.
vîbo£

åue
;

600 
OPT_FACEBOOK_TEST
:

601 
ms_£âög
.
Á˚book_ã°

åue
;

604 
OPT_BINARY_PROTOCOL
:

605 
ms_£âög
.
bö¨y_¥Ÿ_

åue
;

608 
OPT_TPS
:

609 
ms_£âög
.
ex≥˘ed_çs
()
	`ms_∑r£_size
();

610 i‡(
ms_£âög
.
ex≥˘ed_çs
 == -1)

612 
	`Ârötf
(
°dîr
,

615 
	`exô
(1);

619 
OPT_REP_WRITE_SRV
:

620 
î∫o
= 0;

621 
ms_£âög
.
ªp_wrôe_§v
(
uöt32_t
)
	`°πoul
(
›èrg
, (**Ë
NULL
, 10);

622 i‡(
ms_£âög
.
ªp_wrôe_§v
 <0 || 
î∫o
 != 0)

624 
	`Ârötf
(
°dîr
,

627 
	`exô
(1);

633 
	`exô
(1);

636 
	`ab‹t
();

639 
	}
}

642 
	$ms_check_∑ø
()

644 i‡(
ms_£âög
.
§v_°r
 =
NULL
)

646 *
ãmp
;

648 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

650 
ms_£âög
.
§v_°r

	`°rdup
(
ãmp
);

654 
	`Ârötf
(
°dîr
, "No ServersÖrovided\n\n");

659 i‡(
ms_£âög
.
nc⁄ns
 % (
uöt32_t
)ms_£âög.
¡hªads
 != 0)

661 
	`Ârötf
(
°dîr
, "Concurrency must beÅhe multiples ofÅhreads count.\n");

665 i‡(
ms_£âög
.
wö_size
 % 
UNIT_ITEMS_COUNT
 != 0)

667 
	`Ârötf
(
°dîr
, "Window size must beÅhe multiples of 1024.\n\n");

671  
EXIT_SUCCESS
;

672 
	}
}

676 
	$ms_°©i°ic_öô
()

678 
	`±hªad_muãx_öô
(&
ms_°©i°ic
.
°©_muãx
, 
NULL
);

679 
	`ms_öô_°©s
(&
ms_°©i°ic
.
gë_°©
, "Get");

680 
	`ms_öô_°©s
(&
ms_°©i°ic
.
£t_°©
, "Set");

681 
	`ms_öô_°©s
(&
ms_°©i°ic
.
tŸÆ_°©
, "Total");

682 
	}
}

686 
	$ms_°©s_öô
()

688 
	`mem£t
(&
ms_°©s
, 0, (
ms_°©s_t
));

689 i‡(
ms_£âög
.
°©_‰eq
 > 0)

691 
	`ms_°©i°ic_öô
();

693 
	}
}

697 
	$ms_¥öt_°©i°ics
(
ö_time
)

699 
obj_size
()(
ms_£âög
.
avg_key_size
 + ms_£âög.
avg_vÆ_size
);

701 
	`¥ötf
("\033[1;1H\033[2J\n");

702 
	`ms_dump_f‹m©_°©s
(&
ms_°©i°ic
.
gë_°©
, 
ö_time
,

703 
ms_£âög
.
°©_‰eq
, 
obj_size
);

704 
	`ms_dump_f‹m©_°©s
(&
ms_°©i°ic
.
£t_°©
, 
ö_time
,

705 
ms_£âög
.
°©_‰eq
, 
obj_size
);

706 
	`ms_dump_f‹m©_°©s
(&
ms_°©i°ic
.
tŸÆ_°©
, 
ö_time
,

707 
ms_£âög
.
°©_‰eq
, 
obj_size
);

708 
	}
}

712 
	$ms_¥öt_mem¶≠_°©s
(
timevÆ
 *
°¨t_time
,

713 
timevÆ
 *
íd_time
)

715 
buf
[1024];

716 *
pos

buf
;

718 
pos
+
	`¢¥ötf
(pos,

719 (
buf
), "cmd_get: %lu\n",

720 (Ë
ms_°©s
.
cmd_gë
);

721 
pos
+
	`¢¥ötf
(pos,

722 (
buf
Ë- (
size_t
)(
pos
 -buf),

724 (Ë
ms_°©s
.
cmd_£t
);

725 
pos
+
	`¢¥ötf
(pos,

726 (
buf
Ë- (
size_t
)(
pos
 -buf),

728 (Ë
ms_°©s
.
gë_mis£s
);

730 i‡(
ms_£âög
.
vîify_≥r˚¡
 > 0)

732 
pos
+
	`¢¥ötf
(pos,

733 (
buf
Ë- (
size_t
)(
pos
 -buf),

735 (Ë
ms_°©s
.
vef_miss
);

736 
pos
+
	`¢¥ötf
(pos,

737 (
buf
Ë- (
size_t
)(
pos
 -buf),

739 (Ë
ms_°©s
.
vef_Áûed
);

742 i‡(
ms_£âög
.
exp_vî_≥r
 > 0)

744 
pos
+
	`¢¥ötf
(pos,

745 (
buf
Ë- (
size_t
)(
pos
 -buf),

747 (Ë
ms_°©s
.
exp_gë
);

748 
pos
+
	`¢¥ötf
(pos,

749 (
buf
Ë- (
size_t
)(
pos
 -buf),

751 (Ë
ms_°©s
.
u√xp_ungë
);

754 
pos
+
	`¢¥ötf
(pos,

755 (
buf
Ë- (
size_t
)(
pos
 -buf),

757 (Ë
ms_°©s
.
byãs_wrôãn
);

758 
pos
+
	`¢¥ötf
(pos,

759 (
buf
Ë- (
size_t
)(
pos
 -buf),

761 (Ë
ms_°©s
.
byãs_ªad
);

762 
pos
+
	`¢¥ötf
(pos,

763 (
buf
Ë- (
size_t
)(
pos
 -buf),

765 (Ë
ms_°©s
.
obj_byãs
);

767 i‡(
ms_£âög
.
udp
 || ms_£âög.
Á˚book_ã°
)

769 
pos
+
	`¢¥ötf
(pos,

770 (
buf
Ë- (
size_t
)(
pos
 -buf),

772 (Ë
ms_°©s
.
pkt_dis‹dî
);

773 
pos
+
	`¢¥ötf
(pos,

774 (
buf
Ë- (
size_t
)(
pos
 -buf),

776 ()
ms_°©s
.
pkt_dr›
);

777 
pos
+
	`¢¥ötf
(pos,

778 (
buf
Ë- (
size_t
)(
pos
 -buf),

780 ()
ms_°©s
.
udp_timeout
);

783 i‡(
ms_£âög
.
°©_‰eq
 > 0)

785 
	`ms_dump_°©s
(&
ms_°©i°ic
.
gë_°©
);

786 
	`ms_dump_°©s
(&
ms_°©i°ic
.
£t_°©
);

787 
	`ms_dump_°©s
(&
ms_°©i°ic
.
tŸÆ_°©
);

790 
öt64_t
 
time_diff

	`ms_time_diff
(
°¨t_time
, 
íd_time
);

791 
pos
+
	`¢¥ötf
(pos,

792 (
buf
Ë- (
size_t
)(
pos
 -buf),

794 ()
time_diff
 / 1000000,

795 ()(
ms_°©s
.
cmd_gë
 + ms_°©s.
cmd_£t
),

796 (
ms_°©s
.
cmd_gë


797 + 
ms_°©s
.
cmd_£t
Ë/ (()
time_diff
 / 1000000),

799 
ms_°©s
.
byãs_wrôãn


800 + 
ms_°©s
.
byãs_ªad
) / 1024 / 1024

801 / (()
time_diff
 / 1000000));

802 
	`as£π
(
pos
 <
buf
);

804 
	`Ârötf
(
°dout
, "%s", 
buf
);

805 
	`fÊush
(
°dout
);

806 
	}
}

810 
	$ms_m⁄ô‹_¶≠_mode
()

812 
timevÆ
 
°¨t_time
, 
íd_time
;

815 
	`±hªad_muãx_lock
(&
ms_globÆ
.
öô_lock
.
lock
);

816 
ms_globÆ
.
öô_lock
.
cou¡
 < 
ms_£âög
.
¡hªads
)

818 
	`±hªad_c⁄d_waô
(&
ms_globÆ
.
öô_lock
.
c⁄d
,

819 &
ms_globÆ
.
öô_lock
.
lock
);

821 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
öô_lock
.
lock
);

824 i‡(
ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
 < 
PROP_ERROR
)

827 
	`±hªad_muãx_lock
(&
ms_globÆ
.
w¨mup_lock
.
lock
);

828 
ms_globÆ
.
w¨mup_lock
.
cou¡
 < 
ms_£âög
.
nc⁄ns
)

830 
	`±hªad_c⁄d_waô
(&
ms_globÆ
.
w¨mup_lock
.
c⁄d
, &ms_globÆ.w¨mup_lock.
lock
);

832 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
w¨mup_lock
.
lock
);

834 
ms_globÆ
.
föish_w¨mup

åue
;

837 i‡(
ms_£âög
.
run_time
 > 0)

839 
£c⁄d
= 0;

840 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

843 
	`¶ìp
(1);

844 
£c⁄d
++;

846 i‡((
ms_£âög
.
°©_‰eq
 > 0Ë&& (
£c⁄d
 % ms_setting.stat_freq == 0)

847 && (
ms_°©s
.
a˘ive_c⁄ns
 >
ms_£âög
.
nc⁄ns
)

848 && (
ms_°©s
.
a˘ive_c⁄ns
 <
INT_MAX
))

850 
	`ms_¥öt_°©i°ics
(
£c⁄d
);

853 i‡(
ms_£âög
.
run_time
 <
£c⁄d
)

855 
ms_globÆ
.
time_out

åue
;

860 i‡((
£c⁄d
 > 5Ë&& (
ms_°©s
.
a˘ive_c⁄ns
 == 0))

865 
	`gëtimeofday
(&
íd_time
, 
NULL
);

866 
	`¶ìp
(1);

871 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

876 
	`±hªad_muãx_lock
(&
ms_globÆ
.
run_lock
.
lock
);

877 
ms_globÆ
.
run_lock
.
cou¡
 < 
ms_£âög
.
nc⁄ns
)

879 
	`±hªad_c⁄d_waô
(&
ms_globÆ
.
run_lock
.
c⁄d
, &ms_globÆ.run_lock.
lock
);

881 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
run_lock
.
lock
);

883 
	`gëtimeofday
(&
íd_time
, 
NULL
);

886 
	`ms_¥öt_mem¶≠_°©s
(&
°¨t_time
, &
íd_time
);

887 
	}
}

891 
	$maö
(
¨gc
, *
¨gv
[])

893 
	`§™dom
(()
	`time
(
NULL
));

894 
	`ms_globÆ_°ru˘_öô
();

897 
	`ms_£âög_öô_¥e
();

898 
	`ms_›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

899 i‡(
	`ms_check_∑ø
())

901 
	`ms_hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
);

902 
	`exô
(1);

904 
	`ms_£âög_öô_po°
();

905 
	`ms_°©s_öô
();

906 
	`ms_thªad_öô
();

909 
	`ms_m⁄ô‹_¶≠_mode
();

912 
	`ms_thªad_˛ónup
();

913 
	`ms_globÆ_°ru˘_de°roy
();

914 
	`ms_£âög_˛ónup
();

916  
EXIT_SUCCESS
;

917 
	}
}

	@clients/memcapable.cc

14 #unde‡
NDEBUG


16 
	~<mem_c⁄fig.h
>

18 #ifde‡
HAVE_POLL_H


19 
	~<pﬁl.h
>

21 
	~"pﬁl/pﬁl.h
"

24 
	~<ˇs£π
>

25 
	~<˚ºno
>

26 
	~<c°dio
>

27 
	~<c°dlib
>

28 
	~<c°rög
>

29 
	~<˘y≥.h
>

30 
	~<f˙é.h
>

31 
	~<öây≥s.h
>

32 
	~<±hªad.h
>

33 
	~<sig«l.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<uni°d.h
>

37 
	~<libmemˇched-1.0/memˇched.h
>

39 
	~"libmemˇched/sockë.hµ
"

40 
	~"libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
"

41 
	~"libmemˇched/byã‹dî.h
"

42 
	~"˛õ¡s/utûôõs.h
"

44 
	~<ve˘‹
>

46 #ifde‡
löux


52 #unde‡
¡ohs


53 #unde‡
¡ohl


57 
boﬁ
 
	gdo_c‹e

Ál£
;

59 
memˇched_sockë_t
 
	gsock
;

61 
boﬁ
 
	gvîbo£

Ál£
;

64 
	gtimeout
= 2;

77 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	m∂aö
;

78 
¥Ÿocﬁ_bö¨y_ªque°_Êush
 
	mÊush
;

79 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 
	mö¸
;

80 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
	m£t
;

81 
	mbyãs
[1024];

82 } 
	tcomm™d
;

86 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	m∂aö
;

87 
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
 
	mö¸
;

88 
¥Ÿocﬁ_bö¨y_ª•⁄£_de¸
 
	mde¸
;

89 
	mbyãs
[1024];

90 } 
	tª•⁄£
;

92 
	eã°_ªtu∫


94 
	mTEST_SKIP
, 
	mTEST_PASS
, 
	mTEST_PASS_RECONNECT
, 
	mTEST_FAIL


100 
addröfo
 *
	$lookupho°
(c⁄° *
ho°«me
, c⁄° *
p‹t
)

102 
addröfo
 *
ai
= 0;

103 
addröfo
 
höts
;

104 
	`mem£t
(&
höts
, 0, (
addröfo
));

105 
höts
.
ai_Ámûy
=
AF_UNSPEC
;

106 
höts
.
ai_¥Ÿocﬁ
=
IPPROTO_TCP
;

107 
höts
.
ai_sockty≥
=
SOCK_STREAM
;

109 
îr‹

	`gëaddröfo
(
ho°«me
, 
p‹t
, &
höts
, &
ai
);

110 i‡(
îr‹
 != 0)

112 i‡(
îr‹
 !
EAI_SYSTEM
)

113 
	`Ârötf
(
°dîr
, "gëaddröfo(): %s\n", 
	`gai_°ªº‹
(
îr‹
));

115 
	`≥º‹
("getaddrinfo()");

118  
ai
;

119 
	}
}

125 
memˇched_sockë_t
 
	$£t_noblock
()

127 #i‡
	`deföed
(
_WIN32
)

128 
u_l⁄g
 
¨g
 = 1;

129 i‡(
	`io˘lsockë
(
sock
, 
FIONBIO
, &
¨g
Ë=
SOCKET_ERROR
)

131 
	`≥º‹
("FailedÅo setÇonblocking io");

132 
	`˛o£sockë
(
sock
);

133  
INVALID_SOCKET
;

136 
Êags

	`f˙é
(
sock
, 
F_GETFL
, 0);

137 i‡(
Êags
 == -1)

139 
	`≥º‹
("FailedÅo get socket flags");

140 
	`memˇched_˛o£_sockë
(
sock
);

141  
INVALID_SOCKET
;

144 i‡((
Êags
 & 
O_NONBLOCK
) != O_NONBLOCK)

146 i‡(
	`f˙é
(
sock
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

148 
	`≥º‹
("FailedÅo set socketÅoÇonblocking mode");

149 
	`memˇched_˛o£_sockë
(
sock
);

150  
INVALID_SOCKET
;

154  
sock
;

155 
	}
}

163 
memˇched_sockë_t
 
	$c⁄√˘_£rvî
(c⁄° *
ho°«me
, c⁄° *
p‹t
)

165 
addröfo
 *
ai

	`lookupho°
(
ho°«me
, 
p‹t
);

166 
sock

INVALID_SOCKET
;

167 i‡(
ai
 !
NULL
)

169 i‡((
sock

	`sockë
(
ai
->
ai_Ámûy
,ái->
ai_sockty≥
,

170 
ai
->
ai_¥Ÿocﬁ
)Ë!
INVALID_SOCKET
)

172 i‡(
	`c⁄√˘
(
sock
, 
ai
->
ai_addr
,ái->
ai_addæí
Ë=
SOCKET_ERROR
)

174 
	`Ârötf
(
°dîr
, "FailedÅo connect socket: %s\n",

175 
	`°ªº‹
(
	`gë_sockë_î∫o
()));

176 
	`˛o£sockë
(
sock
);

177 
sock

INVALID_SOCKET
;

181 
sock

	`£t_noblock
();

185 
	`Ârötf
(
°dîr
, "FailedÅo create socket: %s\n",

186 
	`°ªº‹
(
	`gë_sockë_î∫o
()));

188 
	`‰ìaddröfo
(
ai
);

191  
sock
;

192 
	}
}

194 
ssize_t
 
	$timeout_io_›
(
memˇched_sockë_t
 
fd
, 
dúe˘i⁄
, *
buf
, 
size_t
 
Àn
)

196 
ssize_t
 
ªt
;

198 i‡(
dúe˘i⁄
 =
POLLOUT
)

200 
ªt

	`£nd
(
fd
, 
buf
, 
Àn
, 0);

204 
ªt

	`ªcv
(
fd
, 
buf
, 
Àn
, 0);

207 i‡(
ªt
 =
SOCKET_ERROR
 && 
	`gë_sockë_î∫o
(Ë=
EWOULDBLOCK
)

209 
pﬁlfd
 
fds
;

210 
	`mem£t
(&
fds
, 0, (
pﬁlfd
));

211 
fds
.
evíts

dúe˘i⁄
;

212 
fds
.
fd
= fd;

214 
îr

	`pﬁl
(&
fds
, 1, 
timeout
 * 1000);

215 i‡(
îr
 == 1)

217 i‡(
dúe˘i⁄
 =
POLLOUT
)

219 
ªt

	`£nd
(
fd
, 
buf
, 
Àn
, 0);

223 
ªt

	`ªcv
(
fd
, 
buf
, 
Àn
, 0);

226 i‡(
îr
 == 0)

228 
î∫o

ETIMEDOUT
;

232 
	`≥º‹
("FailedÅoÖoll");

237  
ªt
;

238 
	}
}

246 
ã°_ªtu∫
 
	$ísuª
(
boﬁ
 
vÆ
, c⁄° *
ex¥essi⁄
, c⁄° *
fûe
, 
löe
)

248 i‡(!
vÆ
)

250 i‡(
vîbo£
)

252 
	`Ârötf
(
°dîr
, "\n%s:%d: %s", 
fûe
, 
löe
, 
ex¥essi⁄
);

255 i‡(
do_c‹e
)

257 
	`ab‹t
();

260  
TEST_FAIL
;

263  
TEST_PASS
;

264 
	}
}

266 
	#vîify
(
ex¥essi⁄
Ëdÿ{ i‡(
	`ísuª
”x¥essi⁄, #ex¥essi⁄, 
__FILE__
, 
__LINE__
Ë=
TEST_FAIL
Ë TEST_FAIL; } 0)

	)

267 
	#execuã
(
ex¥essi⁄
Ëdÿ{ i‡(
	`ísuª
”x¥essi⁄ =
TEST_PASS
, #ex¥essi⁄, 
__FILE__
, 
__LINE__
Ë=
TEST_FAIL
Ë TEST_FAIL; } 0)

	)

272 
ã°_ªtu∫
 
	$ªåy_wrôe
(c⁄° * 
buf
, 
size_t
 
Àn
)

274 
size_t
 
off£t
= 0;

275 c⁄° * 
±r

°©ic_ˇ°
<c⁄° *>(
buf
);

279 
size_t
 
num_byãs

Àn
 - 
off£t
;

280 
ssize_t
 
nw

	`timeout_io_›
(
sock
, 
POLLOUT
, (*)(
±r
 + 
off£t
), 
num_byãs
);

281 i‡(
nw
 == -1)

283 
	`vîify
(
	`gë_sockë_î∫o
(Ë=
EINTR
 || gë_sockë_î∫o(Ë=
EAGAIN
);

287 
off£t
+(
size_t
)
nw
;

290 } 
off£t
 < 
Àn
);

292  
TEST_PASS
;

293 
	}
}

299 
ã°_ªtu∫
 
	$ª£nd_∑ckë
(
comm™d
 *
cmd
)

301 
size_t
 
Àngth
 (
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
) +

302 
	`¡ohl
(
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
);

304 
	`execuã
(
	`ªåy_wrôe
(
cmd
, 
Àngth
));

305  
TEST_PASS
;

306 
	}
}

312 
ã°_ªtu∫
 
	$£nd_∑ckë
(
comm™d
 *
cmd
)

315 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
keyÀn
=

316 
	`¡ohs
(
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
keyÀn
);

317 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
=

318 
	`¡ohl
(
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
);

319 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs
=

320 
	`memˇched_¡ohŒ
(
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs
);

322 
	`execuã
(
	`ª£nd_∑ckë
(
cmd
));

323  
TEST_PASS
;

324 
	}
}

329 
ã°_ªtu∫
 
	$ªåy_ªad
(*
buf
, 
size_t
 
Àn
)

331 
size_t
 
off£t
= 0;

334 
ssize_t
 
ƒ

	`timeout_io_›
(
sock
, 
POLLIN
, ((*Ë
buf
Ë+ 
off£t
, 
Àn
 - offset);

335 
ƒ
) {

337 
	`Ârötf
(
°dîr
, "Eºno: %d %s\n", 
	`gë_sockë_î∫o
(), 
	`°ªº‹
(
î∫o
));

338 
	`vîify
(
	`gë_sockë_î∫o
(Ë=
EINTR
 || gë_sockë_î∫o(Ë=
EAGAIN
);

342  
TEST_FAIL
;

345 
off£t
+(
size_t
)
ƒ
;

347 } 
off£t
 < 
Àn
);

349  
TEST_PASS
;

350 
	}
}

356 
ã°_ªtu∫
 
	$ªcv_∑ckë
(
ª•⁄£
 *
r•
)

358 
	`execuã
(
	`ªåy_ªad
(
r•
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
)));

361 
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
=

362 
	`¡ohs
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
);

363 
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
°©us
=

364 
	`¡ohs
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
°©us
);

365 
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
=

366 
	`¡ohl
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
);

367 
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
=

368 
	`memˇched_¡ohŒ
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
);

370 
size_t
 
bodysz

r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
;

371 i‡(
bodysz
 > 0)

372 
	`execuã
(
	`ªåy_ªad
(
r•
->
byãs
 +  (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
), 
bodysz
));

374  
TEST_PASS
;

375 
	}
}

389 
	$°‹age_comm™d
(
comm™d
 *
cmd
,

390 
uöt8_t
 
cc
,

391 c⁄° * 
key
,

392 
size_t
 
keyÀn
,

393 c⁄° * 
dè
,

394 
size_t
 
dèÀn
,

395 
uöt32_t
 
Êags
,

396 
uöt32_t
 
ex±ime
)

399 
¥Ÿocﬁ_bö¨y_ªque°_£t
 *
ªque°
&
cmd
->
£t
;

401 
	`mem£t
(
ªque°
, 0,  (*request));

402 
ªque°
->
mesßge
.
hódî
.ªque°.
magic

PROTOCOL_BINARY_REQ
;

403 
ªque°
->
mesßge
.
hódî
.ªque°.
›code

cc
;

404 
ªque°
->
mesßge
.
hódî
.ªque°.
keyÀn
(
uöt16_t
)keylen;

405 
ªque°
->
mesßge
.
hódî
.ªque°.
exéí
= 8;

406 
ªque°
->
mesßge
.
hódî
.ªque°.
bodyÀn
(
uöt32_t
)(
keyÀn
 + 8 + 
dèÀn
);

407 
ªque°
->
mesßge
.
hódî
.ªque°.
›aque
= 0xdeadbeef;

408 
ªque°
->
mesßge
.
body
.
Êags
= flags;

409 
ªque°
->
mesßge
.
body
.
expú©i⁄

ex±ime
;

411 
off_t
 
key_off£t
 (
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
) + 8;

412 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
, 
key
, 
keyÀn
);

413 i‡(
dè
 !
NULL
)

414 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
 + 
keyÀn
, 
dè
, 
dèÀn
);

415 
	}
}

426 
	$øw_comm™d
(
comm™d
 *
cmd
,

427 
uöt8_t
 
cc
,

428 c⁄° * 
key
,

429 
size_t
 
keyÀn
,

430 c⁄° * 
dè
,

431 
size_t
 
dèÀn
)

434 
	`mem£t
(
cmd
, 0,  (*cmd));

435 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
magic

PROTOCOL_BINARY_REQ
;

436 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
›code

cc
;

437 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
keyÀn
(
uöt16_t
)keylen;

438 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
(
uöt32_t
)(
keyÀn
 + 
dèÀn
);

439 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
›aque
= 0xdeadbeef;

441 
off_t
 
key_off£t
 (
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
);

443 i‡(
key
 !
NULL
)

444 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
, 
key
, 
keyÀn
);

446 i‡(
dè
 !
NULL
)

447 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
 + 
keyÀn
, 
dè
, 
dèÀn
);

448 
	}
}

457 
	$Êush_comm™d
(
comm™d
 *
cmd
,

458 
uöt8_t
 
cc
, 
uöt32_t
 
ex±ime
, 
boﬁ
 
u£_exåa
)

460 
	`mem£t
(
cmd
, 0,  (cmd->
Êush
));

461 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
magic

PROTOCOL_BINARY_REQ
;

462 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
›code

cc
;

463 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
›aque
= 0xdeadbeef;

465 i‡(
ex±ime
 !0 || 
u£_exåa
)

467 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
exéí
= 4;

468 
cmd
->
Êush
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
(
ex±ime
);

469 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
= 4;

471 
	}
}

482 
	$¨ôhmëic_comm™d
(
comm™d
 *
cmd
,

483 
uöt8_t
 
cc
,

484 c⁄° * 
key
,

485 
size_t
 
keyÀn
,

486 
uöt64_t
 
dñè
,

487 
uöt64_t
 
öôül
,

488 
uöt32_t
 
ex±ime
)

490 
	`mem£t
(
cmd
, 0,  (cmd->
ö¸
));

491 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
magic

PROTOCOL_BINARY_REQ
;

492 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
›code

cc
;

493 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
keyÀn
(
uöt16_t
)keylen;

494 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
exéí
= 20;

495 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
(
uöt32_t
)(
keyÀn
 + 20);

496 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
›aque
= 0xdeadbeef;

497 
cmd
->
ö¸
.
mesßge
.
body
.
dñè

	`memˇched_ht⁄Œ
(delta);

498 
cmd
->
ö¸
.
mesßge
.
body
.
öôül

	`memˇched_ht⁄Œ
(initial);

499 
cmd
->
ö¸
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
(
ex±ime
);

501 
off_t
 
key_off£t
 (
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
) + 20;

502 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
, 
key
, 
keyÀn
);

503 
	}
}

511 
ã°_ªtu∫
 
	$do_vÆid©e_ª•⁄£_hódî
(
ª•⁄£
 *
r•
,

512 
uöt8_t
 
cc
, 
uöt16_t
 
°©us
)

514 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
magic
 =
PROTOCOL_BINARY_RES
);

515 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
›code
 =
cc
);

516 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
d©©y≥
 =
PROTOCOL_BINARY_RAW_BYTES
);

517 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
°©us
 == status);

518 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
›aque
 == 0xdeadbeef);

520 i‡(
°©us
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

522 
cc
) {

523 
PROTOCOL_BINARY_CMD_ADDQ
:

524 
PROTOCOL_BINARY_CMD_APPENDQ
:

525 
PROTOCOL_BINARY_CMD_DECREMENTQ
:

526 
PROTOCOL_BINARY_CMD_DELETEQ
:

527 
PROTOCOL_BINARY_CMD_FLUSHQ
:

528 
PROTOCOL_BINARY_CMD_INCREMENTQ
:

529 
PROTOCOL_BINARY_CMD_PREPENDQ
:

530 
PROTOCOL_BINARY_CMD_QUITQ
:

531 
PROTOCOL_BINARY_CMD_REPLACEQ
:

532 
PROTOCOL_BINARY_CMD_SETQ
:

533 
	`vîify
("Quõàcomm™d shouldn'àªtu∫ o¿suc˚ss" =
NULL
);

538 
cc
) {

539 
PROTOCOL_BINARY_CMD_ADD
:

540 
PROTOCOL_BINARY_CMD_REPLACE
:

541 
PROTOCOL_BINARY_CMD_SET
:

542 
PROTOCOL_BINARY_CMD_APPEND
:

543 
PROTOCOL_BINARY_CMD_PREPEND
:

544 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

545 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

546 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 == 0);

547 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 != 0);

549 
PROTOCOL_BINARY_CMD_FLUSH
:

550 
PROTOCOL_BINARY_CMD_NOOP
:

551 
PROTOCOL_BINARY_CMD_QUIT
:

552 
PROTOCOL_BINARY_CMD_DELETE
:

553 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

554 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

555 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 == 0);

556 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 == 0);

559 
PROTOCOL_BINARY_CMD_DECREMENT
:

560 
PROTOCOL_BINARY_CMD_INCREMENT
:

561 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

562 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

563 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 == 8);

564 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 != 0);

567 
PROTOCOL_BINARY_CMD_STAT
:

568 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

570 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 == 0);

573 
PROTOCOL_BINARY_CMD_VERSION
:

574 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

575 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

576 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 != 0);

577 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 == 0);

580 
PROTOCOL_BINARY_CMD_GET
:

581 
PROTOCOL_BINARY_CMD_GETQ
:

582 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

583 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 4);

584 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 != 0);

587 
PROTOCOL_BINARY_CMD_GETK
:

588 
PROTOCOL_BINARY_CMD_GETKQ
:

589 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 != 0);

590 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 4);

591 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 != 0);

601 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 == 0);

602 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

603 i‡(
cc
 !
PROTOCOL_BINARY_CMD_GETK
)

605 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

609  
TEST_PASS
;

610 
	}
}

617 
	#vÆid©e_ª•⁄£_hódî
(
a
,
b
,
c
) \

618 
	`do_vÆid©e_ª•⁄£_hódî
(
a
,
b
,
c
Ë=
TEST_PASS


	)

621 
ã°_ªtu∫
 
	$£nd_bö¨y_no›
()

623 
comm™d
 
cmd
;

624 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_NOOP
, 
NULL
, 0, NULL, 0);

625 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

626  
TEST_PASS
;

627 
	}
}

629 
ã°_ªtu∫
 
	$ª˚ive_bö¨y_no›
()

631 
ª•⁄£
 
r•
;

632 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

633 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_NOOP
,

634 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

635  
TEST_PASS
;

636 
	}
}

638 
ã°_ªtu∫
 
	$ã°_bö¨y_no›
()

640 
	`execuã
(
	`£nd_bö¨y_no›
());

641 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

642  
TEST_PASS
;

643 
	}
}

645 
ã°_ªtu∫
 
	$ã°_bö¨y_quô_im∂
(
uöt8_t
 
cc
)

647 
comm™d
 
cmd
;

648 
ª•⁄£
 
r•
;

649 
	`øw_comm™d
(&
cmd
, 
cc
, 
NULL
, 0, NULL, 0);

651 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

652 i‡(
cc
 =
PROTOCOL_BINARY_CMD_QUIT
)

654 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

655 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_QUIT
,

656 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

660 
	`vîify
(
	`timeout_io_›
(
sock
, 
POLLIN
, 
r•
.
byãs
, (rsp.bytes)) == 0);

662  
TEST_PASS_RECONNECT
;

663 
	}
}

665 
ã°_ªtu∫
 
	$ã°_bö¨y_quô
()

667  
	`ã°_bö¨y_quô_im∂
(
PROTOCOL_BINARY_CMD_QUIT
);

668 
	}
}

670 
ã°_ªtu∫
 
	$ã°_bö¨y_quôq
()

672  
	`ã°_bö¨y_quô_im∂
(
PROTOCOL_BINARY_CMD_QUITQ
);

673 
	}
}

675 
ã°_ªtu∫
 
	$ã°_bö¨y_£t_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

677 
comm™d
 
cmd
;

678 
ª•⁄£
 
r•
;

680 
uöt64_t
 
vÆue
= 0xdeadbeefdeadcafeULL;

681 
	`°‹age_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), &
vÆue
,  (value), 0, 0);

684 
ii
= 0; ii < 10; ii++)

686 i‡(
ii
 == 0)

688 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

692 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

695 i‡(
cc
 =
PROTOCOL_BINARY_CMD_SET
)

697 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

698 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

701 
	`execuã
(
	`ã°_bö¨y_no›
());

708 i‡(
cc
 =
PROTOCOL_BINARY_CMD_SETQ
)

710 
cmd
.
£t
.
mesßge
.
hódî
.
ªque°
.
›code

PROTOCOL_BINARY_CMD_SET
;

711 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

712 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

713 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_SET
,

714 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

715 
cmd
.
£t
.
mesßge
.
hódî
.
ªque°
.
›code

PROTOCOL_BINARY_CMD_SETQ
;

719 
cmd
.
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs

	`memˇched_ht⁄Œ
(
r•
.∂aö.mesßge.hódî.
ª•⁄£
.cas);

720 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

721 i‡(
cc
 =
PROTOCOL_BINARY_CMD_SET
)

723 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

724 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

727 
	`execuã
(
	`ã°_bö¨y_no›
());

730 
cmd
.
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs

	`memˇched_ht⁄Œ
(
r•
.∂aö.mesßge.hódî.
ª•⁄£
.cas - 1);

731 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

732 
	`execuã
(
	`£nd_bö¨y_no›
());

733 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

734 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
));

735 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

737  
TEST_PASS
;

738 
	}
}

740 
ã°_ªtu∫
 
	$ã°_bö¨y_£t
()

742  
	`ã°_bö¨y_£t_im∂
("ã°_bö¨y_£t", 
PROTOCOL_BINARY_CMD_SET
);

743 
	}
}

745 
ã°_ªtu∫
 
	$ã°_bö¨y_£tq
()

747  
	`ã°_bö¨y_£t_im∂
("ã°_bö¨y_£tq", 
PROTOCOL_BINARY_CMD_SETQ
);

748 
	}
}

750 
ã°_ªtu∫
 
	$ã°_bö¨y_add_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

752 
comm™d
 
cmd
;

753 
ª•⁄£
 
r•
;

754 
uöt64_t
 
vÆue
= 0xdeadbeefdeadcafeULL;

755 
	`°‹age_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), &
vÆue
,  (value), 0, 0);

759 
ii
=0; ii < 10; ii++)

761 i‡(
ii
 == 0)

762 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

764 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

766 i‡(
cc
 =
PROTOCOL_BINARY_CMD_ADD
 || 
ii
 > 0)

768 
uöt16_t
 
ex≥˘ed_ªsu…
;

769 i‡(
ii
 == 0)

770 
ex≥˘ed_ªsu…

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

772 
ex≥˘ed_ªsu…

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

774 
	`execuã
(
	`£nd_bö¨y_no›
());

775 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

776 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

777 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
ex≥˘ed_ªsu…
));

780 
	`execuã
(
	`ã°_bö¨y_no›
());

783  
TEST_PASS
;

784 
	}
}

786 
ã°_ªtu∫
 
	$ã°_bö¨y_add
()

788  
	`ã°_bö¨y_add_im∂
("ã°_bö¨y_add", 
PROTOCOL_BINARY_CMD_ADD
);

789 
	}
}

791 
ã°_ªtu∫
 
	$ã°_bö¨y_addq
()

793  
	`ã°_bö¨y_add_im∂
("ã°_bö¨y_addq", 
PROTOCOL_BINARY_CMD_ADDQ
);

794 
	}
}

796 
ã°_ªtu∫
 
	$bö¨y_£t_ôem
(c⁄° *
key
, c⁄° *
vÆue
)

798 
comm™d
 
cmd
;

799 
ª•⁄£
 
r•
;

800 
	`°‹age_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_SET
, 
key
, 
	`°æí
(key),

801 
vÆue
, 
	`°æí
(value), 0, 0);

802 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

803 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

804 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_SET
,

805 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

806  
TEST_PASS
;

807 
	}
}

809 
ã°_ªtu∫
 
	$ã°_bö¨y_ª∂a˚_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

811 
comm™d
 
cmd
;

812 
ª•⁄£
 
r•
;

813 
uöt64_t
 
vÆue
= 0xdeadbeefdeadcafeULL;

814 
	`°‹age_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), &
vÆue
,  (value), 0, 0);

818 
ii
= 0; ii < 10; ii++)

820 i‡(
ii
 == 0)

822 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

826 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

829 i‡(
cc
 =
PROTOCOL_BINARY_CMD_REPLACE
 || 
ii
 == 0)

831 
uöt16_t
 
ex≥˘ed_ªsu…
;

832 i‡(
ii
 == 0)

834 
ex≥˘ed_ªsu…
=
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

838 
ex≥˘ed_ªsu…
=
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

841 
	`execuã
(
	`£nd_bö¨y_no›
());

842 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

843 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

844 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
ex≥˘ed_ªsu…
));

846 i‡(
ii
 == 0)

847 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, key));

851 
	`execuã
(
	`ã°_bö¨y_no›
());

856 
cmd
.
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs

	`memˇched_ht⁄Œ
(
r•
.∂aö.mesßge.hódî.
ª•⁄£
.cas);

857 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

859 i‡(
cc
 =
PROTOCOL_BINARY_CMD_REPLACE
)

861 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

862 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

865 
	`execuã
(
	`ã°_bö¨y_no›
());

868 
cmd
.
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs

	`memˇched_ht⁄Œ
(
r•
.∂aö.mesßge.hódî.
ª•⁄£
.cas - 1);

869 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

870 
	`execuã
(
	`£nd_bö¨y_no›
());

871 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

872 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

873 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
));

875  
TEST_PASS
;

876 
	}
}

878 
ã°_ªtu∫
 
	$ã°_bö¨y_ª∂a˚
()

880  
	`ã°_bö¨y_ª∂a˚_im∂
("ã°_bö¨y_ª∂a˚", 
PROTOCOL_BINARY_CMD_REPLACE
);

881 
	}
}

883 
ã°_ªtu∫
 
	$ã°_bö¨y_ª∂a˚q
()

885  
	`ã°_bö¨y_ª∂a˚_im∂
("ã°_bö¨y_ª∂a˚q", 
PROTOCOL_BINARY_CMD_REPLACEQ
);

886 
	}
}

888 
ã°_ªtu∫
 
	$ã°_bö¨y_dñëe_im∂
(c⁄° *
key
, 
uöt8_t
 
cc
)

890 
comm™d
 
cmd
;

891 
ª•⁄£
 
r•
;

892 
	`øw_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 
NULL
, 0);

895 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

896 
	`execuã
(
	`£nd_bö¨y_no›
());

897 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

898 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
));

899 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

900 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, key));

903 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

904 i‡(
cc
 =
PROTOCOL_BINARY_CMD_DELETE
)

906 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

907 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

910 
	`execuã
(
	`ã°_bö¨y_no›
());

912  
TEST_PASS
;

913 
	}
}

915 
ã°_ªtu∫
 
	$ã°_bö¨y_dñëe
()

917  
	`ã°_bö¨y_dñëe_im∂
("ã°_bö¨y_dñëe", 
PROTOCOL_BINARY_CMD_DELETE
);

918 
	}
}

920 
ã°_ªtu∫
 
	$ã°_bö¨y_dñëeq
()

922  
	`ã°_bö¨y_dñëe_im∂
("ã°_bö¨y_dñëeq", 
PROTOCOL_BINARY_CMD_DELETEQ
);

923 
	}
}

925 
ã°_ªtu∫
 
	$ã°_bö¨y_gë_im∂
(c⁄° *
key
, 
uöt8_t
 
cc
)

927 
comm™d
 
cmd
;

928 
ª•⁄£
 
r•
;

930 
	`øw_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 
NULL
, 0);

931 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

932 
	`execuã
(
	`£nd_bö¨y_no›
());

934 i‡(
cc
 =
PROTOCOL_BINARY_CMD_GET
 || c¯=
PROTOCOL_BINARY_CMD_GETK
)

936 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

937 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
));

940 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

942 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, key));

943 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

944 
	`execuã
(
	`£nd_bö¨y_no›
());

946 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

947 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

948 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

950  
TEST_PASS
;

951 
	}
}

953 
ã°_ªtu∫
 
	$ã°_bö¨y_gë
()

955  
	`ã°_bö¨y_gë_im∂
("ã°_bö¨y_gë", 
PROTOCOL_BINARY_CMD_GET
);

956 
	}
}

958 
ã°_ªtu∫
 
	$ã°_bö¨y_gëk
()

960  
	`ã°_bö¨y_gë_im∂
("ã°_bö¨y_gëk", 
PROTOCOL_BINARY_CMD_GETK
);

961 
	}
}

963 
ã°_ªtu∫
 
	$ã°_bö¨y_gëq
()

965  
	`ã°_bö¨y_gë_im∂
("ã°_bö¨y_gëq", 
PROTOCOL_BINARY_CMD_GETQ
);

966 
	}
}

968 
ã°_ªtu∫
 
	$ã°_bö¨y_gëkq
()

970  
	`ã°_bö¨y_gë_im∂
("ã°_bö¨y_gëkq", 
PROTOCOL_BINARY_CMD_GETKQ
);

971 
	}
}

973 
ã°_ªtu∫
 
	$ã°_bö¨y_ö¸_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

975 
comm™d
 
cmd
;

976 
ª•⁄£
 
r•
;

977 
	`¨ôhmëic_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 1, 0, 0);

979 
uöt64_t
 
ii
;

980 
ii
= 0; ii < 10; ++ii)

982 i‡(
ii
 == 0)

983 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

985 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

987 i‡(
cc
 =
PROTOCOL_BINARY_CMD_INCREMENT
)

989 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

990 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

991 
	`vîify
(
	`memˇched_¡ohŒ
(
r•
.
ö¸
.
mesßge
.
body
.
vÆue
Ë=
ii
);

994 
	`execuã
(
	`ã°_bö¨y_no›
());

998  
TEST_PASS
;

999 
	}
}

1001 
ã°_ªtu∫
 
	$ã°_bö¨y_ö¸
()

1003  
	`ã°_bö¨y_ö¸_im∂
("ã°_bö¨y_ö¸", 
PROTOCOL_BINARY_CMD_INCREMENT
);

1004 
	}
}

1006 
ã°_ªtu∫
 
	$ã°_bö¨y_ö¸q
()

1008  
	`ã°_bö¨y_ö¸_im∂
("ã°_bö¨y_ö¸q", 
PROTOCOL_BINARY_CMD_INCREMENTQ
);

1009 
	}
}

1011 
ã°_ªtu∫
 
	$ã°_bö¨y_de¸_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

1013 
comm™d
 
cmd
;

1014 
ª•⁄£
 
r•
;

1015 
	`¨ôhmëic_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 1, 9, 0);

1017 
ii
;

1018 
ii
= 9; ii > -1; --ii)

1020 i‡(
ii
 == 9)

1021 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1023 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

1025 i‡(
cc
 =
PROTOCOL_BINARY_CMD_DECREMENT
)

1027 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1028 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1029 
	`vîify
(
	`memˇched_¡ohŒ
(
r•
.
de¸
.
mesßge
.
body
.
vÆue
Ë=(
uöt64_t
)
ii
);

1032 
	`execuã
(
	`ã°_bö¨y_no›
());

1036 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

1037 i‡(
cc
 =
PROTOCOL_BINARY_CMD_DECREMENT
)

1039 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1040 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1041 
	`vîify
(
	`memˇched_¡ohŒ
(
r•
.
de¸
.
mesßge
.
body
.
vÆue
) == 0);

1050 
	`execuã
(
	`ã°_bö¨y_no›
());

1051  
TEST_PASS
;

1052 
	}
}

1054 
ã°_ªtu∫
 
	$ã°_bö¨y_de¸
()

1056  
	`ã°_bö¨y_de¸_im∂
("test_binary_decr",

1057 
PROTOCOL_BINARY_CMD_DECREMENT
);

1058 
	}
}

1060 
ã°_ªtu∫
 
	$ã°_bö¨y_de¸q
()

1062  
	`ã°_bö¨y_de¸_im∂
("test_binary_decrq",

1063 
PROTOCOL_BINARY_CMD_DECREMENTQ
);

1064 
	}
}

1066 
ã°_ªtu∫
 
	$ã°_bö¨y_vîsi⁄
()

1068 
comm™d
 
cmd
;

1069 
ª•⁄£
 
r•
;

1070 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_VERSION
, 
NULL
, 0, NULL, 0);

1072 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1073 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1074 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_VERSION
,

1075 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1077  
TEST_PASS
;

1078 
	}
}

1080 
ã°_ªtu∫
 
	$ã°_bö¨y_Êush_im∂
(c⁄° *
key
, 
uöt8_t
 
cc
)

1082 
comm™d
 
cmd
;

1083 
ª•⁄£
 
r•
;

1085 
ii
= 0; ii < 2; ++ii)

1087 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, key));

1088 
	`Êush_comm™d
(&
cmd
, 
cc
, 0, 
ii
 == 0);

1089 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1091 i‡(
cc
 =
PROTOCOL_BINARY_CMD_FLUSH
)

1093 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1094 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1097 
	`execuã
(
	`ã°_bö¨y_no›
());

1099 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_GET
, 
key
, 
	`°æí
(key), 
NULL
, 0);

1100 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1101 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1102 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_GET
,

1103 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
));

1106  
TEST_PASS
;

1107 
	}
}

1109 
ã°_ªtu∫
 
	$ã°_bö¨y_Êush
()

1111  
	`ã°_bö¨y_Êush_im∂
("ã°_bö¨y_Êush", 
PROTOCOL_BINARY_CMD_FLUSH
);

1112 
	}
}

1114 
ã°_ªtu∫
 
	$ã°_bö¨y_Êushq
()

1116  
	`ã°_bö¨y_Êush_im∂
("ã°_bö¨y_Êushq", 
PROTOCOL_BINARY_CMD_FLUSHQ
);

1117 
	}
}

1119 
ã°_ªtu∫
 
	$ã°_bö¨y_c⁄ˇt_im∂
(c⁄° *
key
, 
uöt8_t
 
cc
)

1121 
comm™d
 
cmd
;

1122 
ª•⁄£
 
r•
;

1123 c⁄° *
vÆue
;

1125 i‡(
cc
 =
PROTOCOL_BINARY_CMD_APPEND
 || c¯=
PROTOCOL_BINARY_CMD_APPENDQ
)

1127 
vÆue
="hello";

1131 
vÆue
=" world";

1134 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, 
vÆue
));

1136 i‡(
cc
 =
PROTOCOL_BINARY_CMD_APPEND
 || c¯=
PROTOCOL_BINARY_CMD_APPENDQ
)

1138 
vÆue
=" world";

1142 
vÆue
="hello";

1145 
	`øw_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 
vÆue
, strlen(value));

1146 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1147 i‡(
cc
 =
PROTOCOL_BINARY_CMD_APPEND
 || c¯=
PROTOCOL_BINARY_CMD_PREPEND
)

1149 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1150 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1154 
	`execuã
(
	`ã°_bö¨y_no›
());

1157 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_GET
, 
key
, 
	`°æí
(key), 
NULL
, 0);

1158 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1159 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1160 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_GET
,

1161 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1162 
	`vîify
(
r•
.
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 - 4 == 11);

1163 
	`vîify
(
	`memcmp
(
r•
.
byãs
 + 28, "hello world", 11) == 0);

1165  
TEST_PASS
;

1166 
	}
}

1168 
ã°_ªtu∫
 
	$ã°_bö¨y_≠≥nd
()

1170  
	`ã°_bö¨y_c⁄ˇt_im∂
("ã°_bö¨y_≠≥nd", 
PROTOCOL_BINARY_CMD_APPEND
);

1171 
	}
}

1173 
ã°_ªtu∫
 
	$ã°_bö¨y_¥ïíd
()

1175  
	`ã°_bö¨y_c⁄ˇt_im∂
("ã°_bö¨y_¥ïíd", 
PROTOCOL_BINARY_CMD_PREPEND
);

1176 
	}
}

1178 
ã°_ªtu∫
 
	$ã°_bö¨y_≠≥ndq
()

1180  
	`ã°_bö¨y_c⁄ˇt_im∂
("ã°_bö¨y_≠≥ndq", 
PROTOCOL_BINARY_CMD_APPENDQ
);

1181 
	}
}

1183 
ã°_ªtu∫
 
	$ã°_bö¨y_¥ïídq
()

1185  
	`ã°_bö¨y_c⁄ˇt_im∂
("ã°_bö¨y_¥ïídq", 
PROTOCOL_BINARY_CMD_PREPENDQ
);

1186 
	}
}

1188 
ã°_ªtu∫
 
	$ã°_bö¨y_°©
()

1190 
comm™d
 
cmd
;

1191 
ª•⁄£
 
r•
;

1193 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_STAT
, 
NULL
, 0, NULL, 0);

1194 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1198 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1199 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_STAT
,

1200 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1201 } 
r•
.
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 != 0);

1203  
TEST_PASS
;

1204 
	}
}

1206 
ã°_ªtu∫
 
	$£nd_°rög
(c⁄° *
cmd
)

1208 
	`execuã
(
	`ªåy_wrôe
(
cmd
, 
	`°æí
(cmd)));

1209  
TEST_PASS
;

1210 
	}
}

1212 
ã°_ªtu∫
 
	$ª˚ive_löe
(*
buf„r
, 
size_t
 
size
)

1214 
size_t
 
off£t
= 0;

1215 
off£t
 < 
size
)

1217 
	`execuã
(
	`ªåy_ªad
(
buf„r
 + 
off£t
, 1));

1218 i‡(
buf„r
[
off£t
] == '\n')

1220 i‡(
off£t
 + 1 < 
size
)

1222 
buf„r
[
off£t
 + 1]= '\0';

1223  
TEST_PASS
;

1226  
TEST_FAIL
;

1228 ++
off£t
;

1231  
TEST_FAIL
;

1232 
	}
}

1234 
ã°_ªtu∫
 
	$ª˚ive_ª•⁄£
(c⁄° *
msg
) {

1235 
buf„r
[80];

1236 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1237 i‡(
	`°rcmp
(
msg
, 
buf„r
) != 0) {

1238 
	`Ârötf
(
°dîr
, "[%s]\n", 
buf„r
);

1240 
	`vîify
(
	`°rcmp
(
msg
, 
buf„r
) == 0);

1241  
TEST_PASS
;

1242 
	}
}

1244 
ã°_ªtu∫
 
	$ª˚ive_îr‹_ª•⁄£
()

1246 
buf„r
[80];

1247 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1248 
	`vîify
(
	`°∫cmp
(
buf„r
, "ERROR", 5) == 0 ||

1249 
	`°∫cmp
(
buf„r
, "CLIENT_ERROR", 12) == 0 ||

1250 
	`°∫cmp
(
buf„r
, "SERVER_ERROR", 12) == 0);

1251  
TEST_PASS
;

1252 
	}
}

1254 
ã°_ªtu∫
 
	$ã°_ascii_quô
()

1257 
	`execuã
(
	`£nd_°rög
("quit foo bar\r\n"));

1258 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1261 
	`execuã
(
	`£nd_°rög
("quitÇoreply\r\n"));

1262 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1265 
	`execuã
(
	`£nd_°rög
("quit\r\n"));

1268 
buf„r
[80];

1269 
	`vîify
(
	`timeout_io_›
(
sock
, 
POLLIN
, 
buf„r
, (buffer)) == 0);

1270  
TEST_PASS_RECONNECT
;

1272 
	}
}

1274 
ã°_ªtu∫
 
	$ã°_ascii_vîsi⁄
()

1277 
	`execuã
(
	`£nd_°rög
("version foo bar\r\n"));

1278 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1281 
	`execuã
(
	`£nd_°rög
("versionÇoreply\r\n"));

1282 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1285 
	`execuã
(
	`£nd_°rög
("version\r\n"));

1286 
buf„r
[256];

1287 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1288 
	`vîify
(
	`°∫cmp
(
buf„r
, "VERSION ", 8) == 0);

1290  
TEST_PASS
;

1291 
	}
}

1293 
ã°_ªtu∫
 
	$ã°_ascii_vîbosôy
()

1296 
	`execuã
(
	`£nd_°rög
("verbosity foo bar my\r\n"));

1297 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1299 
	`execuã
(
	`£nd_°rög
("verbosityÇoreply\r\n"));

1300 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1302 
	`execuã
(
	`£nd_°rög
("verbosity 0Çoreply\r\n"));

1303 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1305 
	`execuã
(
	`£nd_°rög
("verbosity\r\n"));

1306 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1308 
	`execuã
(
	`£nd_°rög
("verbosity 1\r\n"));

1309 
	`execuã
(
	`ª˚ive_ª•⁄£
("OK\r\n"));

1311 
	`execuã
(
	`£nd_°rög
("verbosity 0\r\n"));

1312 
	`execuã
(
	`ª˚ive_ª•⁄£
("OK\r\n"));

1314  
TEST_PASS
;

1315 
	}
}

1319 
ã°_ªtu∫
 
	$ã°_ascii_£t_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1322 
buf„r
[1024];

1323 
	`¢¥ötf
(
buf„r
, (buf„r), "£à%†0 0 5%s\r\nvÆue\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1324 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1326 i‡(!
n‹ïly
)

1328 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1331  
	`ã°_ascii_vîsi⁄
();

1332 
	}
}

1334 
ã°_ªtu∫
 
	$ã°_ascii_£t
()

1336  
	`ã°_ascii_£t_im∂
("ã°_ascii_£t", 
Ál£
);

1337 
	}
}

1339 
ã°_ªtu∫
 
	$ã°_ascii_£t_n‹ïly
()

1341  
	`ã°_ascii_£t_im∂
("ã°_ascii_£t_n‹ïly", 
åue
);

1342 
	}
}

1344 
ã°_ªtu∫
 
	$ã°_ascii_add_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1347 
buf„r
[1024];

1348 
	`¢¥ötf
(
buf„r
, (buf„r), "add %†0 0 5%s\r\nvÆue\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1349 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1351 i‡(!
n‹ïly
)

1353 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1356 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1358 i‡(!
n‹ïly
)

1360 
	`execuã
(
	`ª˚ive_ª•⁄£
("NOT_STORED\r\n"));

1363  
	`ã°_ascii_vîsi⁄
();

1364 
	}
}

1366 
ã°_ªtu∫
 
	$ã°_ascii_add
()

1368  
	`ã°_ascii_add_im∂
("ã°_ascii_add", 
Ál£
);

1369 
	}
}

1371 
ã°_ªtu∫
 
	$ã°_ascii_add_n‹ïly
()

1373  
	`ã°_ascii_add_im∂
("ã°_ascii_add_n‹ïly", 
åue
);

1374 
	}
}

1376 
ã°_ªtu∫
 
	$ascii_gë_unknown_vÆue
(**
key
, **
vÆue
, 
ssize_t
 *
nd©a
)

1378 
buf„r
[1024];

1380 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1381 
	`vîify
(
	`°∫cmp
(
buf„r
, "VALUE ", 6) == 0);

1382 *
íd

	`°rchr
(
buf„r
 + 6, ' ');

1383 
	`vîify
(
íd
 !
NULL
);

1384 i‡(
íd
)

1386 *
íd
= '\0';

1388 *
key

	`°rdup
(
buf„r
 + 6);

1389 
	`vîify
(*
key
 !
NULL
);

1390 *
±r

íd
 + 1;

1392 
î∫o
= 0;

1393 
vÆ

	`°πoul
(
±r
, &
íd
, 10);

1394 
	`vîify
(
î∫o
 == 0);

1395 
	`vîify
(
±r
 !
íd
);

1396 
	`vîify
(
vÆ
 == 0);

1397 
	`vîify
(
íd
 !
NULL
);

1398 
î∫o
= 0;

1399 *
nd©a
 = (
ssize_t
)
	`°πoul
(
íd
, &end, 10);

1400 
	`vîify
(
î∫o
 == 0);

1401 
	`vîify
(
±r
 !
íd
);

1402 
	`vîify
(
íd
 !
NULL
);

1403 
íd
 
™d
 *íd !'\n'ánd 
	`is•a˚
(*end))

1404 ++
íd
;

1405 
	`vîify
(
íd
 
™d
 *end == '\n');

1407 *
vÆue

°©ic_ˇ°
<*>(
	`mÆloc
((
size_t
)*
nd©a
));

1408 
	`vîify
(*
vÆue
 !
NULL
);

1410 
	`execuã
(
	`ªåy_ªad
(*
vÆue
, (
size_t
)*
nd©a
));

1412 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 2));

1413 
	`vîify
(
	`memcmp
(
buf„r
, "\r\n", 2) == 0);

1415  
TEST_PASS
;

1416 
	}
}

1418 
ã°_ªtu∫
 
	$ascii_gë_vÆue
(c⁄° *
key
, c⁄° *
vÆue
)

1421 
buf„r
[1024];

1422 
size_t
 
d©asize

	`°æí
(
vÆue
);

1424 
	`vîify
(
d©asize
 < (
buf„r
));

1425 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1426 
	`vîify
(
	`°∫cmp
(
buf„r
, "VALUE ", 6) == 0);

1427 
	`vîify
(
	`°∫cmp
(
buf„r
 + 6, 
key
, 
	`°æí
(key)) == 0);

1428 *
±r

buf„r
 + 6 + 
	`°æí
(
key
) + 1;

1429 *
íd
;

1431 
î∫o
= 0;

1432 
vÆ

	`°πoul
(
±r
, &
íd
, 10);

1433 
	`vîify
(
î∫o
 == 0);

1434 
	`vîify
(
±r
 !
íd
);

1435 
	`vîify
(
vÆ
 == 0);

1436 
	`vîify
(
íd
 !
NULL
);

1438 
î∫o
= 0;

1439 
vÆ

	`°πoul
(
íd
, &end, 10);

1440 
	`vîify
(
î∫o
 == 0);

1441 
	`vîify
(
±r
 !
íd
);

1442 
	`vîify
(
vÆ
 =
d©asize
);

1443 
	`vîify
(
íd
 !
NULL
);

1444 
íd
 
™d
 *íd !'\n'ánd 
	`is•a˚
(*end))

1446 ++
íd
;

1448 
	`vîify
(
íd
 
™d
 *end == '\n');

1450 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 
d©asize
));

1451 
	`vîify
(
	`memcmp
(
buf„r
, 
vÆue
, 
d©asize
) == 0);

1453 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 2));

1454 
	`vîify
(
	`memcmp
(
buf„r
, "\r\n", 2) == 0);

1456  
TEST_PASS
;

1457 
	}
}

1459 
ã°_ªtu∫
 
	$ascii_gë_ôem
(c⁄° *
key
, c⁄° *
vÆue
,

1460 
boﬁ
 
exi°
)

1462 
buf„r
[1024];

1463 
size_t
 
d©asize
= 0;

1464 i‡(
vÆue
 !
NULL
)

1466 
d©asize

	`°æí
(
vÆue
);

1469 
	`vîify
(
d©asize
 < (
buf„r
));

1470 
	`¢¥ötf
(
buf„r
, (buf„r), "gë %s\r\n", 
key
);

1471 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1473 i‡(
exi°
)

1475 
	`execuã
(
	`ascii_gë_vÆue
(
key
, 
vÆue
));

1478 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 5));

1479 
	`vîify
(
	`memcmp
(
buf„r
, "END\r\n", 5) == 0);

1481  
TEST_PASS
;

1482 
	}
}

1484 
ã°_ªtu∫
 
	$ascii_gës_vÆue
(c⁄° *
key
, c⁄° *
vÆue
,

1485 *
ˇs
)

1488 
buf„r
[1024];

1489 
size_t
 
d©asize

	`°æí
(
vÆue
);

1491 
	`vîify
(
d©asize
 < (
buf„r
));

1492 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1493 
	`vîify
(
	`°∫cmp
(
buf„r
, "VALUE ", 6) == 0);

1494 
	`vîify
(
	`°∫cmp
(
buf„r
 + 6, 
key
, 
	`°æí
(key)) == 0);

1495 *
±r

buf„r
 + 6 + 
	`°æí
(
key
) + 1;

1496 *
íd
;

1498 
î∫o
= 0;

1499 
vÆ

	`°πoul
(
±r
, &
íd
, 10);

1500 
	`vîify
(
î∫o
 == 0);

1501 
	`vîify
(
±r
 !
íd
);

1502 
	`vîify
(
vÆ
 == 0);

1503 
	`vîify
(
íd
 !
NULL
);

1505 
î∫o
= 0;

1506 
vÆ

	`°πoul
(
íd
, &end, 10);

1507 
	`vîify
(
î∫o
 == 0);

1508 
	`vîify
(
±r
 !
íd
);

1509 
	`vîify
(
vÆ
 =
d©asize
);

1510 
	`vîify
(
íd
 !
NULL
);

1512 
î∫o
= 0;

1513 *
ˇs

	`°πoul
(
íd
, &end, 10);

1514 
	`vîify
(
î∫o
 == 0);

1515 
	`vîify
(
±r
 !
íd
);

1516 
	`vîify
(
vÆ
 =
d©asize
);

1517 
	`vîify
(
íd
 !
NULL
);

1519 
íd
 
™d
 *íd !'\n'ánd 
	`is•a˚
(*end))

1521 ++
íd
;

1523 
	`vîify
(
íd
 
™d
 *end == '\n');

1525 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 
d©asize
));

1526 
	`vîify
(
	`memcmp
(
buf„r
, 
vÆue
, 
d©asize
) == 0);

1528 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 2));

1529 
	`vîify
(
	`memcmp
(
buf„r
, "\r\n", 2) == 0);

1531  
TEST_PASS
;

1532 
	}
}

1534 
ã°_ªtu∫
 
	$ascii_gës_ôem
(c⁄° *
key
, c⁄° *
vÆue
,

1535 
boﬁ
 
exi°
, *
ˇs
)

1537 
buf„r
[1024];

1538 
size_t
 
d©asize
= 0;

1539 i‡(
vÆue
 !
NULL
)

1541 
d©asize

	`°æí
(
vÆue
);

1544 
	`vîify
(
d©asize
 < (
buf„r
));

1545 
	`¢¥ötf
(
buf„r
, (buf„r), "gë†%s\r\n", 
key
);

1546 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1548 i‡(
exi°
)

1549 
	`execuã
(
	`ascii_gës_vÆue
(
key
, 
vÆue
, 
ˇs
));

1551 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 5));

1552 
	`vîify
(
	`memcmp
(
buf„r
, "END\r\n", 5) == 0);

1554  
TEST_PASS
;

1555 
	}
}

1557 
ã°_ªtu∫
 
	$ascii_£t_ôem
(c⁄° *
key
, c⁄° *
vÆue
)

1559 
buf„r
[300];

1560 
size_t
 
Àn

	`°æí
(
vÆue
);

1561 
	`¢¥ötf
(
buf„r
, (buf„r), "£à%†0 0 %u\r\n", 
key
, ()
Àn
);

1562 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1563 
	`execuã
(
	`ªåy_wrôe
(
vÆue
, 
Àn
));

1564 
	`execuã
(
	`£nd_°rög
("\r\n"));

1565 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1566  
TEST_PASS
;

1567 
	}
}

1569 
ã°_ªtu∫
 
	$ã°_ascii_ª∂a˚_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1571 
buf„r
[1024];

1572 
	`¢¥ötf
(
buf„r
, (buf„r), "ª∂a˚ %†0 0 5%s\r\nvÆue\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1573 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1575 i‡(
n‹ïly
)

1577 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1581 
	`execuã
(
	`ª˚ive_ª•⁄£
("NOT_STORED\r\n"));

1584 
	`execuã
(
	`ascii_£t_ôem
(
key
, "value"));

1585 
	`execuã
(
	`ascii_gë_ôem
(
key
, "vÆue", 
åue
));

1588 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1590 i‡(
n‹ïly
)

1591 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1593 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1595  
	`ã°_ascii_vîsi⁄
();

1596 
	}
}

1598 
ã°_ªtu∫
 
	$ã°_ascii_ª∂a˚
()

1600  
	`ã°_ascii_ª∂a˚_im∂
("ã°_ascii_ª∂a˚", 
Ál£
);

1601 
	}
}

1603 
ã°_ªtu∫
 
	$ã°_ascii_ª∂a˚_n‹ïly
()

1605  
	`ã°_ascii_ª∂a˚_im∂
("ã°_ascii_ª∂a˚_n‹ïly", 
åue
);

1606 
	}
}

1608 
ã°_ªtu∫
 
	$ã°_ascii_ˇs_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1610 
buf„r
[1024];

1611 
ˇs
;

1613 
	`execuã
(
	`ascii_£t_ôem
(
key
, "value"));

1614 
	`execuã
(
	`ascii_gës_ôem
(
key
, "vÆue", 
åue
, &
ˇs
));

1616 
	`¢¥ötf
(
buf„r
, (buf„r), "ˇ†%†0 0 6 %lu%s\r\nvÆue2\r\n", 
key
, 
ˇs
, 
n‹ïly
 ? "Çoreply" : "");

1617 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1619 i‡(
n‹ïly
)

1621 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1625 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1629 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1631 i‡(
n‹ïly
)

1633 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1637 
	`execuã
(
	`ª˚ive_ª•⁄£
("EXISTS\r\n"));

1640  
	`ã°_ascii_vîsi⁄
();

1641 
	}
}

1643 
ã°_ªtu∫
 
	$ã°_ascii_ˇs
()

1645  
	`ã°_ascii_ˇs_im∂
("ã°_ascii_ˇs", 
Ál£
);

1646 
	}
}

1648 
ã°_ªtu∫
 
	$ã°_ascii_ˇs_n‹ïly
()

1650  
	`ã°_ascii_ˇs_im∂
("ã°_ascii_ˇs_n‹ïly", 
åue
);

1651 
	}
}

1653 
ã°_ªtu∫
 
	$ã°_ascii_dñëe_im∂
(c⁄° *
key
, 
boﬁ
 
n‹ïly
)

1655 
	`execuã
(
	`ascii_£t_ôem
(
key
, "value"));

1657 
	`execuã
(
	`£nd_°rög
("delete\r\n"));

1658 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1660 
	`execuã
(
	`£nd_°rög
("deleteá b c dÉ\r\n"));

1661 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1663 
buf„r
[1024];

1664 
	`¢¥ötf
(
buf„r
, (buf„r), "dñëê%s%s\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1665 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1667 i‡(
n‹ïly
)

1668 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1670 
	`execuã
(
	`ª˚ive_ª•⁄£
("DELETED\r\n"));

1672 
	`execuã
(
	`ascii_gë_ôem
(
key
, "vÆue", 
Ál£
));

1673 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1674 i‡(
n‹ïly
)

1675 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1677 
	`execuã
(
	`ª˚ive_ª•⁄£
("NOT_FOUND\r\n"));

1679  
TEST_PASS
;

1680 
	}
}

1682 
ã°_ªtu∫
 
	$ã°_ascii_dñëe
()

1684  
	`ã°_ascii_dñëe_im∂
("ã°_ascii_dñëe", 
Ál£
);

1685 
	}
}

1687 
ã°_ªtu∫
 
	$ã°_ascii_dñëe_n‹ïly
()

1689  
	`ã°_ascii_dñëe_im∂
("ã°_ascii_dñëe_n‹ïly", 
åue
);

1690 
	}
}

1692 
ã°_ªtu∫
 
	$ã°_ascii_gë
()

1694 
	`execuã
(
	`ascii_£t_ôem
("test_ascii_get", "value"));

1696 
	`execuã
(
	`£nd_°rög
("get\r\n"));

1697 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1698 
	`execuã
(
	`ascii_gë_ôem
("ã°_ascii_gë", "vÆue", 
åue
));

1699 
	`execuã
(
	`ascii_gë_ôem
("ã°_ascii_gë_nŸfound", "vÆue", 
Ál£
));

1701  
TEST_PASS
;

1702 
	}
}

1704 
ã°_ªtu∫
 
	$ã°_ascii_gës
()

1706 
	`execuã
(
	`ascii_£t_ôem
("test_ascii_gets", "value"));

1708 
	`execuã
(
	`£nd_°rög
("gets\r\n"));

1709 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1710 
ˇs
;

1711 
	`execuã
(
	`ascii_gës_ôem
("ã°_ascii_gës", "vÆue", 
åue
, &
ˇs
));

1712 
	`execuã
(
	`ascii_gës_ôem
("ã°_ascii_gës_nŸfound", "vÆue", 
Ál£
, &
ˇs
));

1714  
TEST_PASS
;

1715 
	}
}

1717 
ã°_ªtu∫
 
	$ã°_ascii_mgë
()

1719 c⁄° 
uöt32_t
 
nkeys
= 5;

1720 c⁄° * c⁄° 
keys
[]= {

1729 
uöt32_t
 
x
0; x < 
nkeys
; ++x)

1731 
	`execuã
(
	`ascii_£t_ôem
(
keys
[
x
], "value"));

1735 
	`execuã
(
	`£nd_°rög
("getÅest_ascii_mget1Åest_ascii_mget2Åest_ascii_mget3 "

1739 
°d
::
ve˘‹
<*> 
ªtu∫ed
;

1740 
ªtu∫ed
.
	`ªsize
(
nkeys
);

1742 
uöt32_t
 
x
0; x < 
nkeys
; ++x)

1744 
ssize_t
 
nbyãs
 = 0;

1745 *
v

NULL
;

1746 
	`execuã
(
	`ascii_gë_unknown_vÆue
(&
ªtu∫ed
[
x
], &
v
, &
nbyãs
));

1747 
	`vîify
(
nbyãs
 == 5);

1748 
	`vîify
(
	`memcmp
(
v
, "value", 5) == 0);

1749 
	`‰ì
(
v
);

1752 
buf„r
[5];

1753 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 5));

1754 
	`vîify
(
	`memcmp
(
buf„r
, "END\r\n", 5) == 0);

1757 
uöt32_t
 
x
0; x < 
nkeys
; ++x)

1759 
boﬁ
 
found

Ál£
;

1760 
uöt32_t
 
y
0; y < 
nkeys
; ++y)

1762 i‡(
	`°rcmp
(
keys
[
x
], 
ªtu∫ed
[
y
]) == 0)

1764 
found
 = 
åue
;

1768 
	`vîify
(
found
);

1771 
uöt32_t
 
x
0; x < 
nkeys
; ++x)

1773 
	`‰ì
(
ªtu∫ed
[
x
]);

1776  
TEST_PASS
;

1777 
	}
}

1779 
ã°_ªtu∫
 
	$ã°_ascii_ö¸_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1781 
cmd
[300];

1782 
	`¢¥ötf
(
cmd
, (cmd), "ö¸ %†1%s\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1784 
	`execuã
(
	`ascii_£t_ôem
(
key
, "0"));

1785 
x
= 1; x < 11; ++x)

1787 
	`execuã
(
	`£nd_°rög
(
cmd
));

1789 i‡(
n‹ïly
)

1790 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1793 
buf„r
[80];

1794 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1795 
vÆ

	`©oi
(
buf„r
);

1796 
	`vîify
(
vÆ
 =
x
);

1800 
	`execuã
(
	`ascii_gë_ôem
(
key
, "10", 
åue
));

1802  
TEST_PASS
;

1803 
	}
}

1805 
ã°_ªtu∫
 
	$ã°_ascii_ö¸
()

1807  
	`ã°_ascii_ö¸_im∂
("ã°_ascii_ö¸", 
Ál£
);

1808 
	}
}

1810 
ã°_ªtu∫
 
	$ã°_ascii_ö¸_n‹ïly
()

1812  
	`ã°_ascii_ö¸_im∂
("ã°_ascii_ö¸_n‹ïly", 
åue
);

1813 
	}
}

1815 
ã°_ªtu∫
 
	$ã°_ascii_de¸_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1817 
cmd
[300];

1818 
	`¢¥ötf
(
cmd
, (cmd), "de¸ %†1%s\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1820 
	`execuã
(
	`ascii_£t_ôem
(
key
, "9"));

1821 
x
= 8; x > -1; --x)

1823 
	`execuã
(
	`£nd_°rög
(
cmd
));

1825 i‡(
n‹ïly
)

1827 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1831 
buf„r
[80];

1832 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1833 
vÆ

	`©oi
(
buf„r
);

1834 
	`vîify
(
vÆ
 =
x
);

1838 
	`execuã
(
	`ascii_gë_ôem
(
key
, "0", 
åue
));

1841 
	`execuã
(
	`£nd_°rög
(
cmd
));

1842 i‡(
n‹ïly
)

1844 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1848 
buf„r
[80];

1849 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1851 
	`execuã
(
	`ascii_gë_ôem
(
key
, "0", 
åue
));

1853  
TEST_PASS
;

1854 
	}
}

1856 
ã°_ªtu∫
 
	$ã°_ascii_de¸
()

1858  
	`ã°_ascii_de¸_im∂
("ã°_ascii_de¸", 
Ál£
);

1859 
	}
}

1861 
ã°_ªtu∫
 
	$ã°_ascii_de¸_n‹ïly
()

1863  
	`ã°_ascii_de¸_im∂
("ã°_ascii_de¸_n‹ïly", 
åue
);

1864 
	}
}

1867 
ã°_ªtu∫
 
	$ã°_ascii_Êush_im∂
(c⁄° *
key
, 
boﬁ
 
n‹ïly
)

1872 
	`execuã
(
	`£nd_°rög
("flush_all foo bar\r\n"));

1873 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1876 
	`execuã
(
	`ascii_£t_ôem
(
key
, key));

1877 
	`execuã
(
	`ascii_gë_ôem
(
key
, key, 
åue
));

1879 i‡(
n‹ïly
)

1881 
	`execuã
(
	`£nd_°rög
("flush_allÇoreply\r\n"));

1882 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1886 
	`execuã
(
	`£nd_°rög
("flush_all\r\n"));

1887 
	`execuã
(
	`ª˚ive_ª•⁄£
("OK\r\n"));

1890 
	`execuã
(
	`ascii_gë_ôem
(
key
, key, 
Ál£
));

1892  
TEST_PASS
;

1893 
	}
}

1895 
ã°_ªtu∫
 
	$ã°_ascii_Êush
()

1897  
	`ã°_ascii_Êush_im∂
("ã°_ascii_Êush", 
Ál£
);

1898 
	}
}

1900 
ã°_ªtu∫
 
	$ã°_ascii_Êush_n‹ïly
()

1902  
	`ã°_ascii_Êush_im∂
("ã°_ascii_Êush_n‹ïly", 
åue
);

1903 
	}
}

1905 
ã°_ªtu∫
 
	$ã°_ascii_c⁄ˇt_im∂
(c⁄° *
key
,

1906 
boﬁ
 
≠≥nd
,

1907 
boﬁ
 
n‹ïly
)

1909 c⁄° *
vÆue
;

1911 i‡(
≠≥nd
)

1912 
vÆue
="hello";

1914 
vÆue
=" world";

1916 
	`execuã
(
	`ascii_£t_ôem
(
key
, 
vÆue
));

1918 i‡(
≠≥nd
)

1920 
vÆue
=" world";

1924 
vÆue
="hello";

1927 
cmd
[400];

1928 
	`¢¥ötf
(
cmd
, (cmd), "%s %s 0 0 %u%s\r\n%s\r\n",

1929 
≠≥nd
 ? "append" : "prepend",

1930 
key
, ()
	`°æí
(
vÆue
), 
n‹ïly
 ? "Çoreply" : "",

1931 
vÆue
);

1932 
	`execuã
(
	`£nd_°rög
(
cmd
));

1934 i‡(
n‹ïly
)

1936 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1940 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1943 
	`execuã
(
	`ascii_gë_ôem
(
key
, "hñlÿw‹ld", 
åue
));

1945 
	`¢¥ötf
(
cmd
, (cmd), "%s %s_notfound 0 0 %u%s\r\n%s\r\n",

1946 
≠≥nd
 ? "append" : "prepend",

1947 
key
, ()
	`°æí
(
vÆue
), 
n‹ïly
 ? "Çoreply" : "",

1948 
vÆue
);

1949 
	`execuã
(
	`£nd_°rög
(
cmd
));

1951 i‡(
n‹ïly
)

1953 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1957 
	`execuã
(
	`ª˚ive_ª•⁄£
("NOT_STORED\r\n"));

1960  
TEST_PASS
;

1961 
	}
}

1963 
ã°_ªtu∫
 
	$ã°_ascii_≠≥nd
()

1965  
	`ã°_ascii_c⁄ˇt_im∂
("ã°_ascii_≠≥nd", 
åue
, 
Ál£
);

1966 
	}
}

1968 
ã°_ªtu∫
 
	$ã°_ascii_¥ïíd
()

1970  
	`ã°_ascii_c⁄ˇt_im∂
("ã°_ascii_¥ïíd", 
Ál£
, false);

1971 
	}
}

1973 
ã°_ªtu∫
 
	$ã°_ascii_≠≥nd_n‹ïly
()

1975  
	`ã°_ascii_c⁄ˇt_im∂
("ã°_ascii_≠≥nd_n‹ïly", 
åue
,Årue);

1976 
	}
}

1978 
ã°_ªtu∫
 
	$ã°_ascii_¥ïíd_n‹ïly
()

1980  
	`ã°_ascii_c⁄ˇt_im∂
("ã°_ascii_¥ïíd_n‹ïly", 
Ál£
, 
åue
);

1981 
	}
}

1983 
ã°_ªtu∫
 
	$ã°_ascii_°©
()

1985 
	`execuã
(
	`£nd_°rög
("statsÇoreply\r\n"));

1986 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1987 
	`execuã
(
	`£nd_°rög
("stats\r\n"));

1988 
buf„r
[1024];

1990 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1991 } 
	`°rcmp
(
buf„r
, "END\r\n") != 0);

1993  
TEST_PASS_RECONNECT
;

1994 
	}
}

1996 
	$ã°_ªtu∫
(*
	tTEST_FUNC
)();

1998 
	sã°ˇ£


2000 c⁄° *
des¸ùti⁄
;

2001 
TEST_FUNC
 
fun˘i⁄
;

2004 
ã°ˇ£
 
ã°ˇ£s
[]= {

2005 { "asciòquô", 
ã°_ascii_quô
 },

2006 { "asciòvîsi⁄", 
ã°_ascii_vîsi⁄
 },

2007 { "asciòvîbosôy", 
ã°_ascii_vîbosôy
 },

2008 { "asciò£t", 
ã°_ascii_£t
 },

2009 { "asciò£àn‹ïly", 
ã°_ascii_£t_n‹ïly
 },

2010 { "asciògë", 
ã°_ascii_gë
 },

2011 { "asciògës", 
ã°_ascii_gës
 },

2012 { "asciòmgë", 
ã°_ascii_mgë
 },

2013 { "asciòÊush", 
ã°_ascii_Êush
 },

2014 { "asciòÊushÇ‹ïly", 
ã°_ascii_Êush_n‹ïly
 },

2015 { "asciòadd", 
ã°_ascii_add
 },

2016 { "asciòaddÇ‹ïly", 
ã°_ascii_add_n‹ïly
 },

2017 { "asciòª∂a˚", 
ã°_ascii_ª∂a˚
 },

2018 { "asciòª∂a˚Ç‹ïly", 
ã°_ascii_ª∂a˚_n‹ïly
 },

2019 { "asciòˇs", 
ã°_ascii_ˇs
 },

2020 { "asciòˇ†n‹ïly", 
ã°_ascii_ˇs_n‹ïly
 },

2021 { "asciòdñëe", 
ã°_ascii_dñëe
 },

2022 { "asciòdñëên‹ïly", 
ã°_ascii_dñëe_n‹ïly
 },

2023 { "asciòö¸", 
ã°_ascii_ö¸
 },

2024 { "asciòö¸Ç‹ïly", 
ã°_ascii_ö¸_n‹ïly
 },

2025 { "asciòde¸", 
ã°_ascii_de¸
 },

2026 { "asciòde¸Ç‹ïly", 
ã°_ascii_de¸_n‹ïly
 },

2027 { "asciò≠≥nd", 
ã°_ascii_≠≥nd
 },

2028 { "asciò≠≥ndÇ‹ïly", 
ã°_ascii_≠≥nd_n‹ïly
 },

2029 { "asciò¥ïíd", 
ã°_ascii_¥ïíd
 },

2030 { "asciò¥ïídÇ‹ïly", 
ã°_ascii_¥ïíd_n‹ïly
 },

2031 { "asciò°©", 
ã°_ascii_°©
 },

2032 { "bö¨yÇo›", 
ã°_bö¨y_no›
 },

2033 { "bö¨y quô", 
ã°_bö¨y_quô
 },

2034 { "bö¨y quôq", 
ã°_bö¨y_quôq
 },

2035 { "bö¨y së", 
ã°_bö¨y_£t
 },

2036 { "bö¨y sëq", 
ã°_bö¨y_£tq
 },

2037 { "bö¨y flush", 
ã°_bö¨y_Êush
 },

2038 { "bö¨y flushq", 
ã°_bö¨y_Êushq
 },

2039 { "bö¨yádd", 
ã°_bö¨y_add
 },

2040 { "bö¨yáddq", 
ã°_bö¨y_addq
 },

2041 { "bö¨yÑïœ˚", 
ã°_bö¨y_ª∂a˚
 },

2042 { "bö¨yÑïœ˚q", 
ã°_bö¨y_ª∂a˚q
 },

2043 { "bö¨y dñëe", 
ã°_bö¨y_dñëe
 },

2044 { "bö¨y dñëeq", 
ã°_bö¨y_dñëeq
 },

2045 { "bö¨y gë", 
ã°_bö¨y_gë
 },

2046 { "bö¨y gëq", 
ã°_bö¨y_gëq
 },

2047 { "bö¨y gëk", 
ã°_bö¨y_gëk
 },

2048 { "bö¨y gëkq", 
ã°_bö¨y_gëkq
 },

2049 { "bö¨y in¸", 
ã°_bö¨y_ö¸
 },

2050 { "bö¨y in¸q", 
ã°_bö¨y_ö¸q
 },

2051 { "bö¨y de¸", 
ã°_bö¨y_de¸
 },

2052 { "bö¨y de¸q", 
ã°_bö¨y_de¸q
 },

2053 { "bö¨y vîsi⁄", 
ã°_bö¨y_vîsi⁄
 },

2054 { "bö¨yáµíd", 
ã°_bö¨y_≠≥nd
 },

2055 { "bö¨yáµídq", 
ã°_bö¨y_≠≥ndq
 },

2056 { "bö¨yÖª≥nd", 
ã°_bö¨y_¥ïíd
 },

2057 { "bö¨yÖª≥ndq", 
ã°_bö¨y_¥ïídq
 },

2058 { "bö¨y sèt", 
ã°_bö¨y_°©
 },

2059 { 
NULL
, NULL}

2060 
	}
};

2062 c⁄° 
	gascii_ã°s
 = 1;

2063 c⁄° 
	gbö¨y_ã°s
 = 2;

2065 
	sã°_ty≥_°


2067 
boﬁ
 
	mascii
;

2068 
boﬁ
 
	mbö¨y
;

2071 
	$maö
(
¨gc
, **
¨gv
)

2073 c⁄° * c⁄° 
°©us_msg
[]= {"[skip]", "[pass]", "[pass]", "[FAIL]"};

2074 
ã°_ty≥_°
 
ã°s
{ 
åue
,Årue };

2075 
tŸÆ
= 0;

2076 
Áûed
= 0;

2077 c⁄° *
ho°«me
= "localhost";

2078 c⁄° *
p‹t
= "11211";

2079 
cmd
;

2080 
boﬁ
 
¥om±

Ál£
;

2081 c⁄° *
ã°«me

NULL
;

2085 (
cmd

	`gë›t
(
¨gc
, 
¨gv
, "qt:vch:p:PT:?ab")Ë!
EOF
)

2087 
cmd
) {

2089 
ã°s
.
ascii

åue
;

2090 
ã°s
.
bö¨y

Ál£
;

2094 
ã°s
.
ascii

Ál£
;

2095 
ã°s
.
bö¨y

åue
;

2099 
timeout

	`©oi
(
›èrg
);

2100 i‡(
timeout
 == 0)

2102 
	`Ârötf
(
°dîr
, "InvalidÅimeout. Please specifyáÇumber for -t\n");

2103  
EXIT_FAILURE
;

2107 'v': 
vîbo£

åue
;

2110 'c': 
do_c‹e

åue
;

2113 'h': 
ho°«me

›èrg
;

2116 'p': 
p‹t

›èrg
;

2120 
	`˛o£_°dio
();

2123 'P': 
¥om±

åue
;

2126 'T': 
ã°«me

›èrg
;

2130 
	`Ârötf
(
°dîr
, "Usage: %s [-h hostname] [-pÖort] [-c] [-v] [-tÇ] [-P] [-TÅestname]'\n"

2141 
¨gv
[0]);

2142  
EXIT_SUCCESS
;

2146 
	`öôülize_sockës
();

2147 
sock

	`c⁄√˘_£rvî
(
ho°«me
, 
p‹t
);

2148 i‡(
sock
 =
INVALID_SOCKET
)

2150 
	`Ârötf
(
°dîr
, "FailedÅo connectÅo <%s:%s>: %s\n",

2151 
ho°«me
, 
p‹t
, 
	`°ªº‹
(
	`gë_sockë_î∫o
()));

2152  
EXIT_FAILURE
;

2155 
ii
0; 
ã°ˇ£s
[ii].
des¸ùti⁄
 !
NULL
; ++ii)

2157 i‡(
ã°«me
 !
NULL
 && 
	`°rcmp
(
ã°ˇ£s
[
ii
].
des¸ùti⁄
,Åestname) != 0)

2162 i‡((
ã°ˇ£s
[
ii
].
des¸ùti⁄
[0] ='a' && (
ã°s
.
ascii
) == 0) ||

2163 (
ã°ˇ£s
[
ii
].
des¸ùti⁄
[0] ='b' && (
ã°s
.
bö¨y
) == 0))

2167 ++
tŸÆ
;

2168 
	`Ârötf
(
°dout
, "%-40s", 
ã°ˇ£s
[
ii
].
des¸ùti⁄
);

2169 
	`fÊush
(
°dout
);

2171 i‡(
¥om±
)

2173 
	`Ârötf
(
°dout
, "\nPress <return> when youáreÑeady? ");

2174 
buf„r
[80] = {0};

2175 i‡(
	`fgës
(
buf„r
, (buf„r), 
°dö
Ë!
NULL
) {

2176 i‡(
	`°∫cmp
(
buf„r
, "skip", 4) == 0)

2178 
	`Ârötf
(
°dout
, "%-40s%s\n", 
ã°ˇ£s
[
ii
].
des¸ùti⁄
,

2179 
°©us_msg
[
TEST_SKIP
]);

2180 
	`fÊush
(
°dout
);

2183 i‡(
	`°∫cmp
(
buf„r
, "quit", 4) == 0)

2185 
	`exô
(
EXIT_SUCCESS
);

2189 
	`Ârötf
(
°dout
, "%-40s", 
ã°ˇ£s
[
ii
].
des¸ùti⁄
);

2190 
	`fÊush
(
°dout
);

2193 
boﬁ
 
ªc⁄√˘

Ál£
;

2194 
ã°_ªtu∫
 
ªt

ã°ˇ£s
[
ii
].
	`fun˘i⁄
();

2195 i‡(
ªt
 =
TEST_FAIL
)

2197 
ªc⁄√˘

åue
;

2198 ++
Áûed
;

2199 i‡(
vîbo£
)

2200 
	`Ârötf
(
°dîr
, "\n");

2202 i‡(
ªt
 =
TEST_PASS_RECONNECT
)

2203 
ªc⁄√˘

åue
;

2205 
	`Ârötf
(
°dîr
, "%s\n", 
°©us_msg
[
ªt
]);

2206 i‡(
ªc⁄√˘
)

2208 
	`˛o£sockë
(
sock
);

2209 i‡((
sock

	`c⁄√˘_£rvî
(
ho°«me
, 
p‹t
)Ë=
INVALID_SOCKET
)

2211 
	`Ârötf
(
°dîr
, "FaûedÅÿc⁄√˘Åÿ<%s:%s>: %s\n", 
ho°«me
, 
p‹t
, 
	`°ªº‹
(
	`gë_sockë_î∫o
()));

2212 
	`Ârötf
(
°dîr
, "%d o‡%dÅe°†Áûed\n", 
Áûed
, 
tŸÆ
);

2213  
EXIT_FAILURE
;

2218 
	`˛o£sockë
(
sock
);

2219 i‡(
Áûed
 == 0)

2221 
	`Ârötf
(
°dout
, "AllÅestsÖassed\n");

2225 
	`Ârötf
(
°dîr
, "%d o‡%dÅe°†Áûed\n", 
Áûed
, 
tŸÆ
);

2228  (
Áûed
 =0Ë? 
EXIT_SUCCESS
 : 
EXIT_FAILURE
;

2229 
	}
}

	@clients/memcat.cc

13 
	~<mem_c⁄fig.h
>

15 
	~<c°dio
>

16 
	~<c°rög
>

17 
	~<gë›t.h
>

18 
	~<io°ªam
>

19 
	~<uni°d.h
>

20 
	~<libmemˇched-1.0/memˇched.h
>

22 
	~"utûôõs.h
"

24 
	#PROGRAM_NAME
 "memˇt"

	)

25 
	#PROGRAM_DESCRIPTION
 "C©á së o‡key vÆue†tÿ°dout."

	)

29 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

31 
	g›t_bö¨y
= 0;

32 
	g›t_vîbo£
= 0;

33 
	g›t_di•œyÊag
= 0;

34 *
	g›t_£rvîs

NULL
;

35 *
	g›t_hash

NULL
;

36 *
	g›t_u£∫ame
;

37 *
	g›t_∑sswd
;

38 *
	g›t_fûe
;

40 
	$maö
(
¨gc
, *
¨gv
[])

42 *
°rög
;

43 
size_t
 
°rög_Àngth
;

44 
uöt32_t
 
Êags
;

45 
memˇched_ªtu∫_t
 
rc
;

47 
ªtu∫_code

EXIT_SUCCESS
;

49 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

50 
	`öôülize_sockës
();

52 i‡(
›t_£rvîs
 =
NULL
)

54 *
ãmp
;

56 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

58 
›t_£rvîs

	`°rdup
(
ãmp
);

61 i‡(
›t_£rvîs
 =
NULL
)

63 
°d
::
˚º
 << "Nÿ£rvî†¥ovõd" << std::
ídl
;

64 
	`exô
(
EXIT_FAILURE
);

68 
memˇched_£rvî_°
* 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

69 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

71 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

72  
EXIT_FAILURE
;

75 
memˇched_°
* 
memc

	`memˇched_¸óã
(
NULL
);

76 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

78 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

79 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

80 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

81 (
uöt64_t
)
›t_bö¨y
);

83 i‡(
›t_u£∫ame
 
™d
 
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

85 
	`memˇched_‰ì
(
memc
);

86 
°d
::
˚º
 << "--u£∫amêwa†suµlõd, buàbö¨y wa†nŸ buûàwôh SASL suµ‹t." << std::
ídl
;

87  
EXIT_FAILURE
;

90 i‡(
›t_u£∫ame
)

92 
memˇched_ªtu∫_t
 
ªt
;

93 i‡(
	`memˇched_Áûed
(
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
)))

95 
°d
::
˚º
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

96 
	`memˇched_‰ì
(
memc
);

97  
EXIT_FAILURE
;

101 
›töd
 < 
¨gc
)

103 
°rög

	`memˇched_gë
(
memc
, 
¨gv
[
›töd
], 
	`°æí
(argv[optind]),

104 &
°rög_Àngth
, &
Êags
, &
rc
);

105 i‡(
rc
 =
MEMCACHED_SUCCESS
)

107 i‡(
›t_di•œyÊag
)

109 i‡(
›t_vîbo£
)

111 
°d
::
cout
 << "key: " << 
¨gv
[
›töd
] << std::
ídl
 << "Êags: " << 
Êags
 << std::endl;

116 i‡(
›t_vîbo£
)

118 
°d
::
cout
 << "key: " << 
¨gv
[
›töd
] << std::
ídl
 << "Êags: " << 
Êags
 << "Àngth: " << 
°rög_Àngth
 << std::endl << "value: ";

121 i‡(
›t_fûe
)

123 
FILE
 *
Â

	`f›í
(
›t_fûe
, "w");

124 i‡(
Â
 =
NULL
)

126 
	`≥º‹
("fopen");

127 
ªtu∫_code

EXIT_FAILURE
;

131 
size_t
 
wrôãn

	`fwrôe
(
°rög
, 1, 
°rög_Àngth
, 
Â
);

132 i‡(
wrôãn
 !
°rög_Àngth
)

134 
°d
::
˚º
 << "îr‹ wrôög fûêtÿfûê" << 
›t_fûe
 << " wrŸê" << 
wrôãn
 << ", should havêwrôãn" << 
°rög_Àngth
 << std::
ídl
;

135 
ªtu∫_code

EXIT_FAILURE
;

139 i‡(
	`f˛o£
(
Â
))

141 
°d
::
˚º
 << "îr‹ closög " << 
›t_fûe
 << std::
ídl
;

142 
ªtu∫_code

EXIT_FAILURE
;

148 
°d
::
cout
.
	`wrôe
(
°rög
, 
°rög_Àngth
);

149 
°d
::
cout
 << std::
ídl
;

151 
	`‰ì
(
°rög
);

154 i‡(
rc
 !
MEMCACHED_NOTFOUND
)

156 
°d
::
˚º
 << "îr‹ o¿" << 
¨gv
[
›töd
] << "(" << 
	`memˇched_°ªº‹
(
memc
, 
rc
) << ")";

157 i‡(
	`memˇched_œ°_îr‹_î∫o
(
memc
))

159 
°d
::
˚º
 << " sy°emÉº‹ (" << 
	`°ªº‹
(
	`memˇched_œ°_îr‹_î∫o
(
memc
)Ë<< ")" << std::
ídl
;

161 
°d
::
˚º
 << std::
ídl
;

163 
ªtu∫_code

EXIT_FAILURE
;

168 
°d
::
˚º
 << "îr‹ o¿" << 
¨gv
[
›töd
] << "("<< 
	`memˇched_°ªº‹
(
NULL
, 
rc
Ë<< ")" << std::
ídl
;

169 
ªtu∫_code

EXIT_FAILURE
;

171 
›töd
++;

174 
	`memˇched_‰ì
(
memc
);

176 i‡(
›t_£rvîs
)

178 
	`‰ì
(
›t_£rvîs
);

180 i‡(
›t_hash
)

182 
	`‰ì
(
›t_hash
);

185  
ªtu∫_code
;

186 
	}
}

189 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

191 
›ti⁄_ödex
= 0;

193 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

198 
›ti⁄
 
l⁄g_›ti⁄s
[]=

200 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

201 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

202 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

203 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

204 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

205 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

206 {(
OPTIONSTRING
)"Êag", 
no_¨gumít
, &
›t_di•œyÊag
, 
OPT_FLAG
},

207 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

208 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

209 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

210 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

211 {(
OPTIONSTRING
)"fûe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_FILE
},

217 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

218 i‡(
›ti⁄_rv
 == -1) ;

219 
›ti⁄_rv
)

223 
OPT_BINARY
:

224 
›t_bö¨y
 = 1;

226 
OPT_VERBOSE
:

227 
›t_vîbo£
 = 
OPT_VERBOSE
;

229 
OPT_DEBUG
:

230 
›t_vîbo£
 = 
OPT_DEBUG
;

232 
OPT_VERSION
:

233 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

235 
OPT_HELP
:

236 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

238 
OPT_SERVERS
:

239 
›t_£rvîs

	`°rdup
(
›èrg
);

241 
OPT_HASH
:

242 
›t_hash

	`°rdup
(
›èrg
);

244 
OPT_USERNAME
:

245 
›t_u£∫ame

›èrg
;

247 
OPT_PASSWD
:

248 
›t_∑sswd

›èrg
;

250 
OPT_FILE
:

251 
›t_fûe

›èrg
;

254 
OPT_QUIET
:

255 
	`˛o£_°dio
();

260 
	`exô
(
EXIT_FAILURE
);

262 
	`ab‹t
();

265 
	}
}

	@clients/memcp.cc

13 
	~"mem_c⁄fig.h
"

15 
	~<˚ºno
>

16 
	~<˛imôs
>

17 
	~<c°dio
>

18 
	~<c°dlib
>

19 
	~<c°dlib
>

20 
	~<c°rög
>

21 
	~<f˙é.h
>

22 
	~<gë›t.h
>

23 
	~<io°ªam
>

24 #ifde‡
HAVE_STRINGS_H


25 
	~<°rögs.h
>

27 
	~<sys/°©.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<uni°d.h
>

34 
	~<libmemˇched-1.0/memˇched.h
>

36 
	~"˛õ¡_›ti⁄s.h
"

37 
	~"utûôõs.h
"

39 
	#PROGRAM_NAME
 "mem˝"

	)

40 
	#PROGRAM_DESCRIPTION
 "C›yá së o‡fûe†tÿ®memˇched clu°î."

	)

43 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

45 
boﬁ
 
	g›t_bö¨y

Ál£
;

46 
boﬁ
 
	g›t_udp

Ál£
;

47 
boﬁ
 
	g›t_buf„r

Ál£
;

48 
	g›t_vîbo£
= 0;

49 *
	g›t_£rvîs

NULL
;

50 *
	g›t_hash

NULL
;

51 
	g›t_mëhod

OPT_SET
;

52 
uöt32_t
 
	g›t_Êags
= 0;

53 
time_t
 
	g›t_expúes
= 0;

54 *
	g›t_u£∫ame
;

55 *
	g›t_∑sswd
;

57 
	$°πﬁ_wøµî
(c⁄° *
≈å
, 
ba£
, 
boﬁ
 *
îr‹
)

59 
vÆ
;

60 *
íd±r
;

62 
î∫o
= 0;

63 
vÆ

	`°πﬁ
(
≈å
, &
íd±r
, 
ba£
);

67 i‡((
î∫o
 =
ERANGE
 
	`™d
 (
vÆ
 =
LONG_MAX
 
‹
 vÆ =
LONG_MIN
))

68 
	`‹
 (
î∫o
 !0 && 
vÆ
 == 0))

70 *
îr‹

åue
;

71  
EXIT_SUCCESS
;

74 i‡(
íd±r
 =
≈å
)

76 *
îr‹

åue
;

77  
EXIT_SUCCESS
;

80 *
îr‹

Ál£
;

81  
vÆ
;

82 
	}
}

84 
	$maö
(
¨gc
, *
¨gv
[])

87 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

88 
	`öôülize_sockës
();

90 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

92 i‡(
›t_udp
)

94 i‡(
›t_vîbo£
)

96 
°d
::
cout
 << "E«blög UDP" << std::
ídl
;

99 i‡(
	`memˇched_Áûed
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
, 
›t_udp
)))

101 
	`memˇched_‰ì
(
memc
);

102 
°d
::
˚º
 << "CouldÇŸÉ«bÀ UDPÖrŸocﬁ." << std::
ídl
;

103  
EXIT_FAILURE
;

107 i‡(
›t_buf„r
)

109 i‡(
›t_vîbo£
)

111 
°d
::
cout
 << "E«blög MEMCACHED_BEHAVIOR_BUFFER_REQUESTS" << std::
ídl
;

114 i‡(
	`memˇched_Áûed
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
›t_buf„r
)))

116 
	`memˇched_‰ì
(
memc
);

117 
°d
::
˚º
 << "CouldÇŸÉ«bÀ MEMCACHED_BEHAVIOR_BUFFER_REQUESTS." << std::
ídl
;

118  
EXIT_FAILURE
;

122 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

124 i‡(
›t_£rvîs
 =
NULL
)

126 *
ãmp
;

128 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

130 
›t_£rvîs

	`°rdup
(
ãmp
);

132 i‡(
¨gc
 >1 
™d
 
¨gv
[--argc])

134 
›t_£rvîs

	`°rdup
(
¨gv
[--
¨gc
]);

137 i‡(
›t_£rvîs
 =
NULL
)

139 
°d
::
˚º
 << "NÿSîvî†¥ovided" << std::
ídl
;

140 
	`exô
(
EXIT_FAILURE
);

144 
memˇched_£rvî_°
* 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

145 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

147 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

148  
EXIT_FAILURE
;

151 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

152 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

153 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 
›t_bö¨y
);

154 i‡(
›t_u£∫ame
 
™d
 
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

156 
	`memˇched_‰ì
(
memc
);

157 
°d
::
˚º
 << "--u£∫amêwa†suµlõd, buàbö¨y wa†nŸ buûàwôh SASL suµ‹t." << std::
ídl
;

158  
EXIT_FAILURE
;

161 i‡(
›t_u£∫ame
)

163 
memˇched_ªtu∫_t
 
ªt
;

164 i‡(
	`memˇched_Áûed
(
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
)))

166 
°d
::
˚º
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

167 
	`memˇched_‰ì
(
memc
);

168  
EXIT_FAILURE
;

172 
exô_code

EXIT_SUCCESS
;

173 
›töd
 < 
¨gc
)

175 
fd

	`›í
(
¨gv
[
›töd
], 
O_RDONLY
);

176 i‡(
fd
 < 0)

178 i‡(
›t_vîbo£
)

180 
°d
::
˚º
 << "mem˝ " << 
¨gv
[
›töd
] << " " << 
	`°ªº‹
(
î∫o
Ë<< std::
ídl
;

181 
›töd
++;

183 
exô_code

EXIT_FAILURE
;

187 
°©
 
sbuf
;

188 ()
	`f°©
(
fd
, &
sbuf
);

190 *
±r

	`rödex
(
¨gv
[
›töd
], '/');

191 i‡(
±r
)

193 
±r
++;

197 
±r

¨gv
[
›töd
];

200 i‡(
›t_vîbo£
)

202 c⁄° *
›°r
[] = { "set", "add", "replace" };

203 
	`¥ötf
("op: %s\nsource file: %s\nlength: %lu\n"

205 
›°r
[
›t_mëhod
 - 
OPT_SET
], 
¨gv
[
›töd
], ()
sbuf
.
°_size
,

206 
±r
, 
›t_Êags
, ()
›t_expúes
);

209 *
fûe_buf„r_±r
;

210 i‡((
fûe_buf„r_±r
(*)
	`mÆloc
((Ë* (
size_t
)
sbuf
.
°_size
)Ë=
NULL
)

212 
°d
::
˚º
 << "Eº‹áŒoˇtög fûêbuf„r(" << 
	`°ªº‹
(
î∫o
Ë<< ")" << std::
ídl
;

213 
	`˛o£
(
fd
);

214 
	`exô
(
EXIT_FAILURE
);

217 
ssize_t
 
ªad_Àngth
;

218 i‡((
ªad_Àngth
::
	`ªad
(
fd
, 
fûe_buf„r_±r
, (
size_t
)
sbuf
.
°_size
)) == -1)

220 
°d
::
˚º
 << "Eº‹ whûêªadög fûê" << 
fûe_buf„r_±r
 << " (" << 
	`°ªº‹
(
î∫o
Ë<< ")" << std::
ídl
;

221 
	`˛o£
(
fd
);

222 
	`exô
(
EXIT_FAILURE
);

225 i‡(
ªad_Àngth
 !
sbuf
.
°_size
)

227 
°d
::
˚º
 << "Faûuª whûêªadög fûe. RódÜígth wa†nŸÉquÆÅÿ°©(ËÀngth" << std::
ídl
;

228 
	`˛o£
(
fd
);

229 
	`exô
(
EXIT_FAILURE
);

232 
memˇched_ªtu∫_t
 
rc
;

233 i‡(
›t_mëhod
 =
OPT_ADD
)

235 
rc

	`memˇched_add
(
memc
, 
±r
, 
	`°æí
(ptr),

236 
fûe_buf„r_±r
, (
size_t
)
sbuf
.
°_size
,

237 
›t_expúes
, 
›t_Êags
);

239 i‡(
›t_mëhod
 =
OPT_REPLACE
)

241 
rc

	`memˇched_ª∂a˚
(
memc
, 
±r
, 
	`°æí
(ptr),

242 
fûe_buf„r_±r
, (
size_t
)
sbuf
.
°_size
,

243 
›t_expúes
, 
›t_Êags
);

247 
rc

	`memˇched_£t
(
memc
, 
±r
, 
	`°æí
(ptr),

248 
fûe_buf„r_±r
, (
size_t
)
sbuf
.
°_size
,

249 
›t_expúes
, 
›t_Êags
);

252 i‡(
	`memˇched_Áûed
(
rc
))

254 
°d
::
˚º
 << "Eº‹ oc¸ruªd durög memˇched_£t(): " << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

255 ::
	`˛o£
(
fd
);

256 
exô_code

EXIT_FAILURE
;

259 ::
	`‰ì
(
fûe_buf„r_±r
);

260 ::
	`˛o£
(
fd
);

261 
›töd
++;

264 i‡(
›t_vîbo£
)

266 
°d
::
cout
 << "CÆlög memˇched_‰ì()" << std::
ídl
;

269 
	`memˇched_‰ì
(
memc
);

271 i‡(
›t_£rvîs
)

273 
	`‰ì
(
›t_£rvîs
);

276 i‡(
›t_hash
)

278 
	`‰ì
(
›t_hash
);

281  
exô_code
;

282 
	}
}

284 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

286 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

291 
›ti⁄
 
l⁄g_›ti⁄s
[]=

293 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

294 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

295 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

296 {(
OPTIONSTRING
)"udp", 
no_¨gumít
, 
NULL
, 
OPT_UDP
},

297 {(
OPTIONSTRING
)"buf„r", 
no_¨gumít
, 
NULL
, 
OPT_BUFFER
},

298 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

299 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

300 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

301 {(
OPTIONSTRING
)"Êag", 
ªquúed_¨gumít
, 
NULL
, 
OPT_FLAG
},

302 {(
OPTIONSTRING
)"expúe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_EXPIRE
},

303 {(
OPTIONSTRING
)"£t", 
no_¨gumít
, 
NULL
, 
OPT_SET
},

304 {(
OPTIONSTRING
)"add", 
no_¨gumít
, 
NULL
, 
OPT_ADD
},

305 {(
OPTIONSTRING
)"ª∂a˚", 
no_¨gumít
, 
NULL
, 
OPT_REPLACE
},

306 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

307 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

308 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

309 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

313 
boﬁ
 
›t_vîsi⁄

Ál£
;

314 
boﬁ
 
›t_hñp

Ál£
;

315 
›ti⁄_ödex
= 0;

319 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

321 i‡(
›ti⁄_rv
 == -1)

324 
›ti⁄_rv
)

329 
OPT_BINARY
:

330 
›t_bö¨y

åue
;

333 
OPT_VERBOSE
:

334 
›t_vîbo£

OPT_VERBOSE
;

337 
OPT_DEBUG
:

338 
›t_vîbo£

OPT_DEBUG
;

341 
OPT_VERSION
:

342 
›t_vîsi⁄

åue
;

345 
OPT_HELP
:

346 
›t_hñp

åue
;

349 
OPT_SERVERS
:

350 
›t_£rvîs

	`°rdup
(
›èrg
);

353 
OPT_FLAG
:

355 
boﬁ
 
°πﬁ_îr‹
;

356 
›t_Êags
(
uöt32_t
)
	`°πﬁ_wøµî
(
›èrg
, 16, &
°πﬁ_îr‹
);

357 i‡(
°πﬁ_îr‹
 =
åue
)

359 
	`Ârötf
(
°dîr
, "Bad valueÖassed via --flag\n");

360 
	`exô
(1);

365 
OPT_EXPIRE
:

367 
boﬁ
 
°πﬁ_îr‹
;

368 
›t_expúes
(
time_t
)
	`°πﬁ_wøµî
(
›èrg
, 16, &
°πﬁ_îr‹
);

369 i‡(
°πﬁ_îr‹
 =
åue
)

371 
	`Ârötf
(
°dîr
, "Bad valueÖassed via --flag\n");

372 
	`exô
(1);

377 
OPT_SET
:

378 
›t_mëhod

OPT_SET
;

381 
OPT_REPLACE
:

382 
›t_mëhod

OPT_REPLACE
;

385 
OPT_ADD
:

386 
›t_mëhod

OPT_ADD
;

389 
OPT_HASH
:

390 
›t_hash

	`°rdup
(
›èrg
);

393 
OPT_USERNAME
:

394 
›t_u£∫ame

›èrg
;

397 
OPT_PASSWD
:

398 
›t_∑sswd

›èrg
;

401 
OPT_QUIET
:

402 
	`˛o£_°dio
();

405 
OPT_UDP
:

406 
›t_udp

åue
;

409 
OPT_BUFFER
:

410 
›t_buf„r

åue
;

415 
	`exô
(1);

417 
	`ab‹t
();

421 i‡(
›t_vîsi⁄
)

423 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

424 
	`exô
(
EXIT_SUCCESS
);

427 i‡(
›t_hñp
)

429 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

430 
	`exô
(
EXIT_SUCCESS
);

432 
	}
}

	@clients/memdump.cc

13 
	~"mem_c⁄fig.h
"

15 
	~<˚ºno
>

16 
	~<c°dio
>

17 
	~<c°dlib
>

18 
	~<c°rög
>

19 
	~<f˙é.h
>

20 
	~<gë›t.h
>

21 
	~<öây≥s.h
>

22 
	~<io°ªam
>

23 
	~<sys/°©.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<uni°d.h
>

28 
	~<libmemˇched-1.0/memˇched.h
>

30 
	~"˛õ¡_›ti⁄s.h
"

31 
	~"utûôõs.h
"

33 
	#PROGRAM_NAME
 "memdump"

	)

34 
	#PROGRAM_DESCRIPTION
 "Dum∞Æ»vÆue†‰om o√ o∏m™y sîvîs."

	)

37 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

39 
boﬁ
 
	g›t_bö¨y
=0;

40 
	g›t_vîbo£
= 0;

41 *
	g›t_£rvîs

NULL
;

42 *
	g›t_hash

NULL
;

43 *
	g›t_u£∫ame
;

44 *
	g›t_∑sswd
;

47 
memˇched_ªtu∫_t
 
	$key_¥öãr
(c⁄° 
memˇched_°
 *,

48 c⁄° *
key
, 
size_t
 
key_Àngth
,

51 
°d
::
cout
.
	`wrôe
(
key
, 
key_Àngth
);

52 
°d
::
cout
 << std::
ídl
;

54  
MEMCACHED_SUCCESS
;

55 
	}
}

57 
	$maö
(
¨gc
, *
¨gv
[])

59 
memˇched_dump_‚
 
ˇŒbacks
[1];

61 
ˇŒbacks
[0]&
key_¥öãr
;

63 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

65 i‡(
›t_£rvîs
 =
NULL
)

67 *
ãmp
;

69 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

71 
›t_£rvîs

	`°rdup
(
ãmp
);

73 i‡(
¨gc
 >1 
™d
 
¨gv
[--argc])

75 
›t_£rvîs

	`°rdup
(
¨gv
[--
¨gc
]);

78 i‡(
›t_£rvîs
 =
NULL
)

80 
°d
::
˚º
 << "NÿSîvî†¥ovided" << std::
ídl
;

81 
	`exô
(
EXIT_FAILURE
);

85 
memˇched_£rvî_°
* 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

86 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

88 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

89  
EXIT_FAILURE
;

92 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

93 i‡(
memc
 =
NULL
)

95 
°d
::
˚º
 << "CouldÇŸáŒoˇãá memˇched_° såu˘uª.\n" << std::
ídl
;

96  
EXIT_FAILURE
;

98 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

100 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

101 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

102 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

103 (
uöt64_t
)
›t_bö¨y
);

105 i‡(
›t_u£∫ame
 
™d
 
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

107 
	`memˇched_‰ì
(
memc
);

108 
°d
::
˚º
 << "--u£∫amêwa†suµlõd, buàbö¨y wa†nŸ buûàwôh SASL suµ‹t." << std::
ídl
;

109  
EXIT_FAILURE
;

112 i‡(
›t_u£∫ame
)

114 
memˇched_ªtu∫_t
 
ªt
;

115 i‡(
	`memˇched_Áûed
(
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
)))

117 
°d
::
˚º
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

118 
	`memˇched_‰ì
(
memc
);

119  
EXIT_FAILURE
;

123 
memˇched_ªtu∫_t
 
rc

	`memˇched_dump
(
memc
, 
ˇŒbacks
, 
NULL
, 1);

125 
exô_code

EXIT_SUCCESS
;

126 i‡(
	`memˇched_Áûed
(
rc
))

128 i‡(
›t_vîbo£
)

130 
°d
::
˚º
 << "FaûedÅÿdum∞keys: " << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

132 
exô_code

EXIT_FAILURE
;

135 
	`memˇched_‰ì
(
memc
);

137 i‡(
›t_£rvîs
)

139 
	`‰ì
(
›t_£rvîs
);

141 i‡(
›t_hash
)

143 
	`‰ì
(
›t_hash
);

146  
exô_code
;

147 
	}
}

149 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

151 
›ti⁄
 
l⁄g_›ti⁄s
[]=

153 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

154 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

155 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

156 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

157 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

158 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

159 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

160 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

161 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

162 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

166 
›ti⁄_ödex
= 0;

167 
boﬁ
 
›t_vîsi⁄

Ál£
;

168 
boﬁ
 
›t_hñp

Ál£
;

171 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

173 i‡(
›ti⁄_rv
 == -1) ;

175 
›ti⁄_rv
)

180 
OPT_BINARY
:

181 
›t_bö¨y

åue
;

184 
OPT_VERBOSE
:

185 
›t_vîbo£

OPT_VERBOSE
;

188 
OPT_DEBUG
:

189 
›t_vîbo£

OPT_DEBUG
;

192 
OPT_VERSION
:

193 
›t_vîbo£

åue
;

196 
OPT_HELP
:

197 
›t_hñp

åue
;

200 
OPT_SERVERS
:

201 
›t_£rvîs

	`°rdup
(
›èrg
);

204 
OPT_HASH
:

205 
›t_hash

	`°rdup
(
›èrg
);

208 
OPT_USERNAME
:

209 
›t_u£∫ame

›èrg
;

212 
OPT_PASSWD
:

213 
›t_∑sswd

›èrg
;

216 
OPT_QUIET
:

217 
	`˛o£_°dio
();

222 
	`exô
(1);

224 
	`ab‹t
();

228 i‡(
›t_vîsi⁄
)

230 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

231 
	`exô
(
EXIT_SUCCESS
);

234 i‡(
›t_hñp
)

236 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
NULL
);

237 
	`exô
(
EXIT_SUCCESS
);

239 
	}
}

	@clients/memerror.cc

12 
	~"mem_c⁄fig.h
"

14 
	~<˚ºno
>

15 
	~<c°dio
>

16 
	~<c°dlib
>

17 
	~<c°rög
>

18 
	~<˛imôs
>

20 
	~<gë›t.h
>

21 
	~<io°ªam
>

22 
	~<uni°d.h
>

24 
	~<libmemˇched-1.0/memˇched.h
>

26 
	~"utûôõs.h
"

28 
	#PROGRAM_NAME
 "memîr‹"

	)

29 
	#PROGRAM_DESCRIPTION
 "Tøn¶©ê®memˇchedÉºr‹ codêötÿ®°rög."

	)

33 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

35 
	$maö
(
¨gc
, *
¨gv
[])

37 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

39 i‡(
¨gc
 < 2)

41  
EXIT_FAILURE
;

44 
›töd
 < 
¨gc
)

46 
î∫o
= 0;

47 *
≈å
;

48 
vÆue

	`°πoul
(
¨gv
[
›töd
], &
≈å
, 10);

50 i‡((
î∫o
 !0Ë
‹


51 (
≈å
 =
¨gv
[
›töd
] 
™d
 
vÆue
 =0Ë
‹


52 (
vÆue
 =
ULONG_MAX
 
™d
 
î∫o
 =
ERANGE
Ë
‹


53 (
vÆue
 =0 
™d
 
î∫o
 =
EINVAL
))

55 
°d
::
˚º
 << "°πoul(Ëwa†u«bÀÅÿ∑r£ giví vÆue" << std::
ídl
;

56  
EXIT_FAILURE
;

59 i‡(
vÆue
 < 
MEMCACHED_MAXIMUM_RETURN
)

61 
°d
::
cout
 << 
	`memˇched_°ªº‹
(
NULL
, (
memˇched_ªtu∫_t
)
vÆue
Ë<< std::
ídl
;

65 
°d
::
˚º
 << 
	`memˇched_°ªº‹
(
NULL
, 
MEMCACHED_MAXIMUM_RETURN
Ë<< std::
ídl
;

66  
EXIT_FAILURE
;

69 
›töd
++;

72  
EXIT_SUCCESS
;

73 
	}
}

76 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

78 
›ti⁄
 
l⁄g_›ti⁄s
[]=

80 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

81 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

85 
boﬁ
 
›t_vîsi⁄

Ál£
;

86 
boﬁ
 
›t_hñp

Ál£
;

87 
›ti⁄_ödex
= 0;

90 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

91 i‡(
›ti⁄_rv
 == -1)

96 
›ti⁄_rv
)

101 
OPT_VERSION
:

102 
›t_vîsi⁄

åue
;

105 
OPT_HELP
:

106 
›t_hñp

åue
;

111 
	`exô
(
EXIT_FAILURE
);

114 
	`exô
(
EXIT_FAILURE
);

118 i‡(
›t_vîsi⁄
)

120 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

121 
	`exô
(
EXIT_SUCCESS
);

124 i‡(
›t_hñp
)

126 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
NULL
);

127 
	`exô
(
EXIT_SUCCESS
);

129 
	}
}

	@clients/memexist.cc

12 
	~"mem_c⁄fig.h
"

14 
	~<c°dio
>

15 
	~<c°rög
>

16 
	~<gë›t.h
>

17 
	~<io°ªam
>

18 
	~<uni°d.h
>

20 
	~<libmemˇched-1.0/memˇched.h
>

21 
	~"˛õ¡_›ti⁄s.h
"

22 
	~"utûôõs.h
"

24 
	g›t_bö¨y
= 0;

25 
	g›t_vîbo£
= 0;

26 *
	g›t_£rvîs

NULL
;

27 *
	g›t_hash

NULL
;

28 *
	g›t_u£∫ame
;

29 *
	g›t_∑sswd
;

31 
	#PROGRAM_NAME
 "memexi°"

	)

32 
	#PROGRAM_DESCRIPTION
 "Check f‹Åhêexi°™˚ o‡®key wôhöá clu°î."

	)

35 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

37 
	$maö
(
¨gc
, *
¨gv
[])

39 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

40 
	`öôülize_sockës
();

42 i‡(
›t_£rvîs
 =
NULL
)

44 *
ãmp
;

46 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

48 
›t_£rvîs

	`°rdup
(
ãmp
);

51 i‡(
›t_£rvîs
 =
NULL
)

53 
°d
::
˚º
 << "NÿSîvî†¥ovided" << std::
ídl
;

54 
	`exô
(
EXIT_FAILURE
);

58 
memˇched_£rvî_°
* 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

59 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

61 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

62  
EXIT_FAILURE
;

65 
memˇched_°
* 
memc

	`memˇched_¸óã
(
NULL
);

66 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

68 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

69 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

70 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

71 (
uöt64_t
Ë
›t_bö¨y
);

73 i‡(
›t_u£∫ame
 
™d
 
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

75 
	`memˇched_‰ì
(
memc
);

76 
°d
::
˚º
 << "--u£∫amêwa†suµlõd, buàbö¨y wa†nŸ buûàwôh SASL suµ‹t." << std::
ídl
;

77  
EXIT_FAILURE
;

80 i‡(
›t_u£∫ame
)

82 
memˇched_ªtu∫_t
 
ªt
;

83 i‡(
	`memˇched_Áûed
(
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
)))

85 
°d
::
˚º
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

86 
	`memˇched_‰ì
(
memc
);

87  
EXIT_FAILURE
;

91 
ªtu∫_code

EXIT_SUCCESS
;

93 
›töd
 < 
¨gc
)

95 
memˇched_ªtu∫_t
 
rc

	`memˇched_exi°
(
memc
, 
¨gv
[
›töd
], 
	`°æí
(argv[optind]));

97 i‡(
rc
 =
MEMCACHED_NOTFOUND
)

99 i‡(
›t_vîbo£
)

101 
°d
::
cout
 << "CouldÇŸ föd key \"" << 
¨gv
[
›töd
] << "\"" << std::
ídl
;

104 
ªtu∫_code

EXIT_FAILURE
;

106 i‡(
	`memˇched_Áûed
(
rc
))

108 i‡(
›t_vîbo£
)

110 
°d
::
˚º
 << "F©ÆÉº‹ f‹ key \"" << 
¨gv
[
›töd
] << "\" :" << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

113 
ªtu∫_code

EXIT_FAILURE
;

117 i‡(
›t_vîbo£
)

119 
°d
::
cout
 << "Found key " << 
¨gv
[
›töd
] << std::
ídl
;

123 
›töd
++;

126 
	`memˇched_‰ì
(
memc
);

128 i‡(
›t_£rvîs
)

130 
	`‰ì
(
›t_£rvîs
);

133 i‡(
›t_hash
)

135 
	`‰ì
(
›t_hash
);

138  
ªtu∫_code
;

139 
	}
}

142 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

144 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

149 
›ti⁄
 
l⁄g_›ti⁄s
[]=

151 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

152 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

153 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

154 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

155 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

156 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

157 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

158 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

159 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

160 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

164 
boﬁ
 
›t_vîsi⁄

Ál£
;

165 
boﬁ
 
›t_hñp

Ál£
;

166 
›ti⁄_ödex
= 0;

170 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

171 i‡(
›ti⁄_rv
 == -1)

176 
›ti⁄_rv
)

181 
OPT_BINARY
:

182 
›t_bö¨y
 = 1;

185 
OPT_VERBOSE
:

186 
›t_vîbo£
 = 
OPT_VERBOSE
;

189 
OPT_DEBUG
:

190 
›t_vîbo£
 = 
OPT_DEBUG
;

193 
OPT_VERSION
:

194 
›t_vîsi⁄

åue
;

197 
OPT_HELP
:

198 
›t_hñp

åue
;

201 
OPT_SERVERS
:

202 
›t_£rvîs

	`°rdup
(
›èrg
);

205 
OPT_HASH
:

206 
›t_hash

	`°rdup
(
›èrg
);

209 
OPT_USERNAME
:

210 
›t_u£∫ame

›èrg
;

213 
OPT_PASSWD
:

214 
›t_∑sswd

›èrg
;

217 
OPT_QUIET
:

218 
	`˛o£_°dio
();

223 
	`exô
(
EXIT_SUCCESS
);

226 
	`ab‹t
();

230 i‡(
›t_vîsi⁄
)

232 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

233 
	`exô
(
EXIT_SUCCESS
);

236 i‡(
›t_hñp
)

238 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

239 
	`exô
(
EXIT_SUCCESS
);

241 
	}
}

	@clients/memflush.cc

12 
	~"mem_c⁄fig.h
"

14 
	~<˚ºno
>

15 
	~<c°dio
>

16 
	~<c°rög
>

17 
	~<gë›t.h
>

18 
	~<io°ªam
>

19 
	~<uni°d.h
>

21 
	~<libmemˇched-1.0/memˇched.h
>

22 
	~"˛õ¡_›ti⁄s.h
"

23 
	~"utûôõs.h
"

25 
	g›t_bö¨y
= 0;

26 
	g›t_vîbo£
= 0;

27 
time_t
 
	g›t_expúe
= 0;

28 *
	g›t_£rvîs

NULL
;

29 *
	g›t_u£∫ame
;

30 *
	g›t_∑sswd
;

32 
	#PROGRAM_NAME
 "memÊush"

	)

33 
	#PROGRAM_DESCRIPTION
 "Eø£áŒ d©®öá sîvî o‡memˇched sîvîs."

	)

36 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

42 i‡(
›t_£rvîs
 =
Ál£
)

44 *
ãmp
;

46 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

48 
›t_£rvîs

	`°rdup
(
ãmp
);

51 i‡(
›t_£rvîs
 =
Ál£
)

53 
°d
::
˚º
 << "NÿSîvî†¥ovided" << std::
ídl
;

54 
	`exô
(
EXIT_FAILURE
);

58 
memˇched_£rvî_°
* 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

59 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

61 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

62  
EXIT_FAILURE
;

65 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

66 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

67 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

68 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

69 (
uöt64_t
Ë
›t_bö¨y
);

71 i‡(
›t_u£∫ame
 
™d
 
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

73 
	`memˇched_‰ì
(
memc
);

74 
°d
::
˚º
 << "--u£∫amêwa†suµlõd, buàbö¨y wa†nŸ buûàwôh SASL suµ‹t." << std::
ídl
;

75  
EXIT_FAILURE
;

78 i‡(
›t_u£∫ame
)

80 
memˇched_ªtu∫_t
 
ªt
;

81 i‡(
	`memˇched_Áûed
(
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
)))

83 
°d
::
˚º
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

84 
	`memˇched_‰ì
(
memc
);

85  
EXIT_FAILURE
;

89 
memˇched_ªtu∫_t
 
rc
 = 
	`memˇched_Êush
(
memc
, 
›t_expúe
);

90 i‡(
rc
 !
MEMCACHED_SUCCESS
)

92 
°d
::
˚º
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

95 
	`memˇched_‰ì
(
memc
);

97 
	`‰ì
(
›t_£rvîs
);

99  
EXIT_SUCCESS
;

100 
	}
}

103 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

105 
›ti⁄
 
l⁄g_›ti⁄s
[]=

107 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

108 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

109 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

110 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

111 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

112 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

113 {(
OPTIONSTRING
)"expúe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_EXPIRE
},

114 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

115 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

116 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

120 
boﬁ
 
›t_vîsi⁄

Ál£
;

121 
boﬁ
 
›t_hñp

Ál£
;

122 
›ti⁄_ödex
= 0;

125 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

126 i‡(
›ti⁄_rv
 == -1) ;

127 
›ti⁄_rv
)

132 
OPT_BINARY
:

133 
›t_bö¨y

åue
;

136 
OPT_VERBOSE
:

137 
›t_vîbo£

OPT_VERBOSE
;

140 
OPT_DEBUG
:

141 
›t_vîbo£

OPT_DEBUG
;

144 
OPT_VERSION
:

145 
›t_vîsi⁄

åue
;

148 
OPT_HELP
:

149 
›t_hñp

åue
;

152 
OPT_SERVERS
:

153 
›t_£rvîs

	`°rdup
(
›èrg
);

156 
OPT_EXPIRE
:

157 
î∫o
= 0;

158 
›t_expúe
(
time_t
)
	`°πﬁl
(
›èrg
, (**)
NULL
, 10);

159 i‡(
î∫o
 != 0)

161 
°d
::
˚º
 << "Inc‹ª˘ vÆuê∑s£dÅÿ--expúe: `" << 
›èrg
 << "`" << std::cerr;

162 
	`exô
(
EXIT_FAILURE
);

166 
OPT_USERNAME
:

167 
›t_u£∫ame

›èrg
;

170 
OPT_PASSWD
:

171 
›t_∑sswd

›èrg
;

174 
OPT_QUIET
:

175 
	`˛o£_°dio
();

180 
	`exô
(
EXIT_FAILURE
);

183 
	`ab‹t
();

187 i‡(
›t_vîsi⁄
)

189 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

190 
	`exô
(
EXIT_SUCCESS
);

193 i‡(
›t_hñp
)

195 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
NULL
);

196 
	`exô
(
EXIT_SUCCESS
);

198 
	}
}

	@clients/memparse.cc

38 
	~<mem_c⁄fig.h
>

40 
	~<c°dio
>

41 
	~<c°rög
>

42 
	~<io°ªam
>

44 
	~<libmemˇched-1.0/memˇched.h
>

46 
	$maö
(
¨gc
, *
¨gv
[])

49 i‡(
¨gc
 < 2)

51 
°d
::
˚º
 << "Nÿ¨gumít†¥ovided." << std::
ídl
;

52  
EXIT_FAILURE
;

55 
x
1; x < 
¨gc
; x++)

57 
buf„r
[
BUFSIZ
];

58 
memˇched_ªtu∫_t
 
rc
;

59 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
¨gv
[
x
], 
	`°æí
◊rgv[x]), 
buf„r
, (buffer));

61 i‡(
rc
 !
MEMCACHED_SUCCESS
)

63 
°d
::
˚º
 << "FaûedÅÿ∑r£árgumíà#" << 
x
 << " " << 
¨gv
[x] << std::
ídl
;

64 
°d
::
˚º
 << 
buf„r
 << std::
ídl
;

65  
EXIT_FAILURE
;

69  
EXIT_SUCCESS
;

70 
	}
}

	@clients/memping.cc

12 
	~"mem_c⁄fig.h
"

14 
	~<˚ºno
>

15 
	~<c°dio
>

16 
	~<c°rög
>

17 
	~<gë›t.h
>

18 
	~<uni°d.h
>

20 
	~<libmemˇched-1.0/memˇched.h
>

21 
	~<libmemˇchedutû-1.0/utû.h
>

22 
	~"˛õ¡_›ti⁄s.h
"

23 
	~"utûôõs.h
"

25 
	~<io°ªam
>

27 
boﬁ
 
	g›t_bö¨y

Ál£
;

28 
	g›t_vîbo£
= 0;

29 
time_t
 
	g›t_expúe
= 0;

30 *
	g›t_£rvîs

NULL
;

31 *
	g›t_u£∫ame
;

32 *
	g›t_∑sswd
;

34 
	#PROGRAM_NAME
 "mempög"

	)

35 
	#PROGRAM_DESCRIPTION
 "Pögá sîvîÅÿ£êi‡ô i†Æive"

	)

38 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

44 i‡(
›t_£rvîs
 =
NULL
)

46 *
ãmp
;

48 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

50 
›t_£rvîs

	`°rdup
(
ãmp
);

53 i‡(
›t_£rvîs
 =
NULL
)

55 
°d
::
˚º
 << "NÿSîvî†¥ovided" << std::
ídl
;

56 
	`exô
(
EXIT_FAILURE
);

60 
exô_code

EXIT_SUCCESS
;

61 
memˇched_£rvî_°
 *
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

62 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

64 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

65 
exô_code

EXIT_FAILURE
;

69 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_li°_cou¡
(
£rvîs
); x++)

71 
memˇched_ªtu∫_t
 
ö°™˚_rc
;

72 c⁄° *
ho°«me

£rvîs
[
x
].hostname;

73 
ö_p‹t_t
 
p‹t

£rvîs
[
x
].port;

75 i‡(
›t_vîbo£
)

77 
°d
::
cout
 << "TryögÅÿpög " << 
ho°«me
 << ":" << 
p‹t
 << std::
ídl
;

80 i‡(
	`libmemˇched_utû_pög2
(
ho°«me
, 
p‹t
, 
›t_u£∫ame
, 
›t_∑sswd
, &
ö°™˚_rc
Ë=
Ál£
)

82 
°d
::
˚º
 << "FaûedÅÿpög " << 
ho°«me
 << ":" << 
p‹t
 << " " << 
	`memˇched_°ªº‹
(
NULL
, 
ö°™˚_rc
Ë<< std::
ídl
;

83 
exô_code

EXIT_FAILURE
;

87 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

89 
	`‰ì
(
›t_£rvîs
);

91  
exô_code
;

92 
	}
}

95 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

97 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

102 
›ti⁄
 
l⁄g_›ti⁄s
[]=

104 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

105 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

106 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

107 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

108 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

109 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

110 {(
OPTIONSTRING
)"expúe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_EXPIRE
},

111 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

112 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

113 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

117 
boﬁ
 
›t_vîsi⁄

Ál£
;

118 
boﬁ
 
›t_hñp

Ál£
;

119 
›ti⁄_ödex
= 0;

122 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

124 i‡(
›ti⁄_rv
 == -1) ;

126 
›ti⁄_rv
)

131 
OPT_BINARY
:

132 
›t_bö¨y

åue
;

135 
OPT_VERBOSE
:

136 
›t_vîbo£
 = 
OPT_VERBOSE
;

139 
OPT_DEBUG
:

140 
›t_vîbo£
 = 
OPT_DEBUG
;

143 
OPT_VERSION
:

144 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

147 
OPT_HELP
:

148 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

151 
OPT_SERVERS
:

152 
›t_£rvîs

	`°rdup
(
›èrg
);

155 
OPT_EXPIRE
:

156 
î∫o
= 0;

157 
›t_expúe

	`time_t
(
	`°πﬁl
(
›èrg
, (**)
NULL
, 10));

158 i‡(
î∫o
 != 0)

160 
°d
::
˚º
 << "Inc‹ª˘ vÆuê∑s£dÅÿ--expúe: `" << 
›èrg
 << "`" << std::cerr;

161 
	`exô
(
EXIT_FAILURE
);

165 
OPT_USERNAME
:

166 
›t_u£∫ame

›èrg
;

167 
›t_bö¨y

åue
;

170 
OPT_PASSWD
:

171 
›t_∑sswd

›èrg
;

174 
OPT_QUIET
:

175 
	`˛o£_°dio
();

180 
	`exô
(1);

182 
	`ab‹t
();

186 i‡(
›t_vîsi⁄
)

188 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

189 
	`exô
(
EXIT_SUCCESS
);

192 i‡(
›t_hñp
)

194 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

195 
	`exô
(
EXIT_SUCCESS
);

197 
	}
}

	@clients/memrm.cc

12 
	~"mem_c⁄fig.h
"

14 
	~<˚ºno
>

15 
	~<c°dio
>

16 
	~<c°rög
>

17 
	~<gë›t.h
>

18 
	~<io°ªam
>

19 
	~<uni°d.h
>

21 
	~<libmemˇched-1.0/memˇched.h
>

22 
	~"˛õ¡_›ti⁄s.h
"

23 
	~"utûôõs.h
"

25 
	g›t_bö¨y
= 0;

26 
	g›t_vîbo£
= 0;

27 
time_t
 
	g›t_expúe
= 0;

28 *
	g›t_£rvîs

NULL
;

29 *
	g›t_hash

NULL
;

30 *
	g›t_u£∫ame
;

31 *
	g›t_∑sswd
;

33 
	#PROGRAM_NAME
 "memrm"

	)

34 
	#PROGRAM_DESCRIPTION
 "Eø£á key o∏£ào‡key†‰omá memˇched clu°î."

	)

37 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

42 
	`öôülize_sockës
();

44 i‡(
›t_£rvîs
 =
NULL
)

46 *
ãmp
;

48 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

50 
›t_£rvîs

	`°rdup
(
ãmp
);

53 i‡(
›t_£rvîs
 =
NULL
)

55 
°d
::
˚º
 << "NÿSîvî†¥ovided" << std::
ídl
;

56 
	`exô
(
EXIT_FAILURE
);

60 
memˇched_£rvî_°
* 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

61 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

63 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

64  
EXIT_FAILURE
;

67 
memˇched_°
* 
memc

	`memˇched_¸óã
(
NULL
);

68 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

70 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

71 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

72 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

73 (
uöt64_t
Ë
›t_bö¨y
);

75 i‡(
›t_u£∫ame
 
™d
 
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

77 
	`memˇched_‰ì
(
memc
);

78 
°d
::
˚º
 << "--u£∫amêwa†suµlõd, buàbö¨y wa†nŸ buûàwôh SASL suµ‹t." << std::
ídl
;

79  
EXIT_FAILURE
;

82 i‡(
›t_u£∫ame
)

84 
memˇched_ªtu∫_t
 
ªt
;

85 i‡(
	`memˇched_Áûed
(
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
)))

87 
°d
::
˚º
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

88 
	`memˇched_‰ì
(
memc
);

89  
EXIT_FAILURE
;

93 
ªtu∫_code

EXIT_SUCCESS
;

95 
›töd
 < 
¨gc
)

97 
memˇched_ªtu∫_t
 
rc

	`memˇched_dñëe
(
memc
, 
¨gv
[
›töd
], 
	`°æí
◊rgv[›töd]), 
›t_expúe
);

99 i‡(
rc
 =
MEMCACHED_NOTFOUND
)

101 i‡(
›t_vîbo£
)

103 
°d
::
˚º
 << "CouldÇŸ föd key \"" << 
¨gv
[
›töd
] << "\"" << std::
ídl
;

106 i‡(
	`memˇched_Áèl
(
rc
))

108 i‡(
›t_vîbo£
)

110 
°d
::
˚º
 << "FaûedÅÿdñëêkey \"" << 
¨gv
[
›töd
] << "\" :" << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

113 
ªtu∫_code

EXIT_FAILURE
;

117 i‡(
›t_vîbo£
)

119 
°d
::
cout
 << "Dñëed key " << 
¨gv
[
›töd
];

120 i‡(
›t_expúe
)

122 
°d
::
cout
 << "Éxpúes: " << 
›t_expúe
 << std::
ídl
;

124 
°d
::
cout
 << std::
ídl
;

128 
›töd
++;

131 
	`memˇched_‰ì
(
memc
);

133 i‡(
›t_£rvîs
)

135 
	`‰ì
(
›t_£rvîs
);

138 i‡(
›t_hash
)

140 
	`‰ì
(
›t_hash
);

143  
ªtu∫_code
;

144 
	}
}

147 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

149 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

154 
›ti⁄
 
l⁄g_›ti⁄s
[]=

156 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

157 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

158 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

159 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

160 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

161 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

162 {(
OPTIONSTRING
)"expúe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_EXPIRE
},

163 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

164 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

165 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

166 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

170 
boﬁ
 
›t_vîsi⁄

Ál£
;

171 
boﬁ
 
›t_hñp

Ál£
;

172 
›ti⁄_ödex
= 0;

176 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

177 i‡(
›ti⁄_rv
 == -1)

182 
›ti⁄_rv
)

187 
OPT_BINARY
:

188 
›t_bö¨y
 = 1;

191 
OPT_VERBOSE
:

192 
›t_vîbo£
 = 
OPT_VERBOSE
;

195 
OPT_DEBUG
:

196 
›t_vîbo£
 = 
OPT_DEBUG
;

199 
OPT_VERSION
:

200 
›t_vîsi⁄

åue
;

203 
OPT_HELP
:

204 
›t_hñp

åue
;

207 
OPT_SERVERS
:

208 
›t_£rvîs

	`°rdup
(
›èrg
);

211 
OPT_EXPIRE
:

212 
î∫o
= 0;

213 
›t_expúe
(
time_t
)
	`°πﬁl
(
›èrg
, (**)
NULL
, 10);

214 i‡(
î∫o
 != 0)

216 
°d
::
˚º
 << "Inc‹ª˘ vÆuê∑s£dÅÿ--expúe: `" << 
›èrg
 << "`" << std::cerr;

217 
	`exô
(
EXIT_FAILURE
);

221 
OPT_HASH
:

222 
›t_hash

	`°rdup
(
›èrg
);

225 
OPT_USERNAME
:

226 
›t_u£∫ame

›èrg
;

229 
OPT_PASSWD
:

230 
›t_∑sswd

›èrg
;

233 
OPT_QUIET
:

234 
	`˛o£_°dio
();

239 
	`exô
(
EXIT_SUCCESS
);

242 
	`ab‹t
();

246 i‡(
›t_vîsi⁄
)

248 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

249 
	`exô
(
EXIT_SUCCESS
);

252 i‡(
›t_hñp
)

254 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

255 
	`exô
(
EXIT_SUCCESS
);

257 
	}
}

	@clients/memslap.cc

39 
	~<mem_c⁄fig.h
>

41 
	~<ˇs£π
>

42 
	~<˚ºno
>

43 
	~<c°dio
>

44 
	~<c°dlib
>

45 
	~<c°rög
>

46 
	~<f˙é.h
>

47 
	~<gë›t.h
>

48 
	~<mem‹y
>

49 
	~<±hªad.h
>

50 
	~<sys/mm™.h
>

51 
	~<sys/°©.h
>

52 
	~<sys/time.h
>

53 
	~<sys/ty≥s.h
>

54 
	~<uni°d.h
>

56 
	~<io°ªam
>

58 
	~<libmemˇched-1.0/memˇched.h
>

60 
	~"˛õ¡_›ti⁄s.h
"

61 
	~"utûôõs.h
"

62 
	~"gíî©‹.h
"

63 
	~"execuã.h
"

65 
	#DEFAULT_INITIAL_LOAD
 10000

	)

66 
	#DEFAULT_EXECUTE_NUMBER
 10000

	)

67 
	#DEFAULT_CONCURRENCY
 1

	)

69 
	#PROGRAM_NAME
 "mem¶≠"

	)

70 
	#PROGRAM_DESCRIPTION
 "Gíî©e†®lﬂdágaö°á memˇched cu°î o‡£rvîs."

	)

73 vﬁ©ûê
	gma°î_wakeup
;

74 
±hªad_muãx_t
 
	g¶ì≥r_muãx
;

75 
±hªad_c⁄d_t
 
	g¶ìp_thªshhﬁd
;

78 
	eã°_t
 {

79 
	mSET_TEST
,

80 
	mGET_TEST
,

81 
	mMGET_TEST


84 
	sthªad_c⁄ãxt_°
 {

85 
	mkey_cou¡
;

86 
∑ús_°
 *
	möôül_∑ús
;

87 
	möôül_numbî
;

88 
∑ús_°
 *
	mexecuã_∑ús
;

89 
	mexecuã_numbî
;

90 **
	mkeys
;

91 
size_t
 *
	mkey_Àngths
;

92 
ã°_t
 
	mã°
;

93 
memˇched_°
 *
	mmemc
;

94 c⁄° 
memˇched_°
* 
	mroŸ
;

96 
thªad_c⁄ãxt_°
(c⁄° 
memˇched_°
* 
memc_¨g
, 
ã°_t
 
ã°_¨g
) :

97 
key_cou¡
(0),

98 
öôül_∑ús
(
NULL
),

99 
öôül_numbî
(0),

100 
execuã_∑ús
(
NULL
),

101 
execuã_numbî
(0),

102 
keys
(0),

103 
key_Àngths
(
NULL
),

104 
ã°
(
ã°_¨g
),

105 
memc
(
NULL
),

106 
roŸ
(
memc_¨g
)

110 
öô
()

112 
	mmemc

memˇched_˛⁄e
(
NULL
, 
roŸ
);

115 ~
thªad_c⁄ãxt_°
()

117 i‡(
	mexecuã_∑ús
)

119 
∑ús_‰ì
(
execuã_∑ús
);

121 
memˇched_‰ì
(
memc
);

125 
	sc⁄˛usi⁄s_°
 {

126 
	mlﬂd_time
;

127 
	mªad_time
;

128 
	mrows_lﬂded
;

129 
	mrows_ªad
;

131 
c⁄˛usi⁄s_°
() :

132 
lﬂd_time
(0),

133 
ªad_time
(0),

134 
rows_lﬂded
(0),

135 
rows_ªad
()

140 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

141 
c⁄˛usi⁄s_¥öt
(
c⁄˛usi⁄s_°
 *
c⁄˛usi⁄
);

142 
scheduÀr
(
memˇched_£rvî_°
 *
£rvîs
, 
c⁄˛usi⁄s_°
 *
c⁄˛usi⁄
);

143 
∑ús_°
 *
lﬂd_¸óã_d©a
(
memˇched_°
 *
memc
, 
numbî_of
,

144 *
a˘uÆ_lﬂded
);

145 
Êush_Æl
(
memˇched_°
 *
memc
);

147 
boﬁ
 
	g›t_bö¨y
= 0;

148 
	g›t_vîbo£
= 0;

149 
	g›t_Êush
= 0;

150 
	g›t_n⁄_blockög_io
= 0;

151 
	g›t_t˝_nodñay
= 0;

152 
	g›t_execuã_numbî
= 0;

153 
	g›t_¸óãül_lﬂd
= 0;

154 
	g›t_c⁄cuºícy
= 0;

155 
	g›t_di•œyÊag
= 0;

156 *
	g›t_£rvîs

NULL
;

157 
boﬁ
 
	g›t_udp_io

Ál£
;

158 
ã°_t
 
	g›t_ã°

SET_TEST
;

162 
__©åibuã__
((
n‹ëu∫
)Ë*
run_èsk
(*
p
)

164 
thªad_c⁄ãxt_°
 *
c⁄ãxt
—hªad_c⁄ãxt_° *)
p
;

166 
c⁄ãxt
->
öô
();

168 
±hªad_muãx_lock
(&
¶ì≥r_muãx
);

169 
ma°î_wakeup
)

171 
±hªad_c⁄d_waô
(&
¶ìp_thªshhﬁd
, &
¶ì≥r_muãx
);

173 
±hªad_muãx_u∆ock
(&
¶ì≥r_muãx
);

176 
c⁄ãxt
->
ã°
)

178 
SET_TEST
:

179 
as£π
(
c⁄ãxt
->
execuã_∑ús
);

180 
execuã_£t
(
c⁄ãxt
->
memc
, c⁄ãxt->
execuã_∑ús
, c⁄ãxt->
execuã_numbî
);

183 
GET_TEST
:

184 
execuã_gë
(
c⁄ãxt
->
memc
, c⁄ãxt->
öôül_∑ús
, c⁄ãxt->
öôül_numbî
);

187 
MGET_TEST
:

188 
execuã_mgë
(
c⁄ãxt
->
memc
, (c⁄° *c⁄°*)c⁄ãxt->
keys
, c⁄ãxt->
key_Àngths
, c⁄ãxt->
öôül_numbî
);

192 
dñëe
 
c⁄ãxt
;

194 
±hªad_exô
(0);

200 
	$maö
(
¨gc
, *
¨gv
[])

202 
c⁄˛usi⁄s_°
 
c⁄˛usi⁄
;

204 
	`§™dom
(()
	`time
(
NULL
));

205 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

207 i‡(
›t_£rvîs
 =
NULL
)

209 *
ãmp
;

211 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

213 
›t_£rvîs

	`°rdup
(
ãmp
);

216 i‡(
›t_£rvîs
 =
NULL
)

218 
°d
::
˚º
 << "NÿSîvî†¥ovided" << std::
ídl
;

219 
	`exô
(
EXIT_FAILURE
);

223 
memˇched_£rvî_°
 *
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

224 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

226 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

227  
EXIT_FAILURE
;

230 
	`±hªad_muãx_öô
(&
¶ì≥r_muãx
, 
NULL
);

231 
	`±hªad_c⁄d_öô
(&
¶ìp_thªshhﬁd
, 
NULL
);

233 
îr‹_code

EXIT_SUCCESS
;

234 
åy
 {

235 
	`scheduÀr
(
£rvîs
, &
c⁄˛usi⁄
);

237 
	`ˇtch
(
°d
::
ex˚±i⁄
& 
e
)

239 
°d
::
˚º
 << "Dõd wôhÉx˚±i⁄: " << 
e
.
	`wh©
(Ë<< std::
ídl
;

240 
îr‹_code

EXIT_FAILURE
;

243 
	`‰ì
(
›t_£rvîs
);

245 ()
	`±hªad_muãx_de°roy
(&
¶ì≥r_muãx
);

246 ()
	`±hªad_c⁄d_de°roy
(&
¶ìp_thªshhﬁd
);

247 
	`c⁄˛usi⁄s_¥öt
(&
c⁄˛usi⁄
);

248 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

250  
îr‹_code
;

251 
	}
}

253 
	$scheduÀr
(
memˇched_£rvî_°
 *
£rvîs
, 
c⁄˛usi⁄s_°
 *
c⁄˛usi⁄
)

255 
a˘uÆ_lﬂded
= 0;

257 
timevÆ
 
°¨t_time
, 
íd_time
;

258 
∑ús_°
 *
∑ús

NULL
;

260 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

262 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

265 i‡(
›t_udp_io
)

267 i‡(
	`memˇched_Áûed
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
, 
›t_udp_io
)))

269 
°d
::
˚º
 << "FaûedÅÿíabÀ UDP." << std::
ídl
;

270 
	`memˇched_‰ì
(
memc
);

271 
	`exô
(
EXIT_FAILURE
);

275 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

276 (
uöt64_t
)
›t_bö¨y
);

278 i‡(
›t_Êush
)

280 
	`Êush_Æl
(
memc
);

283 i‡(
›t_¸óãül_lﬂd
)

285 
∑ús

	`lﬂd_¸óã_d©a
(
memc
, 
›t_¸óãül_lﬂd
, &
a˘uÆ_lﬂded
);

288 **
keys

°©ic_ˇ°
<**>(
	`ˇŒoc
(
a˘uÆ_lﬂded
, (*)));

289 
size_t
 *
key_Àngths

°©ic_ˇ°
<size_à*>(
	`ˇŒoc
(
a˘uÆ_lﬂded
, (size_t)));

291 i‡(
keys
 =
NULL
 
‹
 
key_Àngths
 == NULL)

293 
	`‰ì
(
keys
);

294 
	`‰ì
(
key_Àngths
);

295 
keys

NULL
;

296 
key_Àngths

NULL
;

300 
uöt32_t
 
x
0; x < 
a˘uÆ_lﬂded
; ++x)

302 
keys
[
x
]
∑ús
[x].
key
;

303 
key_Àngths
[
x
]
∑ús
[x].
key_Àngth
;

309 i‡(
›t_n⁄_blockög_io
)

310 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 1);

312 i‡(
›t_t˝_nodñay
)

313 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 1);

316 
	`±hªad_muãx_lock
(&
¶ì≥r_muãx
);

317 
ma°î_wakeup
= 1;

318 
	`±hªad_muãx_u∆ock
(&
¶ì≥r_muãx
);

320 
±hªad_t
 *
thªads

	`√w
 (
°d
::
nŸhrow
Ë±hªad_t[
›t_c⁄cuºícy
];

322 i‡(
thªads
 =
NULL
)

324 
	`exô
(
EXIT_FAILURE
);

327 
uöt32_t
 
x
0; x < 
›t_c⁄cuºícy
; x++)

329 
thªad_c⁄ãxt_°
 *
c⁄ãxt

√w
 
	`thªad_c⁄ãxt_°
(
memc
, 
›t_ã°
);

330 
c⁄ãxt
->
ã°

›t_ã°
;

332 
c⁄ãxt
->
öôül_∑ús

∑ús
;

333 
c⁄ãxt
->
öôül_numbî

a˘uÆ_lﬂded
;

334 
c⁄ãxt
->
keys
= keys;

335 
c⁄ãxt
->
key_Àngths
= key_lengths;

337 i‡(
›t_ã°
 =
SET_TEST
)

339 
c⁄ãxt
->
execuã_∑ús

	`∑ús_gíî©e
(
›t_execuã_numbî
, 400);

340 
c⁄ãxt
->
execuã_numbî

›t_execuã_numbî
;

344 i‡(
	`±hªad_¸óã
(
thªads
 +
x
, 
NULL
, 
run_èsk
, (*)
c⁄ãxt
) != 0)

346 
	`Ârötf
(
°dîr
,"CouldÇot createÅhread\n");

347 
	`exô
(1);

351 
	`±hªad_muãx_lock
(&
¶ì≥r_muãx
);

352 
ma°î_wakeup
= 0;

353 
	`±hªad_muãx_u∆ock
(&
¶ì≥r_muãx
);

354 
	`±hªad_c⁄d_brﬂdˇ°
(&
¶ìp_thªshhﬁd
);

355 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

357 
uöt32_t
 
x
0; x < 
›t_c⁄cuºícy
; x++)

359 *
ªtvÆ
;

360 
	`±hªad_joö
(
thªads
[
x
], &
ªtvÆ
);

362 
dñëe
 [] 
thªads
;

364 
	`gëtimeofday
(&
íd_time
, 
NULL
);

366 
c⁄˛usi⁄
->
lﬂd_time

	`timedif
(
íd_time
, 
°¨t_time
);

367 
c⁄˛usi⁄
->
ªad_time

	`timedif
(
íd_time
, 
°¨t_time
);

368 
	`‰ì
(
keys
);

369 
	`‰ì
(
key_Àngths
);

370 
	`∑ús_‰ì
(
∑ús
);

371 
	`memˇched_‰ì
(
memc
);

372 
	}
}

374 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

376 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

381 
›ti⁄
 
l⁄g_›ti⁄s
[]=

383 {(
OPTIONSTRING
)"c⁄cuºícy", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SLAP_CONCURRENCY
},

384 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

385 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

386 {(
OPTIONSTRING
)"execuã-numbî", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SLAP_EXECUTE_NUMBER
},

387 {(
OPTIONSTRING
)"Êag", 
no_¨gumít
, &
›t_di•œyÊag
, 
OPT_FLAG
},

388 {(
OPTIONSTRING
)"Êush", 
no_¨gumít
, &
›t_Êush
, 
OPT_FLUSH
},

389 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

390 {(
OPTIONSTRING
)"öôül-lﬂd", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SLAP_INITIAL_LOAD
},

391 {(
OPTIONSTRING
)"n⁄-blockög", 
no_¨gumít
, &
›t_n⁄_blockög_io
, 
OPT_SLAP_NON_BLOCK
},

392 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

393 {(
OPTIONSTRING
)"t˝-nodñay", 
no_¨gumít
, &
›t_t˝_nodñay
, 
OPT_SLAP_TCP_NODELAY
},

394 {(
OPTIONSTRING
)"ã°", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SLAP_TEST
},

395 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

396 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

397 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

398 {(
OPTIONSTRING
)"udp", 
no_¨gumít
, 
NULL
, 
OPT_UDP
},

402 
boﬁ
 
›t_hñp

Ál£
;

403 
boﬁ
 
›t_vîsi⁄

Ál£
;

404 
›ti⁄_ödex
= 0;

407 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

409 i‡(
›ti⁄_rv
 == -1) ;

411 
›ti⁄_rv
)

416 
OPT_UDP
:

417 i‡(
›t_ã°
 =
GET_TEST
)

419 
	`Ârötf
(
°dîr
, "You canÇotÑuná getÅest in UDP mode. UDP mode "

421 
	`exô
(1);

423 
›t_udp_io

åue
;

426 
OPT_BINARY
:

427 
›t_bö¨y

åue
;

430 
OPT_VERBOSE
:

431 
›t_vîbo£

OPT_VERBOSE
;

434 
OPT_DEBUG
:

435 
›t_vîbo£
 = 
OPT_DEBUG
;

438 
OPT_VERSION
:

439 
›t_vîsi⁄

åue
;

442 
OPT_HELP
:

443 
›t_hñp

åue
;

446 
OPT_SERVERS
:

447 
›t_£rvîs

	`°rdup
(
›èrg
);

450 
OPT_SLAP_TEST
:

451 i‡(
	`°rcmp
(
›èrg
, "get") == 0)

453 i‡(
›t_udp_io
 == 1)

455 
	`Ârötf
(
°dîr
, "You canÇotÑuná getÅest in UDP mode. UDP mode "

457 
	`exô
(
EXIT_FAILURE
);

459 
›t_ã°

GET_TEST
 ;

461 i‡(
	`°rcmp
(
›èrg
, "set") == 0)

463 
›t_ã°

SET_TEST
;

465 i‡(
	`°rcmp
(
›èrg
, "mget") == 0)

467 
›t_ã°

MGET_TEST
;

471 
	`Ârötf
(
°dîr
, "You∏ã°, %s, i†nŸá know¿ã°\n", 
›èrg
);

472 
	`exô
(
EXIT_FAILURE
);

476 
OPT_SLAP_CONCURRENCY
:

477 
î∫o
= 0;

478 
›t_c⁄cuºícy
()
	`°πoul
(
›èrg
, (**)
NULL
, 10);

479 i‡(
î∫o
 != 0)

481 
	`Ârötf
(
°dîr
, "InvÆid vÆuêf‹ c⁄cuºícy: %s\n", 
›èrg
);

482 
	`exô
(
EXIT_FAILURE
);

486 
OPT_SLAP_EXECUTE_NUMBER
:

487 
î∫o
= 0;

488 
›t_execuã_numbî
()
	`°πoul
(
›èrg
, (**)
NULL
, 10);

489 i‡(
î∫o
 != 0)

491 
	`Ârötf
(
°dîr
, "InvÆid vÆuêf‹Éxecuã: %s\n", 
›èrg
);

492 
	`exô
(
EXIT_FAILURE
);

496 
OPT_SLAP_INITIAL_LOAD
:

497 
î∫o
= 0;

498 
›t_¸óãül_lﬂd
()
	`°πoul
(
›èrg
, (**)
NULL
, 10);

499 i‡(
î∫o
 != 0)

501 
	`Ârötf
(
°dîr
, "InvÆid vÆuêf‹ inôü»lﬂd: %s\n", 
›èrg
);

502 
	`exô
(
EXIT_FAILURE
);

506 
OPT_QUIET
:

507 
	`˛o£_°dio
();

513 
	`exô
(
EXIT_FAILURE
);

516 
	`ab‹t
();

520 i‡(
›t_vîsi⁄
)

522 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

523 
	`exô
(
EXIT_SUCCESS
);

526 i‡(
›t_hñp
)

528 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

529 
	`exô
(
EXIT_SUCCESS
);

532 i‡((
›t_ã°
 =
GET_TEST
 
‹
 o±_ã° =
MGET_TEST
Ë
™d
 
›t_¸óãül_lﬂd
 == 0)

533 
›t_¸óãül_lﬂd

DEFAULT_INITIAL_LOAD
;

535 i‡(
›t_execuã_numbî
 == 0)

536 
›t_execuã_numbî

DEFAULT_EXECUTE_NUMBER
;

538 i‡(
›t_c⁄cuºícy
 == 0)

539 
›t_c⁄cuºícy

DEFAULT_CONCURRENCY
;

540 
	}
}

542 
	$c⁄˛usi⁄s_¥öt
(
c⁄˛usi⁄s_°
 *
c⁄˛usi⁄
)

544 
	`¥ötf
("\tThªad†c⁄√˘ögÅÿ£rvî†%u\n", 
›t_c⁄cuºícy
);

545 #ifde‡
NOT_FINISHED


546 
	`¥ötf
("\tLﬂded %uÑows\n", 
c⁄˛usi⁄
->
rows_lﬂded
);

547 
	`¥ötf
("\tRód %uÑows\n", 
c⁄˛usi⁄
->
rows_ªad
);

549 i‡(
›t_ã°
 =
SET_TEST
)

550 
	`¥ötf
("\tTook %ld.%03ld sec⁄d†tÿlﬂd d©a\n", 
c⁄˛usi⁄
->
lﬂd_time
 / 1000,

551 
c⁄˛usi⁄
->
lﬂd_time
 % 1000);

553 
	`¥ötf
("\tTook %ld.%03ld sec⁄d†tÿªad d©a\n", 
c⁄˛usi⁄
->
ªad_time
 / 1000,

554 
c⁄˛usi⁄
->
ªad_time
 % 1000);

555 
	}
}

557 
	$Êush_Æl
(
memˇched_°
 *
memc
)

559 
	`memˇched_Êush
(
memc
, 0);

560 
	}
}

562 
∑ús_°
 *
	$lﬂd_¸óã_d©a
(
memˇched_°
 *
memc
, 
numbî_of
,

563 *
a˘uÆ_lﬂded
)

565 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

567 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

569 
∑ús_°
 *
∑ús

	`∑ús_gíî©e
(
numbî_of
, 400);

570 *
a˘uÆ_lﬂded

	`execuã_£t
(
memc_˛⁄e
, 
∑ús
, 
numbî_of
);

572 
	`memˇched_‰ì
(
memc_˛⁄e
);

574  
∑ús
;

575 
	}
}

	@clients/memstat.cc

15 
	~<mem_c⁄fig.h
>

17 
	~<c°dio
>

18 
	~<c°rög
>

19 
	~<˘ime
>

20 
	~<io°ªam
>

21 
	~<f˙é.h
>

22 
	~<gë›t.h
>

23 
	~<uni°d.h
>

24 
	~<sys/°©.h
>

25 
	~<sys/time.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/ty≥s.h
>

29 
	~<libmemˇched-1.0/memˇched.h
>

31 
	~"˛õ¡_›ti⁄s.h
"

32 
	~"utûôõs.h
"

34 
	#PROGRAM_NAME
 "mem°©"

	)

35 
	#PROGRAM_DESCRIPTION
 "Ouçuàthê°©êo‡®memˇched clu°î."

	)

38 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

39 
run_™Æyzî
(
memˇched_°
 *
memc
, 
memˇched_°©_°
 *
memc_°©
);

40 
¥öt_™Æysis_ªp‹t
(
memˇched_°
 *
memc
,

41 
memˇched_™Æysis_°
 *
ªp‹t
);

43 
boﬁ
 
	g›t_bö¨y

Ál£
;

44 
boﬁ
 
	g›t_vîbo£

Ál£
;

45 
boﬁ
 
	g›t_£rvî_vîsi⁄

Ál£
;

46 
boﬁ
 
	g›t_™Æyze

Ál£
;

47 *
	g›t_£rvîs

NULL
;

48 *
	g°©_¨gs

NULL
;

49 *
	g™Æyze_mode

NULL
;

50 *
	g›t_u£∫ame
;

51 *
	g›t_∑sswd
;

53 
›ti⁄
 
	gl⁄g_›ti⁄s
[]=

55 {(
OPTIONSTRING
)"¨gs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_STAT_ARGS
},

56 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

57 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

58 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

59 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, 
NULL
, 
OPT_VERBOSE
},

60 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

61 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, 
NULL
, 
OPT_DEBUG
},

62 {(
OPTIONSTRING
)"£rvî-vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_SERVER_VERSION
},

63 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

64 {(
OPTIONSTRING
)"™Æyze", 
›ti⁄Æ_¨gumít
, 
NULL
, 
OPT_ANALYZE
},

65 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

66 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

71 
memˇched_ªtu∫_t
 
	$°©_¥öãr
(c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
,

72 c⁄° *
key
, 
size_t
 
key_Àngth
,

73 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

74 *
c⁄ãxt
)

76 c⁄° 
memˇched_ö°™˚_°
 * 
œ°

NULL
;

77 ()
c⁄ãxt
;

79 i‡(
œ°
 !
ö°™˚
)

81 
	`¥ötf
("Sîvî: %†(%u)\n", 
	`memˇched_£rvî_«me
(
ö°™˚
),

82 (
uöt32_t
)
	`memˇched_£rvî_p‹t
(
ö°™˚
));

83 
œ°

ö°™˚
;

86 
	`¥ötf
("\à%.*s: %.*s\n", ()
key_Àngth
, 
key
, ()
vÆue_Àngth
, 
vÆue
);

88  
MEMCACHED_SUCCESS
;

89 
	}
}

91 
memˇched_ªtu∫_t
 
	$£rvî_¥öt_ˇŒback
(c⁄° 
memˇched_°
 *,

92 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
,

95 
°d
::
˚º
 << 
	`memˇched_£rvî_«me
(
ö°™˚
Ë<< ":" << 
	`memˇched_£rvî_p‹t
(instance) <<

96 " " << (
	`memˇched_£rvî_maj‹_vîsi⁄
(
ö°™˚
)) <<

97 "." << (
	`memˇched_£rvî_mö‹_vîsi⁄
(
ö°™˚
)) <<

98 "." << (
	`memˇched_£rvî_mi¸o_vîsi⁄
(
ö°™˚
)Ë<< 
°d
::
ídl
;

100  
MEMCACHED_SUCCESS
;

101 
	}
}

103 
	$maö
(
¨gc
, *
¨gv
[])

105 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

106 
	`öôülize_sockës
();

108 i‡(
›t_£rvîs
 =
NULL
)

110 *
ãmp
;

111 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

113 
›t_£rvîs

	`°rdup
(
ãmp
);

116 i‡(
›t_£rvîs
 =
NULL
)

118 
°d
::
˚º
 << "NÿSîvî†¥ovided" << std::
ídl
;

119  
EXIT_FAILURE
;

123 
memˇched_£rvî_°
* 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

124 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

126 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

127  
EXIT_FAILURE
;

130 i‡(
›t_£rvîs
)

132 
	`‰ì
(
›t_£rvîs
);

135 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

136 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 
›t_bö¨y
);

138 
memˇched_ªtu∫_t
 
rc

	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

139 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

141 i‡(
›t_u£∫ame
 
™d
 
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

143 
	`memˇched_‰ì
(
memc
);

144 
°d
::
˚º
 << "--u£∫amêwa†suµlõd, buàbö¨y wa†nŸ buûàwôh SASL suµ‹t." << std::
ídl
;

145  
EXIT_FAILURE
;

148 i‡(
›t_u£∫ame
)

150 
memˇched_ªtu∫_t
 
ªt
;

151 i‡(
	`memˇched_Áûed
(
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
)))

153 
°d
::
˚º
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

154 
	`memˇched_‰ì
(
memc
);

155  
EXIT_FAILURE
;

159 i‡(
rc
 !
MEMCACHED_SUCCESS
 
™d
Ñ¯!
MEMCACHED_SOME_ERRORS
)

161 
	`¥ötf
("FailureÅo communicate with servers (%s)\n",

162 
	`memˇched_°ªº‹
(
memc
, 
rc
));

163 
	`exô
(
EXIT_FAILURE
);

166 i‡(
›t_£rvî_vîsi⁄
)

168 i‡(
	`memˇched_Áûed
(
	`memˇched_vîsi⁄
(
memc
)))

170 
°d
::
˚º
 << "UnableÅo obtain server version";

171 
	`exô
(
EXIT_FAILURE
);

174 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

175 
ˇŒbacks
[0]
£rvî_¥öt_ˇŒback
;

176 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, 
NULL
, 1);

178 i‡(
›t_™Æyze
)

180 
memˇched_°©_°
 *
memc_°©

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

182 i‡(
memc_°©
 =
NULL
)

184 
	`exô
(
EXIT_FAILURE
);

187 
	`run_™Æyzî
(
memc
, 
memc_°©
);

189 
	`memˇched_°©_‰ì
(
memc
, 
memc_°©
);

193 
rc

	`memˇched_°©_execuã
(
memc
, 
°©_¨gs
, 
°©_¥öãr
, 
NULL
);

196 
	`memˇched_‰ì
(
memc
);

198  
rc
 =
MEMCACHED_SUCCESS
 ? 
EXIT_SUCCESS
: 
EXIT_FAILURE
;

199 
	}
}

201 
	$run_™Æyzî
(
memˇched_°
 *
memc
, 
memˇched_°©_°
 *
memc_°©
)

203 
memˇched_ªtu∫_t
 
rc
;

205 i‡(
™Æyze_mode
 =
NULL
)

207 
memˇched_™Æysis_°
 *
ªp‹t
;

208 
ªp‹t

	`memˇched_™Æyze
(
memc
, 
memc_°©
, &
rc
);

209 i‡(
rc
 !
MEMCACHED_SUCCESS
 || 
ªp‹t
 =
NULL
)

211 
	`¥ötf
("FailureÅoánalyze servers (%s)\n",

212 
	`memˇched_°ªº‹
(
memc
, 
rc
));

213 
	`exô
(1);

215 
	`¥öt_™Æysis_ªp‹t
(
memc
, 
ªp‹t
);

216 
	`‰ì
(
ªp‹t
);

218 i‡(
	`°rcmp
(
™Æyze_mode
, "latency") == 0)

220 
uöt32_t
 
Êags
, 
£rvî_cou¡

	`memˇched_£rvî_cou¡
(
memc
);

221 
uöt32_t
 
num_of_ã°s
= 32;

222 c⁄° *
ã°_key
= "libmemcached_test_key";

224 
memˇched_°
 **
£rvîs

°©ic_ˇ°
<memˇched_°**>(
	`mÆloc
((memˇched_°*Ë* 
£rvî_cou¡
));

225 i‡(
£rvîs
 =
NULL
)

227 
	`Ârötf
(
°dîr
, "FailedÅoállocate memory\n");

231 
uöt32_t
 
x
0; x < 
£rvî_cou¡
; x++)

233 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

234 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

236 i‡((
£rvîs
[
x
]
	`memˇched_¸óã
(
NULL
)) == NULL)

238 
	`Ârötf
(
°dîr
, "FailedÅo memcached_create()\n");

239 i‡(
x
 > 0)

241 
	`memˇched_‰ì
(
£rvîs
[0]);

243 
x
--;

245 ; 
x
 > 0; x--)

247 
	`memˇched_‰ì
(
£rvîs
[
x
]);

250 
	`‰ì
(
£rvîs
);

254 
	`memˇched_£rvî_add
(
£rvîs
[
x
],

255 
	`memˇched_£rvî_«me
(
ö°™˚
),

256 
	`memˇched_£rvî_p‹t
(
ö°™˚
));

259 
	`¥ötf
("Network Latency Test:\n\n");

260 
timevÆ
 
°¨t_time
, 
íd_time
;

261 
uöt32_t
 
¶owe°_£rvî
= 0;

262 
ñ≠£d_time
, 
¶owe°_time
= 0;

264 
uöt32_t
 
x
0; x < 
£rvî_cou¡
; x++)

266 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

267 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

268 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

270 
uöt32_t
 
y
0; y < 
num_of_ã°s
; y++)

272 
size_t
 
vÀn
;

273 *
vÆ

	`memˇched_gë
(
£rvîs
[
x
], 
ã°_key
, 
	`°æí
(test_key),

274 &
vÀn
, &
Êags
, &
rc
);

275 i‡(
rc
 !
MEMCACHED_NOTFOUND
 
™d
Ñ¯!
MEMCACHED_SUCCESS
)

279 
	`‰ì
(
vÆ
);

281 
	`gëtimeofday
(&
íd_time
, 
NULL
);

283 
ñ≠£d_time
(Ë
	`timedif
(
íd_time
, 
°¨t_time
);

284 
ñ≠£d_time
 /(Ë
num_of_ã°s
;

286 i‡(
ñ≠£d_time
 > 
¶owe°_time
)

288 
¶owe°_£rvî

x
;

289 
¶owe°_time

ñ≠£d_time
;

292 i‡(
rc
 !
MEMCACHED_NOTFOUND
 &&Ñ¯!
MEMCACHED_SUCCESS
)

294 
	`¥ötf
("\t %s (%d) => failedÅoÑeachÅhe server\n",

295 
	`memˇched_£rvî_«me
(
ö°™˚
),

296 
	`memˇched_£rvî_p‹t
(
ö°™˚
));

300 
	`¥ötf
("\t %s (%d) => %ld.%ld seconds\n",

301 
	`memˇched_£rvî_«me
(
ö°™˚
),

302 
	`memˇched_£rvî_p‹t
(
ö°™˚
),

303 
ñ≠£d_time
 / 1000,Élapsed_time % 1000);

307 i‡(
£rvî_cou¡
 > 1 && 
¶owe°_time
 > 0)

309 c⁄° 
memˇched_ö°™˚_°
 * 
¶owe°
=

310 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
¶owe°_£rvî
);

312 
	`¥ötf
("---\n");

313 
	`¥ötf
("Slowest Server: %s (%d) => %ld.%ld seconds\n",

314 
	`memˇched_£rvî_«me
(
¶owe°
),

315 
	`memˇched_£rvî_p‹t
(
¶owe°
),

316 
¶owe°_time
 / 1000, slowest_time % 1000);

318 
	`¥ötf
("\n");

320 
uöt32_t
 
x
0; x < 
£rvî_cou¡
; x++)

322 
	`memˇched_‰ì
(
£rvîs
[
x
]);

325 
	`‰ì
(
£rvîs
);

326 
	`‰ì
(
™Æyze_mode
);

330 
	`Ârötf
(
°dîr
, "Invalid Analyzer OptionÖrovided\n");

331 
	`‰ì
(
™Æyze_mode
);

333 
	}
}

335 
	$¥öt_™Æysis_ªp‹t
(
memˇched_°
 *
memc
,

336 
memˇched_™Æysis_°
 *
ªp‹t
)

339 
uöt32_t
 
£rvî_cou¡

	`memˇched_£rvî_cou¡
(
memc
);

340 c⁄° 
memˇched_ö°™˚_°
 * 
mo°_c⁄sumed_£rvî

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ªp‹t
->most_consumed_server);

341 c⁄° 
memˇched_ö°™˚_°
 * 
Àa°_‰ì_£rvî

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ªp‹t
->least_free_server);

342 c⁄° 
memˇched_ö°™˚_°
 * 
ﬁde°_£rvî

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ªp‹t
->oldest_server);

344 
	`¥ötf
("Memcached Cluster Analysis Report\n\n");

346 
	`¥ötf
("\tNumbî o‡Sîvî†A«lyzed : %u\n", 
£rvî_cou¡
);

347 
	`¥ötf
("\tAverage Item Size (incl/overhead) : %u bytes\n",

348 
ªp‹t
->
avîage_ôem_size
);

350 i‡(
£rvî_cou¡
 == 1)

352 
	`¥ötf
("\nForá detailedÑeport, you must supply multiple servers.\n");

356 
	`¥ötf
("\n");

357 
	`¥ötf
("\tNode with most memory consumption : %s:%u (%llu bytes)\n",

358 
	`memˇched_£rvî_«me
(
mo°_c⁄sumed_£rvî
),

359 (
uöt32_t
)
	`memˇched_£rvî_p‹t
(
mo°_c⁄sumed_£rvî
),

360 ()
ªp‹t
->
mo°_u£d_byãs
);

361 
	`¥ötf
("\tNode withÜeast free space : %s:%u (%llu bytesÑemaining)\n",

362 
	`memˇched_£rvî_«me
(
Àa°_‰ì_£rvî
),

363 (
uöt32_t
)
	`memˇched_£rvî_p‹t
(
Àa°_‰ì_£rvî
),

364 ()
ªp‹t
->
Àa°_ªmaöög_byãs
);

365 
	`¥ötf
("\tNode withÜongest uptime : %s:%u (%us)\n",

366 
	`memˇched_£rvî_«me
(
ﬁde°_£rvî
),

367 (
uöt32_t
)
	`memˇched_£rvî_p‹t
(
ﬁde°_£rvî
),

368 
ªp‹t
->
l⁄ge°_u±ime
);

369 
	`¥ötf
("\tPoﬁ-widêHô R©iÿ : %1.f%%\n", 
ªp‹t
->
poﬁ_hô_øtio
);

370 
	`¥ötf
("\n");

371 
	}
}

373 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

375 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

380 
›ti⁄_ödex
= 0;

382 
boﬁ
 
›t_vîsi⁄

Ál£
;

383 
boﬁ
 
›t_hñp

Ál£
;

386 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:a", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

388 i‡(
›ti⁄_rv
 == -1)

391 
›ti⁄_rv
)

396 
OPT_VERBOSE
:

397 
›t_vîbo£

åue
;

400 
OPT_DEBUG
:

401 
›t_vîbo£

åue
;

404 
OPT_BINARY
:

405 
›t_bö¨y

åue
;

408 
OPT_SERVER_VERSION
:

409 
›t_£rvî_vîsi⁄

åue
;

412 
OPT_VERSION
:

413 
›t_vîsi⁄

åue
;

416 
OPT_HELP
:

417 
›t_hñp

åue
;

420 
OPT_SERVERS
:

421 
›t_£rvîs

	`°rdup
(
›èrg
);

424 
OPT_STAT_ARGS
:

425 
°©_¨gs

	`°rdup
(
›èrg
);

428 
OPT_ANALYZE
:

429 
›t_™Æyze

OPT_ANALYZE
;

430 
™Æyze_mode
(
›èrg
Ë? 
	`°rdup
(›èrgË: 
NULL
;

433 
OPT_QUIET
:

434 
	`˛o£_°dio
();

437 
OPT_USERNAME
:

438 
›t_u£∫ame

›èrg
;

439 
›t_bö¨y

åue
;

442 
OPT_PASSWD
:

443 
›t_∑sswd

›èrg
;

448 
	`exô
(1);

450 
	`ab‹t
();

454 i‡(
›t_vîsi⁄
)

456 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

457 
	`exô
(
EXIT_SUCCESS
);

460 i‡(
›t_hñp
)

462 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

463 
	`exô
(
EXIT_SUCCESS
);

465 
	}
}

	@clients/memtouch.cc

13 
	~<mem_c⁄fig.h
>

15 
	~<˚ºno
>

16 
	~<c°dio
>

17 
	~<c°rög
>

18 
	~<gë›t.h
>

19 
	~<io°ªam
>

20 
	~<uni°d.h
>

22 
	~<libmemˇched-1.0/memˇched.h
>

24 
	~"utûôõs.h
"

26 
	#PROGRAM_NAME
 "memtouch"

	)

27 
	#PROGRAM_DESCRIPTION
 "Upd©êthêexpú©i⁄ vÆuêo‡™áÃósyÉxi°ög vÆuêöÅhê£vî"

	)

31 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

33 
	g›t_bö¨y
= 0;

34 
	g›t_vîbo£
= 0;

35 *
	g›t_£rvîs

NULL
;

36 *
	g›t_hash

NULL
;

37 *
	g›t_u£∫ame
;

38 *
	g›t_∑sswd
;

40 
time_t
 
	gexpú©i⁄
= 0;

42 
	$maö
(
¨gc
, *
¨gv
[])

44 
ªtu∫_code

EXIT_SUCCESS
;

46 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

47 
	`öôülize_sockës
();

49 i‡(
›t_£rvîs
 =
NULL
)

51 *
ãmp
;

53 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

55 
›t_£rvîs

	`°rdup
(
ãmp
);

58 i‡(
›t_£rvîs
 =
NULL
)

60 
°d
::
˚º
 << "NÿSîvî†¥ovided" << std::
ídl
;

61 
	`exô
(
EXIT_FAILURE
);

65 
memˇched_£rvî_°
* 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

66 i‡(
£rvîs
 =
NULL
 
‹
 
	`memˇched_£rvî_li°_cou¡
(servers) == 0)

68 
°d
::
˚º
 << "InvÆid sîvîÜi°Örovided:" << 
›t_£rvîs
 << std::
ídl
;

69  
EXIT_FAILURE
;

72 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

73 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

75 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

76 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

77 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

78 (
uöt64_t
)
›t_bö¨y
);

80 i‡(
›t_u£∫ame
 
™d
 
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

82 
	`memˇched_‰ì
(
memc
);

83 
°d
::
˚º
 << "--u£∫amêwa†suµlõd, buàbö¨y wa†nŸ buûàwôh SASL suµ‹t." << std::
ídl
;

84  
EXIT_FAILURE
;

87 i‡(
›t_u£∫ame
)

89 
memˇched_ªtu∫_t
 
ªt
;

90 i‡(
	`memˇched_Áûed
(
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
)))

92 
°d
::
˚º
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

93 
	`memˇched_‰ì
(
memc
);

94  
EXIT_FAILURE
;

98 
›töd
 < 
¨gc
)

100 
memˇched_ªtu∫_t
 
rc

	`memˇched_touch
(
memc
, 
¨gv
[
›töd
], 
	`°æí
◊rgv[›töd]), 
expú©i⁄
);

101 i‡(
rc
 =
MEMCACHED_NOTFOUND
)

103 i‡(
›t_vîbo£
)

105 
°d
::
cout
 << "CouldÇŸ föd key \"" << 
¨gv
[
›töd
] << "\"" << std::
ídl
;

108 
ªtu∫_code

EXIT_FAILURE
;

110 i‡(
	`memˇched_Áûed
(
rc
))

112 i‡(
›t_vîbo£
)

114 
°d
::
˚º
 << "F©ÆÉº‹ f‹ key \"" << 
¨gv
[
›töd
] << "\" :" << 
	`memˇched_œ°_îr‹_mesßge
(
memc
Ë<< std::
ídl
;

117 
ªtu∫_code

EXIT_FAILURE
;

121 i‡(
›t_vîbo£
)

123 
°d
::
cout
 << "Found key " << 
¨gv
[
›töd
] << std::
ídl
;

127 
›töd
++;

130 
	`memˇched_‰ì
(
memc
);

132 i‡(
›t_£rvîs
)

134 
	`‰ì
(
›t_£rvîs
);

137 i‡(
›t_hash
)

139 
	`‰ì
(
›t_hash
);

142  
ªtu∫_code
;

143 
	}
}

146 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

148 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

153 
›ti⁄
 
l⁄g_›ti⁄s
[]=

155 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

156 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

157 {(
OPTIONSTRING
)"quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

158 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

159 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

160 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

161 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

162 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

163 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

164 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

165 {(
OPTIONSTRING
)"expúe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_EXPIRE
},

169 
boﬁ
 
›t_vîsi⁄

Ál£
;

170 
boﬁ
 
›t_hñp

Ál£
;

171 
›ti⁄_ödex
= 0;

175 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

176 i‡(
›ti⁄_rv
 == -1)

181 
›ti⁄_rv
)

186 
OPT_BINARY
:

187 
›t_bö¨y
 = 
åue
;

190 
OPT_VERBOSE
:

191 
›t_vîbo£
 = 
OPT_VERBOSE
;

194 
OPT_DEBUG
:

195 
›t_vîbo£
 = 
OPT_DEBUG
;

198 
OPT_VERSION
:

199 
›t_vîsi⁄

åue
;

202 
OPT_HELP
:

203 
›t_hñp

åue
;

206 
OPT_SERVERS
:

207 
›t_£rvîs

	`°rdup
(
›èrg
);

210 
OPT_HASH
:

211 
›t_hash

	`°rdup
(
›èrg
);

214 
OPT_USERNAME
:

215 
›t_u£∫ame

›èrg
;

218 
OPT_PASSWD
:

219 
›t_∑sswd

›èrg
;

222 
OPT_EXPIRE
:

223 
î∫o
= 0;

224 
expú©i⁄

	`time_t
(
	`°πoul
(
›èrg
, (**)
NULL
, 10));

225 i‡(
î∫o
 != 0)

227 
	`Ârötf
(
°dîr
, "InvÆid vÆuêf‹ --expúe: %s\n", 
›èrg
);

228 
	`exô
(
EXIT_FAILURE
);

232 
OPT_QUIET
:

233 
	`˛o£_°dio
();

238 
	`exô
(
EXIT_FAILURE
);

241 
	`ab‹t
();

245 i‡(
›t_vîsi⁄
)

247 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

248 
	`exô
(
EXIT_SUCCESS
);

251 i‡(
›t_hñp
)

253 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

254 
	`exô
(
EXIT_SUCCESS
);

256 
	}
}

	@clients/ms_atomic.h

12 #i‚de‡
CLIENTS_MS_ATOMIC_H


13 
	#CLIENTS_MS_ATOMIC_H


	)

15 #i‡
deföed
(
__SUNPRO_C
)

16 
	#_KERNEL


	)

17 
	~<©omic.h
>

18 #i‡
SIZEOF_SIZE_T
 == 8

19 
	#©omic_add_size
(
X
, 
Y
Ë
	`©omic_add_64
((X), (Y))

	)

20 
	#©omic_add_size_nv
(
X
, 
Y
Ë
	`©omic_add_64
((X), (Y))

	)

21 
	#©omic_dec_size
(
X
, 
Y
Ë
	`©omic_add_64
((X), (Y))

	)

22 
	#©omic_dec_size_nv
(
X
, 
Y
Ë
	`©omic_add_64
((X), (Y))

	)

24 
	#©omic_add_size
(
X
, 
Y
Ë
	`©omic_add_32
((X), (Y))

	)

25 
	#©omic_add_size_nv
(
X
, 
Y
Ë
	`©omic_add_32
((X), (Y))

	)

26 
	#©omic_dec_size
(
X
, 
Y
Ë
	`©omic_add_32
((X), (Y))

	)

27 
	#©omic_dec_size_nv
(
X
, 
Y
Ë
	`©omic_add_32
((X), (Y))

	)

29 #unde‡
_KERNEL


30 #ñi‡
HAVE_GCC_ATOMIC_BUILTINS


31 
	#©omic_add_8
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

32 
	#©omic_add_16
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

33 
	#©omic_add_32
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

34 
	#©omic_add_size
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

35 
	#©omic_dec_8
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

36 
	#©omic_dec_16
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

37 
	#©omic_dec_32
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

38 
	#©omic_dec_size
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

40 
	#©omic_add_8_nv
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

41 
	#©omic_add_16_nv
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

42 
	#©omic_add_32_nv
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

43 
	#©omic_add_size_nv
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

44 
	#©omic_dec_8_nv
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

45 
	#©omic_dec_16_nv
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

46 
	#©omic_dec_32_nv
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

47 
	#©omic_dec_size_nv
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

50 
	#©omic_add_8
(
X
, 
Y
)

	)

51 
	#©omic_add_16
(
X
, 
Y
)

	)

52 
	#©omic_add_32
(
X
, 
Y
)

	)

53 
	#©omic_add_size
(
X
, 
Y
)

	)

54 
	#©omic_dec_8
(
X
)

	)

55 
	#©omic_dec_16
(
X
)

	)

56 
	#©omic_dec_32
(
X
)

	)

57 
	#©omic_dec_size
(
X
)

	)

59 
	#©omic_add_8_nv
(
X
, 
Y
)

	)

60 
	#©omic_add_16_nv
(
X
, 
Y
)

	)

61 
	#©omic_add_32_nv
(
X
, 
Y
)

	)

62 
	#©omic_add_size_nv
(
X
, 
Y
)

	)

63 
	#©omic_dec_8_nv
(
X
)

	)

64 
	#©omic_dec_16_nv
(
X
)

	)

65 
	#©omic_dec_32_nv
(
X
)

	)

66 
	#©omic_dec_size_nv
(
X
)

	)

	@clients/ms_conn.c

12 
	~"mem_c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<öây≥s.h
>

16 
	~<limôs.h
>

17 
	~<sys/uio.h
>

18 
	~<evít.h
>

19 
	~<f˙é.h
>

20 
	~<√töë/t˝.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

24 #i‡
deföed
(
HAVE_SYS_TIME_H
)

25 
	~<sys/time.h
>

28 #i‡
deföed
(
HAVE_TIME_H
)

29 
	~<time.h
>

32 
	~"ms_£âög.h
"

33 
	~"ms_thªad.h
"

34 
	~"ms_©omic.h
"

36 #ifde‡
löux


42 #unde‡
¡ohs


43 #unde‡
¡ohl


44 #unde‡
ht⁄s


45 #unde‡
ht⁄l


49 
	#TRANSMIT_COMPLETE
 0

	)

50 
	#TRANSMIT_INCOMPLETE
 1

	)

51 
	#TRANSMIT_SOFT_ERROR
 2

	)

52 
	#TRANSMIT_HARD_ERROR
 3

	)

55 
	#KEY_PREFIX_BASE
 0x1010101010101010

	)

56 
	#KEY_PREFIX_MASK
 0x1010101010101010

	)

59 
	#KEY_TOKEN
 1

	)

60 
	#VALUELEN_TOKEN
 3

	)

63 
uöt64_t
 
	gkey_¥efix_£q

KEY_PREFIX_BASE
;

66 vﬁ©ûê
uöt32_t
 
	gudp_ªque°_id
= 0;

68 
±hªad_key_t
 
ms_thªad_key
;

71 
uöt32_t
 
ms_gë_udp_ªque°_id
();

75 
ms_èsk_öô
(
ms_c⁄n_t
 *
c
);

76 
ms_c⁄n_udp_öô
(
ms_c⁄n_t
 *
c
, c⁄° 
boﬁ
 
is_udp
);

77 
ms_c⁄n_sock_öô
(
ms_c⁄n_t
 *
c
);

78 
ms_c⁄n_evít_öô
(
ms_c⁄n_t
 *
c
);

79 
ms_c⁄n_öô
(
ms_c⁄n_t
 *
c
,

80 c⁄° 
öô_°©e
,

81 c⁄° 
ªad_buf„r_size
,

82 c⁄° 
boﬁ
 
is_udp
);

83 
ms_w¨mup_num_öô
(
ms_c⁄n_t
 *
c
);

84 
ms_ôem_wö_öô
(
ms_c⁄n_t
 *
c
);

88 
ms_c⁄n_‰ì
(
ms_c⁄n_t
 *
c
);

89 
ms_c⁄n_˛o£
(
ms_c⁄n_t
 *
c
);

93 
ms_√w_sockë
(
addröfo
 *
ai
);

94 
ms_maximize_¢dbuf
(c⁄° 
sfd
);

95 
ms_√tw‹k_c⁄√˘
(
ms_c⁄n_t
 *
c
,

96 *
§v_ho°_«me
,

97 c⁄° 
§v_p‹t
,

98 c⁄° 
boﬁ
 
is_udp
,

99 *
ªt_sfd
);

100 
ms_ªc⁄n
(
ms_c⁄n_t
 *
c
);

104 
ms_tokíize_comm™d
(*
comm™d
,

105 
tokí_t
 *
tokís
,

106 c⁄° 
max_tokís
);

107 
ms_ascii_¥o˚ss_löe
(
ms_c⁄n_t
 *
c
, *
comm™d
);

108 
ms_åy_ªad_löe
(
ms_c⁄n_t
 *
c
);

109 
ms_s‹t_udp_∑ckë
(
ms_c⁄n_t
 *
c
, *
buf
, 
rbyãs
);

110 
ms_udp_ªad
(
ms_c⁄n_t
 *
c
, *
buf
, 
Àn
);

111 
ms_åy_ªad_√tw‹k
(
ms_c⁄n_t
 *
c
);

112 
ms_vîify_vÆue
(
ms_c⁄n_t
 *
c
,

113 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
,

114 *
vÆue
,

115 
vÀn
);

116 
ms_ascii_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
);

117 
ms_bö_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
);

118 
ms_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
);

122 
ms_add_msghdr
(
ms_c⁄n_t
 *
c
);

123 
ms_ísuª_iov_•a˚
(
ms_c⁄n_t
 *
c
);

124 
ms_add_iov
(
ms_c⁄n_t
 *
c
, c⁄° *
buf
, 
Àn
);

125 
ms_buûd_udp_hódîs
(
ms_c⁄n_t
 *
c
);

126 
ms_å™smô
(
ms_c⁄n_t
 *
c
);

130 
ms_c⁄n_shrök
(
ms_c⁄n_t
 *
c
);

131 
ms_c⁄n_£t_°©e
(
ms_c⁄n_t
 *
c
, 
°©e
);

132 
boﬁ
 
ms_upd©e_evít
(
ms_c⁄n_t
 *
c
, c⁄° 
√w_Êags
);

133 
uöt32_t
 
ms_gë_ªp_sock_ödex
(
ms_c⁄n_t
 *
c
, 
cmd
);

134 
uöt32_t
 
ms_gë_√xt_sock_ödex
(
ms_c⁄n_t
 *
c
);

135 
ms_upd©e_c⁄n_sock_evít
(
ms_c⁄n_t
 *
c
);

136 
boﬁ
 
ms_√ed_yõld
(
ms_c⁄n_t
 *
c
);

137 
ms_upd©e_°¨t_time
(
ms_c⁄n_t
 *
c
);

141 
ms_drive_machöe
(
ms_c⁄n_t
 *
c
);

142 
ms_evít_h™dÀr
(c⁄° 
fd
, c⁄° 
which
, *
¨g
);

146 
ms_buûd_ascii_wrôe_buf_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

147 
ms_buûd_ascii_wrôe_buf_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

148 
ms_buûd_ascii_wrôe_buf_mlgë
(
ms_c⁄n_t
 *
c
);

152 
ms_bö_¥o˚ss_ª•⁄£
(
ms_c⁄n_t
 *
c
);

153 
ms_add_bö_hódî
(
ms_c⁄n_t
 *
c
,

154 
uöt8_t
 
›code
,

155 
uöt8_t
 
hdr_Àn
,

156 
uöt16_t
 
key_Àn
,

157 
uöt32_t
 
body_Àn
);

158 
ms_add_key_to_iov
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

159 
ms_buûd_bö_wrôe_buf_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

160 
ms_buûd_bö_wrôe_buf_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

161 
ms_buûd_bö_wrôe_buf_mlgë
(
ms_c⁄n_t
 *
c
);

173 
uöt64_t
 
	$ms_gë_key_¥efix
()

175 
uöt64_t
 
key_¥efix
;

177 
	`±hªad_muãx_lock
(&
ms_globÆ
.
£q_muãx
);

178 
key_¥efix_£q
|
KEY_PREFIX_MASK
;

179 
key_¥efix

key_¥efix_£q
;

180 
key_¥efix_£q
++;

181 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
£q_muãx
);

183  
key_¥efix
;

184 
	}
}

192 
uöt32_t
 
	$ms_gë_udp_ªque°_id
()

194  
	`©omic_add_32_nv
(&
udp_ªque°_id
, 1);

195 
	}
}

203 
	$ms_èsk_öô
(
ms_c⁄n_t
 *
c
)

205 
c
->
cuº_èsk
.
cmd

CMD_NULL
;

206 
c
->
cuº_èsk
.
ôem
= 0;

207 
c
->
cuº_èsk
.
vîify

Ál£
;

208 
c
->
cuº_èsk
.
föish_vîify

åue
;

209 
c
->
cuº_èsk
.
gë_miss

åue
;

211 
c
->
cuº_èsk
.
gë_›t
= 0;

212 
c
->
cuº_èsk
.
£t_›t
= 0;

213 
c
->
cuº_èsk
.
cy˛e_undo_gë
= 0;

214 
c
->
cuº_èsk
.
cy˛e_undo_£t
= 0;

215 
c
->
cuº_èsk
.
vîifõd_gë
= 0;

216 
c
->
cuº_èsk
.
ovîwrôe_£t
= 0;

217 
	}
}

228 
	$ms_c⁄n_udp_öô
(
ms_c⁄n_t
 *
c
, c⁄° 
boﬁ
 
is_udp
)

230 
c
->
hdrbuf
= 0;

231 
c
->
rudpbuf
= 0;

232 
c
->
udµkt
= 0;

234 
c
->
rudpsize

UDP_DATA_BUFFER_SIZE
;

235 
c
->
hdrsize
= 0;

237 
c
->
rudpbyãs
= 0;

238 
c
->
∑ckës
= 0;

239 
c
->
ªcvpkt
= 0;

240 
c
->
pktcuº
= 0;

241 
c
->
‹dcuº
= 0;

243 
c
->
udp

is_udp
;

245 i‡(
c
->
udp
 || (! c->ud∞&& 
ms_£âög
.
Á˚book_ã°
))

247 
c
->
rudpbuf
(*)
	`mÆloc
((
size_t
)c->
rudpsize
);

248 
c
->
udµkt
(
ms_udµkt_t
 *)
	`mÆloc
(
MAX_UDP_PACKET
 * (ms_udppkt_t));

250 i‡((
c
->
rudpbuf
 =
NULL
Ë|| (c->
udµkt
 == NULL))

252 i‡(
c
->
rudpbuf
 !
NULL
)

253 
	`‰ì
(
c
->
rudpbuf
);

254 i‡(
c
->
udµkt
 !
NULL
)

255 
	`‰ì
(
c
->
udµkt
);

256 
	`Ârötf
(
°dîr
, "malloc()\n");

259 
	`mem£t
(
c
->
udµkt
, 0, 
MAX_UDP_PACKET
 * (
ms_udµkt_t
));

262  
EXIT_SUCCESS
;

263 
	}
}

276 
	$ms_c⁄n_öô
(
ms_c⁄n_t
 *
c
,

277 c⁄° 
öô_°©e
,

278 c⁄° 
ªad_buf„r_size
,

279 c⁄° 
boﬁ
 
is_udp
)

281 
	`as£π
(
c
 !
NULL
);

283 
c
->
rbuf
c->
wbuf
= 0;

284 
c
->
iov
= 0;

285 
c
->
msgli°
= 0;

287 
c
->
rsize

ªad_buf„r_size
;

288 
c
->
wsize

WRITE_BUFFER_SIZE
;

289 
c
->
iovsize

IOV_LIST_INITIAL
;

290 
c
->
msgsize

MSG_LIST_INITIAL
;

293 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

295 
c
->
tŸÆ_sfds

ms_£âög
.
§v_˙t
 * ms_£âög.
sock_≥r_c⁄n
;

299 
c
->
tŸÆ_sfds

ms_£âög
.
sock_≥r_c⁄n
;

301 
c
->
Æive_sfds
= 0;

303 
c
->
rbuf
(*)
	`mÆloc
((
size_t
)c->
rsize
);

304 
c
->
wbuf
(*)
	`mÆloc
((
size_t
)c->
wsize
);

305 
c
->
iov
(
iovec
 *)
	`mÆloc
((iovecË* (
size_t
)c->
iovsize
);

306 
c
->
msgli°
(
msghdr
 *)
	`mÆloc
(

307 (
msghdr
Ë* (
size_t
)
c
->
msgsize
);

308 i‡(
ms_£âög
.
mu…_key_num
 > 1)

310 
c
->
mlgë_èsk
.
mlgë_ôem
(
ms_mlgë_èsk_ôem_t
 *)

311 
	`mÆloc
(

312 (
ms_mlgë_èsk_ôem_t
Ë* (
size_t
)
ms_£âög
.
mu…_key_num
);

314 
c
->
t˝sfd
(*)
	`mÆloc
((
size_t
)c->
tŸÆ_sfds
 * ());

316 i‡((
c
->
rbuf
 =
NULL
Ë|| (c->
wbuf
 =NULLË|| (c->
iov
 == NULL)

317 || (
c
->
msgli°
 =
NULL
Ë|| (c->
t˝sfd
 == NULL)

318 || ((
ms_£âög
.
mu…_key_num
 > 1)

319 && (
c
->
mlgë_èsk
.
mlgë_ôem
 =
NULL
)))

321 i‡(
c
->
rbuf
 !
NULL
)

322 
	`‰ì
(
c
->
rbuf
);

323 i‡(
c
->
wbuf
 !
NULL
)

324 
	`‰ì
(
c
->
wbuf
);

325 i‡(
c
->
iov
 !
NULL
)

326 
	`‰ì
(
c
->
iov
);

327 i‡(
c
->
msgli°
 !
NULL
)

328 
	`‰ì
(
c
->
msgli°
);

329 i‡(
c
->
mlgë_èsk
.
mlgë_ôem
 !
NULL
)

330 
	`‰ì
(
c
->
mlgë_èsk
.
mlgë_ôem
);

331 i‡(
c
->
t˝sfd
 !
NULL
)

332 
	`‰ì
(
c
->
t˝sfd
);

333 
	`Ârötf
(
°dîr
, "malloc()\n");

337 
c
->
°©e

öô_°©e
;

338 
c
->
rvbyãs
= 0;

339 
c
->
rbyãs
= 0;

340 
c
->
rcuº
c->
rbuf
;

341 
c
->
wcuº
c->
wbuf
;

342 
c
->
iovu£d
= 0;

343 
c
->
msgcuº
= 0;

344 
c
->
msgu£d
= 0;

345 
c
->
cur_idx
c->
tŸÆ_sfds
;

347 
c
->
˘nwrôe

Ál£
;

348 
c
->
ªadvÆ

Ál£
;

349 
c
->
ch™ge_sfd

Ál£
;

351 
c
->
¥ecmd
.
cmd
c->
cuºcmd
.cmd
CMD_NULL
;

352 
c
->
¥ecmd
.
isföish

åue
;

353 
c
->
cuºcmd
.
isföish

Ál£
;

354 
c
->
¥ecmd
.
ªt°©
c->
cuºcmd
.ªt°©
MCD_FAILURE
;

355 
c
->
¥ecmd
.
key_¥efix
c->
cuºcmd
.key_prefix= 0;

357 
c
->
mlgë_èsk
.
mlgë_num
= 0;

358 
c
->
mlgë_èsk
.
vÆue_ödex
= -1;

360 i‡(
ms_£âög
.
bö¨y_¥Ÿ_
)

362 
c
->
¥Ÿocﬁ

bö¨y_¥Ÿ
;

366 
c
->
¥Ÿocﬁ

ascii_¥Ÿ
;

370 i‡(
	`ms_c⁄n_udp_öô
(
c
, 
is_udp
) != 0)

376 
	`ms_èsk_öô
(
c
);

378 i‡(! (
ms_£âög
.
Á˚book_ã°
 && 
is_udp
))

380 
	`©omic_add_32
(&
ms_°©s
.
a˘ive_c⁄ns
, 1);

383  
EXIT_SUCCESS
;

384 
	}
}

394 
	$ms_w¨mup_num_öô
(
ms_c⁄n_t
 *
c
)

397 i‡(
ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
 < 
PROP_ERROR
)

399 
c
->
w¨mup_num
c->
wö_size
;

400 
c
->
ªmaö_w¨mup_num
c->
w¨mup_num
;

404 
c
->
w¨mup_num
= 0;

405 
c
->
ªmaö_w¨mup_num
c->
w¨mup_num
;

407 
	}
}

418 
	$ms_ôem_wö_öô
(
ms_c⁄n_t
 *
c
)

420 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

421 
exp_˙t
= 0;

423 
c
->
wö_size
()
ms_£âög
.win_size;

424 
c
->
£t_curs‹
= 0;

425 
c
->
exec_num

ms_thªad
->
thªad_˘x
->
exec_num_≥rc⁄n
;

426 
c
->
ªmaö_exec_num
c->
exec_num
;

428 
c
->
ôem_wö
(
ms_èsk_ôem_t
 *)
	`mÆloc
(

429 (
ms_èsk_ôem_t
Ë* (
size_t
)
c
->
wö_size
);

430 i‡(
c
->
ôem_wö
 =
NULL
)

432 
	`Ârötf
(
°dîr
, "Can'tállocateÅask itemárray for conn.\n");

435 
	`mem£t
(
c
->
ôem_wö
, 0, (
ms_èsk_ôem_t
Ë* (
size_t
)c->
wö_size
);

437 
i
0; i < 
c
->
wö_size
; i++)

439 
c
->
ôem_wö
[
i
].
key_size
()
ms_£âög
.
di°r
[i].key_size;

440 
c
->
ôem_wö
[
i
].
key_¥efix

	`ms_gë_key_¥efix
();

441 
c
->
ôem_wö
[
i
].
key_suffix_off£t

ms_£âög
.
di°r
[i].
key_off£t
;

442 
c
->
ôem_wö
[
i
].
vÆue_size
()
ms_£âög
.
di°r
[i].value_size;

443 
c
->
ôem_wö
[
i
].
vÆue_off£t

INVALID_OFFSET
;

444 
c
->
ôem_wö
[
i
].
˛õ¡_time
= 0;

447 i‡(
exp_˙t
 < 
ms_£âög
.
exp_vî_≥r
 * 
i
)

449 
c
->
ôem_wö
[
i
].
exp_time

FIXED_EXPIRE_TIME
;

450 
exp_˙t
++;

454 
c
->
ôem_wö
[
i
].
exp_time
= 0;

458 
	`ms_w¨mup_num_öô
(
c
);

460  
EXIT_SUCCESS
;

461 
	}
}

473 
	$ms_c⁄n_sock_öô
(
ms_c⁄n_t
 *
c
)

475 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

476 
uöt32_t
 
i
;

477 
ªt_sfd
;

478 
uöt32_t
 
§v_idx
= 0;

480 
	`as£π
(
c
 !
NULL
);

481 
	`as£π
(
c
->
t˝sfd
 !
NULL
);

483 
i
0; i < 
c
->
tŸÆ_sfds
; i++)

485 
ªt_sfd
= 0;

486 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

489 
§v_idx

i
 % 
ms_£âög
.
§v_˙t
;

494 
§v_idx

ms_thªad
->
thªad_˘x
->srv_idx;

497 i‡(
	`ms_√tw‹k_c⁄√˘
(
c
, 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

498 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
,

499 
ms_£âög
.
udp
, &
ªt_sfd
) != 0)

504 i‡(
i
 == 0)

506 
c
->
sfd

ªt_sfd
;

509 i‡(! 
ms_£âög
.
udp
)

511 
c
->
t˝sfd
[
i
]
ªt_sfd
;

514 
c
->
Æive_sfds
++;

518 i‡(
ms_£âög
.
Á˚book_ã°
)

520 
ªt_sfd
= 0;

521 i‡(
	`ms_√tw‹k_c⁄√˘
(
c
, 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

522 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
,

523 
åue
, &
ªt_sfd
) != 0)

525 
c
->
udpsfd
= 0;

529 
c
->
udpsfd

ªt_sfd
;

533 i‡((
i
 !
c
->
tŸÆ_sfds
Ë|| (
ms_£âög
.
Á˚book_ã°
 && (c->
udpsfd
 == 0)))

535 i‡(
ms_£âög
.
udp
)

537 
	`˛o£
(
c
->
sfd
);

541 
uöt32_t
 
j
0; j < 
i
; j++)

543 
	`˛o£
(
c
->
t˝sfd
[
j
]);

547 i‡(
c
->
udpsfd
 != 0)

549 
	`˛o£
(
c
->
udpsfd
);

555  
EXIT_SUCCESS
;

556 
	}
}

567 
	$ms_c⁄n_evít_öô
(
ms_c⁄n_t
 *
c
)

569 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

570 
evít_Êags

EV_WRITE
 | 
EV_PERSIST
;

572 
	`evít_£t
(&
c
->
evít
, c->
sfd
, 
evít_Êags
, 
ms_evít_h™dÀr
, (*)c);

573 
	`evít_ba£_£t
(
ms_thªad
->
ba£
, &
c
->
evít
);

574 
c
->
ev_Êags

evít_Êags
;

576 i‡(
	`evít_add
(&
c
->
evít
, 
NULL
) == -1)

581  
EXIT_SUCCESS
;

582 
	}
}

593 
	$ms_£tup_c⁄n
(
ms_c⁄n_t
 *
c
)

595 i‡(
	`ms_ôem_wö_öô
(
c
) != 0)

600 i‡(
	`ms_c⁄n_öô
(
c
, 
c⁄n_wrôe
, 
DATA_BUFFER_SIZE
, 
ms_£âög
.
udp
) != 0)

605 i‡(
	`ms_c⁄n_sock_öô
(
c
) != 0)

610 i‡(
	`ms_c⁄n_evít_öô
(
c
) != 0)

615  
EXIT_SUCCESS
;

616 
	}
}

624 
	$ms_c⁄n_‰ì
(
ms_c⁄n_t
 *
c
)

626 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

627 i‡(
c
 !
NULL
)

629 i‡(
c
->
hdrbuf
 !
NULL
)

630 
	`‰ì
(
c
->
hdrbuf
);

631 i‡(
c
->
msgli°
 !
NULL
)

632 
	`‰ì
(
c
->
msgli°
);

633 i‡(
c
->
rbuf
 !
NULL
)

634 
	`‰ì
(
c
->
rbuf
);

635 i‡(
c
->
wbuf
 !
NULL
)

636 
	`‰ì
(
c
->
wbuf
);

637 i‡(
c
->
iov
 !
NULL
)

638 
	`‰ì
(
c
->
iov
);

639 i‡(
c
->
mlgë_èsk
.
mlgë_ôem
 !
NULL
)

640 
	`‰ì
(
c
->
mlgë_èsk
.
mlgë_ôem
);

641 i‡(
c
->
rudpbuf
 !
NULL
)

642 
	`‰ì
(
c
->
rudpbuf
);

643 i‡(
c
->
udµkt
 !
NULL
)

644 
	`‰ì
(
c
->
udµkt
);

645 i‡(
c
->
ôem_wö
 !
NULL
)

646 
	`‰ì
(
c
->
ôem_wö
);

647 i‡(
c
->
t˝sfd
 !
NULL
)

648 
	`‰ì
(
c
->
t˝sfd
);

650 i‡(--
ms_thªad
->
«˘ive_c⁄n
 == 0)

652 
	`‰ì
(
ms_thªad
->
c⁄n
);

655 
	}
}

663 
	$ms_c⁄n_˛o£
(
ms_c⁄n_t
 *
c
)

665 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

666 
	`as£π
(
c
 !
NULL
);

669 
	`evít_dñ
(&
c
->
evít
);

671 
uöt32_t
 
i
0; i < 
c
->
tŸÆ_sfds
; i++)

673 i‡(
c
->
t˝sfd
[
i
] > 0)

675 
	`˛o£
(
c
->
t˝sfd
[
i
]);

678 
c
->
sfd
= 0;

680 i‡(
ms_£âög
.
Á˚book_ã°
)

682 
	`˛o£
(
c
->
udpsfd
);

685 
	`©omic_dec_32
(&
ms_°©s
.
a˘ive_c⁄ns
);

687 
	`ms_c⁄n_‰ì
(
c
);

689 i‡(
ms_£âög
.
run_time
 == 0)

691 
	`±hªad_muãx_lock
(&
ms_globÆ
.
run_lock
.
lock
);

692 
ms_globÆ
.
run_lock
.
cou¡
++;

693 
	`±hªad_c⁄d_sig«l
(&
ms_globÆ
.
run_lock
.
c⁄d
);

694 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
run_lock
.
lock
);

697 i‡(
ms_thªad
->
«˘ive_c⁄n
 == 0)

699 
	`±hªad_exô
(
NULL
);

701 
	}
}

711 
	$ms_√w_sockë
(
addröfo
 *
ai
)

713 
sfd
;

715 i‡((
sfd

	`sockë
(
ai
->
ai_Ámûy
,ái->
ai_sockty≥
,ái->
ai_¥Ÿocﬁ
)) == -1)

717 
	`Ârötf
(
°dîr
, "sockë(Ëîr‹: %s.\n", 
	`°ªº‹
(
î∫o
));

721  
sfd
;

722 
	}
}

730 
	$ms_maximize_¢dbuf
(c⁄° 
sfd
)

732 
sockÀn_t
 
ötsize
= ();

733 
œ°_good
= 0;

734 
mö
, 
max
, 
avg
;

735 
ﬁd_size
;

738 i‡(
	`gësock›t
(
sfd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
ﬁd_size
, &
ötsize
) != 0)

740 
	`Ârötf
(
°dîr
, "getsockopt(SO_SNDBUF)\n");

745 
mö

ﬁd_size
;

746 
max

MAX_SENDBUF_SIZE
;

748 
mö
 <
max
)

750 
avg
(()(
mö
 + 
max
)) / 2;

751 i‡(
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
avg
, 
ötsize
) == 0)

753 
œ°_good

avg
;

754 
mö

avg
 + 1;

758 
max

avg
 - 1;

761 ()
œ°_good
;

762 
	}
}

776 
	$ms_√tw‹k_c⁄√˘
(
ms_c⁄n_t
 *
c
,

777 *
§v_ho°_«me
,

778 c⁄° 
§v_p‹t
,

779 c⁄° 
boﬁ
 
is_udp
,

780 *
ªt_sfd
)

782 
sfd
;

783 
lögî
 
lög
=

787 
addröfo
 *
ai
;

788 
addröfo
 *
√xt
;

789 
addröfo
 
höts
;

790 
p‹t_buf
[
NI_MAXSERV
];

791 
îr‹
;

792 
suc˚ss
= 0;

794 
Êags
= 1;

800 
	`mem£t
(&
höts
, 0, (hints));

801 #ifde‡
AI_ADDRCONFIG


802 
höts
.
ai_Êags

AI_PASSIVE
 | 
AI_ADDRCONFIG
;

804 
höts
.
ai_Êags

AI_PASSIVE
;

806 i‡(
is_udp
)

808 
höts
.
ai_¥Ÿocﬁ

IPPROTO_UDP
;

809 
höts
.
ai_sockty≥

SOCK_DGRAM
;

810 
höts
.
ai_Ámûy

AF_INET
;

814 
höts
.
ai_Ámûy

AF_UNSPEC
;

815 
höts
.
ai_¥Ÿocﬁ

IPPROTO_TCP
;

816 
höts
.
ai_sockty≥

SOCK_STREAM
;

819 
	`¢¥ötf
(
p‹t_buf
, 
NI_MAXSERV
, "%d", 
§v_p‹t
);

820 
îr‹

	`gëaddröfo
(
§v_ho°_«me
, 
p‹t_buf
, &
höts
, &
ai
);

821 i‡(
îr‹
 != 0)

823 i‡(
îr‹
 !
EAI_SYSTEM
)

824 
	`Ârötf
(
°dîr
, "gëaddröfo(): %s.\n", 
	`gai_°ªº‹
(
îr‹
));

826 
	`≥º‹
("getaddrinfo()\n");

831 
√xt

ai
;Çext;Çext√xt->
ai_√xt
)

833 i‡((
sfd

	`ms_√w_sockë
(
√xt
)) == -1)

835 
	`‰ìaddröfo
(
ai
);

839 
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
Êags
, (flags));

840 i‡(
is_udp
)

842 
	`ms_maximize_¢dbuf
(
sfd
);

846 
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
Êags
,

847 (
Êags
));

848 
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_LINGER
, (*)&
lög
, (ling));

849 
	`£tsock›t
(
sfd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*)&
Êags
,

850 (
Êags
));

853 i‡(
is_udp
)

855 
c
->
§v_ªcv_addr_size
(
sockaddr
);

856 
	`mem˝y
(&
c
->
§v_ªcv_addr
, 
√xt
->
ai_addr
, c->
§v_ªcv_addr_size
);

860 i‡(
	`c⁄√˘
(
sfd
, 
√xt
->
ai_addr
,Çext->
ai_addæí
) == -1)

862 
	`˛o£
(
sfd
);

863 
	`‰ìaddröfo
(
ai
);

868 i‡(((
Êags

	`f˙é
(
sfd
, 
F_GETFL
, 0)) < 0)

869 || (
	`f˙é
(
sfd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0))

871 
	`Ârötf
(
°dîr
, "setting O_NONBLOCK\n");

872 
	`˛o£
(
sfd
);

873 
	`‰ìaddröfo
(
ai
);

877 i‡(
ªt_sfd
 !
NULL
)

879 *
ªt_sfd

sfd
;

882 
suc˚ss
++;

885 
	`‰ìaddröfo
(
ai
);

888  
suc˚ss
 == 0;

889 
	}
}

899 
	$ms_ªc⁄n
(
ms_c⁄n_t
 *
c
)

901 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

902 
uöt32_t
 
§v_idx
= 0;

903 
uöt32_t
 
§v_c⁄n_˙t
= 0;

905 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

907 
§v_idx

c
->
cur_idx
 % 
ms_£âög
.
§v_˙t
;

908 
§v_c⁄n_˙t

ms_£âög
.
sock_≥r_c⁄n
 * ms_£âög.
nc⁄ns
;

912 
§v_idx

ms_thªad
->
thªad_˘x
->srv_idx;

913 
§v_c⁄n_˙t

ms_£âög
.
nc⁄ns
 / ms_£âög.
§v_˙t
;

917 
	`˛o£
(
c
->
sfd
);

918 
c
->
t˝sfd
[c->
cur_idx
]= 0;

920 i‡(
	`©omic_add_32_nv
(&
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_˙t
, 1)

921 % 
§v_c⁄n_˙t
 == 0)

923 
	`gëtimeofday
(&
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_time
, 
NULL
);

924 
	`Ârötf
(
°dîr
, "Server %s:%d disconnect\n",

925 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

926 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
);

929 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

931 
uöt32_t
 
i
= 0;

933 
i
0; i < 
c
->
tŸÆ_sfds
; i++)

935 i‡(
c
->
t˝sfd
[
i
] != 0)

942 i‡(
i
 =
c
->
tŸÆ_sfds
)

952 i‡(
	`ms_√tw‹k_c⁄√˘
(
c
, 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

953 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
,

954 
ms_£âög
.
udp
, &
c
->
sfd
) == 0)

956 
c
->
t˝sfd
[c->
cur_idx
]c->
sfd
;

957 i‡(
	`©omic_add_32_nv
(&
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_˙t
, 1)

958 % (
uöt32_t
)
§v_c⁄n_˙t
 == 0)

960 
	`gëtimeofday
(&
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_time
, 
NULL
);

961 
ªc⁄n_time
=

962 ()(
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_time
.
tv_£c


963 - 
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_time


964 .
tv_£c
);

965 
	`Ârötf
(
°dîr
, "Server %s:%dÑeconnectáfter %ds\n",

966 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

967 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
, 
ªc⁄n_time
);

972 i‡(
ms_£âög
.
ªp_wrôe_§v
 =0 && 
c
->
tŸÆ_sfds
 > 0)

975 
	`¶ìp
(1);

978 
ms_£âög
.
ªp_wrôe_§v
 =0 && 
c
->
tŸÆ_sfds
 > 0);

981 i‡((
c
->
tŸÆ_sfds
 > 1Ë&& (c->
t˝sfd
[c->
cur_idx
] == 0))

983 
c
->
sfd
= 0;

984 
c
->
Æive_sfds
--;

987  
EXIT_SUCCESS
;

988 
	}
}

1001 
	$ms_ªc⁄n_socks
(
ms_c⁄n_t
 *
c
)

1003 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

1004 
uöt32_t
 
§v_idx
= 0;

1005 
ªt_sfd
= 0;

1006 
uöt32_t
 
§v_c⁄n_˙t
= 0;

1007 
timevÆ
 
cur_time
;

1009 
	`as£π
(
c
 !
NULL
);

1011 i‡((
c
->
tŸÆ_sfds
 =1Ë|| (c->tŸÆ_sfd†=c->
Æive_sfds
))

1013  
EXIT_SUCCESS
;

1016 
uöt32_t
 
i
0; i < 
c
->
tŸÆ_sfds
; i++)

1018 i‡(
c
->
t˝sfd
[
i
] == 0)

1020 
	`gëtimeofday
(&
cur_time
, 
NULL
);

1028 i‡(
cur_time
.
tv_£c


1029 - 
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_time
.
tv_£c
 < 5)

1034 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

1036 
§v_idx

i
 % 
ms_£âög
.
§v_˙t
;

1037 
§v_c⁄n_˙t

ms_£âög
.
sock_≥r_c⁄n
 * ms_£âög.
nc⁄ns
;

1041 
§v_idx

ms_thªad
->
thªad_˘x
->srv_idx;

1042 
§v_c⁄n_˙t

ms_£âög
.
nc⁄ns
 / ms_£âög.
§v_˙t
;

1045 i‡(
	`ms_√tw‹k_c⁄√˘
(
c
, 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

1046 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
,

1047 
ms_£âög
.
udp
, &
ªt_sfd
) == 0)

1049 
c
->
t˝sfd
[
i
]
ªt_sfd
;

1050 
c
->
Æive_sfds
++;

1052 i‡(
	`©omic_add_32_nv
(&
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_˙t
, 1)

1053 % (
uöt32_t
)
§v_c⁄n_˙t
 == 0)

1055 
	`gëtimeofday
(&
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_time
, 
NULL
);

1056 
ªc⁄n_time
=

1057 ()(
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_time
.
tv_£c


1058 - 
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_time


1059 .
tv_£c
);

1060 
	`Ârötf
(
°dîr
, "Server %s:%dÑeconnectáfter %ds\n",

1061 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

1062 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
, 
ªc⁄n_time
);

1068  
EXIT_SUCCESS
;

1069 
	}
}

1095 
	$ms_tokíize_comm™d
(*
comm™d
,

1096 
tokí_t
 *
tokís
,

1097 c⁄° 
max_tokís
)

1099 *
s
, *
e
;

1100 
¡okís
= 0;

1102 
	`as£π
(
comm™d
 !
NULL
 && 
tokís
 !NULL && 
max_tokís
 > 1);

1104 
s

e

comm™d
; 
¡okís
 < 
max_tokís
 - 1; ++e)

1106 i‡(*
e
 == ' ')

1108 i‡(
s
 !
e
)

1110 
tokís
[
¡okís
].
vÆue

s
;

1111 
tokís
[
¡okís
].
Àngth
(
size_t
)(
e
 - 
s
);

1112 
¡okís
++;

1113 *
e
= '\0';

1115 
s

e
 + 1;

1117 i‡(*
e
 == '\0')

1119 i‡(
s
 !
e
)

1121 
tokís
[
¡okís
].
vÆue

s
;

1122 
tokís
[
¡okís
].
Àngth
(
size_t
)(
e
 - 
s
);

1123 
¡okís
++;

1130  
¡okís
;

1131 
	}
}

1143 
	$ms_ascii_¥o˚ss_löe
(
ms_c⁄n_t
 *
c
, *
comm™d
)

1145 
ªt
= 0;

1146 
öt64_t
 
vÆue_Àn
;

1147 *
buf„r

comm™d
;

1149 
	`as£π
(
c
 !
NULL
);

1156 
buf„r
[0])

1159 i‡(
buf„r
[1] == 'A')

1161 
tokí_t
 
tokís
[
MAX_TOKENS
];

1162 
	`ms_tokíize_comm™d
(
comm™d
, 
tokís
, 
MAX_TOKENS
);

1163 
î∫o
= 0;

1164 
vÆue_Àn

	`°πﬁ
(
tokís
[
VALUELEN_TOKEN
].
vÆue
, 
NULL
, 10);

1165 i‡(
î∫o
 != 0)

1167 
	`¥ötf
("<%d ERROR %s\n", 
c
->
sfd
, 
	`°ªº‹
(
î∫o
));

1169 
c
->
cuºcmd
.
key_¥efix
*(
uöt64_t
 *)
tokís
[
KEY_TOKEN
].
vÆue
;

1178 
c
->
rvbyãs
()(
vÆue_Àn
 + 2);

1179 
c
->
ªadvÆ

åue
;

1180 
ªt
= -1;

1186 
c
->
cuºcmd
.
ªt°©

MCD_SUCCESS
;

1189 i‡(
buf„r
[2] == 'A')

1191 
c
->
cuºcmd
.
ªt°©

MCD_STAT
;

1193 i‡(
buf„r
[1] == 'E')

1196 
	`¥ötf
("<%d %s\n", 
c
->
sfd
, 
buf„r
);

1198 
c
->
cuºcmd
.
ªt°©

MCD_SERVER_ERROR
;

1200 i‡(
buf„r
[1] == 'T')

1203 
c
->
cuºcmd
.
ªt°©

MCD_STORED
;

1207 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1212 i‡(
buf„r
[1] == 'E')

1214 
c
->
cuºcmd
.
ªt°©

MCD_DELETED
;

1218 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1224 i‡(
buf„r
[4] == 'F')

1226 
c
->
cuºcmd
.
ªt°©

MCD_NOTFOUND
;

1228 i‡(
buf„r
[4] == 'S')

1230 
	`¥ötf
("<%d %s\n", 
c
->
sfd
, 
buf„r
);

1231 
c
->
cuºcmd
.
ªt°©

MCD_NOTSTORED
;

1235 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1240 i‡(
buf„r
[1] == 'N')

1243 
c
->
cuºcmd
.
ªt°©

MCD_END
;

1245 i‡(
buf„r
[1] == 'R')

1247 
	`¥ötf
("<%d ERROR\n", 
c
->
sfd
);

1248 
c
->
cuºcmd
.
ªt°©

MCD_PROTOCOL_ERROR
;

1250 i‡(
buf„r
[1] == 'X')

1252 
c
->
cuºcmd
.
ªt°©

MCD_DATA_EXISTS
;

1253 
	`¥ötf
("<%d %s\n", 
c
->
sfd
, 
buf„r
);

1257 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1262 
	`¥ötf
("<%d %s\n", 
c
->
sfd
, 
buf„r
);

1263 
c
->
cuºcmd
.
ªt°©

MCD_CLIENT_ERROR
;

1267 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1271  
ªt
;

1272 
	}
}

1281 
	$ms_ª£t_c⁄n
(
ms_c⁄n_t
 *
c
, 
boﬁ
 
timeout
)

1283 
	`as£π
(
c
 !
NULL
);

1285 i‡(
c
->
udp
)

1287 i‡((
c
->
∑ckës
 > 0Ë&& (c->∑ckë†< 
MAX_UDP_PACKET
))

1289 
	`mem£t
(
c
->
udµkt
, 0, (
ms_udµkt_t
Ë* (
size_t
)c->
∑ckës
);

1292 
c
->
∑ckës
= 0;

1293 
c
->
ªcvpkt
= 0;

1294 
c
->
pktcuº
= 0;

1295 
c
->
‹dcuº
= 0;

1296 
c
->
rudpbyãs
= 0;

1298 
c
->
cuºcmd
.
isföish

åue
;

1299 
c
->
˘nwrôe

Ál£
;

1300 
c
->
rbyãs
= 0;

1301 
c
->
rcuº
c->
rbuf
;

1302 
c
->
msgcuº
 = 0;

1303 
c
->
msgu£d
 = 0;

1304 
c
->
iovu£d
 = 0;

1305 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_wrôe
);

1306 
	`mem˝y
(&
c
->
¥ecmd
, &c->
cuºcmd
, (
ms_cmd°©_t
));

1308 i‡(
timeout
)

1310 
	`ms_drive_machöe
(
c
);

1312 
	}
}

1322 
	$ms_åy_ªad_löe
(
ms_c⁄n_t
 *
c
)

1324 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

1327 i‡((
uöt64_t
)
c
->
rbyãs
 < (c->
bö¨y_hódî
))

1330  
EXIT_SUCCESS
;

1334 #ifde‡
NEED_ALIGN


1335 i‡((()(
c
->
rcuº
)) % 8 != 0)

1338 
	`memmove
(
c
->
rbuf
, c->
rcuº
, c->
rbyãs
);

1339 
c
->
rcuº
c->
rbuf
;

1340 i‡(
£âögs
.
vîbo£
)

1342 
	`Ârötf
(
°dîr
, "%d: Rólig¿öpuàbuf„r.\n", 
c
->
sfd
);

1346 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
r•
;

1347 
r•
(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *)
c
->
rcuº
;

1349 
c
->
bö¨y_hódî
*
r•
;

1350 
c
->
bö¨y_hódî
.
ª•⁄£
.
exéí

r•
->response.extlen;

1351 
c
->
bö¨y_hódî
.
ª•⁄£
.
keyÀn

	`¡ohs
(
r•
->response.keylen);

1352 
c
->
bö¨y_hódî
.
ª•⁄£
.
bodyÀn

	`¡ohl
(
r•
->response.bodylen);

1353 
c
->
bö¨y_hódî
.
ª•⁄£
.
°©us

	`¡ohs
(
r•
->response.status);

1355 i‡(
c
->
bö¨y_hódî
.
ª•⁄£
.
magic
 !
PROTOCOL_BINARY_RES
)

1357 
	`Ârötf
(
°dîr
, "Invalid magic: %x\n",

1358 
c
->
bö¨y_hódî
.
ª•⁄£
.
magic
);

1359 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

1360  
EXIT_SUCCESS
;

1364 i‡(
	`ms_bö_¥o˚ss_ª•⁄£
(
c
) == 0)

1367 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1372 
c
->
rbyãs
-(
öt32_t
)(c->
bö¨y_hódî
);

1373 
c
->
rcuº
+(c->
bö¨y_hódî
);

1379 *
ñ
, *
c⁄t
;

1381 
	`as£π
(
c
 !
NULL
);

1382 
	`as£π
(
c
->
rcuº
 <(c->
rbuf
 + c->
rsize
));

1384 i‡(
c
->
rbyãs
 == 0)

1385  
EXIT_SUCCESS
;

1387 
ñ

	`memchr
(
c
->
rcuº
, '\n', (
size_t
)c->
rbyãs
);

1388 i‡(! 
ñ
)

1389  
EXIT_SUCCESS
;

1391 
c⁄t

ñ
 + 1;

1392 i‡(((
ñ
 - 
c
->
rcuº
) > 1) && (*(el - 1) == '\r'))

1394 
ñ
--;

1396 *
ñ
= '\0';

1398 
	`as£π
(
c⁄t
 <(
c
->
rcuº
 + c->
rbyãs
));

1401 i‡(
	`ms_ascii_¥o˚ss_löe
(
c
, c->
rcuº
) == 0)

1404 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1410 
c
->
rbyãs
-(
öt32_t
)(
c⁄t
 - c->
rcuº
);

1411 
c
->
rcuº

c⁄t
;

1414 
	`as£π
(
c
->
rcuº
 <(c->
rbuf
 + c->
rsize
));

1418 
	}
}

1432 
	$ms_s‹t_udp_∑ckë
(
ms_c⁄n_t
 *
c
, *
buf
, 
rbyãs
)

1434 
Àn
= 0;

1435 
wbyãs
= 0;

1436 
uöt16_t
 
ªq_id
= 0;

1437 
uöt16_t
 
£q_num
= 0;

1438 
uöt16_t
 
∑ckës
= 0;

1439 *
hódî

NULL
;

1442 
	`as£π
(
c
 !
NULL
);

1443 
	`as£π
(
buf
 !
NULL
);

1444 
	`as£π
(
c
->
rudpbyãs
 >
UDP_HEADER_SIZE
);

1447 i‡(
c
->
rudpbyãs
 % 
UDP_MAX_PAYLOAD_SIZE
 >
UDP_HEADER_SIZE
)

1450 
c
->
ªcvpkt
c->
rudpbyãs
 / 
UDP_MAX_PAYLOAD_SIZE
 + 1;

1454 
c
->
ªcvpkt
c->
rudpbyãs
 / 
UDP_MAX_PAYLOAD_SIZE
;

1458 i‡(
c
->
∑ckës
 == 0)

1460 
c
->
∑ckës

	`HEADER_TO_PACKETS
((*)c->
rudpbuf
);

1464 
i

c
->
pktcuº
; i < c->
ªcvpkt
; i++)

1466 
hódî
(*)
c
->
rudpbuf
 + 
i
 * 
UDP_MAX_PAYLOAD_SIZE
;

1467 
ªq_id
(
uöt16_t
)
	`HEADER_TO_REQID
(
hódî
);

1468 
	`as£π
(
ªq_id
 =
c
->
ªque°_id
 % (1 << 16));

1470 
∑ckës
(
uöt16_t
)
	`HEADER_TO_PACKETS
(
hódî
);

1471 
	`as£π
(
c
->
∑ckës
 =
	`HEADER_TO_PACKETS
(
hódî
));

1473 
£q_num
(
uöt16_t
)
	`HEADER_TO_SEQNUM
(
hódî
);

1474 
c
->
udµkt
[
£q_num
].
hódî
= header;

1475 
c
->
udµkt
[
£q_num
].
d©a
(*)
hódî
 + 
UDP_HEADER_SIZE
;

1477 i‡(
i
 =
c
->
ªcvpkt
 - 1)

1480 i‡(
c
->
rudpbyãs
 % 
UDP_MAX_PAYLOAD_SIZE
 == 0)

1482 
c
->
udµkt
[
£q_num
].
rbyãs

UDP_MAX_PAYLOAD_SIZE
 - 
UDP_HEADER_SIZE
;

1483 
c
->
pktcuº
++;

1487 
c
->
udµkt
[
£q_num
].
rbyãs
c->
rudpbyãs
 % 
UDP_MAX_PAYLOAD_SIZE


1488 - 
UDP_HEADER_SIZE
;

1493 
c
->
udµkt
[
£q_num
].
rbyãs

UDP_MAX_PAYLOAD_SIZE
 - 
UDP_HEADER_SIZE
;

1494 
c
->
pktcuº
++;

1498 
i

c
->
‹dcuº
; i < c->
ªcvpkt
; i++)

1501 i‡((
c
->
udµkt
[
i
].
d©a
 !
NULL
)

1502 && (
c
->
udµkt
[
i
].
c›ybyãs
 < c->udµkt[i].
rbyãs
))

1504 
hódî

c
->
udµkt
[
i
].header;

1505 
Àn

c
->
udµkt
[
i
].
rbyãs
 - c->udµkt[i].
c›ybyãs
;

1506 i‡(
Àn
 > 
rbyãs
 - 
wbyãs
)

1508 
Àn

rbyãs
 - 
wbyãs
;

1511 
	`as£π
(
Àn
 <
rbyãs
 - 
wbyãs
);

1512 
	`as£π
(
i
 =
	`HEADER_TO_SEQNUM
(
hódî
));

1514 
	`mem˝y
(
buf
 + 
wbyãs
, 
c
->
udµkt
[
i
].
d©a
 + c->udµkt[i].
c›ybyãs
,

1515 (
size_t
)
Àn
);

1516 
wbyãs
+
Àn
;

1517 
c
->
udµkt
[
i
].
c›ybyãs
+
Àn
;

1519 i‡((
c
->
udµkt
[
i
].
c›ybyãs
 =c->udµkt[i].
rbyãs
)

1520 && (
c
->
udµkt
[
i
].
rbyãs
 =
UDP_MAX_PAYLOAD_SIZE
 - 
UDP_HEADER_SIZE
))

1523 
c
->
‹dcuº
++;

1527 i‡((
c
->
ªcvpkt
 =c->
∑ckës
Ë&& (
i
 == c->recvpkt - 1)

1528 && (
c
->
udµkt
[
i
].
c›ybyãs
 =c->udµkt[i].
rbyãs
))

1534 i‡(
wbyãs
 >
rbyãs
)

1540 i‡((
i
 !
c
->
ªcvpkt
 - 1)

1541 && (
c
->
udµkt
[
i
].
rbyãs
 < 
UDP_MAX_PAYLOAD_SIZE
 - 
UDP_HEADER_SIZE
))

1552 ()
∑ckës
;

1554  
wbyãs
 == 0 ? -1 : wbytes;

1555 
	}
}

1568 
	$ms_udp_ªad
(
ms_c⁄n_t
 *
c
, *
buf
, 
Àn
)

1570 
ªs
= 0;

1571 
avaû
= 0;

1572 
rbyãs
= 0;

1573 
c›ybyãs
= 0;

1575 
	`as£π
(
c
->
udp
);

1579 i‡(
c
->
rudpbyãs
 + 
UDP_MAX_PAYLOAD_SIZE
 > c->
rudpsize
)

1581 *
√w_rbuf

	`ªÆloc
(
c
->
rudpbuf
, (
size_t
)c->
rudpsize
 * 2);

1582 i‡(! 
√w_rbuf
)

1584 
	`Ârötf
(
°dîr
, "Couldn'tÑealloc input buffer.\n");

1585 
c
->
rudpbyãs
= 0;

1588 
c
->
rudpbuf

√w_rbuf
;

1589 
c
->
rudpsize
*= 2;

1592 
avaû

c
->
rudpsize
 - c->
rudpbyãs
;

1594 
ªs
()
	`ªad
(
c
->
sfd
, c->
rudpbuf
 + c->
rudpbyãs
, (
size_t
)
avaû
);

1596 i‡(
ªs
 > 0)

1598 
	`©omic_add_size
(&
ms_°©s
.
byãs_ªad
, 
ªs
);

1599 
c
->
rudpbyãs
+
ªs
;

1600 
rbyãs
+
ªs
;

1601 i‡(
ªs
 =
avaû
)

1611 i‡(
ªs
 == 0)

1614  
ªs
;

1617 i‡(
ªs
 == -1)

1620  
ªs
;

1625 i‡(
rbyãs
 > 0)

1627 
c›ybyãs

	`ms_s‹t_udp_∑ckë
(
c
, 
buf
, 
Àn
);

1630 i‡(
c›ybyãs
 == -1)

1632 
	`©omic_add_size
(&
ms_°©s
.
pkt_dis‹dî
, 1);

1635  
c›ybyãs
;

1636 
	}
}

1659 
	$ms_åy_ªad_√tw‹k
(
ms_c⁄n_t
 *
c
)

1661 
gŸd©a
= 0;

1662 
ªs
;

1663 
öt64_t
 
avaû
;

1665 
	`as£π
(
c
 !
NULL
);

1667 i‡((
c
->
rcuº
 !c->
rbuf
)

1668 && (! 
c
->
ªadvÆ
 || (c->
rvbyãs
 > c->
rsize
 - (c->
rcuº
 - c->
rbuf
))

1669 || (
c
->
ªadvÆ
 && (c->
rcuº
 - c->
rbuf
 > c->
rbyãs
))))

1671 i‡(
c
->
rbyãs
 != 0)

1672 
	`memmove
(
c
->
rbuf
, c->
rcuº
, (
size_t
)c->
rbyãs
);

1673 
c
->
rcuº
c->
rbuf
;

1678 i‡(
c
->
rbyãs
 >c->
rsize
)

1680 *
√w_rbuf

	`ªÆloc
(
c
->
rbuf
, (
size_t
)c->
rsize
 * 2);

1681 i‡(! 
√w_rbuf
)

1683 
	`Ârötf
(
°dîr
, "Couldn'tÑealloc input buffer.\n");

1684 
c
->
rbyãs
= 0;

1687 
c
->
rcuº
c->
rbuf

√w_rbuf
;

1688 
c
->
rsize
*= 2;

1691 
avaû

c
->
rsize
 - c->
rbyãs
 - (c->
rcuº
 - c->
rbuf
);

1692 i‡(
avaû
 == 0)

1697 i‡(
c
->
udp
)

1699 
ªs
(
öt32_t
)
	`ms_udp_ªad
(
c
, c->
rcuº
 + c->
rbyãs
, (öt32_t)
avaû
);

1703 
ªs
()
	`ªad
(
c
->
sfd
, c->
rcuº
 + c->
rbyãs
, (
size_t
)
avaû
);

1706 i‡(
ªs
 > 0)

1708 i‡(! 
c
->
udp
)

1710 
	`©omic_add_size
(&
ms_°©s
.
byãs_ªad
, 
ªs
);

1712 
gŸd©a
= 1;

1713 
c
->
rbyãs
+
ªs
;

1714 i‡(
ªs
 =
avaû
)

1723 i‡(
ªs
 == 0)

1726 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

1729 i‡(
ªs
 == -1)

1731 i‡((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EWOULDBLOCK
))

1734 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

1739  
gŸd©a
;

1740 
	}
}

1752 
	$ms_vîify_vÆue
(
ms_c⁄n_t
 *
c
,

1753 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
,

1754 *
vÆue
,

1755 
vÀn
)

1757 i‡(
c
->
cuº_èsk
.
vîify
)

1759 
	`as£π
(
c
->
cuº_èsk
.
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
);

1760 *
‹ignvÆ
&
ms_£âög
.
ch¨_block
[
c
->
cuº_èsk
.
ôem
->
vÆue_off£t
];

1761 *
‹ignkey
=

1762 &
ms_£âög
.
ch¨_block
[
c
->
cuº_èsk
.
ôem
->
key_suffix_off£t
];

1765 i‡(
c
->
cuº_èsk
.
ôem
->
exp_time
 > 0)

1767 
timevÆ
 
cuº_time
;

1768 
	`gëtimeofday
(&
cuº_time
, 
NULL
);

1771 i‡(
cuº_time
.
tv_£c
 - 
c
->
cuº_èsk
.
ôem
->
˛õ¡_time


1772 > 
c
->
cuº_èsk
.
ôem
->
exp_time
 + 
EXPIRE_TIME_ERROR
)

1774 
	`©omic_add_size
(&
ms_°©s
.
exp_gë
, 1);

1776 i‡(
ms_£âög
.
vîbo£
)

1778 
£t_time
[64];

1779 
cur_time
[64];

1780 
	`°r·ime
(
£t_time
, 64, "%Y-%m-%d %H:%M:%S",

1781 
	`loˇ…ime
(&
c
->
cuº_èsk
.
ôem
->
˛õ¡_time
));

1782 
	`°r·ime
(
cur_time
, 64, "%Y-%m-%d %H:%M:%S",

1783 
	`loˇ…ime
(&
cuº_time
.
tv_£c
));

1784 
	`Ârötf
(
°dîr
,

1788 "\tkey: %" 
PRIx64
 " %.*s\n"

1794 
c
->
sfd
,

1795 
c
->
cuº_èsk
.
ôem
->
key_size
,

1796 
c
->
cuº_èsk
.
ôem
->
key_¥efix
,

1797 
c
->
cuº_èsk
.
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

1798 
‹ignkey
,

1799 
£t_time
,

1800 
cur_time
,

1801 ()(
cuº_time
.
tv_£c
 - 
c
->
cuº_èsk
.
ôem
->
˛õ¡_time
),

1802 
c
->
cuº_èsk
.
ôem
->
exp_time
,

1803 
vÀn
,

1804 
vÀn
,

1805 
vÆue
);

1806 
	`fÊush
(
°dîr
);

1812 i‡((
c
->
cuº_èsk
.
ôem
->
vÆue_size
 !
vÀn
)

1813 || (
	`memcmp
(
‹ignvÆ
, 
vÆue
, (
size_t
)
vÀn
) != 0))

1815 
	`©omic_add_size
(&
ms_°©s
.
vef_Áûed
, 1);

1817 i‡(
ms_£âög
.
vîbo£
)

1819 
	`Ârötf
(
°dîr
,

1822 "\tkey: %" 
PRIx64
" %.*s\n"

1827 
c
->
sfd
,

1828 
c
->
cuº_èsk
.
ôem
->
key_size
,

1829 
c
->
cuº_èsk
.
ôem
->
key_¥efix
,

1830 
c
->
cuº_èsk
.
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

1831 
‹ignkey
,

1832 
c
->
cuº_èsk
.
ôem
->
vÆue_size
,

1833 
c
->
cuº_èsk
.
ôem
->
vÆue_size
,

1834 
‹ignvÆ
,

1835 
vÀn
,

1836 
vÀn
,

1837 
vÆue
);

1838 
	`fÊush
(
°dîr
);

1843 
c
->
cuº_èsk
.
föish_vîify

åue
;

1845 i‡(
mlgë_ôem
 !
NULL
)

1847 
mlgë_ôem
->
föish_vîify

åue
;

1850 
	}
}

1859 
	$ms_ascii_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
)

1861 
	`as£π
(
c
 !
NULL
);

1862 
	`as£π
(
c
->
rbyãs
 >c->
rvbyãs
);

1863 
	`as£π
(
c
->
¥Ÿocﬁ
 =
ascii_¥Ÿ
);

1864 i‡(
c
->
rvbyãs
 > 2)

1866 
	`as£π
(

1867 
c
->
rcuº
[c->
rvbyãs
 - 1] == '\n' && c->rcurr[c->rvbytes - 2] == '\r');

1871 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem

NULL
;

1872 i‡(((
ms_£âög
.
mu…_key_num
 > 1)

1873 && (
c
->
mlgë_èsk
.
mlgë_num
 >
ms_£âög
.
mu…_key_num
))

1874 || ((
c
->
ªmaö_exec_num
 =0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0)))

1876 
c
->
mlgë_èsk
.
vÆue_ödex
++;

1877 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[c->mlgë_èsk.
vÆue_ödex
];

1879 i‡(
mlgë_ôem
->
ôem
->
key_¥efix
 =
c
->
cuºcmd
.key_prefix)

1881 
c
->
cuº_èsk
.
ôem

mlgë_ôem
->item;

1882 
c
->
cuº_èsk
.
vîify

mlgë_ôem
->verify;

1883 
c
->
cuº_èsk
.
föish_vîify

mlgë_ôem
->finish_verify;

1884 
mlgë_ôem
->
gë_miss

Ál£
;

1889 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

1891 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[
i
];

1892 i‡(
mlgë_ôem
->
ôem
->
key_¥efix
 =
c
->
cuºcmd
.key_prefix)

1894 
c
->
cuº_èsk
.
ôem

mlgë_ôem
->item;

1895 
c
->
cuº_èsk
.
vîify

mlgë_ôem
->verify;

1896 
c
->
cuº_èsk
.
föish_vîify

mlgë_ôem
->finish_verify;

1897 
mlgë_ôem
->
gë_miss

Ál£
;

1905 
	`ms_vîify_vÆue
(
c
, 
mlgë_ôem
, c->
rcuº
, c->
rvbyãs
 - 2);

1907 
c
->
cuº_èsk
.
gë_miss

Ál£
;

1908 
c
->
rbyãs
-c->
rvbyãs
;

1909 
c
->
rcuº
c->rcuº + c->
rvbyãs
;

1910 
	`as£π
(
c
->
rcuº
 <(c->
rbuf
 + c->
rsize
));

1911 
c
->
ªadvÆ

Ál£
;

1912 
c
->
rvbyãs
= 0;

1913 
	}
}

1922 
	$ms_bö_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
)

1924 
	`as£π
(
c
 !
NULL
);

1925 
	`as£π
(
c
->
rbyãs
 >c->
rvbyãs
);

1926 
	`as£π
(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
);

1928 
exéí

c
->
bö¨y_hódî
.
ª•⁄£
.extlen;

1929 
keyÀn

c
->
bö¨y_hódî
.
ª•⁄£
.keylen;

1930 
uöt8_t
 
›code

c
->
bö¨y_hódî
.
ª•⁄£
.opcode;

1933 i‡(((
›code
 !
PROTOCOL_BINARY_CMD_GET
)

1934 && (
›code
 !
PROTOCOL_BINARY_CMD_GETQ
))

1935 || (
c
->
rvbyãs
 <
exéí
 + 
keyÀn
))

1938 i‡(
c
->
bö¨y_hódî
.
ª•⁄£
.
›code
 =
PROTOCOL_BINARY_CMD_GET
)

1940 
c
->
cuºcmd
.
ªt°©

MCD_END
;

1941 
c
->
cuº_èsk
.
gë_miss

åue
;

1944 
c
->
ªadvÆ

Ál£
;

1945 
c
->
rvbyãs
= 0;

1946 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1951 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem

NULL
;

1952 i‡(((
ms_£âög
.
mu…_key_num
 > 1)

1953 && (
c
->
mlgë_èsk
.
mlgë_num
 >
ms_£âög
.
mu…_key_num
))

1954 || ((
c
->
ªmaö_exec_num
 =0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0)))

1956 
c
->
mlgë_èsk
.
vÆue_ödex
++;

1957 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[c->mlgë_èsk.
vÆue_ödex
];

1959 
c
->
cuº_èsk
.
ôem

mlgë_ôem
->item;

1960 
c
->
cuº_èsk
.
vîify

mlgë_ôem
->verify;

1961 
c
->
cuº_èsk
.
föish_vîify

mlgë_ôem
->finish_verify;

1962 
mlgë_ôem
->
gë_miss

Ál£
;

1965 
	`ms_vîify_vÆue
(
c
,

1966 
mlgë_ôem
,

1967 
c
->
rcuº
 + 
exéí
 + 
keyÀn
,

1968 
c
->
rvbyãs
 - 
exéí
 - 
keyÀn
);

1970 
c
->
cuºcmd
.
ªt°©

MCD_END
;

1971 
c
->
cuº_èsk
.
gë_miss

Ál£
;

1972 
c
->
rbyãs
-c->
rvbyãs
;

1973 
c
->
rcuº
c->rcuº + c->
rvbyãs
;

1974 
	`as£π
(
c
->
rcuº
 <(c->
rbuf
 + c->
rsize
));

1975 
c
->
ªadvÆ

Ál£
;

1976 
c
->
rvbyãs
= 0;

1978 i‡(
ms_£âög
.
mu…_key_num
 > 1)

1981 i‡(
c
->
mlgë_èsk
.
vÆue_ödex
 =c->mlgë_èsk.
mlgë_num
 - 1)

1983 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1989 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1991 
	}
}

1999 
	$ms_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
)

2001 
	`as£π
(
c
 !
NULL
);

2002 
	`as£π
(
c
->
rbyãs
 >c->
rvbyãs
);

2003 
	`as£π
(
c
->
¥Ÿocﬁ
 =
ascii_¥Ÿ


2004 || 
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
);

2006 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

2008 
	`ms_bö_com∂ëe_ƒód
(
c
);

2012 
	`ms_ascii_com∂ëe_ƒód
(
c
);

2014 
	}
}

2024 
	$ms_add_msghdr
(
ms_c⁄n_t
 *
c
)

2026 
msghdr
 *
msg
;

2028 
	`as£π
(
c
 !
NULL
);

2030 i‡(
c
->
msgsize
 =c->
msgu£d
)

2032 
msg
=

2033 
	`ªÆloc
(
c
->
msgli°
, (
size_t
)c->
msgsize
 * 2 * (
msghdr
));

2034 i‡(! 
msg
)

2037 
c
->
msgli°

msg
;

2038 
c
->
msgsize
*= 2;

2041 
msg

c
->
msgli°
 + c->
msgu£d
;

2047 
	`mem£t
(
msg
, 0, (
msghdr
));

2049 
msg
->
msg_iov
&
c
->
iov
[c->
iovu£d
];

2051 i‡(
c
->
udp
 && (c->
§v_ªcv_addr_size
 > 0))

2053 
msg
->
msg_«me
&
c
->
§v_ªcv_addr
;

2054 
msg
->
msg_«mñí

c
->
§v_ªcv_addr_size
;

2057 
c
->
msgbyãs
= 0;

2058 
c
->
msgu£d
++;

2060 i‡(
c
->
udp
)

2063  
	`ms_add_iov
(
c
, 
NULL
, 
UDP_HEADER_SIZE
);

2066  
EXIT_SUCCESS
;

2067 
	}
}

2078 
	$ms_ísuª_iov_•a˚
(
ms_c⁄n_t
 *
c
)

2080 
	`as£π
(
c
 !
NULL
);

2082 i‡(
c
->
iovu£d
 >c->
iovsize
)

2084 
i
, 
iovnum
;

2085 
iovec
 *
√w_iov
(iove¯*)
	`ªÆloc
(
c
->
iov
,

2086 ((
size_t
)
c
->
iovsize


2088 * (
iovec
));

2089 i‡(! 
√w_iov
)

2092 
c
->
iov

√w_iov
;

2093 
c
->
iovsize
*= 2;

2096 
i
0, 
iovnum
0; i < 
c
->
msgu£d
; i++)

2098 
c
->
msgli°
[
i
].
msg_iov
&c->
iov
[
iovnum
];

2099 
iovnum
+()
c
->
msgli°
[
i
].
msg_iovÀn
;

2103  
EXIT_SUCCESS
;

2104 
	}
}

2117 
	$ms_add_iov
(
ms_c⁄n_t
 *
c
, c⁄° *
buf
, 
Àn
)

2119 
msghdr
 *
m
;

2120 
À·ovî
;

2121 
boﬁ
 
limô_to_mtu
;

2123 
	`as£π
(
c
 !
NULL
);

2127 
m
&
c
->
msgli°
[c->
msgu£d
 - 1];

2132 
limô_to_mtu

c
->
udp
;

2134 #ifde‡
IOV_MAX


2136 i‡((
m
->
msg_iovÀn
 =
IOV_MAX
)

2137 || (
limô_to_mtu
 && (
c
->
msgbyãs
 >
UDP_MAX_SEND_PAYLOAD_SIZE
)))

2139 
	`ms_add_msghdr
(
c
);

2140 
m
&
c
->
msgli°
[c->
msgu£d
 - 1];

2144 i‡(
	`ms_ísuª_iov_•a˚
(
c
) != 0)

2148 i‡(
limô_to_mtu
 && (
Àn
 + 
c
->
msgbyãs
 > 
UDP_MAX_SEND_PAYLOAD_SIZE
))

2150 
À·ovî

Àn
 + 
c
->
msgbyãs
 - 
UDP_MAX_SEND_PAYLOAD_SIZE
;

2151 
Àn
-
À·ovî
;

2155 
À·ovî
= 0;

2158 
m
&
c
->
msgli°
[c->
msgu£d
 - 1];

2159 
m
->
msg_iov
[m->
msg_iovÀn
].
iov_ba£
(*)
buf
;

2160 
m
->
msg_iov
[m->
msg_iovÀn
].
iov_Àn
(
size_t
)
Àn
;

2162 
c
->
msgbyãs
+
Àn
;

2163 
c
->
iovu£d
++;

2164 
m
->
msg_iovÀn
++;

2166 
buf
((*)bufË+ 
Àn
;

2167 
Àn

À·ovî
;

2169 
À·ovî
 > 0);

2171  
EXIT_SUCCESS
;

2172 
	}
}

2182 
	$ms_buûd_udp_hódîs
(
ms_c⁄n_t
 *
c
)

2184 
i
;

2185 *
hdr
;

2187 
	`as£π
(
c
 !
NULL
);

2189 
c
->
ªque°_id

	`ms_gë_udp_ªque°_id
();

2191 i‡(
c
->
msgu£d
 > c->
hdrsize
)

2193 *
√w_hdrbuf
;

2194 i‡(
c
->
hdrbuf
)

2195 
√w_hdrbuf

	`ªÆloc
(
c
->
hdrbuf
,

2196 (
size_t
)
c
->
msgu£d
 * 2 * 
UDP_HEADER_SIZE
);

2198 
√w_hdrbuf

	`mÆloc
((
size_t
)
c
->
msgu£d
 * 2 * 
UDP_HEADER_SIZE
);

2199 i‡(! 
√w_hdrbuf
)

2202 
c
->
hdrbuf
(*)
√w_hdrbuf
;

2203 
c
->
hdrsize
c->
msgu£d
 * 2;

2207 i‡(
c
->
udp
 && (c->
msgu£d
 > 1))

2209 
	`Ârötf
(
°dîr
, "multi-packetÑequest for UDPÇot supported.\n");

2213 
hdr

c
->
hdrbuf
;

2214 
i
0; i < 
c
->
msgu£d
; i++)

2216 
c
->
msgli°
[
i
].
msg_iov
[0].
iov_ba£
(*)
hdr
;

2217 
c
->
msgli°
[
i
].
msg_iov
[0].
iov_Àn

UDP_HEADER_SIZE
;

2218 *
hdr
++()(
c
->
ªque°_id
 / 256);

2219 *
hdr
++()(
c
->
ªque°_id
 % 256);

2220 *
hdr
++()(
i
 / 256);

2221 *
hdr
++()(
i
 % 256);

2222 *
hdr
++()(
c
->
msgu£d
 / 256);

2223 *
hdr
++()(
c
->
msgu£d
 % 256);

2224 *
hdr
++= ()1;

2225 *
hdr
++= ()0;

2226 
	`as£π
(
hdr
 ==

2227 ((*)
c
->
msgli°
[
i
].
msg_iov
[0].
iov_ba£


2228 + 
UDP_HEADER_SIZE
));

2231  
EXIT_SUCCESS
;

2232 
	}
}

2245 
	$ms_å™smô
(
ms_c⁄n_t
 *
c
)

2247 
	`as£π
(
c
 !
NULL
);

2249 i‡((
c
->
msgcuº
 < c->
msgu£d
)

2250 && (
c
->
msgli°
[c->
msgcuº
].
msg_iovÀn
 == 0))

2253 
c
->
msgcuº
++;

2256 i‡(
c
->
msgcuº
 < c->
msgu£d
)

2258 
ssize_t
 
ªs
;

2259 
msghdr
 *
m
&
c
->
msgli°
[c->
msgcuº
];

2261 
ªs

	`£ndmsg
(
c
->
sfd
, 
m
, 0);

2262 i‡(
ªs
 > 0)

2264 
	`©omic_add_size
(&
ms_°©s
.
byãs_wrôãn
, 
ªs
);

2268 
m
->
msg_iovÀn
 > 0 && 
ªs
 >(
ssize_t
)m->
msg_iov
->
iov_Àn
)

2270 
ªs
-(
ssize_t
)
m
->
msg_iov
->
iov_Àn
;

2271 
m
->
msg_iovÀn
--;

2272 
m
->
msg_iov
++;

2277 i‡(
ªs
 > 0)

2279 
m
->
msg_iov
->
iov_ba£
(*)((*)m->msg_iov->iov_ba£ + 
ªs
);

2280 
m
->
msg_iov
->
iov_Àn
-(
size_t
)
ªs
;

2282  
TRANSMIT_INCOMPLETE
;

2284 i‡((
ªs
 =-1Ë&& ((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EWOULDBLOCK
)))

2286 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2288 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2289 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2290  
TRANSMIT_HARD_ERROR
;

2292  
TRANSMIT_SOFT_ERROR
;

2297 
	`Ârötf
(
°dîr
, "FailedÅo write,ándÇot dueÅo blocking.\n");

2299 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2300  
TRANSMIT_HARD_ERROR
;

2304  
TRANSMIT_COMPLETE
;

2306 
	}
}

2319 
	$ms_c⁄n_shrök
(
ms_c⁄n_t
 *
c
)

2321 
	`as£π
(
c
 !
NULL
);

2323 i‡(
c
->
udp
)

2326 i‡((
c
->
rsize
 > 
READ_BUFFER_HIGHWAT
Ë&& (c->
rbyãs
 < 
DATA_BUFFER_SIZE
))

2328 *
√wbuf
;

2330 i‡(
c
->
rcuº
 !c->
rbuf
)

2331 
	`memmove
(
c
->
rbuf
, c->
rcuº
, (
size_t
)c->
rbyãs
);

2333 
√wbuf
(*)
	`ªÆloc
((*)
c
->
rbuf
, 
DATA_BUFFER_SIZE
);

2335 i‡(
√wbuf
)

2337 
c
->
rbuf

√wbuf
;

2338 
c
->
rsize

DATA_BUFFER_SIZE
;

2340 
c
->
rcuº
c->
rbuf
;

2343 i‡(
c
->
udp
 && (c->
rudpsize
 > 
UDP_DATA_BUFFER_HIGHWAT
)

2344 && (
c
->
rudpbyãs
 + 
UDP_MAX_PAYLOAD_SIZE
 < 
UDP_DATA_BUFFER_SIZE
))

2346 *
√w_rbuf
(*)
	`ªÆloc
(
c
->
rudpbuf
, (
size_t
)c->
rudpsize
 * 2);

2347 i‡(! 
√w_rbuf
)

2349 
c
->
rudpbuf

√w_rbuf
;

2350 
c
->
rudpsize

UDP_DATA_BUFFER_SIZE
;

2355 i‡(
c
->
msgsize
 > 
MSG_LIST_HIGHWAT
)

2357 
msghdr
 *
√wbuf
(msghd∏*)
	`ªÆloc
(

2358 (*)
c
->
msgli°
,

2359 
MSG_LIST_INITIAL


2360 * (
c
->
msgli°
[0]));

2361 i‡(
√wbuf
)

2363 
c
->
msgli°

√wbuf
;

2364 
c
->
msgsize

MSG_LIST_INITIAL
;

2369 i‡(
c
->
iovsize
 > 
IOV_LIST_HIGHWAT
)

2371 
iovec
 *
√wbuf
(iove¯*)
	`ªÆloc
((*)
c
->
iov
,

2372 
IOV_LIST_INITIAL


2373 * (
c
->
iov
[0]));

2374 i‡(
√wbuf
)

2376 
c
->
iov

√wbuf
;

2377 
c
->
iovsize

IOV_LIST_INITIAL
;

2381 
	}
}

2392 
	$ms_c⁄n_£t_°©e
(
ms_c⁄n_t
 *
c
, 
°©e
)

2394 
	`as£π
(
c
 !
NULL
);

2396 i‡(
°©e
 !
c
->state)

2398 i‡(
°©e
 =
c⁄n_ªad
)

2400 
	`ms_c⁄n_shrök
(
c
);

2402 
c
->
°©e
= state;

2404 
	}
}

2417 
boﬁ
 
	$ms_upd©e_evít
(
ms_c⁄n_t
 *
c
, c⁄° 
√w_Êags
)

2419 
	`as£π
(
c
 !
NULL
);

2421 
evít_ba£
 *
ba£

c
->
evít
.
ev_ba£
;

2422 i‡((
c
->
ev_Êags
 =
√w_Êags
Ë&& (
ms_£âög
.
ªp_wrôe_§v
 == 0)

2423 && (! 
ms_£âög
.
Á˚book_ã°
 || (
c
->
tŸÆ_sfds
 == 1)))

2425  
åue
;

2428 i‡(
	`evít_dñ
(&
c
->
evít
) == -1)

2431 i‡(
	`evít_dñ
(&
c
->
evít
) == -1)

2433  
Ál£
;

2437 
	`evít_£t
(&
c
->
evít
,

2438 
c
->
sfd
,

2439 ()
√w_Êags
,

2440 
ms_evít_h™dÀr
,

2441 (*)
c
);

2442 
	`evít_ba£_£t
(
ba£
, &
c
->
evít
);

2443 
c
->
ev_Êags
()
√w_Êags
;

2445 i‡(
	`evít_add
(&
c
->
evít
, 
NULL
) == -1)

2447  
Ál£
;

2450  
åue
;

2451 
	}
}

2464 
boﬁ
 
	$ms_√ed_yõld
(
ms_c⁄n_t
 *
c
)

2466 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

2467 
öt64_t
 
çs
= 0;

2468 
öt64_t
 
time_diff
= 0;

2469 
timevÆ
 
cuº_time
;

2470 
ms_èsk_t
 *
èsk
&
c
->
cuº_èsk
;

2472 i‡(
ms_£âög
.
ex≥˘ed_çs
 > 0)

2474 
	`gëtimeofday
(&
cuº_time
, 
NULL
);

2475 
time_diff

	`ms_time_diff
(&
ms_thªad
->
°¨tup_time
, &
cuº_time
);

2476 
çs
(
öt64_t
)(((
èsk
->
gë_›t
 +Åask->
£t_›t
Ë/ (
uöt64_t
)
time_diff
) * 1000000);

2479 i‡(
çs
 > 
ms_thªad
->
thªad_˘x
->
çs_≥rc⁄n
)

2481  
åue
;

2485  
Ál£
;

2486 
	}
}

2494 
	$ms_upd©e_°¨t_time
(
ms_c⁄n_t
 *
c
)

2496 
ms_èsk_ôem_t
 *
ôem

c
->
cuº_èsk
.item;

2498 i‡((
ms_£âög
.
°©_‰eq
 > 0Ë|| 
c
->
udp


2499 || ((
c
->
cuºcmd
.
cmd
 =
CMD_SET
Ë&& (
ôem
->
exp_time
 > 0)))

2501 
	`gëtimeofday
(&
c
->
°¨t_time
, 
NULL
);

2502 i‡((
c
->
cuºcmd
.
cmd
 =
CMD_SET
Ë&& (
ôem
->
exp_time
 > 0))

2505 
ôem
->
˛õ¡_time

c
->
°¨t_time
.
tv_£c
;

2508 
	}
}

2516 
	$ms_drive_machöe
(
ms_c⁄n_t
 *
c
)

2518 
boﬁ
 
°›

Ál£
;

2520 
	`as£π
(
c
 !
NULL
);

2522 ! 
°›
)

2524 
c
->
°©e
)

2526 
c⁄n_ªad
:

2527 i‡(
c
->
ªadvÆ
)

2529 i‡(
c
->
rbyãs
 >c->
rvbyãs
)

2531 
	`ms_com∂ëe_ƒód
(
c
);

2537 i‡(
	`ms_åy_ªad_löe
(
c
) != 0)

2543 i‡(
	`ms_åy_ªad_√tw‹k
(
c
) != 0)

2549 i‡(! 
c
->
cuºcmd
.
isföish
)

2551 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_READ
 | 
EV_PERSIST
))

2553 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2554 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2557 
°›

åue
;

2562 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_wrôe
);

2563 
	`mem˝y
(&
c
->
¥ecmd
, &c->
cuºcmd
, (
ms_cmd°©_t
));

2567 
c⁄n_wrôe
:

2568 i‡(! 
c
->
˘nwrôe
 && 
	`ms_√ed_yõld
(c))

2570 
	`u¶ìp
(10);

2572 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2574 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2575 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2578 
°›

åue
;

2582 i‡(! 
c
->
˘nwrôe
 && (
	`ms_exec_èsk
(c) != 0))

2584 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2589 i‡(! 
c
->
˘nwrôe
 || (c->
ch™ge_sfd
 && c->ctnwrite))

2591 i‡(
c
->
ch™ge_sfd
)

2593 
c
->
ch™ge_sfd

Ál£
;

2595 
	`ms_upd©e_°¨t_time
(
c
);

2599 i‡(
c
->
ch™ge_sfd
)

2601 
c
->
˘nwrôe

åue
;

2602 
°›

åue
;

2607 i‡(! 
c
->
˘nwrôe
 && (c->
msgcuº
 =c->
msgu£d
))

2609 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2611 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2612 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2615 
°›

åue
;

2619 
	`ms_å™smô
(
c
))

2621 
TRANSMIT_COMPLETE
:

2623 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_READ
 | 
EV_PERSIST
))

2625 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2626 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2627 
c
->
˘nwrôe

Ál£
;

2630 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_ªad
);

2631 
c
->
˘nwrôe

Ál£
;

2632 
°›

åue
;

2635 
TRANSMIT_INCOMPLETE
:

2636 
c
->
˘nwrôe

åue
;

2639 
TRANSMIT_HARD_ERROR
:

2640 
c
->
˘nwrôe

Ál£
;

2643 
TRANSMIT_SOFT_ERROR
:

2644 
c
->
˘nwrôe

åue
;

2645 
°›

åue
;

2654 
c⁄n_˛osög
:

2656 i‡(
ms_£âög
.
ªc⁄√˘
 && (! 
ms_globÆ
.
time_out


2657 || ((
ms_£âög
.
run_time
 == 0)

2658 && (
c
->
ªmaö_exec_num
 > 0))))

2660 i‡(
	`ms_ªc⁄n
(
c
) != 0)

2662 
	`ms_c⁄n_˛o£
(
c
);

2663 
°›

åue
;

2667 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

2669 i‡(
c
->
tŸÆ_sfds
 == 1)

2671 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2673 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2674 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2683 
	`ms_c⁄n_˛o£
(
c
);

2684 
°›

åue
;

2689 
	`as£π
(0);

2692 
	}
}

2702 
	$ms_evít_h™dÀr
(c⁄° 
fd
, c⁄° 
which
, *
¨g
)

2704 
ms_c⁄n_t
 *
c
(ms_c⁄n_à*)
¨g
;

2706 
	`as£π
(
c
 !
NULL
);

2708 
c
->
which
= which;

2711 i‡(
fd
 !
c
->
sfd
)

2713 
	`Ârötf
(
°dîr
,

2715 
fd
,

2716 
c
->
sfd
);

2717 
	`ms_c⁄n_˛o£
(
c
);

2718 
	`exô
(1);

2720 
	`as£π
(
fd
 =
c
->
sfd
);

2722 
	`ms_drive_machöe
(
c
);

2725 
	}
}

2736 
uöt32_t
 
	$ms_gë_ªp_sock_ödex
(
ms_c⁄n_t
 *
c
, 
cmd
)

2738 
uöt32_t
 
sock_ödex
= 0;

2739 
uöt32_t
 
i
= 0;

2741 i‡(
c
->
tŸÆ_sfds
 == 1)

2743  
EXIT_SUCCESS
;

2746 i‡(
ms_£âög
.
ªp_wrôe_§v
 == 0)

2748  
sock_ödex
;

2753 i‡(
cmd
 =
CMD_SET
)

2755 
i
0; i < 
ms_£âög
.
ªp_wrôe_§v
; i++)

2757 i‡(
c
->
t˝sfd
[
i
] > 0)

2763 i‡(
i
 =
ms_£âög
.
ªp_wrôe_§v
)

2766 
sock_ödex
(
uöt32_t
)
	`øndom
(Ë% 
c
->
tŸÆ_sfds
;

2771 
sock_ödex
(
uöt32_t
)
	`øndom
(Ë% 
ms_£âög
.
ªp_wrôe_§v
;

2774 i‡(
cmd
 =
CMD_GET
)

2777 
sock_ödex
(
uöt32_t
)
	`øndom
(Ë% 
c
->
tŸÆ_sfds
;

2780 
c
->
t˝sfd
[
sock_ödex
] == 0);

2782  
sock_ödex
;

2783 
	}
}

2793 
uöt32_t
 
	$ms_gë_√xt_sock_ödex
(
ms_c⁄n_t
 *
c
)

2795 
uöt32_t
 
sock_ödex
= 0;

2799 
sock_ödex
(++
c
->
cur_idx
 =c->
tŸÆ_sfds
) ? 0 : c->cur_idx;

2801 
c
->
t˝sfd
[
sock_ödex
] == 0);

2803  
sock_ödex
;

2804 
	}
}

2814 
	$ms_upd©e_c⁄n_sock_evít
(
ms_c⁄n_t
 *
c
)

2816 
	`as£π
(
c
 !
NULL
);

2818 
c
->
cuºcmd
.
cmd
)

2820 
CMD_SET
:

2821 i‡(
ms_£âög
.
Á˚book_ã°
 && 
c
->
udp
)

2823 
c
->
sfd
c->
t˝sfd
[0];

2824 
c
->
udp

Ál£
;

2825 
c
->
ch™ge_sfd

åue
;

2829 
CMD_GET
:

2830 i‡(
ms_£âög
.
Á˚book_ã°
 && ! 
c
->
udp
)

2832 
c
->
sfd
c->
udpsfd
;

2833 
c
->
udp

åue
;

2834 
c
->
ch™ge_sfd

åue
;

2842 i‡(! 
c
->
udp
 && (c->
tŸÆ_sfds
 > 1))

2844 i‡(
c
->
cur_idx
 !c->
tŸÆ_sfds
)

2846 i‡(
ms_£âög
.
ªp_wrôe_§v
 == 0)

2848 
c
->
cur_idx

	`ms_gë_√xt_sock_ödex
(c);

2852 
c
->
cur_idx

	`ms_gë_ªp_sock_ödex
(c, c->
cuºcmd
.
cmd
);

2858 
c
->
cur_idx
= 0;

2861 
c
->
sfd
c->
t˝sfd
[c->
cur_idx
];

2862 
	`as£π
(
c
->
sfd
 != 0);

2863 
c
->
ch™ge_sfd

åue
;

2866 i‡(
c
->
ch™ge_sfd
)

2868 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2870 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2871 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2876  
EXIT_SUCCESS
;

2877 
	}
}

2890 
	$ms_buûd_ascii_wrôe_buf_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

2892 
vÆue_off£t
;

2893 
wrôe_Àn
;

2894 *
buf„r

c
->
wbuf
;

2896 
wrôe_Àn

	`¢¥ötf
(
buf„r
,

2897 
c
->
wsize
,

2900 
ôem
->
exp_time
,

2901 
ôem
->
vÆue_size
);

2903 i‡(
wrôe_Àn
 > 
c
->
wsize
 || write_len < 0)

2906 
	`Ârötf
(
°dîr
, "output commandÜineÅooÜong.\n");

2910 i‡(
ôem
->
vÆue_off£t
 =
INVALID_OFFSET
)

2912 
vÆue_off£t

ôem
->
key_suffix_off£t
;

2916 
vÆue_off£t

ôem
->value_offset;

2919 i‡((
	`ms_add_iov
(
c
, "set ", 4) != 0)

2920 || (
	`ms_add_iov
(
c
, (*)&
ôem
->
key_¥efix
,

2921 ()
KEY_PREFIX_SIZE
) != 0)

2922 || (
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
],

2923 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
) != 0)

2924 || (
	`ms_add_iov
(
c
, 
buf„r
, 
wrôe_Àn
) != 0)

2925 || (
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
vÆue_off£t
],

2926 
ôem
->
vÆue_size
) != 0)

2927 || (
	`ms_add_iov
(
c
, "\r\n", 2) != 0)

2928 || (
c
->
udp
 && (
	`ms_buûd_udp_hódîs
(c) != 0)))

2933  
EXIT_SUCCESS
;

2934 
	}
}

2946 
	$ms_mcd_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

2948 
	`as£π
(
c
 !
NULL
);

2950 
c
->
cuºcmd
.
cmd

CMD_SET
;

2951 
c
->
cuºcmd
.
isföish

Ál£
;

2952 
c
->
cuºcmd
.
ªt°©

MCD_FAILURE
;

2954 i‡(
	`ms_upd©e_c⁄n_sock_evít
(
c
) != 0)

2959 
c
->
msgcuº
= 0;

2960 
c
->
msgu£d
= 0;

2961 
c
->
iovu£d
= 0;

2962 i‡(
	`ms_add_msghdr
(
c
) != 0)

2964 
	`Ârötf
(
°dîr
, "Out of memoryÖreparingÑequest.");

2969 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

2971 i‡(
	`ms_buûd_bö_wrôe_buf_£t
(
c
, 
ôem
) != 0)

2978 i‡(
	`ms_buûd_ascii_wrôe_buf_£t
(
c
, 
ôem
) != 0)

2984 
	`©omic_add_size
(&
ms_°©s
.
obj_byãs
,

2985 
ôem
->
key_size
 + iãm->
vÆue_size
);

2986 
	`©omic_add_size
(&
ms_°©s
.
cmd_£t
, 1);

2988  
EXIT_SUCCESS
;

2989 
	}
}

3002 
	$ms_buûd_ascii_wrôe_buf_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

3004 i‡((
	`ms_add_iov
(
c
, "get ", 4) != 0)

3005 || (
	`ms_add_iov
(
c
, (*)&
ôem
->
key_¥efix
,

3006 ()
KEY_PREFIX_SIZE
) != 0)

3007 || (
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
],

3008 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
) != 0)

3009 || (
	`ms_add_iov
(
c
, "\r\n", 2) != 0)

3010 || (
c
->
udp
 && (
	`ms_buûd_udp_hódîs
(c) != 0)))

3015  
EXIT_SUCCESS
;

3016 
	}
}

3028 
	$ms_mcd_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

3030 
	`as£π
(
c
 !
NULL
);

3032 
c
->
cuºcmd
.
cmd

CMD_GET
;

3033 
c
->
cuºcmd
.
isföish

Ál£
;

3034 
c
->
cuºcmd
.
ªt°©

MCD_FAILURE
;

3036 i‡(
	`ms_upd©e_c⁄n_sock_evít
(
c
) != 0)

3041 
c
->
msgcuº
= 0;

3042 
c
->
msgu£d
= 0;

3043 
c
->
iovu£d
= 0;

3044 i‡(
	`ms_add_msghdr
(
c
) != 0)

3046 
	`Ârötf
(
°dîr
, "Out of memoryÖreparingÑequest.");

3051 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

3053 i‡(
	`ms_buûd_bö_wrôe_buf_gë
(
c
, 
ôem
) != 0)

3060 i‡(
	`ms_buûd_ascii_wrôe_buf_gë
(
c
, 
ôem
) != 0)

3066 
	`©omic_add_size
(&
ms_°©s
.
cmd_gë
, 1);

3068  
EXIT_SUCCESS
;

3069 
	}
}

3080 
	$ms_buûd_ascii_wrôe_buf_mlgë
(
ms_c⁄n_t
 *
c
)

3082 
ms_èsk_ôem_t
 *
ôem
;

3084 i‡(
	`ms_add_iov
(
c
, "get", 3) != 0)

3089 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

3091 
ôem

c
->
mlgë_èsk
.
mlgë_ôem
[
i
].item;

3092 
	`as£π
(
ôem
 !
NULL
);

3093 i‡((
	`ms_add_iov
(
c
, " ", 1) != 0)

3094 || (
	`ms_add_iov
(
c
, (*)&
ôem
->
key_¥efix
,

3095 ()
KEY_PREFIX_SIZE
) != 0)

3096 || (
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
],

3097 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
) != 0))

3103 i‡((
	`ms_add_iov
(
c
, "\r\n", 2) != 0)

3104 || (
c
->
udp
 && (
	`ms_buûd_udp_hódîs
(c) != 0)))

3109  
EXIT_SUCCESS
;

3110 
	}
}

3120 
	$ms_mcd_mlgë
(
ms_c⁄n_t
 *
c
)

3122 
ms_èsk_ôem_t
 *
ôem
;

3124 
	`as£π
(
c
 !
NULL
);

3125 
	`as£π
(
c
->
mlgë_èsk
.
mlgë_num
 >= 1);

3127 
c
->
cuºcmd
.
cmd

CMD_GET
;

3128 
c
->
cuºcmd
.
isföish

Ál£
;

3129 
c
->
cuºcmd
.
ªt°©

MCD_FAILURE
;

3131 i‡(
	`ms_upd©e_c⁄n_sock_evít
(
c
) != 0)

3136 
c
->
msgcuº
= 0;

3137 
c
->
msgu£d
= 0;

3138 
c
->
iovu£d
= 0;

3139 i‡(
	`ms_add_msghdr
(
c
) != 0)

3141 
	`Ârötf
(
°dîr
, "Out of memoryÖreparingÑequest.");

3146 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

3148 i‡(
	`ms_buûd_bö_wrôe_buf_mlgë
(
c
) != 0)

3155 i‡(
	`ms_buûd_ascii_wrôe_buf_mlgë
(
c
) != 0)

3162 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

3164 
ôem

c
->
mlgë_èsk
.
mlgë_ôem
[
i
].item;

3165 
	`©omic_add_size
(&
ms_°©s
.
cmd_gë
, 1);

3168 ()
ôem
;

3170  
EXIT_SUCCESS
;

3171 
	}
}

3185 
	$ms_bö_¥o˚ss_ª•⁄£
(
ms_c⁄n_t
 *
c
)

3187 c⁄° *
îr°r

NULL
;

3189 
	`as£π
(
c
 !
NULL
);

3191 
uöt32_t
 
bodyÀn

c
->
bö¨y_hódî
.
ª•⁄£
.bodylen;

3192 
uöt8_t
 
›code

c
->
bö¨y_hódî
.
ª•⁄£
.opcode;

3193 
uöt16_t
 
°©us

c
->
bö¨y_hódî
.
ª•⁄£
.status;

3195 i‡(
bodyÀn
 > 0)

3197 
c
->
rvbyãs
(
öt32_t
)
bodyÀn
;

3198 
c
->
ªadvÆ

åue
;

3199  
EXIT_FAILURE
;

3203 
°©us
)

3205 
PROTOCOL_BINARY_RESPONSE_SUCCESS
:

3206 i‡(
›code
 =
PROTOCOL_BINARY_CMD_SET
)

3208 
c
->
cuºcmd
.
ªt°©

MCD_STORED
;

3210 i‡(
›code
 =
PROTOCOL_BINARY_CMD_DELETE
)

3212 
c
->
cuºcmd
.
ªt°©

MCD_DELETED
;

3214 i‡(
›code
 =
PROTOCOL_BINARY_CMD_GET
)

3216 
c
->
cuºcmd
.
ªt°©

MCD_END
;

3220 
PROTOCOL_BINARY_RESPONSE_ENOMEM
:

3221 
îr°r
= "Out of memory";

3222 
c
->
cuºcmd
.
ªt°©

MCD_SERVER_ERROR
;

3225 
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
:

3226 
îr°r
= "Unknown command";

3227 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

3230 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
:

3231 
îr°r
= "Not found";

3232 
c
->
cuºcmd
.
ªt°©

MCD_NOTFOUND
;

3235 
PROTOCOL_BINARY_RESPONSE_EINVAL
:

3236 
îr°r
= "Invalidárguments";

3237 
c
->
cuºcmd
.
ªt°©

MCD_PROTOCOL_ERROR
;

3240 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
:

3241 
îr°r
= "DataÉxists for key.";

3244 
PROTOCOL_BINARY_RESPONSE_E2BIG
:

3245 
îr°r
= "TooÜarge.";

3246 
c
->
cuºcmd
.
ªt°©

MCD_SERVER_ERROR
;

3249 
PROTOCOL_BINARY_RESPONSE_NOT_STORED
:

3250 
îr°r
= "Not stored.";

3251 
c
->
cuºcmd
.
ªt°©

MCD_NOTSTORED
;

3255 
îr°r
= "UnknownÉrror";

3256 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

3260 i‡(
îr°r
 !
NULL
)

3262 
	`Ârötf
(
°dîr
, "%s\n", 
îr°r
);

3266  
EXIT_SUCCESS
;

3267 
	}
}

3281 
	$ms_add_bö_hódî
(
ms_c⁄n_t
 *
c
,

3282 
uöt8_t
 
›code
,

3283 
uöt8_t
 
hdr_Àn
,

3284 
uöt16_t
 
key_Àn
,

3285 
uöt32_t
 
body_Àn
)

3287 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
;

3289 
	`as£π
(
c
 !
NULL
);

3291 
hódî
(
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *)
c
->
wcuº
;

3293 
hódî
->
ªque°
.
magic
(
uöt8_t
)
PROTOCOL_BINARY_REQ
;

3294 
hódî
->
ªque°
.
›code
(
uöt8_t
)opcode;

3295 
hódî
->
ªque°
.
keyÀn

	`ht⁄s
(
key_Àn
);

3297 
hódî
->
ªque°
.
exéí
(
uöt8_t
)
hdr_Àn
;

3298 
hódî
->
ªque°
.
d©©y≥
(
uöt8_t
)
PROTOCOL_BINARY_RAW_BYTES
;

3299 
hódî
->
ªque°
.
vbuckë
= 0;

3301 
hódî
->
ªque°
.
bodyÀn

	`ht⁄l
(
body_Àn
);

3302 
hódî
->
ªque°
.
›aque
= 0;

3303 
hódî
->
ªque°
.
ˇs
= 0;

3305 
	`ms_add_iov
(
c
, c->
wcuº
, (
hódî
->
ªque°
));

3306 
	}
}

3316 
	$ms_add_key_to_iov
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

3318 
	`ms_add_iov
(
c
, (*)&
ôem
->
key_¥efix
, ()
KEY_PREFIX_SIZE
);

3319 
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
],

3320 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
);

3321 
	}
}

3334 
	$ms_buûd_bö_wrôe_buf_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

3336 
	`as£π
(
c
->
wbuf
 =c->
wcuº
);

3338 
vÆue_off£t
;

3339 
¥Ÿocﬁ_bö¨y_ªque°_£t
 *
ªp
’rŸocﬁ_bö¨y_ªque°_£à*)
c
->
wcuº
;

3340 
uöt16_t
 
keyÀn
(uöt16_t)
ôem
->
key_size
;

3341 
uöt32_t
 
bodyÀn
(uöt32_t)(
ªp
->
mesßge
.
body
)

3342 + (
uöt32_t
)
keyÀn
 + (uöt32_t)
ôem
->
vÆue_size
;

3344 
	`ms_add_bö_hódî
(
c
,

3345 
PROTOCOL_BINARY_CMD_SET
,

3346 (
ªp
->
mesßge
.
body
),

3347 
keyÀn
,

3348 
bodyÀn
);

3349 
ªp
->
mesßge
.
body
.
Êags
= 0;

3350 
ªp
->
mesßge
.
body
.
expú©i⁄

	`ht⁄l
((
uöt32_t
)
ôem
->
exp_time
);

3351 
	`ms_add_iov
(
c
, &
ªp
->
mesßge
.
body
, (rep->message.body));

3352 
	`ms_add_key_to_iov
(
c
, 
ôem
);

3354 i‡(
ôem
->
vÆue_off£t
 =
INVALID_OFFSET
)

3356 
vÆue_off£t

ôem
->
key_suffix_off£t
;

3360 
vÆue_off£t

ôem
->value_offset;

3362 
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
vÆue_off£t
], 
ôem
->
vÆue_size
);

3364  
EXIT_SUCCESS
;

3365 
	}
}

3378 
	$ms_buûd_bö_wrôe_buf_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

3380 
	`as£π
(
c
->
wbuf
 =c->
wcuº
);

3382 
	`ms_add_bö_hódî
(
c
, 
PROTOCOL_BINARY_CMD_GET
, 0, (
uöt16_t
)
ôem
->
key_size
,

3383 (
uöt32_t
)
ôem
->
key_size
);

3384 
	`ms_add_key_to_iov
(
c
, 
ôem
);

3386  
EXIT_SUCCESS
;

3387 
	}
}

3400 
	$ms_buûd_bö_wrôe_buf_mlgë
(
ms_c⁄n_t
 *
c
)

3402 
ms_èsk_ôem_t
 *
ôem
;

3404 
	`as£π
(
c
->
wbuf
 =c->
wcuº
);

3406 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

3408 
ôem

c
->
mlgë_èsk
.
mlgë_ôem
[
i
].item;

3409 
	`as£π
(
ôem
 !
NULL
);

3411 
	`ms_add_bö_hódî
(
c
,

3412 
PROTOCOL_BINARY_CMD_GET
,

3414 (
uöt16_t
)
ôem
->
key_size
,

3415 (
uöt32_t
)
ôem
->
key_size
);

3416 
	`ms_add_key_to_iov
(
c
, 
ôem
);

3417 
c
->
wcuº
+(
¥Ÿocﬁ_bö¨y_ªque°_gë
);

3420 
c
->
wcuº
c->
wbuf
;

3422  
EXIT_SUCCESS
;

3423 
	}
}

	@clients/ms_conn.h

11 #i‚de‡
MS_CONN_H


12 
	#MS_CONN_H


	)

14 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~<evít.h
>

17 
	~<√tdb.h
>

19 
	~"ms_èsk.h
"

20 
	~<libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
>

22 #ifde‡
__˝lu•lus


26 
	#DATA_BUFFER_SIZE
 (1024 * 1024 + 2048Ë

	)

27 
	#WRITE_BUFFER_SIZE
 (32 * 1024Ë

	)

28 
	#UDP_DATA_BUFFER_SIZE
 (1 * 1024 * 1024Ë

	)

29 
	#UDP_MAX_PAYLOAD_SIZE
 1400

	)

30 
	#UDP_MAX_SEND_PAYLOAD_SIZE
 1400

	)

31 
	#UDP_HEADER_SIZE
 8

	)

32 
	#MAX_SENDBUF_SIZE
 (256 * 1024 * 1024Ë

	)

33 
	#SOCK_WAIT_TIMEOUT
 30

	)

34 
	#MAX_UDP_PACKET
 (1 << 16Ë

	)

37 
	#IOV_LIST_INITIAL
 400

	)

40 
	#MSG_LIST_INITIAL
 10

	)

43 
	#READ_BUFFER_HIGHWAT
 (2 * 
DATA_BUFFER_SIZE
)

	)

44 
	#UDP_DATA_BUFFER_HIGHWAT
 (4 * 
UDP_DATA_BUFFER_SIZE
)

	)

45 
	#IOV_LIST_HIGHWAT
 600

	)

46 
	#MSG_LIST_HIGHWAT
 100

	)

49 
	#HEADER_TO_REQID
(
±r
Ë((
uöt16_t
)*ptr * 256 \

50 + (
uöt16_t
)*(
±r
 + 1))

	)

51 
	#HEADER_TO_SEQNUM
(
±r
Ë((
uöt16_t
)*(ptr \

53 + (
uöt16_t
)*(
±r
 + 3))

	)

54 
	#HEADER_TO_PACKETS
(
±r
Ë((
uöt16_t
)*(ptr \

56 + (
uöt16_t
)*(
±r
 + 5))

	)

59 
	ec⁄n_°©es


61 
c⁄n_ªad
,

62 
c⁄n_wrôe
,

63 
c⁄n_˛osög


67 
	emcd_ªt


69 
MCD_SUCCESS
,

70 
MCD_FAILURE
,

71 
MCD_UNKNOWN_READ_FAILURE
,

72 
MCD_PROTOCOL_ERROR
,

73 
MCD_CLIENT_ERROR
,

74 
MCD_SERVER_ERROR
,

75 
MCD_DATA_EXISTS
,

76 
MCD_NOTSTORED
,

77 
MCD_STORED
,

78 
MCD_NOTFOUND
,

79 
MCD_END
,

80 
MCD_DELETED
,

81 
MCD_STAT


85 
	scmd°©


87 
cmd
;

88 
ªt°©
;

89 
boﬁ
 
isföish
;

90 
uöt64_t
 
key_¥efix
;

91 } 
	tms_cmd°©_t
;

94 
	sudµkt


96 
uöt8_t
 *
hódî
;

97 *
d©a
;

98 
rbyãs
;

99 
c›ybyãs
;

100 } 
	tms_udµkt_t
;

103 
	e¥Ÿocﬁ


105 
ascii_¥Ÿ
 = 3,

106 
bö¨y_¥Ÿ


118 
	sc⁄n


120 
uöt32_t
 
c⁄n_idx
;

121 
sfd
;

122 
udpsfd
;

123 
°©e
;

124 
evít
Évent;

125 
ev_Êags
;

126 
which
;

127 
boﬁ
 
ch™ge_sfd
;

129 *
t˝sfd
;

130 
uöt32_t
 
tŸÆ_sfds
;

131 
uöt32_t
 
Æive_sfds
;

132 
uöt32_t
 
cur_idx
;

134 
ms_cmd°©_t
 
¥ecmd
;

135 
ms_cmd°©_t
 
cuºcmd
;

137 *
rbuf
;

138 *
rcuº
;

139 
rsize
;

140 
rbyãs
;

142 
boﬁ
 
ªadvÆ
;

143 
rvbyãs
;

145 *
wbuf
;

146 *
wcuº
;

147 
wsize
;

148 
boﬁ
 
˘nwrôe
;

151 
iovec
 *
iov
;

152 
iovsize
;

153 
iovu£d
;

155 
msghdr
 *
msgli°
;

156 
msgsize
;

157 
msgu£d
;

158 
msgcuº
;

159 
msgbyãs
;

162 
boﬁ
 
udp
;

163 
uöt32_t
 
ªque°_id
;

164 
uöt8_t
 *
hdrbuf
;

165 
hdrsize
;

166 
sockaddr
 
§v_ªcv_addr
;

167 
sockÀn_t
 
§v_ªcv_addr_size
;

170 *
rudpbuf
;

171 
rudpsize
;

172 
rudpbyãs
;

175 
ms_udµkt_t
 *
udµkt
;

176 
∑ckës
;

177 
ªcvpkt
;

178 
pktcuº
;

179 
‹dcuº
;

181 
ms_èsk_ôem_t
 *
ôem_wö
;

182 
wö_size
;

183 
uöt64_t
 
£t_curs‹
;

184 
ms_èsk_t
 
cuº_èsk
;

185 
ms_mlgë_èsk_t
 
mlgë_èsk
;

187 
w¨mup_num
;

188 
ªmaö_w¨mup_num
;

189 
öt64_t
 
exec_num
;

190 
öt64_t
 
ªmaö_exec_num
;

193 
timevÆ
 
°¨t_time
;

194 
timevÆ
 
íd_time
;

197 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
bö¨y_hódî
;

198 
¥Ÿocﬁ
Örotocol;

199 } 
	tms_c⁄n_t
;

202 
uöt64_t
 
ms_gë_key_¥efix
();

209 
ms_£tup_c⁄n
(
ms_c⁄n_t
 *
c
);

213 
ms_ª£t_c⁄n
(
ms_c⁄n_t
 *
c
, 
boﬁ
 
timeout
);

222 
ms_ªc⁄n_socks
(
ms_c⁄n_t
 *
c
);

226 
ms_mcd_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

230 
ms_mcd_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

234 
ms_mcd_mlgë
(
ms_c⁄n_t
 *
c
);

237 #ifde‡
__˝lu•lus


	@clients/ms_memslap.h

11 #i‚de‡
MS_MEMSLAP_H


12 
	#MS_MEMSLAP_H


	)

14 
	~<°dlib.h
>

15 
	~<°dio.h
>

16 
	~<î∫o.h
>

17 
	~<°rög.h
>

18 
	~<as£π.h
>

19 
	~<uni°d.h
>

20 
	~<°döt.h
>

21 
	~<±hªad.h
>

22 #i‡!
deföed
(
__˝lu•lus
)

23 
	~<°dboﬁ.h
>

25 
	~<m©h.h
>

27 
	~"ms_°©s.h
"

29 #ifde‡
__˝lu•lus


36 
OPT_VERSION
= 'V',

37 
OPT_HELP
= 'h',

38 
OPT_UDP
= 'U',

39 
OPT_SERVERS
= 's',

40 
OPT_EXECUTE_NUMBER
= 'x',

41 
OPT_THREAD_NUMBER
= 'T',

42 
OPT_CONCURRENCY
= 'c',

43 
OPT_FIXED_LTH
= 'X',

44 
OPT_VERIFY
= 'v',

45 
OPT_GETS_DIVISION
= 'd',

46 
OPT_TIME
= 't',

47 
OPT_CONFIG_CMD
= 'F',

48 
OPT_WINDOW_SIZE
= 'w',

49 
OPT_EXPIRE
= 'e',

50 
OPT_STAT_FREQ
= 'S',

51 
OPT_RECONNECT
= 'R',

52 
OPT_VERBOSE
= 'b',

53 
OPT_FACEBOOK_TEST
= 'a',

54 
OPT_SOCK_PER_CONN
= 'n',

55 
OPT_BINARY_PROTOCOL
= 'B',

56 
OPT_OVERWRITE
= 'o',

57 
OPT_TPS
= 'P',

58 
OPT_REP_WRITE_SRV
= 'p'

59 } 
	tms_›ti⁄s_t
;

62 
	s°©i°ic


64 
±hªad_muãx_t
 
°©_muãx
;

66 
ms_°©_t
 
gë_°©
;

67 
ms_°©_t
 
£t_°©
;

68 
ms_°©_t
 
tŸÆ_°©
;

69 } 
	tms_°©i°ic_t
;

72 
	s°©s


74 vﬁ©ûê
uöt32_t
 
a˘ive_c⁄ns
;

75 
size_t
 
byãs_ªad
;

76 
size_t
 
byãs_wrôãn
;

77 
size_t
 
obj_byãs
;

78 
size_t
 
¥e_cmd_gë
;

79 
size_t
 
¥e_cmd_£t
;

80 
size_t
 
cmd_gë
;

81 
size_t
 
cmd_£t
;

82 
size_t
 
gë_mis£s
;

83 
size_t
 
vef_miss
;

84 
size_t
 
vef_Áûed
;

85 
size_t
 
u√xp_ungë
;

86 
size_t
 
exp_gë
;

87 vﬁ©ûê
size_t
 
pkt_dis‹dî
;

88 
size_t
 
pkt_dr›
;

89 
size_t
 
udp_timeout
;

90 } 
	tms_°©s_t
;

93 
	ssync_lock


95 
uöt32_t
 
cou¡
;

96 
±hªad_muãx_t
 
lock
;

97 
±hªad_c⁄d_t
 
c⁄d
;

98 } 
	tms_sync_lock_t
;

101 
	sglobÆ


104 
ms_sync_lock_t
 
öô_lock
;

105 
ms_sync_lock_t
 
w¨mup_lock
;

106 
ms_sync_lock_t
 
run_lock
;

109 
±hªad_muãx_t
 
quô_muãx
;

112 
±hªad_muãx_t
 
£q_muãx
;

115 
boﬁ
 
föish_w¨mup
;

116 
boﬁ
 
time_out
;

117 } 
	tms_globÆ_t
;

120 
ms_globÆ_t
 
ms_globÆ
;

123 
ms_°©s_t
 
ms_°©s
;

126 
ms_°©i°ic_t
 
ms_°©i°ic
;

128 #ifde‡
__˝lu•lus


	@clients/ms_setting.c

12 
	~"mem_c⁄fig.h
"

14 
	~<libmemˇched/memˇched.h
>

16 
	~<˘y≥.h
>

17 
	~<öây≥s.h
>

18 
	~<limôs.h
>

19 
	~<pwd.h
>

20 
	~<°rögs.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<uni°d.h
>

26 
	~"ms_£âög.h
"

27 
	~"ms_c⁄n.h
"

29 
	#MAX_EXEC_NUM
 0x4000000000000000

	)

30 
	#ADDR_ALIGN
(
addr
Ë(◊dd∏+ 15Ë& ~(16 - 1)Ë

	)

31 
	#RAND_CHAR_SIZE
 (10 * 1024 * 1024Ë

	)

32 
	#RESERVED_RAND_CHAR_SIZE
 (2 * 1024 * 1024Ë

	)

34 
	#DEFAULT_CONFIG_NAME
 ".mem¶≠.˙f"

	)

36 
	#DEFAULT_THREADS_NUM
 1

	)

37 
	#DEFAULT_CONNS_NUM
 16

	)

38 
	#DEFAULT_EXE_NUM
 0

	)

39 
	#DEFAULT_VERIFY_RATE
 0.0

	)

40 
	#DEFAULT_OVERWRITE_RATE
 0.0

	)

41 
	#DEFAULT_DIV
 1

	)

42 
	#DEFAULT_RUN_TIME
 600

	)

43 
	#DEFAULT_WINDOW_SIZE
 (10 * 
UNIT_ITEMS_COUNT
Ë

	)

44 
	#DEFAULT_SOCK_PER_CONN
 1

	)

47 
	#CHAR_COUNT
 64

	)

48 c⁄° 
	gALPHANUMBERICS
[]=

51 
ms_£âög_°
 
	gms_£âög
;

55 
ms_gë_£rvîli°
(*
°r
);

56 
uöt32_t
 
ms_gë_˝u_cou¡
();

57 
ms_c⁄f_ty≥_t
 
ms_gë_c⁄f_ty≥
(*
löe
);

58 
ms_is_löe_d©a
(*
löe
);

59 
ms_ªad_is_d©a
(*
löe
, 
ssize_t
 
ƒód
);

60 
ms_no_c⁄fig_fûe
();

61 
ms_∑r£_cfg_fûe
(*
cfg_fûe
);

65 
ms_öô_øndom_block
();

66 
ms_ˇlc_avg_size
();

67 
ms_shufÊe_di°r
(
ms_di°r_t
 *
di°r
, 
Àngth
);

68 
ms_buûd_di°r
();

69 
ms_¥öt_£âög
();

70 
ms_£âög_¶≠mode_öô_¥e
();

71 
ms_£âög_¶≠mode_öô_po°
();

73 #i‡!
deföed
(
HAVE_GETLINE
)

74 
	~<limôs.h
>

75 
ssize_t
 
	$gëlöe
 (**
löe
, 
size_t
 *
löe_size
, 
FILE
 *
Â
)

77 
dñim
= '\n';

78 
ssize_t
 
ªsu…
= 0;

79 
size_t
 
cur_Àn
= 0;

81 i‡(
löe
 =
NULL
 || 
löe_size
 =NULL || 
Â
 == NULL)

83 
î∫o
 = 
EINVAL
;

87 i‡(*
löe
 =
NULL
 || *
löe_size
 == 0)

89 *
√w_löe
;

90 *
löe_size
 = 120;

91 
√w_löe
(*Ë
	`ªÆloc
 (*
löe
, *
löe_size
);

92 i‡(
√w_löe
 =
NULL
)

94 
ªsu…
= -1;

95  
ªsu…
;

97 *
löe

√w_löe
;

102 
i

	`gëc
(
Â
);

103 i‡(
i
 =
EOF
)

105 
ªsu…
 = -1;

110 i‡(
cur_Àn
 + 1 >*
löe_size
)

112 
size_t
 
√eded_max
=

113 
SSIZE_MAX
 < 
SIZE_MAX
 ? (
size_t
) SSIZE_MAX + 1 : SIZE_MAX;

114 
size_t
 
√eded
(2 * (*
löe_size
)) + 1;

115 *
√w_löe
;

117 i‡(
√eded_max
 < 
√eded
)

118 
√eded

√eded_max
;

119 i‡(
cur_Àn
 + 1 >
√eded
)

121 
ªsu…
= -1;

122 
î∫o

EOVERFLOW
;

123  
ªsu…
;

126 
√w_löe
(*)
	`ªÆloc
(*
löe
, 
√eded
);

127 i‡(
√w_löe
 =
NULL
)

129 
ªsu…
= -1;

130  
ªsu…
;

133 *
löe

√w_löe
;

134 *
löe_size

√eded
;

137 (*
löe
)[
cur_Àn
]()
i
;

138 
cur_Àn
++;

140 i‡(
i
 =
dñim
)

143 (*
löe
)[
cur_Àn
] = '\0';

144 i‡(
cur_Àn
 != 0)

145  (
ssize_t
)
cur_Àn
;

146  
ªsu…
;

147 
	}
}

157 
	$ms_gë_£rvîli°
(*
°r
)

159 
ms_mcd_£rvî_t
 *
§vs

NULL
;

165 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

166 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
(
°r
);

168 
uöt32_t
 
lo›
0;Üo› < 
	`memˇched_£rvî_li°_cou¡
(
£rvî_poﬁ
);Üoop++)

170 
	`as£π
(
ms_£âög
.
§v_˙t
 < ms_£âög.
tŸÆ_§v_˙t
);

171 
	`°r˝y
(
ms_£âög
.
£rvîs
[ms_£âög.
§v_˙t
].
§v_ho°_«me
, 
£rvî_poﬁ
[
lo›
].
ho°«me
);

172 
ms_£âög
.
£rvîs
[ms_£âög.
§v_˙t
].
§v_p‹t

£rvî_poﬁ
[
lo›
].
p‹t
;

173 
ms_£âög
.
£rvîs
[ms_£âög.
§v_˙t
].
disc⁄n_˙t
= 0;

174 
ms_£âög
.
£rvîs
[ms_£âög.
§v_˙t
].
ªc⁄n_˙t
= 0;

175 
ms_£âög
.
§v_˙t
++;

177 i‡(
ms_£âög
.
§v_˙t
 >ms_£âög.
tŸÆ_§v_˙t
)

179 
§vs
(
ms_mcd_£rvî_t
 *)
	`ªÆloc
–
ms_£âög
.
£rvîs
,

180 (
size_t
)
ms_£âög
.
tŸÆ_§v_˙t
 * (
ms_mcd_£rvî_t
) * 2);

181 i‡(
§vs
 =
NULL
)

183 
	`Ârötf
(
°dîr
, "Can'tÑeallocate servers structure.\n");

184 
	`exô
(1);

186 
ms_£âög
.
£rvîs

§vs
;

187 
ms_£âög
.
tŸÆ_§v_˙t
*= 2;

191 
	`memˇched_£rvî_‰ì
(
£rvî_poﬁ
);

192 
	}
}

200 
uöt32_t
 
	$ms_gë_˝u_cou¡
()

202 #ifde‡
HAVE__SC_NPROCESSORS_ONLN


203  
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

206 #ifde‡
HAVE_CPU_SET_T


207 
˝u_cou¡
= 0;

208 
˝u_£t_t
 
˝u_£t
;

210 
	`sched_gëafföôy
(0, (
˝u_£t_t
), &
˝u_£t
);

212 
i
0; i < ((
˝u_£t_t
) * 8); i++)

214 i‡(
	`CPU_ISSET
(
i
, &
˝u_£t
))

216 
˝u_cou¡
++;

220  
˝u_cou¡
;

226  
EXIT_FAILURE
;

227 
	}
}

238 
ms_c⁄f_ty≥_t
 
	$ms_gë_c⁄f_ty≥
(*
löe
)

240 i‡(! 
	`memcmp
(
löe
, "key", 
	`°æí
("key")))

242  
CONF_KEY
;

244 i‡(! 
	`memcmp
(
löe
, "vÆue", 
	`°æí
("value")))

246  
CONF_VALUE
;

248 i‡(! 
	`memcmp
(
löe
, "cmd", 
	`°æí
("cmd")))

250  
CONF_CMD
;

254  
CONF_NULL
;

256 
	}
}

267 
	$ms_is_löe_d©a
(*
löe
)

269 
	`as£π
(
löe
 !
NULL
);

271 *
begö_±r

löe
;

273 
	`is•a˚
(*
begö_±r
))

275 
begö_±r
++;

277 i‡((
begö_±r
[0] == '\0') || (begin_ptr[0] == '#'))

278  
EXIT_SUCCESS
;

280  
EXIT_FAILURE
;

281 
	}
}

292 
	$ms_ªad_is_d©a
(*
löe
, 
ssize_t
 
ƒód
)

294 i‡((
ƒód
 =
EOF
Ë|| ! 
	`ms_is_löe_d©a
(
löe
))

295  
EXIT_SUCCESS
;

297  
EXIT_FAILURE
;

298 
	}
}

305 
	$ms_no_c⁄fig_fûe
()

307 
u£Ω©h
[
PATH_MAX
];

308 
∑sswd
 *
u§

NULL
;

309 
FILE
 *
fd
;

311 
u§

	`gëpwuid
(
	`gëuid
());

313 
	`¢¥ötf
(
u£Ω©h
, 
PATH_MAX
, "%s/%s", 
u§
->
pw_dú
, 
DEFAULT_CONFIG_NAME
);

315 i‡(
	`ac˚ss
 (
u£Ω©h
, 
F_OK
 | 
R_OK
) == 0)

316 
exô
;

318 
fd

	`f›í
(
u£Ω©h
, "w+");

320 i‡(
fd
 =
NULL
)

322 
	`Ârötf
(
°dîr
, "CouldÇŸ cª©êdeÁu… c⁄figuª fûê%s\n", 
u£Ω©h
);

323 
	`≥º‹
(
	`°ªº‹
(
î∫o
));

324 
	`exô
(1);

326 
	`Ârötf
(
fd
, "%s", 
DEFAULT_CONGIF_STR
);

327 
	`f˛o£
(
fd
);

329 
exô
:

330 
ms_£âög
.
cfg_fûe

	`°rdup
(
u£Ω©h
);

331 
	}
}

339 
	$ms_∑r£_cfg_fûe
(*
cfg_fûe
)

341 
FILE
 *
f
;

342 
size_t
 
°¨t_Àn
, 
íd_Àn
;

343 
¥›‹ti⁄
;

344 *
löe

NULL
;

345 
size_t
 
ªad_Àn
;

346 
ssize_t
 
ƒód
;

347 
cmd_ty≥
;

348 
ms_c⁄f_ty≥_t
 
c⁄f_ty≥
;

349 
íd_of_fûe
= 0;

350 
ms_key_di°r_t
 *
key_di°r

NULL
;

351 
ms_vÆue_di°r_t
 *
vÆ_di°r

NULL
;

353 i‡(
cfg_fûe
 =
NULL
)

355 
	`ms_no_c⁄fig_fûe
();

356 
cfg_fûe

ms_£âög
.cfg_file;

360 i‡((
f

	`f›í
(
cfg_fûe
, "r")Ë=
NULL
)

362 
	`Ârötf
(
°dîr
, "C™ÇŸ o≥¿fûe: '%s'.\n", 
cfg_fûe
);

363 
	`exô
(1);

368 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

369 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

372 i‡(
ƒód
 =
EOF
)

374 
	`Ârötf
(
°dîr
, "Bad configuration file,Ço configuration find.\n");

375 
	`exô
(1);

377 
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
);

381 ! 
íd_of_fûe
)

383 
c⁄f_ty≥
)

385 
CONF_KEY
:

388 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

389 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

392 i‡(
ƒód
 !
EOF
)

394 i‡(
	`ssˇnf
(
löe
, "%zu %zu %l‡", &
°¨t_Àn
,

395 &
íd_Àn
, &
¥›‹ti⁄
) != 3)

397 
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
);

400 
ms_£âög
.
key_di°r
[ms_£âög.
key_∫g_˙t
].
°¨t_Àn
= start_len;

401 
ms_£âög
.
key_di°r
[ms_£âög.
key_∫g_˙t
].
íd_Àn
=Énd_len;

402 
ms_£âög
.
key_di°r
[ms_£âög.
key_∫g_˙t
].
key_¥›

¥›‹ti⁄
;

403 
ms_£âög
.
key_∫g_˙t
++;

405 i‡(
ms_£âög
.
key_∫g_˙t
 >ms_£âög.
tŸÆ_key_∫g_˙t
)

407 
key_di°r
(
ms_key_di°r_t
 *)
	`ªÆloc
(

408 
ms_£âög
.
key_di°r
,

409 (
size_t
)
ms_£âög
.

410 
tŸÆ_key_∫g_˙t
 * (
ms_key_di°r_t
) * 2);

411 i‡(
key_di°r
 =
NULL
)

413 
	`Ârötf
(
°dîr
,

415 
	`exô
(1);

417 
ms_£âög
.
key_di°r
= key_distr;

418 
ms_£âög
.
tŸÆ_key_∫g_˙t
*= 2;

422 
íd_of_fûe
= 1;

427 
CONF_VALUE
:

430 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

431 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

434 i‡(
ƒód
 !
EOF
)

436 i‡(
	`ssˇnf
(
löe
, "%zu %zu %lf", &
°¨t_Àn
, &
íd_Àn
,

437 &
¥›‹ti⁄
) != 3)

439 
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
);

442 
ms_£âög
.
vÆue_di°r
[ms_£âög.
vÆ_∫g_˙t
].
°¨t_Àn
=

443 
°¨t_Àn
;

444 
ms_£âög
.
vÆue_di°r
[ms_£âög.
vÆ_∫g_˙t
].
íd_Àn
=Énd_len;

445 
ms_£âög
.
vÆue_di°r
[ms_£âög.
vÆ_∫g_˙t
].
vÆue_¥›
=

446 
¥›‹ti⁄
;

447 
ms_£âög
.
vÆ_∫g_˙t
++;

449 i‡(
ms_£âög
.
vÆ_∫g_˙t
 >ms_£âög.
tŸÆ_vÆ_∫g_˙t
)

451 
vÆ_di°r
(
ms_vÆue_di°r_t
 *)
	`ªÆloc
(

452 
ms_£âög
.
vÆue_di°r
,

453 (
size_t
)
ms_£âög
.

454 
tŸÆ_vÆ_∫g_˙t
 * (
ms_vÆue_di°r_t
) * 2);

455 i‡(
vÆ_di°r
 =
NULL
)

457 
	`Ârötf
(
°dîr
,

459 
	`exô
(1);

461 
ms_£âög
.
vÆue_di°r

vÆ_di°r
;

462 
ms_£âög
.
tŸÆ_vÆ_∫g_˙t
*= 2;

466 
íd_of_fûe
= 1;

471 
CONF_CMD
:

474 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

475 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

478 i‡(
ƒód
 !
EOF
)

480 i‡(
	`ssˇnf
(
löe
, "%d %lf", &
cmd_ty≥
, &
¥›‹ti⁄
) != 2)

482 
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
);

485 i‡(
cmd_ty≥
 >
CMD_NULL
)

489 
ms_£âög
.
cmd_di°r
[ms_£âög.
cmd_u£d_cou¡
].
cmd_ty≥
=

490 
cmd_ty≥
;

491 
ms_£âög
.
cmd_di°r
[ms_£âög.
cmd_u£d_cou¡
].
cmd_¥›
=

492 
¥›‹ti⁄
;

493 
ms_£âög
.
cmd_u£d_cou¡
++;

496 
íd_of_fûe
= 1;

500 
CONF_NULL
:

503 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

504 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

507 i‡(
ƒód
 !
EOF
)

509 i‡((
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
)Ë!
CONF_NULL
)

515 
íd_of_fûe
= 1;

521 
	`as£π
(0);

526 
	`f˛o£
(
f
);

528 i‡(
löe
 !
NULL
)

530 
	`‰ì
(
löe
);

532 
	}
}

536 
	$ms_ˇlc_avg_size
()

538 
avg_vÆ_size
= 0.0;

539 
avg_key_size
= 0.0;

540 
vÆ_¥o
= 0.0;

541 
key_¥o
= 0.0;

542 
avîge_Àn
= 0.0;

543 
size_t
 
°¨t_Àn
= 0;

544 
size_t
 
íd_Àn
= 0;

546 
j
0; j < 
ms_£âög
.
vÆ_∫g_˙t
; j++)

548 
vÆ_¥o

ms_£âög
.
vÆue_di°r
[
j
].
vÆue_¥›
;

549 
°¨t_Àn

ms_£âög
.
vÆue_di°r
[
j
].start_len;

550 
íd_Àn

ms_£âög
.
vÆue_di°r
[
j
].end_len;

552 
avîge_Àn

vÆ_¥o
 * (()(
°¨t_Àn
 + 
íd_Àn
)) / 2;

553 
avg_vÆ_size
+
avîge_Àn
;

556 
j
0; j < 
ms_£âög
.
key_∫g_˙t
; j++)

558 
key_¥o

ms_£âög
.
key_di°r
[
j
].
key_¥›
;

559 
°¨t_Àn

ms_£âög
.
key_di°r
[
j
].start_len;

560 
íd_Àn

ms_£âög
.
key_di°r
[
j
].end_len;

562 
avîge_Àn

key_¥o
 * (()(
°¨t_Àn
 + 
íd_Àn
)) / 2;

563 
avg_key_size
+
avîge_Àn
;

566 
ms_£âög
.
avg_vÆ_size
(
size_t
)avg_val_size;

567 
ms_£âög
.
avg_key_size
(
size_t
)avg_key_size;

568 
	}
}

580 
	$ms_shufÊe_di°r
(
ms_di°r_t
 *
di°r
, 
Àngth
)

582 
i
, 
j
;

583 
tmp_off£t
;

584 
size_t
 
tmp_size
;

585 
öt64_t
 
∫d
;

587 
i
0; i < 
Àngth
; i++)

589 
∫d

	`øndom
();

590 
j
()(
∫d
 % (
Àngth
 - 
i
)) + i;

592 
∫d
 % 3)

595 
tmp_size

di°r
[
j
].
key_size
;

596 
di°r
[
j
].
key_size
di°r[
i
].key_size;

597 
di°r
[
i
].
key_size

tmp_size
;

601 
tmp_off£t

di°r
[
j
].
key_off£t
;

602 
di°r
[
j
].
key_off£t
di°r[
i
].key_offset;

603 
di°r
[
i
].
key_off£t

tmp_off£t
;

607 
tmp_size

di°r
[
j
].
vÆue_size
;

608 
di°r
[
j
].
vÆue_size
di°r[
i
].value_size;

609 
di°r
[
i
].
vÆue_size

tmp_size
;

617  
EXIT_SUCCESS
;

618 
	}
}

628 
	$ms_buûd_di°r
()

630 
off£t
= 0;

631 
íd
= 0;

632 
key_˙t
= 0;

633 
vÆue_˙t
= 0;

634 
size_t
 
avîage_Àn
= 0;

635 
size_t
 
diff_Àn
= 0;

636 
size_t
 
°¨t_Àn
= 0;

637 
size_t
 
íd_Àn
= 0;

638 
∫d
= 0;

639 
ms_di°r_t
 *
di°r

NULL
;

640 
unôs
()
ms_£âög
.
wö_size
 / 
UNIT_ITEMS_COUNT
;

643 
	`ms_ˇlc_avg_size
();

645 
ms_£âög
.
ch¨_blk_size

RAND_CHAR_SIZE
;

646 
key_sc›e_size
=

647 ()((
ms_£âög
.
ch¨_blk_size
 - 
RESERVED_RAND_CHAR_SIZE
)

648 / 
UNIT_ITEMS_COUNT
);

650 
ms_£âög
.
di°r
(
ms_di°r_t
 *)
	`mÆloc
(

651 (
ms_di°r_t
Ë* 
ms_£âög
.
wö_size
);

652 i‡(
ms_£âög
.
di°r
 =
NULL
)

654 
	`Ârötf
(
°dîr
, "Can'tállocate distributionárray.");

655 
	`exô
(1);

663 
m
0; m < 
unôs
; m++)

665 
i
0; i < 
UNIT_ITEMS_COUNT
; i++)

667 
ms_£âög
.
di°r
[
m
 * 
UNIT_ITEMS_COUNT
 + 
i
].
key_off£t
=

668 
	`ADDR_ALIGN
(
key_sc›e_size
 * 
i
);

673 
m
0; m < 
unôs
; m++)

675 
j
0; j < 
ms_£âög
.
key_∫g_˙t
; j++)

677 
key_˙t
()(
UNIT_ITEMS_COUNT
 * 
ms_£âög
.
key_di°r
[
j
].
key_¥›
);

678 
°¨t_Àn

ms_£âög
.
key_di°r
[
j
].start_len;

679 
íd_Àn

ms_£âög
.
key_di°r
[
j
].end_len;

680 i‡((
°¨t_Àn
 < 
MIN_KEY_SIZE
Ë|| (
íd_Àn
 < MIN_KEY_SIZE))

682 
	`Ârötf
(
°dîr
, "keyÜength must be greaterÅhan 16 bytes.\n");

683 
	`exô
(1);

686 i‡(! 
ms_£âög
.
bö¨y_¥Ÿ_


687 && ((
°¨t_Àn
 > 
MAX_KEY_SIZE
Ë|| (
íd_Àn
 > MAX_KEY_SIZE)))

689 
	`Ârötf
(
°dîr
, "keyÜength must beÜessÅhan 250 bytes.\n");

690 
	`exô
(1);

693 
avîage_Àn
(
°¨t_Àn
 + 
íd_Àn
) / 2;

694 
diff_Àn
(
íd_Àn
 - 
°¨t_Àn
) / 2;

695 
k
0; k < 
key_˙t
; k++)

697 i‡(
off£t
 >(
m
 + 1Ë* 
UNIT_ITEMS_COUNT
)

701 
∫d
()
	`øndom
();

702 i‡(
k
 % 2 == 0)

704 
ms_£âög
.
di°r
[
off£t
].
key_size
=

705 (
diff_Àn
 =0Ë? 
avîage_Àn
 :

706 
avîage_Àn
 + (
size_t
)
∫d


707 % 
diff_Àn
;

711 
ms_£âög
.
di°r
[
off£t
].
key_size
=

712 (
diff_Àn
 =0Ë? 
avîage_Àn
 :

713 
avîage_Àn
 - (
size_t
)
∫d


714 % 
diff_Àn
;

716 
off£t
++;

720 i‡(
off£t
 < (
m
 + 1Ë* 
UNIT_ITEMS_COUNT
)

722 
íd
(
m
 + 1Ë* 
UNIT_ITEMS_COUNT
 - 
off£t
;

723 
i
0; i < 
íd
; i++)

725 
ms_£âög
.
di°r
[
off£t
].
key_size
ms_£âög.
avg_key_size
;

726 
off£t
++;

730 
off£t
= 0;

733 i‡(
ms_£âög
.
fixed_vÆue_size
 != 0)

735 
i
0; i < 
unôs
 * 
UNIT_ITEMS_COUNT
; i++)

737 
ms_£âög
.
di°r
[
i
].
vÆue_size
ms_£âög.
fixed_vÆue_size
;

742 
m
0; m < 
unôs
; m++)

744 
j
0; j < 
ms_£âög
.
vÆ_∫g_˙t
; j++)

746 
vÆue_˙t
=

747 ()(
UNIT_ITEMS_COUNT
 * 
ms_£âög
.
vÆue_di°r
[
j
].
vÆue_¥›
);

748 
°¨t_Àn

ms_£âög
.
vÆue_di°r
[
j
].start_len;

749 
íd_Àn

ms_£âög
.
vÆue_di°r
[
j
].end_len;

750 i‡((
°¨t_Àn
 <0Ë|| (
íd_Àn
 <= 0))

752 
	`Ârötf
(
°dîr
, "valueÜength must be greaterÅhan 0 bytes.\n");

753 
	`exô
(1);

756 i‡((
°¨t_Àn
 > 
MAX_VALUE_SIZE
Ë|| (
íd_Àn
 > MAX_VALUE_SIZE))

758 
	`Ârötf
(
°dîr
, "keyÜength must beÜessÅhan orÉqualÅo 1M.\n");

759 
	`exô
(1);

762 
avîage_Àn
(
°¨t_Àn
 + 
íd_Àn
) / 2;

763 
diff_Àn
(
íd_Àn
 - 
°¨t_Àn
) / 2;

764 
k
0; k < 
vÆue_˙t
; k++)

766 i‡(
off£t
 >(
m
 + 1Ë* 
UNIT_ITEMS_COUNT
)

770 
∫d
()
	`øndom
();

771 i‡(
k
 % 2 == 0)

773 
ms_£âög
.
di°r
[
off£t
].
vÆue_size
=

774 (
diff_Àn
 =0Ë? 
avîage_Àn
 :

775 
avîage_Àn


776 + (
size_t
)
∫d
 % 
diff_Àn
;

780 
ms_£âög
.
di°r
[
off£t
].
vÆue_size
=

781 (
diff_Àn
 =0Ë? 
avîage_Àn
 :

782 
avîage_Àn


783 - (
size_t
)
∫d
 % 
diff_Àn
;

785 
off£t
++;

789 i‡(
off£t
 < (
m
 + 1Ë* 
UNIT_ITEMS_COUNT
)

791 
íd
(
m
 + 1Ë* 
UNIT_ITEMS_COUNT
 - 
off£t
;

792 
i
0; i < 
íd
; i++)

794 
ms_£âög
.
di°r
[
off£t
++].
vÆue_size
ms_£âög.
avg_vÆ_size
;

801 
i
0; i < 
unôs
; i++)

803 
di°r
&
ms_£âög
.di°r[
i
 * 
UNIT_ITEMS_COUNT
];

804 
j
= 0; j < 4; j++)

806 
	`ms_shufÊe_di°r
(
di°r
, 
UNIT_ITEMS_COUNT
);

809 
	}
}

819 
	$ms_öô_øndom_block
()

821 *
±r

NULL
;

823 
	`as£π
(
ms_£âög
.
ch¨_blk_size
 > 0);

825 
ms_£âög
.
ch¨_block
(*)
	`mÆloc
(ms_£âög.
ch¨_blk_size
);

826 i‡(
ms_£âög
.
ch¨_block
 =
NULL
)

828 
	`Ârötf
(
°dîr
, "Can'tállocate global char block.");

829 
	`exô
(1);

831 
±r

ms_£âög
.
ch¨_block
;

833 
i
0; (
size_t
)ò< 
ms_£âög
.
ch¨_blk_size
; i++)

835 *(
±r
++)
ALPHANUMBERICS
[
	`øndom
(Ë% 
CHAR_COUNT
];

837 
	}
}

844 
	$ms_¥öt_£âög
()

846 
	`Ârötf
(
°dout
, "£rvî†: %s\n", 
ms_£âög
.
§v_°r
);

847 
	`Ârötf
(
°dout
, "thªad†cou¡: %d\n", 
ms_£âög
.
¡hªads
);

848 
	`Ârötf
(
°dout
, "c⁄cuºícy: %d\n", 
ms_£âög
.
nc⁄ns
);

849 i‡(
ms_£âög
.
run_time
 > 0)

851 
	`Ârötf
(
°dout
, "ru¿time: %ds\n", 
ms_£âög
.
run_time
);

855 
	`Ârötf
(
°dout
, "execuãÇumbî: %" 
PRId64
 "\n", 
ms_£âög
.
exec_num
);

857 
	`Ârötf
(
°dout
, "wödow†size: %" 
PRId64
 "k\n",

858 (
öt64_t
)(
ms_£âög
.
wö_size
 / 1024));

859 
	`Ârötf
(
°dout
, "setÖroportion: set_prop=%.2f\n",

860 
ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
);

861 
	`Ârötf
(
°dout
, "getÖroportion: get_prop=%.2f\n",

862 
ms_£âög
.
cmd_di°r
[
CMD_GET
].
cmd_¥›
);

863 
	`fÊush
(
°dout
);

864 
	}
}

870 
	$ms_£âög_¶≠mode_öô_¥e
()

872 
ms_£âög
.
exec_num

DEFAULT_EXE_NUM
;

873 
ms_£âög
.
vîify_≥r˚¡

DEFAULT_VERIFY_RATE
;

874 
ms_£âög
.
exp_vî_≥r

DEFAULT_VERIFY_RATE
;

875 
ms_£âög
.
ovîwrôe_≥r˚¡

DEFAULT_OVERWRITE_RATE
;

876 
ms_£âög
.
mu…_key_num

DEFAULT_DIV
;

877 
ms_£âög
.
fixed_vÆue_size
= 0;

878 
ms_£âög
.
wö_size

DEFAULT_WINDOW_SIZE
;

879 
ms_£âög
.
udp

Ál£
;

880 
ms_£âög
.
ªc⁄√˘

Ál£
;

881 
ms_£âög
.
vîbo£

Ál£
;

882 
ms_£âög
.
Á˚book_ã°

Ál£
;

883 
ms_£âög
.
bö¨y_¥Ÿ_

Ál£
;

884 
ms_£âög
.
°©_‰eq
= 0;

885 
ms_£âög
.
§v_°r

NULL
;

886 
ms_£âög
.
cfg_fûe

NULL
;

887 
ms_£âög
.
sock_≥r_c⁄n

DEFAULT_SOCK_PER_CONN
;

888 
ms_£âög
.
ex≥˘ed_çs
= 0;

889 
ms_£âög
.
ªp_wrôe_§v
= 0;

890 
	}
}

896 
	$ms_£âög_öô_¥e
()

898 
	`mem£t
(&
ms_£âög
, 0, (ms_setting));

901 
ms_£âög
.
n˝u

	`ms_gë_˝u_cou¡
();

902 
ms_£âög
.
¡hªads

DEFAULT_THREADS_NUM
;

903 
ms_£âög
.
nc⁄ns

DEFAULT_CONNS_NUM
;

904 
ms_£âög
.
run_time

DEFAULT_RUN_TIME
;

905 
ms_£âög
.
tŸÆ_§v_˙t

MCD_SRVS_NUM_INIT
;

906 
ms_£âög
.
£rvîs
(
ms_mcd_£rvî_t
 *)
	`mÆloc
(

907 (
size_t
)
ms_£âög
.
tŸÆ_§v_˙t


908 * (
ms_mcd_£rvî_t
));

909 i‡(
ms_£âög
.
£rvîs
 =
NULL
)

911 
	`Ârötf
(
°dîr
, "Can'tállocate servers structure.\n");

912 
	`exô
(1);

915 
	`ms_£âög_¶≠mode_öô_¥e
();

916 
	}
}

922 
	$ms_£âög_¶≠mode_öô_po°
()

924 
ms_£âög
.
tŸÆ_key_∫g_˙t

KEY_RANGE_COUNT_INIT
;

925 
ms_£âög
.
key_di°r
=

926 (
ms_key_di°r_t
 *)
	`mÆloc
((
size_t
)
ms_£âög
.
tŸÆ_key_∫g_˙t
 * (ms_key_distr_t));

928 i‡(
ms_£âög
.
key_di°r
 =
NULL
)

930 
	`Ârötf
(
°dîr
, "Can'tállocate key distribution structure.\n");

931 
	`exô
(1);

934 
ms_£âög
.
tŸÆ_vÆ_∫g_˙t

VALUE_RANGE_COUNT_INIT
;

936 
ms_£âög
.
vÆue_di°r
=

937 (
ms_vÆue_di°r_t
 *)
	`mÆloc
((
size_t
)
ms_£âög
.
tŸÆ_vÆ_∫g_˙t
 * ( ms_value_distr_t));

939 i‡(
ms_£âög
.
vÆue_di°r
 =
NULL
)

941 
	`Ârötf
(
°dîr
, "Can'tállocate value distribution structure.\n");

942 
	`exô
(1);

945 
	`ms_∑r£_cfg_fûe
(
ms_£âög
.
cfg_fûe
);

948 i‡((
ms_£âög
.
exec_num
 =0Ë&& (ms_£âög.
run_time
 != 0))

950 
ms_£âög
.
exec_num
(
öt64_t
)
MAX_EXEC_NUM
;

955 
ms_£âög
.
run_time
= 0;

958 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

961 
ms_£âög
.
ªc⁄√˘

åue
;

964 i‡(
ms_£âög
.
Á˚book_ã°
 && (ms_£âög.
mu…_key_num
 < 2))

966 
	`Ârötf
(
°dîr
, "facebookÅest must work with multi-get, "

969 
	`exô
(1);

972 i‡(
ms_£âög
.
Á˚book_ã°
 && ms_£âög.
udp
)

974 
	`Ârötf
(
°dîr
, "facebookÅest couldn't work with UDP.\n");

975 
	`exô
(1);

978 i‡(
ms_£âög
.
udp
 && (ms_£âög.
sock_≥r_c⁄n
 > 1))

980 
	`Ârötf
(
°dîr
, "UDP doesn't support multi-socks "

982 
	`exô
(1);

985 i‡((
ms_£âög
.
ªp_wrôe_§v
 > 0Ë&& (ms_£âög.
§v_˙t
 < 2))

987 
	`Ârötf
(
°dîr
, "Please specify 2 serversátÜeast forÑeplication\n");

988 
	`exô
(1);

991 i‡((
ms_£âög
.
ªp_wrôe_§v
 > 0)

992 && (
ms_£âög
.
§v_˙t
 < ms_£âög.
ªp_wrôe_§v
))

994 
	`Ârötf
(
°dîr
, "ServersÅo doÑeplication writing "

996 
	`exô
(1);

999 i‡(
ms_£âög
.
udp
 && (ms_£âög.
ªp_wrôe_§v
 > 0))

1001 
	`Ârötf
(
°dîr
, "UDP doesn't supportÑeplication.\n");

1002 
	`exô
(1);

1005 i‡(
ms_£âög
.
Á˚book_ã°
 && (ms_£âög.
ªp_wrôe_§v
 > 0))

1007 
	`Ârötf
(
°dîr
, "facebookÅest couldn't work withÑeplication.\n");

1008 
	`exô
(1);

1011 
	`ms_buûd_di°r
();

1014 
	`ms_öô_øndom_block
();

1015 
	`ms_¥öt_£âög
();

1016 
	}
}

1022 
	$ms_£âög_öô_po°
()

1024 
	`ms_gë_£rvîli°
(
ms_£âög
.
§v_°r
);

1025 
	`ms_£âög_¶≠mode_öô_po°
();

1026 
	}
}

1032 
	$ms_£âög_˛ónup
()

1034 i‡(
ms_£âög
.
di°r
 !
NULL
)

1036 
	`‰ì
(
ms_£âög
.
di°r
);

1039 i‡(
ms_£âög
.
ch¨_block
 !
NULL
)

1041 
	`‰ì
(
ms_£âög
.
ch¨_block
);

1044 i‡(
ms_£âög
.
§v_°r
 !
NULL
)

1046 
	`‰ì
(
ms_£âög
.
§v_°r
);

1049 i‡(
ms_£âög
.
cfg_fûe
 !
NULL
)

1051 
	`‰ì
(
ms_£âög
.
cfg_fûe
);

1054 i‡(
ms_£âög
.
£rvîs
 !
NULL
)

1056 
	`‰ì
(
ms_£âög
.
£rvîs
);

1059 i‡(
ms_£âög
.
key_di°r
 !
NULL
)

1061 
	`‰ì
(
ms_£âög
.
key_di°r
);

1064 i‡(
ms_£âög
.
vÆue_di°r
 !
NULL
)

1066 
	`‰ì
(
ms_£âög
.
vÆue_di°r
);

1068 
	}
}

	@clients/ms_setting.h

11 #i‚de‡
MS_SETTING_H


12 
	#MS_SETTING_H


	)

14 
	~"ms_mem¶≠.h
"

16 #ifde‡
__˝lu•lus


20 
	#MCD_SRVS_NUM_INIT
 8

	)

21 
	#MCD_HOST_LENGTH
 64

	)

22 
	#KEY_RANGE_COUNT_INIT
 8

	)

23 
	#VALUE_RANGE_COUNT_INIT
 8

	)

24 
	#PROP_ERROR
 0.001

	)

26 
	#MIN_KEY_SIZE
 16

	)

27 
	#MAX_KEY_SIZE
 250

	)

28 
	#MAX_VALUE_SIZE
 (1024 * 1024)

	)

31 
	#DEFAULT_CONGIF_STR
 \

38 "1 0.9"

	)

41 
	stokí_s


43 *
vÆue
;

44 
size_t
 
Àngth
;

45 } 
	ttokí_t
;

47 
	#MAX_TOKENS
 10

	)

50 
	smcd_£vî


52 
§v_ho°_«me
[
MCD_HOST_LENGTH
];

53 
§v_p‹t
;

56 vﬁ©ûê
uöt32_t
 
disc⁄n_˙t
;

57 vﬁ©ûê
uöt32_t
 
ªc⁄n_˙t
;

58 
timevÆ
 
disc⁄n_time
;

59 
timevÆ
 
ªc⁄n_time
;

60 } 
	tms_mcd_£rvî_t
;

63 
	sdi°r


65 
size_t
 
key_size
;

66 
key_off£t
;

67 
size_t
 
vÆue_size
;

68 } 
	tms_di°r_t
;

71 
	skey_di°r


73 
size_t
 
°¨t_Àn
;

74 
size_t
 
íd_Àn
;

75 
key_¥›
;

76 } 
	tms_key_di°r_t
;

79 
	svÆue_di°r


81 
size_t
 
°¨t_Àn
;

82 
size_t
 
íd_Àn
;

83 
vÆue_¥›
;

84 } 
	tms_vÆue_di°r_t
;

87 
	ecmd_ty≥


89 
CMD_SET
,

90 
CMD_GET
,

91 
CMD_NULL


92 } 
	tms_cmd_ty≥_t
;

95 
	ec⁄f_ty≥


97 
CONF_KEY
,

98 
CONF_VALUE
,

99 
CONF_CMD
,

100 
CONF_NULL


101 } 
	tms_c⁄f_ty≥_t
;

104 
	scmd_di°r


106 
ms_cmd_ty≥_t
 
cmd_ty≥
;

107 
cmd_¥›
;

108 } 
	tms_cmd_di°r_t
;

111 
	s£âög


113 
uöt32_t
 
n˝u
;

114 
uöt32_t
 
¡hªads
;

115 
uöt32_t
 
nc⁄ns
;

116 
öt64_t
 
exec_num
;

117 
run_time
;

119 
uöt32_t
 
ch¨_blk_size
;

120 *
ch¨_block
;

121 
ms_di°r_t
 *
di°r
;

123 *
§v_°r
;

124 *
cfg_fûe
;

126 
ms_mcd_£rvî_t
 *
£rvîs
;

127 
uöt32_t
 
tŸÆ_§v_˙t
;

128 
uöt32_t
 
§v_˙t
;

130 
ms_key_di°r_t
 *
key_di°r
;

131 
tŸÆ_key_∫g_˙t
;

132 
key_∫g_˙t
;

134 
ms_vÆue_di°r_t
 *
vÆue_di°r
;

135 
tŸÆ_vÆ_∫g_˙t
;

136 
vÆ_∫g_˙t
;

138 
ms_cmd_di°r_t
 
cmd_di°r
[
CMD_NULL
];

139 
cmd_u£d_cou¡
;

141 
size_t
 
fixed_vÆue_size
;

142 
size_t
 
avg_vÆ_size
;

143 
size_t
 
avg_key_size
;

145 
vîify_≥r˚¡
;

146 
exp_vî_≥r
;

147 
ovîwrôe_≥r˚¡
;

148 
mu…_key_num
;

149 
size_t
 
wö_size
;

150 
boﬁ
 
udp
;

151 
°©_‰eq
;

152 
boﬁ
 
ªc⁄√˘
;

153 
boﬁ
 
vîbo£
;

154 
boﬁ
 
Á˚book_ã°
;

155 
uöt32_t
 
sock_≥r_c⁄n
;

156 
boﬁ
 
bö¨y_¥Ÿ_
;

157 
ex≥˘ed_çs
;

158 
uöt32_t
 
ªp_wrôe_§v
;

159 } 
	tms_£âög_°
;

161 
ms_£âög_°
 
ms_£âög
;

164 
ms_£âög_öô_¥e
();

168 
ms_£âög_öô_po°
();

172 
ms_£âög_˛ónup
();

175 
	#UNUSED_ARGUMENT
(
x
Ë()
	)
x

177 #ifde‡
__˝lu•lus


	@clients/ms_sigsegv.c

15 
	~"mem_c⁄fig.h
"

17 
	~<mem‹y.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<sig«l.h
>

21 
	~<±hªad.h
>

23 
	~"ms_mem¶≠.h
"

24 
	~"ms_£âög.h
"

27 
ms_£tup_sig£gv
();

28 
ms_£tup_sigpùe
();

29 
ms_£tup_sigöt
();

33 
	$ms_sig«l_£gv
(
signum
, 
sigöfo_t
 *
öfo
, *
±r
)

35 
	`UNUSED_ARGUMENT
(
signum
);

36 
	`UNUSED_ARGUMENT
(
öfo
);

37 
	`UNUSED_ARGUMENT
(
±r
);

39 
	`±hªad_muãx_lock
(&
ms_globÆ
.
quô_muãx
);

40 
	`Ârötf
(
°dîr
, "Segmentation fault occurred.\nStackÅrace:\n");

42 
	`∑nd‹a_¥öt_ˇŒ°ack
(
°dîr
);

44 
	`Ârötf
(
°dîr
, "End of stackÅrace\n");

45 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
quô_muãx
);

46 
	`ab‹t
();

47 
	}
}

50 
	$ms_sig«l_öt
(
signum
, 
sigöfo_t
 *
öfo
, *
±r
)

52 
	`UNUSED_ARGUMENT
(
signum
);

53 
	`UNUSED_ARGUMENT
(
öfo
);

54 
	`UNUSED_ARGUMENT
(
±r
);

56 
	`±hªad_muãx_lock
(&
ms_globÆ
.
quô_muãx
);

57 
	`Ârötf
(
°dîr
, "SIGINT handled.\n");

58 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
quô_muãx
);

59 
	`exô
(1);

60 
	}
}

68 
	$ms_£tup_sig£gv
()

70 
siga˘i⁄
 
a˘i⁄
;

72 
	`mem£t
(&
a˘i⁄
, 0, (action));

73 
a˘i⁄
.
ß_siga˘i⁄

ms_sig«l_£gv
;

74 
a˘i⁄
.
ß_Êags

SA_SIGINFO
;

75 i‡(
	`siga˘i⁄
(
SIGSEGV
, &
a˘i⁄
, 
NULL
) < 0)

77 
	`≥º‹
("sigaction");

78  
EXIT_SUCCESS
;

82 
	}
}

90 
	$ms_£tup_sigpùe
()

93 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

96 
	}
}

104 
	$ms_£tup_sigöt
()

106 
siga˘i⁄
 
a˘i⁄_3
;

108 
	`mem£t
(&
a˘i⁄_3
, 0, (action_3));

109 
a˘i⁄_3
.
ß_siga˘i⁄

ms_sig«l_öt
;

110 
a˘i⁄_3
.
ß_Êags

SA_SIGINFO
;

111 i‡(
	`siga˘i⁄
(
SIGINT
, &
a˘i⁄_3
, 
NULL
) < 0)

113 
	`≥º‹
("sigaction");

114  
EXIT_SUCCESS
;

118 
	}
}

121 #i‚de‡
SIGSEGV_NO_AUTO_INIT


122 
__©åibuã
((
c⁄°ru˘‹
)Ë
	$ms_öô
()

124 
	`ms_£tup_sig£gv
();

125 
	`ms_£tup_sigpùe
();

126 
	`ms_£tup_sigöt
();

127 
	}
}

	@clients/ms_sigsegv.h

11 #i‚de‡
MS_SIGSEGV_H


12 
	#MS_SIGSEGV_H


	)

14 #ifde‡
__˝lu•lus


19 
ms_£tup_sig£gv
();

23 
ms_£tup_sigpùe
();

27 
ms_£tup_sigöt
();

30 #ifde‡
__˝lu•lus


	@clients/ms_stats.c

12 
	~"mem_c⁄fig.h
"

14 
	~<öây≥s.h
>

15 
	~"ms_°©s.h
"

17 
	#¨øy_size
(
x
Ë((xË/ ((x)[0]))

	)

19 
ms_loˇl_log2
(
uöt64_t
 
vÆue
);

20 
uöt64_t
 
ms_gë_evíts
(
ms_°©_t
 *
°©
);

30 
	$ms_loˇl_log2
(
uöt64_t
 
vÆue
)

32 
ªsu…
= 0;

34 
ªsu…
 <63 && ((
uöt64_t
)1 <<Ñesu…Ë< 
vÆue
)

36 
ªsu…
++;

39  
ªsu…
;

40 
	}
}

49 
	$ms_öô_°©s
(
ms_°©_t
 *
°©
, c⁄° *
«me
)

51 
	`mem£t
(
°©
, 0, (*stat));

53 
°©
->
«me
= (*)name;

54 
°©
->
mö_time
(
uöt64_t
)-1;

55 
°©
->
max_time
= 0;

56 
°©
->
≥riod_mö_time
(
uöt64_t
)-1;

57 
°©
->
≥riod_max_time
= 0;

58 
°©
->
log_¥odu˘
= 0;

59 
°©
->
tŸÆ_time
= 0;

60 
°©
->
¥e_tŸÆ_time
= 0;

61 
°©
->
squ¨es
= 0;

62 
°©
->
¥e_squ¨es
= 0;

63 
°©
->
¥e_evíts
= 0;

64 
°©
->
¥e_log_¥odu˘
= 0;

65 
°©
->
gë_miss
= 0;

66 
°©
->
¥e_gë_miss
= 0;

67 
	}
}

77 
	$ms_ªc‹d_evít
(
ms_°©_t
 *
°©
, 
uöt64_t
 
tŸÆ_time
, 
gë_miss
)

79 
°©
->
tŸÆ_time
+=Åotal_time;

81 i‡(
tŸÆ_time
 < 
°©
->
mö_time
)

83 
°©
->
mö_time

tŸÆ_time
;

86 i‡(
tŸÆ_time
 > 
°©
->
max_time
)

88 
°©
->
max_time

tŸÆ_time
;

91 i‡(
tŸÆ_time
 < 
°©
->
≥riod_mö_time
)

93 
°©
->
≥riod_mö_time

tŸÆ_time
;

96 i‡(
tŸÆ_time
 > 
°©
->
≥riod_max_time
)

98 
°©
->
≥riod_max_time

tŸÆ_time
;

101 i‡(
gë_miss
)

103 
°©
->
gë_miss
++;

106 
°©
->
di°
[
	`ms_loˇl_log2
(
tŸÆ_time
)]++;

107 
°©
->
squ¨es
+()(
tŸÆ_time
 *Åotal_time);

109 i‡(
tŸÆ_time
 != 0)

111 
°©
->
log_¥odu˘
+
	`log
(()
tŸÆ_time
);

113 
	}
}

123 
uöt64_t
 
	$ms_gë_evíts
(
ms_°©_t
 *
°©
)

125 
uöt64_t
 
evíts
= 0;

127 
uöt32_t
 
i
0; i < 
	`¨øy_size
(
°©
->
di°
); i++)

129 
evíts
+
°©
->
di°
[
i
];

132  
evíts
;

133 
	}
}

141 
	$ms_dump_°©s
(
ms_°©_t
 *
°©
)

143 
uöt64_t
 
evíts
= 0;

144 
max_n⁄_zîo
= 0;

145 
mö_n⁄_zîo
= 0;

146 
avîage
= 0;

148 
uöt32_t
 
i
0; i < 
	`¨øy_size
(
°©
->
di°
); i++)

150 
evíts
+
°©
->
di°
[
i
];

151 i‡(
°©
->
di°
[
i
] != 0)

153 
max_n⁄_zîo
()
i
;

157 i‡(
evíts
 == 0)

161 
avîage
()(
°©
->
tŸÆ_time
 / 
evíts
);

163 
	`¥ötf
("%†Sèti°ic†(%ŒdÉvíts)\n", 
°©
->
«me
, ()
evíts
);

164 
	`¥ötf
(" Mö: %8Œd\n", ()
°©
->
mö_time
);

165 
	`¥ötf
(" Max: %8Œd\n", ()
°©
->
max_time
);

166 
	`¥ötf
(" Avg: %8Œd\n", ()(
°©
->
tŸÆ_time
 / 
evíts
));

167 
	`¥ötf
(" Geo: %8.2lf\n", 
	`exp
(
°©
->
log_¥odu˘
 / ()
evíts
));

169 i‡(
evíts
 > 1)

171 
	`¥ötf
(" Std: %8.2lf\n",

172 
	`sqπ
((
°©
->
squ¨es
 - ()
evíts
 * 
avîage


173 * 
avîage
Ë/ (()
evíts
 - 1)));

175 
	`¥ötf
(" Log2 Dist:");

177 
i
0; i <
max_n⁄_zîo
 - 4; i+= 4)

179 i‡((
°©
->
di°
[
i
 + 0] != 0)

180 || (
°©
->
di°
[
i
 + 1] != 0)

181 || (
°©
->
di°
[
i
 + 2] != 0)

182 || (
°©
->
di°
[
i
 + 3] != 0))

184 
mö_n⁄_zîo

i
;

189 
i

mö_n⁄_zîo
; i <
max_n⁄_zîo
; i++)

191 i‡((
i
 % 4) == 0)

193 
	`¥ötf
("\¿ %2d:", ()
i
);

195 
	`¥ötf
(" %6" 
PRIu64
 , 
°©
->
di°
[
i
]);

198 
	`¥ötf
("\n\n");

199 
	}
}

210 
	$ms_dump_f‹m©_°©s
(
ms_°©_t
 *
°©
,

211 
run_time
,

212 
‰eq
,

213 
obj_size
)

215 
uöt64_t
 
evíts
= 0;

216 
globÆ_avîage
= 0;

217 
uöt64_t
 
globÆ_çs
= 0;

218 
globÆ_øã
= 0;

219 
globÆ_°d
= 0;

220 
globÆ_log
= 0;

222 
≥riod_avîage
= 0;

223 
uöt64_t
 
≥riod_çs
= 0;

224 
≥riod_øã
= 0;

225 
≥riod_°d
= 0;

226 
≥riod_log
= 0;

228 i‡((
evíts

	`ms_gë_evíts
(
°©
)) == 0)

233 
globÆ_avîage
()(
°©
->
tŸÆ_time
 / 
evíts
);

234 
globÆ_çs

evíts
 / (
uöt64_t
)
run_time
;

235 
globÆ_øã
()
evíts
 * 
obj_size
 / 1024 / 1024 / 
run_time
;

236 
globÆ_°d

	`sqπ
((
°©
->
squ¨es
 - ()
evíts
 * 
globÆ_avîage


237 * 
globÆ_avîage
Ë/ ()(
evíts
 - 1));

238 
globÆ_log

	`exp
(
°©
->
log_¥odu˘
 / ()
evíts
);

240 
uöt64_t
 
diff_time

°©
->
tŸÆ_time
 - sèt->
¥e_tŸÆ_time
;

241 
uöt64_t
 
diff_evíts

evíts
 - 
°©
->
¥e_evíts
;

242 i‡(
diff_evíts
 >= 1)

244 
≥riod_avîage
()(
diff_time
 / 
diff_evíts
);

245 
≥riod_çs

diff_evíts
 / (
uöt64_t
)
‰eq
;

246 
≥riod_øã
()
diff_evíts
 * 
obj_size
 / 1024 / 1024 / 
‰eq
;

247 
diff_squ¨es
()
°©
->
squ¨es
 - ()°©->
¥e_squ¨es
;

248 
≥riod_°d

	`sqπ
((
diff_squ¨es
 - ()
diff_evíts
 * 
≥riod_avîage


249 * 
≥riod_avîage
Ë/ ()(
diff_evíts
 - 1));

250 
diff_log_¥odu˘

°©
->
log_¥odu˘
 - sèt->
¥e_log_¥odu˘
;

251 
≥riod_log

	`exp
(
diff_log_¥odu˘
 / ()
diff_evíts
);

254 
	`¥ötf
("%†Sèti°ics\n", 
°©
->
«me
);

255 
	`¥ötf
("%-8s %-8s %-12s %-12s %-10s %-10s %-8s %-10s %-10s %-10s %-10s\n",

268 
	`¥ötf
(

271 
‰eq
,

272 ()
diff_evíts
,

273 ()
≥riod_çs
,

274 
globÆ_øã
,

275 ()(
°©
->
gë_miss
 - sèt->
¥e_gë_miss
),

276 ()
°©
->
≥riod_mö_time
,

277 ()
°©
->
≥riod_max_time
,

278 ()
≥riod_avîage
,

279 
≥riod_°d
,

280 
≥riod_log
);

282 
	`¥ötf
(

285 
run_time
,

286 ()
evíts
,

287 ()
globÆ_çs
,

288 
≥riod_øã
,

289 ()
°©
->
gë_miss
,

290 ()
°©
->
mö_time
,

291 ()
°©
->
max_time
,

292 ()
globÆ_avîage
,

293 
globÆ_°d
,

294 
globÆ_log
);

296 
°©
->
¥e_evíts

evíts
;

297 
°©
->
¥e_squ¨es
(
uöt64_t
)°©->
squ¨es
;

298 
°©
->
¥e_tŸÆ_time
°©->
tŸÆ_time
;

299 
°©
->
¥e_log_¥odu˘
°©->
log_¥odu˘
;

300 
°©
->
≥riod_mö_time
(
uöt64_t
)-1;

301 
°©
->
≥riod_max_time
= 0;

302 
°©
->
¥e_gë_miss
°©->
gë_miss
;

303 
	}
}

	@clients/ms_stats.h

11 #i‚de‡
MS_STAT_H


12 
	#MS_STAT_H


	)

14 
	~<m©h.h
>

15 
	~<uni°d.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°döt.h
>

19 
	~<°rög.h
>

21 #ifde‡
__˝lu•lus


28 *
«me
;

29 
uöt64_t
 
tŸÆ_time
;

30 
uöt64_t
 
mö_time
;

31 
uöt64_t
 
max_time
;

32 
uöt64_t
 
gë_miss
;

33 
uöt64_t
 
di°
[65];

34 
squ¨es
;

35 
log_¥odu˘
;

37 
uöt64_t
 
≥riod_mö_time
;

38 
uöt64_t
 
≥riod_max_time
;

39 
uöt64_t
 
¥e_gë_miss
;

40 
uöt64_t
 
¥e_evíts
;

41 
uöt64_t
 
¥e_tŸÆ_time
;

42 
uöt64_t
 
¥e_squ¨es
;

43 
¥e_log_¥odu˘
;

44 } 
	tms_°©_t
;

47 
ms_öô_°©s
(
ms_°©_t
 *
°©
, c⁄° *
«me
);

51 
ms_ªc‹d_evít
(
ms_°©_t
 *
°©
, 
uöt64_t
 
time
, 
gë_miss
);

55 
ms_dump_°©s
(
ms_°©_t
 *
°©
);

59 
ms_dump_f‹m©_°©s
(
ms_°©_t
 *
°©
,

60 
run_time
,

61 
‰eq
,

62 
obj_size
);

65 #ifde‡
__˝lu•lus


	@clients/ms_task.c

12 
	~"mem_c⁄fig.h
"

14 #i‡
deföed
(
HAVE_SYS_TIME_H
)

15 
	~<sys/time.h
>

18 #i‡
deföed
(
HAVE_TIME_H
)

19 
	~<time.h
>

22 
	~"ms_thªad.h
"

23 
	~"ms_£âög.h
"

24 
	~"ms_©omic.h
"

27 
	#CMD_DISTR_ADJUST_CYCLE
 1000

	)

28 
	#DISADJUST_FACTOR
 0.03

	)

36 
ms_èsk_ôem_t
 *
ms_gë_cur_›t_ôem
(
ms_c⁄n_t
 *
c
);

37 
ms_èsk_ôem_t
 *
ms_gë_√xt_gë_ôem
(
ms_c⁄n_t
 *
c
);

38 
ms_èsk_ôem_t
 *
ms_gë_√xt_£t_ôem
(
ms_c⁄n_t
 *
c
);

39 
ms_èsk_ôem_t
 *
ms_gë_øndom_ovîwrôe_ôem
(
ms_c⁄n_t
 *
c
);

43 
ms_£À˘_›t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_t
 *
èsk
);

47 
boﬁ
 
ms_is_£t_too_Á°
(
ms_èsk_t
 *
èsk
);

48 
boﬁ
 
ms_is_gë_too_Á°
(
ms_èsk_t
 *
èsk
);

49 
ms_kick_out_ôem
(
ms_èsk_ôem_t
 *
ôem
);

53 
boﬁ
 
ms_√ed_ovîwrôe_ôem
(
ms_èsk_t
 *
èsk
);

54 
boﬁ
 
ms_adju°_›t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_t
 *
èsk
);

58 
ms_èsk_d©a_vîify_öô
(
ms_èsk_t
 *
èsk
);

59 
ms_èsk_expúe_vîify_öô
(
ms_èsk_t
 *
èsk
);

63 
ms_èsk_t
 *
ms_gë_èsk
(
ms_c⁄n_t
 *
c
, 
boﬁ
 
w¨mup
);

67 
ms_upd©e_£t_ªsu…
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

68 
ms_upd©e_°©_ªsu…
(
ms_c⁄n_t
 *
c
);

69 
ms_upd©e_mu…i_gë_ªsu…
(
ms_c⁄n_t
 *
c
);

70 
ms_upd©e_sögÀ_gë_ªsu…
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

71 
ms_upd©e_èsk_ªsu…
(
ms_c⁄n_t
 *
c
);

72 
ms_sögÀ_gë£t_èsk_sch
(
ms_c⁄n_t
 *
c
);

73 
ms_mu…i_gë£t_èsk_sch
(
ms_c⁄n_t
 *
c
);

74 
ms_£nd_sig«l
(
ms_sync_lock_t
 *
sync_lock
);

75 
ms_w¨mup_£rvî
(
ms_c⁄n_t
 *
c
);

76 
ms_run_gë£t_èsk
(
ms_c⁄n_t
 *
c
);

86 
ms_èsk_ôem_t
 *
	$ms_gë_cur_›t_ôem
(
ms_c⁄n_t
 *
c
)

88  
c
->
cuº_èsk
.
ôem
;

89 
	}
}

100 
ms_èsk_ôem_t
 *
	$ms_gë_√xt_gë_ôem
(
ms_c⁄n_t
 *
c
)

102 
ms_èsk_ôem_t
 *
ôem

NULL
;

104 i‡(
c
->
£t_curs‹
 <= 0)

107 
ôem
&
c
->
ôem_wö
[0];

109 i‡(
c
->
£t_curs‹
 > 0 && c->£t_curs‹ < (
uöt32_t
)c->
wö_size
)

112 
ôem
&
c
->
ôem_wö
[
	`øndom
(Ë% (
öt64_t
)c->
£t_curs‹
];

117 
ôem
&
c
->
ôem_wö
[
	`øndom
(Ë% c->
wö_size
];

120  
ôem
;

121 
	}
}

132 
ms_èsk_ôem_t
 *
	$ms_gë_√xt_£t_ôem
(
ms_c⁄n_t
 *
c
)

139  &
c
->
ôem_wö
[(
öt64_t
)c->
£t_curs‹
 % c->
wö_size
];

140 
	}
}

153 
ms_èsk_ôem_t
 *
	$ms_gë_øndom_ovîwrôe_ôem
(
ms_c⁄n_t
 *
c
)

155  
	`ms_gë_√xt_gë_ôem
(
c
);

156 
	}
}

165 
	$ms_£À˘_›t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_t
 *
èsk
)

167 
gë_¥›

ms_£âög
.
cmd_di°r
[
CMD_GET
].
cmd_¥›
;

168 
£t_¥›

ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
;

171 i‡((
èsk
->
cy˛e_undo_gë
 =0Ë|| (èsk->
cy˛e_undo_£t
 == 0))

173 
èsk
->
cy˛e_undo_gë
+()(
CMD_DISTR_ADJUST_CYCLE
 * 
gë_¥›
);

174 
èsk
->
cy˛e_undo_£t
+()(
CMD_DISTR_ADJUST_CYCLE
 * 
£t_¥›
);

182 i‡((
£t_¥›
 > 
PROP_ERROR
)

183 && (()
èsk
->
gë_›t
 * 
£t_¥›
 >(Èask->
£t_›t


184 * 
gë_¥›
))

186 
èsk
->
cmd

CMD_SET
;

187 
èsk
->
ôem

	`ms_gë_√xt_£t_ôem
(
c
);

191 
èsk
->
cmd

CMD_GET
;

192 
èsk
->
ôem

	`ms_gë_√xt_gë_ôem
(
c
);

194 
	}
}

205 
boﬁ
 
	$ms_is_gë_too_Á°
(
ms_èsk_t
 *
èsk
)

207 
gë_¥›

ms_£âög
.
cmd_di°r
[
CMD_GET
].
cmd_¥›
;

208 
£t_¥›

ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
;

211 i‡(
gë_¥›
 < 
PROP_ERROR
)

213  
Ál£
;

216 
max_undo_£t
()(
£t_¥›
 / 
gë_¥›
 * (1.0 + 
DISADJUST_FACTOR
))

217 * 
èsk
->
cy˛e_undo_gë
;

219 i‡((()
èsk
->
gë_›t
 * 
£t_¥›
 > (Èask->
£t_›t
 * 
gë_¥›
)

220 && (
èsk
->
cy˛e_undo_£t
 > 
max_undo_£t
))

222  
åue
;

225  
Ál£
;

226 
	}
}

237 
boﬁ
 
	$ms_is_£t_too_Á°
(
ms_èsk_t
 *
èsk
)

239 
gë_¥›

ms_£âög
.
cmd_di°r
[
CMD_GET
].
cmd_¥›
;

240 
£t_¥›

ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
;

243 i‡(
£t_¥›
 < 
PROP_ERROR
)

245  
Ál£
;

249 
max_undo_gë
()((
gë_¥›
 / 
£t_¥›
 * (1.0 + 
DISADJUST_FACTOR
))

250 * ()
èsk
->
cy˛e_undo_£t
);

252 i‡((()
èsk
->
gë_›t
 * 
£t_¥›
 < (Èask->
£t_›t
 * 
gë_¥›
)

253 && (
èsk
->
cy˛e_undo_gë
 > 
max_undo_gë
))

255  
åue
;

258  
Ál£
;

259 
	}
}

272 
	$ms_kick_out_ôem
(
ms_èsk_ôem_t
 *
ôem
)

275 
ôem
->
key_¥efix

	`ms_gë_key_¥efix
();

277 
ôem
->
key_suffix_off£t
++;

278 
ôem
->
vÆue_off£t

INVALID_OFFSET
;

279 
ôem
->
˛õ¡_time
= 0;

280 
	}
}

292 
boﬁ
 
	$ms_√ed_ovîwrôe_ôem
(
ms_èsk_t
 *
èsk
)

294 
ms_èsk_ôem_t
 *
ôem

èsk
->item;

296 
	`as£π
(
ôem
 !
NULL
);

297 
	`as£π
(
èsk
->
cmd
 =
CMD_SET
);

303 i‡(
èsk
->
ovîwrôe_£t
 < (Èask->
£t_›t


304 * 
ms_£âög
.
ovîwrôe_≥r˚¡
)

306  
åue
;

309  
Ál£
;

310 
	}
}

324 
boﬁ
 
	$ms_adju°_›t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_t
 *
èsk
)

326 
ms_èsk_ôem_t
 *
ôem

èsk
->item;

328 
	`as£π
(
ôem
 !
NULL
);

330 i‡(
èsk
->
cmd
 =
CMD_SET
)

333 i‡(
	`ms_is_£t_too_Á°
(
èsk
))

336 i‡(
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
)

338 
èsk
->
cmd

CMD_GET
;

339  
åue
;

344 i‡(
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
)

346 i‡(
	`ms_√ed_ovîwrôe_ôem
(
èsk
))

349 
èsk
->
ovîwrôe_£t
++;

354 
	`ms_kick_out_ôem
(
ôem
);

360 i‡(
	`ms_√ed_ovîwrôe_ôem
(
èsk
))

366 
c
->
£t_curs‹
--;

368 
ôem

	`ms_gë_øndom_ovîwrôe_ôem
(
c
);

369 i‡(
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
)

371 
èsk
->
ôem
= item;

372 
èsk
->
ovîwrôe_£t
++;

377 
èsk
->
ôem
= item;

381 
èsk
->
cmd

CMD_SET
;

382  
åue
;

386 i‡(
ôem
->
vÆue_off£t
 =
INVALID_OFFSET
)

388 
èsk
->
cmd

CMD_SET
;

389  
åue
;

396 i‡(
	`ms_is_gë_too_Á°
(
èsk
))

399 i‡(! 
	`ms_is_£t_too_Á°
(
èsk
))

401 
	`ms_kick_out_ôem
(
ôem
);

402 
èsk
->
cmd

CMD_SET
;

403  
åue
;

407  
Ál£
;

411 
	`as£π
(
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
);

413 
èsk
->
cmd

CMD_GET
;

414  
åue
;

416 
	}
}

424 
	$ms_èsk_d©a_vîify_öô
(
ms_èsk_t
 *
èsk
)

426 
ms_èsk_ôem_t
 *
ôem

èsk
->item;

428 
	`as£π
(
ôem
 !
NULL
);

429 
	`as£π
(
èsk
->
cmd
 =
CMD_GET
);

435 i‡(
èsk
->
vîifõd_gë
 < (Èask->
gë_›t


436 * 
ms_£âög
.
vîify_≥r˚¡
)

442 i‡((
èsk
->
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
)

443 && (
ôem
->
exp_time
 == 0))

445 
èsk
->
vîify

åue
;

446 
èsk
->
föish_vîify

Ál£
;

447 
èsk
->
vîifõd_gë
++;

450 
	}
}

458 
	$ms_èsk_expúe_vîify_öô
(
ms_èsk_t
 *
èsk
)

460 
ms_èsk_ôem_t
 *
ôem

èsk
->item;

462 
	`as£π
(
ôem
 !
NULL
);

463 
	`as£π
(
èsk
->
cmd
 =
CMD_GET
);

464 
	`as£π
(
ôem
->
exp_time
 > 0);

466 
èsk
->
vîify

åue
;

467 
èsk
->
föish_vîify

Ál£
;

468 
	}
}

481 
ms_èsk_t
 *
	$ms_gë_èsk
(
ms_c⁄n_t
 *
c
, 
boﬁ
 
w¨mup
)

483 
ms_èsk_t
 *
èsk
&
c
->
cuº_èsk
;

487 
èsk
->
vîify

Ál£
;

488 
èsk
->
föish_vîify

åue
;

489 
èsk
->
gë_miss

åue
;

491 i‡(
w¨mup
)

493 
èsk
->
cmd

CMD_SET
;

494 
èsk
->
ôem

	`ms_gë_√xt_£t_ôem
(
c
);

496  
èsk
;

500 
	`ms_£À˘_›t
(
c
, 
èsk
);

502 i‡(! 
	`ms_adju°_›t
(
c
, 
èsk
))

507 i‡((
ms_£âög
.
vîify_≥r˚¡
 > 0Ë&& (
èsk
->
cmd
 =
CMD_GET
))

509 
	`ms_èsk_d©a_vîify_öô
(
èsk
);

512 i‡((
ms_£âög
.
exp_vî_≥r
 > 0Ë&& (
èsk
->
cmd
 =
CMD_GET
)

513 && (
èsk
->
ôem
->
exp_time
 > 0))

515 
	`ms_èsk_expúe_vîify_öô
(
èsk
);

525 i‡(
èsk
->
cmd
 =
CMD_GET
)

527 
èsk
->
gë_›t
++;

528 
èsk
->
cy˛e_undo_gë
--;

531  
èsk
;

532 
	}
}

540 
	$ms_£nd_sig«l
(
ms_sync_lock_t
 *
sync_lock
)

542 
	`±hªad_muãx_lock
(&
sync_lock
->
lock
);

543 
sync_lock
->
cou¡
++;

544 
	`±hªad_c⁄d_sig«l
(&
sync_lock
->
c⁄d
);

545 
	`±hªad_muãx_u∆ock
(&
sync_lock
->
lock
);

546 
	}
}

556 
	$ms_w¨mup_£rvî
(
ms_c⁄n_t
 *
c
)

558 
ms_èsk_t
 *
èsk
;

559 
ms_èsk_ôem_t
 *
ôem
;

565 i‡((
c
->
ªmaö_w¨mup_num
 >= 0)

566 && (
c
->
ªmaö_w¨mup_num
 !c->
w¨mup_num
))

568 
ôem

	`ms_gë_cur_›t_ôem
(
c
);

570 i‡((
c
->
¥ecmd
.
cmd
 =
CMD_SET
Ë&& (c->¥ecmd.
ªt°©
 =
MCD_STORED
))

572 
ôem
->
vÆue_off£t
ôem->
key_suffix_off£t
;

574 
c
->
£t_curs‹
++;

576 i‡(
c
->
¥ecmd
.
cmd
 =
CMD_SET
 && c->¥ecmd.
ªt°©
 !
MCD_STORED
)

578 
	`¥ötf
("key: %" 
PRIx64
 " didn'à£àsuc˚ss\n", 
ôem
->
key_¥efix
);

583 i‡(
c
->
ªmaö_w¨mup_num
-- > 0)

586 
èsk

	`ms_gë_èsk
(
c
, 
åue
);

587 
ôem

èsk
->item;

588 
	`ms_mcd_£t
(
c
, 
ôem
);

596 i‡(
c
->
ªmaö_w¨mup_num
 == -1)

598 
	`ms_£nd_sig«l
(&
ms_globÆ
.
w¨mup_lock
);

599 
c
->
ªmaö_w¨mup_num
--;

601 
	}
}

609 
	$ms_sögÀ_gë£t_èsk_sch
(
ms_c⁄n_t
 *
c
)

611 
ms_èsk_t
 *
èsk
;

612 
ms_èsk_ôem_t
 *
ôem
;

615 i‡(
c
->
ªmaö_exec_num
-- > 0)

617 
èsk

	`ms_gë_èsk
(
c
, 
Ál£
);

618 
ôem

èsk
->item;

619 i‡(
èsk
->
cmd
 =
CMD_SET
)

621 
	`ms_mcd_£t
(
c
, 
ôem
);

623 i‡(
èsk
->
cmd
 =
CMD_GET
)

625 
	`as£π
(
èsk
->
cmd
 =
CMD_GET
);

626 
	`ms_mcd_gë
(
c
, 
ôem
);

629 
	}
}

637 
	$ms_mu…i_gë£t_èsk_sch
(
ms_c⁄n_t
 *
c
)

639 
ms_èsk_t
 *
èsk
;

640 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
;

644 i‡(
c
->
ªmaö_exec_num
-- > 0)

646 
èsk

	`ms_gë_èsk
(
c
, 
Ál£
);

647 i‡(
èsk
->
cmd
 =
CMD_SET
)

649 
	`ms_mcd_£t
(
c
, 
èsk
->
ôem
);

654 
	`as£π
(
èsk
->
cmd
 =
CMD_GET
);

655 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[c->mlgë_èsk.
mlgë_num
];

656 
mlgë_ôem
->
ôem

èsk
->item;

657 
mlgë_ôem
->
vîify

èsk
->verify;

658 
mlgë_ôem
->
föish_vîify

èsk
->finish_verify;

659 
mlgë_ôem
->
gë_miss

èsk
->get_miss;

660 
c
->
mlgë_èsk
.
mlgë_num
++;

663 i‡((
c
->
mlgë_èsk
.
mlgë_num
 >
ms_£âög
.
mu…_key_num
)

664 || ((
c
->
ªmaö_exec_num
 =0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0)))

666 
	`ms_mcd_mlgë
(
c
);

673 i‡((
c
->
ªmaö_exec_num
 <0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0))

675 
	`ms_mcd_mlgë
(
c
);

680 
	}
}

691 
öt64_t
 
	$ms_time_diff
(
timevÆ
 *
°¨t_time
, timevÆ *
íd_time
)

693 
öt64_t
 
ídtime

íd_time
->
tv_£c
 * 1000000 +Énd_time->
tv_u£c
;

694 
öt64_t
 
°¨âime

°¨t_time
->
tv_£c
 * 1000000 + sèπ_time->
tv_u£c
;

696 
	`as£π
(
ídtime
 >
°¨âime
);

698  
ídtime
 - 
°¨âime
;

699 
	}
}

709 
	$ms_upd©e_mu…i_gë_ªsu…
(
ms_c⁄n_t
 *
c
)

711 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
;

712 
ms_èsk_ôem_t
 *
ôem
;

713 *
‹ignvÆ

NULL
;

714 *
‹ignkey

NULL
;

716 i‡(
c
 =
NULL
)

720 
	`as£π
(
c
 !
NULL
);

722 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

724 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[
i
];

725 
ôem

mlgë_ôem
->item;

726 
‹ignvÆ
&
ms_£âög
.
ch¨_block
[
ôem
->
vÆue_off£t
];

727 
‹ignkey
&
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
];

730 i‡(
mlgë_ôem
->
gë_miss
)

732 
	`©omic_add_size
(&
ms_°©s
.
gë_mis£s
, 1);

736 i‡(
mlgë_ôem
->
vîify
 && ! mlgë_ôem->
föish_vîify
)

739 i‡(
ôem
->
exp_time
 > 0)

741 
timevÆ
 
cuº_time
;

742 
	`gëtimeofday
(&
cuº_time
, 
NULL
);

745 i‡(
cuº_time
.
tv_£c
 - 
ôem
->
˛õ¡_time


746 < 
ôem
->
exp_time
 - 
EXPIRE_TIME_ERROR
)

748 
	`©omic_add_size
(&
ms_°©s
.
u√xp_ungë
, 1);

750 i‡(
ms_£âög
.
vîbo£
)

752 
£t_time
[64];

753 
cur_time
[64];

754 
	`°r·ime
(
£t_time
, 64, "%Y-%m-%d %H:%M:%S",

755 
	`loˇ…ime
(&
ôem
->
˛õ¡_time
));

756 
	`°r·ime
(
cur_time
, 64, "%Y-%m-%d %H:%M:%S",

757 
	`loˇ…ime
(&
cuº_time
.
tv_£c
));

758 
	`Ârötf
(
°dîr
,

762 "\tkey: %" 
PRIx64
 " %.*s\n"

768 
c
->
sfd
,

769 
ôem
->
key_size
,

770 
ôem
->
key_¥efix
,

771 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

772 
‹ignkey
,

773 
£t_time
,

774 
cur_time
,

775 ()(
cuº_time
.
tv_£c
 - 
ôem
->
˛õ¡_time
),

776 
ôem
->
exp_time
,

777 
ôem
->
vÆue_size
,

778 
ôem
->
vÆue_size
,

779 
‹ignvÆ
);

780 
	`fÊush
(
°dîr
);

786 
	`©omic_add_size
(&
ms_°©s
.
vef_miss
, 1);

788 i‡(
ms_£âög
.
vîbo£
)

790 
	`Ârötf
(
°dîr
, "\n<%d data verification failed\n"

792 "\tkey: %" 
PRIx64
 " %.*s\n"

796 
c
->
sfd
, 
ôem
->
key_size
, iãm->
key_¥efix
,

797 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

798 
‹ignkey
, 
ôem
->
vÆue_size
, iãm->vÆue_size, 
‹ignvÆ
);

799 
	`fÊush
(
°dîr
);

804 
c
->
mlgë_èsk
.
mlgë_num
= 0;

805 
c
->
mlgë_èsk
.
vÆue_ödex

INVALID_OFFSET
;

806 
	}
}

818 
	$ms_upd©e_sögÀ_gë_ªsu…
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

820 *
‹ignvÆ

NULL
;

821 *
‹ignkey

NULL
;

823 i‡((
c
 =
NULL
Ë|| (
ôem
 == NULL))

827 
	`as£π
(
c
 !
NULL
);

828 
	`as£π
(
ôem
 !
NULL
);

830 
‹ignvÆ
&
ms_£âög
.
ch¨_block
[
ôem
->
vÆue_off£t
];

831 
‹ignkey
&
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
];

834 i‡((
c
->
¥ecmd
.
cmd
 =
CMD_GET
Ë&& c->
cuº_èsk
.
gë_miss
)

836 
	`©omic_add_size
(&
ms_°©s
.
gë_mis£s
, 1);

840 i‡((
c
->
¥ecmd
.
cmd
 =
CMD_GET
Ë&& c->
cuº_èsk
.
vîify


841 && ! 
c
->
cuº_èsk
.
föish_vîify
)

844 i‡(
ôem
->
exp_time
 > 0)

846 
timevÆ
 
cuº_time
;

847 
	`gëtimeofday
(&
cuº_time
, 
NULL
);

850 i‡(
cuº_time
.
tv_£c
 - 
ôem
->
˛õ¡_time


851 < 
ôem
->
exp_time
 - 
EXPIRE_TIME_ERROR
)

853 
	`©omic_add_size
(&
ms_°©s
.
u√xp_ungë
, 1);

855 i‡(
ms_£âög
.
vîbo£
)

857 
£t_time
[64];

858 
cur_time
[64];

859 
	`°r·ime
(
£t_time
, 64, "%Y-%m-%d %H:%M:%S",

860 
	`loˇ…ime
(&
ôem
->
˛õ¡_time
));

861 
	`°r·ime
(
cur_time
, 64, "%Y-%m-%d %H:%M:%S",

862 
	`loˇ…ime
(&
cuº_time
.
tv_£c
));

863 
	`Ârötf
(
°dîr
,

867 "\tkey: %" 
PRIx64
 " %.*s\n"

873 
c
->
sfd
,

874 
ôem
->
key_size
,

875 
ôem
->
key_¥efix
,

876 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

877 
‹ignkey
,

878 
£t_time
,

879 
cur_time
,

880 ()(
cuº_time
.
tv_£c
 - 
ôem
->
˛õ¡_time
),

881 
ôem
->
exp_time
,

882 
ôem
->
vÆue_size
,

883 
ôem
->
vÆue_size
,

884 
‹ignvÆ
);

885 
	`fÊush
(
°dîr
);

891 
	`©omic_add_size
(&
ms_°©s
.
vef_miss
, 1);

893 i‡(
ms_£âög
.
vîbo£
)

895 
	`Ârötf
(
°dîr
, "\n<%d data verification failed\n"

897 "\tkey: %" 
PRIx64
 " %.*s\n"

901 
c
->
sfd
, 
ôem
->
key_size
, iãm->
key_¥efix
,

902 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

903 
‹ignkey
, 
ôem
->
vÆue_size
, iãm->vÆue_size, 
‹ignvÆ
);

904 
	`fÊush
(
°dîr
);

908 
	}
}

919 
	$ms_upd©e_£t_ªsu…
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

921 i‡((
c
 =
NULL
Ë|| (
ôem
 == NULL))

925 
	`as£π
(
c
 !
NULL
);

926 
	`as£π
(
ôem
 !
NULL
);

928 i‡(
c
->
¥ecmd
.
cmd
 =
CMD_SET
)

930 
c
->
¥ecmd
.
ªt°©
)

932 
MCD_STORED
:

933 i‡(
ôem
->
vÆue_off£t
 =
INVALID_OFFSET
)

936 
ôem
->
vÆue_off£t
ôem->
key_suffix_off£t
;

941 
ôem
->
vÆue_off£t
+= 1;

945 
c
->
£t_curs‹
++;

946 
c
->
cuº_èsk
.
£t_›t
++;

947 
c
->
cuº_èsk
.
cy˛e_undo_£t
--;

950 
MCD_SERVER_ERROR
:

955 
	}
}

963 
	$ms_upd©e_°©_ªsu…
(
ms_c⁄n_t
 *
c
)

965 
boﬁ
 
gë_miss

Ál£
;

967 i‡(
c
 =
NULL
)

971 
	`as£π
(
c
 !
NULL
);

973 
	`gëtimeofday
(&
c
->
íd_time
, 
NULL
);

974 
uöt64_t
 
time_diff
(uöt64_t)
	`ms_time_diff
(&
c
->
°¨t_time
, &c->
íd_time
);

976 
	`±hªad_muãx_lock
(&
ms_°©i°ic
.
°©_muãx
);

978 
c
->
¥ecmd
.
cmd
)

980 
CMD_SET
:

981 
	`ms_ªc‹d_evít
(&
ms_°©i°ic
.
£t_°©
, 
time_diff
, 
Ál£
);

984 
CMD_GET
:

985 i‡(
c
->
cuº_èsk
.
gë_miss
)

987 
gë_miss

åue
;

989 
	`ms_ªc‹d_evít
(&
ms_°©i°ic
.
gë_°©
, 
time_diff
, 
gë_miss
);

996 
	`ms_ªc‹d_evít
(&
ms_°©i°ic
.
tŸÆ_°©
, 
time_diff
, 
gë_miss
);

997 
	`±hªad_muãx_u∆ock
(&
ms_°©i°ic
.
°©_muãx
);

998 
	}
}

1008 
	$ms_upd©e_èsk_ªsu…
(
ms_c⁄n_t
 *
c
)

1010 
ms_èsk_ôem_t
 *
ôem
;

1012 i‡(
c
 =
NULL
)

1016 
	`as£π
(
c
 !
NULL
);

1018 
ôem

	`ms_gë_cur_›t_ôem
(
c
);

1019 i‡(
ôem
 =
NULL
)

1023 
	`as£π
(
ôem
 !
NULL
);

1025 
	`ms_upd©e_£t_ªsu…
(
c
, 
ôem
);

1027 i‡((
ms_£âög
.
°©_‰eq
 > 0)

1028 && ((
c
->
¥ecmd
.
cmd
 =
CMD_SET
Ë|| (c->¥ecmd.cmd =
CMD_GET
)))

1030 
	`ms_upd©e_°©_ªsu…
(
c
);

1034 i‡(((
ms_£âög
.
mu…_key_num
 > 1)

1035 && (
c
->
mlgë_èsk
.
mlgë_num
 >
ms_£âög
.
mu…_key_num
))

1036 || ((
c
->
ªmaö_exec_num
 =0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0)))

1038 
	`ms_upd©e_mu…i_gë_ªsu…
(
c
);

1042 
	`ms_upd©e_sögÀ_gë_ªsu…
(
c
, 
ôem
);

1044 
	}
}

1054 
	$ms_run_gë£t_èsk
(
ms_c⁄n_t
 *
c
)

1060 i‡((
c
->
ªmaö_exec_num
 >= 0)

1061 && (
c
->
ªmaö_exec_num
 !c->
exec_num
))

1063 
	`ms_upd©e_èsk_ªsu…
(
c
);

1067 i‡(
ms_£âög
.
mu…_key_num
 > 1)

1070 
	`ms_mu…i_gë£t_èsk_sch
(
c
);

1075 
	`ms_sögÀ_gë£t_èsk_sch
(
c
);

1079 i‡((
c
->
ªmaö_exec_num
 =-1Ë|| 
ms_globÆ
.
time_out
)

1084  
EXIT_SUCCESS
;

1085 
	}
}

1095 
	$ms_exec_èsk
(
c⁄n
 *
c
)

1097 i‡(! 
ms_globÆ
.
föish_w¨mup
)

1099 
	`ms_w¨mup_£rvî
(
c
);

1103 i‡(
	`ms_run_gë£t_èsk
(
c
) != 0)

1109  
EXIT_SUCCESS
;

1110 
	}
}

	@clients/ms_task.h

11 #i‚de‡
MS_TASK_H


12 
	#MS_TASK_H


	)

14 
	~<sys/ty≥s.h
>

15 
	~<°döt.h
>

16 #i‡!
deföed
(
__˝lu•lus
)

17 
	~<°dboﬁ.h
>

19 
	~<time.h
>

21 #ifde‡
__˝lu•lus


25 
	#UNIT_ITEMS_COUNT
 1024

	)

26 
	#KEY_PREFIX_SIZE
 ((
uöt64_t
)Ë

	)

27 
	#INVALID_OFFSET
 (-1Ë

	)

28 
	#FIXED_EXPIRE_TIME
 60

	)

29 
	#EXPIRE_TIME_ERROR
 5

	)

32 
	sèsk_ôem


34 
uöt64_t
 
key_¥efix
;

35 
key_size
;

36 
key_suffix_off£t
;

38 
vÆue_size
;

39 
vÆue_off£t
;

41 
time_t
 
˛õ¡_time
;

42 
exp_time
;

43 } 
	tms_èsk_ôem_t
;

46 
	smlgë_èsk_ôem


48 
ms_èsk_ôem_t
 *
ôem
;

49 
boﬁ
 
vîify
;

50 
boﬁ
 
föish_vîify
;

51 
boﬁ
 
gë_miss
;

52 } 
	tms_mlgë_èsk_ôem_t
;

55 
	smlgë_èsk


57 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
;

58 
mlgë_num
;

59 
vÆue_ödex
;

60 } 
	tms_mlgë_èsk_t
;

63 
	sèsk


65 
cmd
;

66 
boﬁ
 
vîify
;

67 
boﬁ
 
föish_vîify
;

68 
boﬁ
 
gë_miss
;

69 
ms_èsk_ôem_t
 *
ôem
;

72 
uöt64_t
 
gë_›t
;

73 
uöt64_t
 
£t_›t
;

74 
cy˛e_undo_gë
;

75 
cy˛e_undo_£t
;

76 
uöt64_t
 
vîifõd_gë
;

77 
uöt64_t
 
ovîwrôe_£t
;

78 } 
	tms_èsk_t
;

80 
c⁄n
;

83 
ms_exec_èsk
(
c⁄n
 *
c
);

87 
öt64_t
 
ms_time_diff
(
timevÆ
 *
°¨t_time
, timevÆ *
íd_time
);

90 #ifde‡
__˝lu•lus


	@clients/ms_thread.c

12 
	~"mem_c⁄fig.h
"

14 #i‡
deföed
(
HAVE_SYS_TIME_H
)

15 
	~<sys/time.h
>

18 #i‡
deföed
(
HAVE_TIME_H
)

19 
	~<time.h
>

22 
	~"ms_thªad.h
"

23 
	~"ms_£âög.h
"

24 
	~"ms_©omic.h
"

27 
±hªad_key_t
 
	gms_thªad_key
;

30 
ms_thªad_˘x_t
 *
	gms_thªad_˘x
;

33 
ms_£t_cuºít_time
();

34 
ms_check_sock_timeout
();

35 
ms_˛ock_h™dÀr
(c⁄° 
fd
, c⁄° 
which
, *
¨g
);

36 
uöt32_t
 
ms_£t_thªad_˝u_afföôy
(uöt32_à
˝u
);

37 
ms_£tup_thªad
(
ms_thªad_˘x_t
 *
thªad_˘x
);

38 *
ms_w‹kî_libevít
(*
¨g
);

39 
ms_¸óã_w‹kî
(*(*
func
)(*), *
¨g
);

46 
	$ms_£t_cuºít_time
()

48 
timevÆ
 
timî
;

49 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

51 
	`gëtimeofday
(&
timî
, 
NULL
);

52 
ms_thªad
->
cuº_time
(
ªl_time_t
)
timî
.
tv_£c
;

53 
	}
}

60 
	$ms_check_sock_timeout
()

62 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

63 
ms_c⁄n_t
 *
c

NULL
;

64 
time_diff
= 0;

66 
uöt32_t
 
i
0; i < 
ms_thªad
->
thªad_˘x
->
nc⁄ns
; i++)

68 
c
&
ms_thªad
->
c⁄n
[
i
];

70 i‡(
c
->
udp
)

72 
time_diff
()(
ms_thªad
->
cuº_time
 - (
ªl_time_t
)
c
->
°¨t_time
.
tv_£c
);

75 i‡(
time_diff
 > 
SOCK_WAIT_TIMEOUT
)

78 i‡(
c
->
ªcvpkt
 > 0)

80 
	`©omic_add_size
(&
ms_°©s
.
pkt_dr›
, 
c
->
∑ckës
 - c->
ªcvpkt
);

83 
	`©omic_add_size
(&
ms_°©s
.
udp_timeout
, 1);

84 
	`ms_ª£t_c⁄n
(
c
, 
åue
);

88 
	}
}

92 
	$ms_ªc⁄n_thªad_socks
()

94 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

95 
uöt32_t
 
i
0; i < 
ms_thªad
->
thªad_˘x
->
nc⁄ns
; i++)

97 
	`ms_ªc⁄n_socks
(&
ms_thªad
->
c⁄n
[
i
]);

99 
	}
}

109 
	$ms_˛ock_h™dÀr
(c⁄° 
fd
, c⁄° 
which
, *
¨g
)

111 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

112 
timevÆ
 
t
=

114 .
tv_£c
1, .
tv_u£c
= 0

117 
	`UNUSED_ARGUMENT
(
fd
);

118 
	`UNUSED_ARGUMENT
(
which
);

119 
	`UNUSED_ARGUMENT
(
¨g
);

121 
	`ms_£t_cuºít_time
();

123 i‡(
ms_thªad
->
öôülized
)

126 
	`evtimî_dñ
(&
ms_thªad
->
˛ock_evít
);

127 
	`ms_check_sock_timeout
();

131 
ms_thªad
->
öôülized

åue
;

134 
	`ms_ªc⁄n_thªad_socks
();

136 
	`evtimî_£t
(&
ms_thªad
->
˛ock_evít
, 
ms_˛ock_h™dÀr
, 0);

137 
	`evít_ba£_£t
(
ms_thªad
->
ba£
, &ms_thªad->
˛ock_evít
);

138 
	`evtimî_add
(&
ms_thªad
->
˛ock_evít
, &
t
);

139 
	}
}

149 
uöt32_t
 
	$ms_£t_thªad_˝u_afföôy
(
uöt32_t
 
˝u
)

151 
uöt32_t
 
ªt
= 0;

153 #ifde‡
HAVE_CPU_SET_T


154 
˝u_£t_t
 
˝u_£t
;

155 
	`CPU_ZERO
(&
˝u_£t
);

156 
	`CPU_SET
(
˝u
, &
˝u_£t
);

158 i‡(
	`sched_£èfföôy
(0, (
˝u_£t_t
), &
˝u_£t
) == -1)

160 
	`Ârötf
(
°dîr
, "WARNING: CouldÇot set CPU Affinity, continuing...\n");

161 
ªt
= 1;

164 
	`UNUSED_ARGUMENT
(
˝u
);

167  
ªt
;

168 
	}
}

178 
	$ms_£tup_thªad
(
ms_thªad_˘x_t
 *
thªad_˘x
)

181 
ms_thªad_t
 *
ms_thªad
(ms_thªad_à*)
	`ˇŒoc
((*ms_thread), 1);

182 
	`±hªad_£t•ecific
(
ms_thªad_key
, (*)
ms_thªad
);

184 
ms_thªad
->
thªad_˘x
=Åhread_ctx;

185 
ms_thªad
->
«˘ive_c⁄n

thªad_˘x
->
nc⁄ns
;

186 
ms_thªad
->
öôülized

Ál£
;

187 vﬁ©ûê
uöt32_t
 
˙t
= 0;

189 
	`gëtimeofday
(&
ms_thªad
->
°¨tup_time
, 
NULL
);

191 
ms_thªad
->
ba£

	`evít_öô
();

192 i‡(
ms_thªad
->
ba£
 =
NULL
)

194 i‡(
	`©omic_add_32_nv
(&
˙t
, 1) == 0)

196 
	`Ârötf
(
°dîr
, "Can'tállocateÉvent base.\n");

202 
ms_thªad
->
c⁄n
=

203 (
ms_c⁄n_t
 *)
	`mÆloc
((
size_t
)
thªad_˘x
->
nc⁄ns
 * (ms_conn_t));

204 i‡(
ms_thªad
->
c⁄n
 =
NULL
)

206 i‡(
	`©omic_add_32_nv
(&
˙t
, 1) == 0)

208 
	`Ârötf
(

209 
°dîr
,

215 
	`mem£t
(
ms_thªad
->
c⁄n
, 0, (
size_t
)
thªad_˘x
->
nc⁄ns
 * (
ms_c⁄n_t
));

217 
uöt32_t
 
i
0; i < 
thªad_˘x
->
nc⁄ns
; i++)

219 
ms_thªad
->
c⁄n
[
i
].
c⁄n_idx
= i;

220 i‡(
	`ms_£tup_c⁄n
(&
ms_thªad
->
c⁄n
[
i
]) != 0)

223 i‡(
	`©omic_add_32_nv
(&
˙t
, 1) == 0)

225 
	`Ârötf
(
°dîr
, "Initializing connection failed.\n");

232  
EXIT_SUCCESS
;

233 
	}
}

243 *
	$ms_w‹kî_libevít
(*
¨g
)

245 
ms_thªad_t
 *
ms_thªad

NULL
;

246 
ms_thªad_˘x_t
 *
thªad_˘x
(ms_thªad_˘x_à*)
¨g
;

252 i‡(
ms_£âög
.
n˝u
 > 1)

254 
	`ms_£t_thªad_˝u_afföôy
(
thªad_˘x
->
thd_idx
 % 
ms_£âög
.
n˝u
);

257 i‡(
	`ms_£tup_thªad
(
thªad_˘x
) != 0)

259 
	`exô
(1);

263 
	`ms_˛ock_h™dÀr
(0, 0, 0);

265 
	`±hªad_muãx_lock
(&
ms_globÆ
.
öô_lock
.
lock
);

266 
ms_globÆ
.
öô_lock
.
cou¡
++;

267 
	`±hªad_c⁄d_sig«l
(&
ms_globÆ
.
öô_lock
.
c⁄d
);

268 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
öô_lock
.
lock
);

270 
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

271 
	`evít_ba£_lo›
(
ms_thªad
->
ba£
, 0);

273  
NULL
;

274 
	}
}

283 
ms_¸óã_w‹kî
(*(*
func
)(*), *
¨g
)

285 
±hªad_t
 
	gthªad
;

286 
±hªad_©å_t
 
	g©å
;

287 
	gªt
;

289 
±hªad_©å_öô
(&
©å
);

291 i‡((
	gªt

±hªad_¸óã
(&
thªad
, &
©å
, 
func
, 
¨g
)) != 0)

293 
Ârötf
(
°dîr
, "C™'à¸óãÅhªad: %s.\n", 
°ªº‹
(
ªt
));

294 
exô
(1);

300 
	$ms_thªad_öô
()

302 
ms_thªad_˘x
=

303 (
ms_thªad_˘x_t
 *)
	`mÆloc
(

304 (
ms_thªad_˘x_t
Ë* (
size_t
)
ms_£âög
.
¡hªads
);

305 i‡(
ms_thªad_˘x
 =
NULL
)

307 
	`Ârötf
(
°dîr
, "Can'tállocateÅhread descriptors.");

308 
	`exô
(1);

311 
uöt32_t
 
i
0; i < 
ms_£âög
.
¡hªads
; i++)

313 
ms_thªad_˘x
[
i
].
thd_idx
= i;

314 
ms_thªad_˘x
[
i
].
nc⁄ns

ms_£âög
.nc⁄n†/ ms_£âög.
¡hªads
;

321 
ms_thªad_˘x
[
i
].
§v_idx
ò% 
ms_£âög
.
§v_˙t
;

322 
ms_thªad_˘x
[
i
].
çs_≥rc⁄n

ms_£âög
.
ex≥˘ed_çs


323 / ()
ms_£âög
.
nc⁄ns
;

324 
ms_thªad_˘x
[
i
].
exec_num_≥rc⁄n

ms_£âög
.
exec_num


325 / 
ms_£âög
.
nc⁄ns
;

328 i‡(
	`±hªad_key_¸óã
(&
ms_thªad_key
, 
NULL
))

330 
	`Ârötf
(
°dîr
, "Can't createÖthread keys. Major malfunction!\n");

331 
	`exô
(1);

334 
uöt32_t
 
i
0; i < 
ms_£âög
.
¡hªads
; i++)

336 
	`ms_¸óã_w‹kî
(
ms_w‹kî_libevít
, (*)&
ms_thªad_˘x
[
i
]);

338 
	}
}

342 
	$ms_thªad_˛ónup
()

344 i‡(
ms_thªad_˘x
 !
NULL
)

346 
	`‰ì
(
ms_thªad_˘x
);

348 
	`±hªad_key_dñëe
(
ms_thªad_key
);

349 
	}
}

	@clients/ms_thread.h

27 #i‚de‡
MS_THREAD_H


28 
	#MS_THREAD_H


	)

30 
	~<sched.h
>

31 
	~"ms_c⁄n.h
"

33 #ifde‡
__˝lu•lus


38 
	tªl_time_t
;

41 
	sthªad_˘x


43 
uöt32_t
 
thd_idx
;

44 
uöt32_t
 
nc⁄ns
;

45 
uöt32_t
 
§v_idx
;

46 
çs_≥rc⁄n
;

47 
öt64_t
 
exec_num_≥rc⁄n
;

48 } 
	tms_thªad_˘x_t
;

51 
	sthªad


53 
ms_c⁄n_t
 *
c⁄n
;

54 
uöt32_t
 
«˘ive_c⁄n
;

56 
ms_thªad_˘x_t
 *
thªad_˘x
;

57 
evít_ba£
 *
ba£
;

59 
ªl_time_t
 
cuº_time
;

60 
evít
 
˛ock_evít
;

61 
boﬁ
 
öôülized
;

63 
timevÆ
 
°¨tup_time
;

64 } 
	tms_thªad_t
;

67 
ms_thªad_öô
();

71 
ms_thªad_˛ónup
();

74 #ifde‡
__˝lu•lus


	@clients/utilities.cc

12 
	~<mem_c⁄fig.h
>

14 
	~<˛õ¡s/utûôõs.h
>

16 
	~<c°dio
>

17 
	~<ˇs£π
>

18 
	~<c°dlib
>

19 
	~<c°rög
>

20 
	~<˘y≥.h
>

21 
	~<f˙é.h
>

22 
	~<sys/°©.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<uni°d.h
>

27 
	$timedif
(
timevÆ
 
a
, timevÆ 
b
)

29 
us
, 
s
;

31 
us
 = ()(
a
.
tv_u£c
 - 
b
.tv_usec);

32 
us
 /= 1000;

33 
s
 = ()(
a
.
tv_£c
 - 
b
.tv_sec);

34 
s
 *= 1000;

35  
s
 + 
us
;

36 
	}
}

38 
	$vîsi⁄_comm™d
(c⁄° *
comm™d_«me
)

40 
	`¥ötf
("%†v%u.%u\n", 
comm™d_«me
, 1U, 0U);

41 
	`exô
(
EXIT_SUCCESS
);

42 
	}
}

44 
	$˛o£_°dio
()

46 
fd
;

47 i‡((
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0)) < 0)

53 i‡(
	`dup2
(
fd
, 
STDIN_FILENO
) < 0)

58 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) < 0)

63 i‡(
	`dup2
(
fd
, 
STDERR_FILENO
) < 0)

68 i‡(
fd
 > 
STDERR_FILENO
)

70 
	`˛o£
(
fd
);

73 
	}
}

76 c⁄° *
	$lookup_hñp
(
memˇched_›ti⁄s
 
›ti⁄
)

78 
›ti⁄
)

80 
OPT_SERVERS
: ("List which servers you wishÅo connectÅo.");

81 
OPT_VERSION
: ("DisplayÅhe version ofÅheápplicationándÅhenÉxit.");

82 
OPT_HELP
: ("DisplayÅhis messageándÅhenÉxit.");

83 
OPT_VERBOSE
: ("Give more details onÅheÖrogression ofÅheápplication.");

84 
OPT_QUIET
: ("stderránd stdin will be closedátápplication startup.");

85 
OPT_DEBUG
: ("Provide output only useful for debugging.");

86 
OPT_FLAG
: ("Provide flag information for storage operation.");

87 
OPT_EXPIRE
: ("SetÅheÉxpire option forÅhe object.");

88 
OPT_SET
: ("Use set command with memcached when storing.");

89 
OPT_REPLACE
: ("UseÑeplace command with memcached when storing.");

90 
OPT_ADD
: ("Useádd command with memcached when storing.");

91 
OPT_SLAP_EXECUTE_NUMBER
: ("Number ofÅimesÅoÉxecuteÅhe givenÅest.");

92 
OPT_SLAP_INITIAL_LOAD
: ("Number of keyÖairsÅoÜoad beforeÉxecutingÅests.");

93 
OPT_SLAP_TEST
: ("TestÅoÑun (currently \"get\" or \"set\").");

94 
OPT_SLAP_CONCURRENCY
: ("Number of usersÅo simulate withÜoad.");

95 
OPT_SLAP_NON_BLOCK
: ("Set TCP upÅo useÇon-blocking IO.");

96 
OPT_SLAP_TCP_NODELAY
: ("Set TCP socket upÅo useÇodelay.");

97 
OPT_FLUSH
: ("Flush servers beforeÑunningÅests.");

98 
OPT_HASH
: ("Select hashÅype.");

99 
OPT_BINARY
: ("SwitchÅo binaryÖrotocol.");

100 
OPT_ANALYZE
: ("AnalyzeÅheÖrovided servers.");

101 
OPT_UDP
: ("Use UDPÖrotocol when communicating with server.");

102 
OPT_BUFFER
: ("EnableÑequest buffering.");

103 
OPT_USERNAME
:  "UsernameÅo use for SASLáuthentication";

104 
OPT_PASSWD
:  "PasswordÅo use for SASLáuthentication";

105 
OPT_FILE
:  "PathÅo file in whichÅo saveÑesult";

106 
OPT_STAT_ARGS
:  "Argument for statistics";

107 
OPT_SERVER_VERSION
:  "Memcached daemon software version";

112 
	`as£π
(0);

114 
	}
}

116 
	$hñp_comm™d
(c⁄° *
comm™d_«me
, c⁄° *
des¸ùti⁄
,

117 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
,

118 
memˇched_¥ogøms_hñp_°
 *
›ti⁄s
)

120 
x
;

121 ()
›ti⁄s
;

123 
	`¥ötf
("%†v%u.%u\n\n", 
comm™d_«me
, 1U, 0U);

124 
	`¥ötf
("\t%s\n\n", 
des¸ùti⁄
);

125 
	`¥ötf
("Current options. A '=' meansÅhe optionÅakesá value.\n\n");

127 
x
0; 
l⁄g_›ti⁄s
[x].
«me
; x++)

129 c⁄° *
hñp_mesßge
;

131 
	`¥ötf
("\à--%s%c\n", 
l⁄g_›ti⁄s
[
x
].
«me
,

132 
l⁄g_›ti⁄s
[
x
].
has_¨g
 ? '=' : ' ');

133 i‡((
hñp_mesßge

	`lookup_hñp
(
	`memˇched_›ti⁄s
(
l⁄g_›ti⁄s
[
x
].
vÆ
))))

134 
	`¥ötf
("\t\t%s\n", 
hñp_mesßge
);

137 
	`¥ötf
("\n");

138 
	`exô
(
EXIT_SUCCESS
);

139 
	}
}

141 
	$¥o˚ss_hash_›ti⁄
(
memˇched_°
 *
memc
, *
›t_hash
)

143 
uöt64_t
 
£t
;

144 
memˇched_ªtu∫_t
 
rc
;

146 i‡(
›t_hash
 =
NULL
)

151 
£t

MEMCACHED_HASH_DEFAULT
;

152 i‡(!
	`°rˇ£cmp
(
›t_hash
, "CRC"))

154 
£t

MEMCACHED_HASH_CRC
;

156 i‡(!
	`°rˇ£cmp
(
›t_hash
, "FNV1_64"))

158 
£t

MEMCACHED_HASH_FNV1_64
;

160 i‡(!
	`°rˇ£cmp
(
›t_hash
, "FNV1A_64"))

162 
£t

MEMCACHED_HASH_FNV1A_64
;

164 i‡(!
	`°rˇ£cmp
(
›t_hash
, "FNV1_32"))

166 
£t

MEMCACHED_HASH_FNV1_32
;

168 i‡(!
	`°rˇ£cmp
(
›t_hash
, "FNV1A_32"))

170 
£t

MEMCACHED_HASH_FNV1A_32
;

174 
	`Ârötf
(
°dîr
, "hash:Åy≥ÇŸÑecognized %s\n", 
›t_hash
);

175 
	`exô
(
EXIT_FAILURE
);

178 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, 
£t
);

179 i‡(
rc
 !
MEMCACHED_SUCCESS
)

181 
	`Ârötf
(
°dîr
, "hash: memˇchêîr‹ %s\n", 
	`memˇched_°ªº‹
(
memc
, 
rc
));

182 
	`exô
(
EXIT_FAILURE
);

184 
	}
}

186 
	$öôülize_sockës
()

189 #i‡
	`deföed
(
_WIN32
)

190 
WSADATA
 
wßD©a
;

191 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,0), &
wßD©a
) != 0)

193 
	`Ârötf
(
°dîr
, "Socket Initialization Error. Programáborted\n");

194 
	`exô
(
EXIT_FAILURE
);

197 
	}
}

	@clients/utilities.h

12 #¥agm®
⁄˚


14 
	~<gë›t.h
>

15 
	~<libmemˇched-1.0/memˇched.h
>

16 
	~"˛õ¡s/˛õ¡_›ti⁄s.h
"

18 #i‡
deföed
(
HAVE_SYS_TIME_H
)

19 
	~<sys/time.h
>

22 #i‡
deföed
(
HAVE_TIME_H
)

23 
	~<time.h
>

27 #ifde‡
__sun


31 
	#OPTIONSTRING
 *

	)

33 
	#OPTIONSTRING
 c⁄° *

	)

36 
memˇched_¥ogøms_hñp_°
 
	tmemˇched_¥ogøms_hñp_°
;

38 
	smemˇched_¥ogøms_hñp_°


40 *
	mnŸ_u£d_yë
;

43 #ifde‡
__˝lu•lus


47 *
°rdup_˛ónup
(c⁄° *
°r
);

48 
˛ónup
();

49 
timedif
(
timevÆ
 
a
, timevÆ 
b
);

50 
vîsi⁄_comm™d
(c⁄° *
comm™d_«me
Ë
__©åibuã__
 ((
n‹ëu∫
));

51 
hñp_comm™d
(c⁄° *
comm™d_«me
, c⁄° *
des¸ùti⁄
,

52 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
,

53 
memˇched_¥ogøms_hñp_°
 *
›ti⁄s
Ë
__©åibuã__
 ((
n‹ëu∫
));

54 
¥o˚ss_hash_›ti⁄
(
memˇched_°
 *
memc
, *
›t_hash
);

55 
boﬁ
 
öôülize_ß¶
(
memˇched_°
 *
memc
, *
u£r
, *
∑ssw‹d
);

56 
shutdown_ß¶
();

57 
öôülize_sockës
();

58 
˛o£_°dio
();

60 #ifde‡
__˝lu•lus


	@example/byteorder.cc

38 
	~<mem_c⁄fig.h
>

40 
	~<sys/ty≥s.h
>

42 
	~<exam∂e/byã‹dî.h
>

45 #i‚de‡
sw≠64


46 
ölöe
 
uöt64_t
 
	$sw≠64
(
uöt64_t
 
ö
)

48 #i‚de‡
WORDS_BIGENDIAN


51 
uöt64_t
 
rv
= 0;

52 
uöt8_t
 
x
= 0; x < 8; x++)

54 
rv
‘v << 8Ë| (
ö
 & 0xff);

55 
ö
 >>= 8;

57  
rv
;

60  
ö
;

62 
	}
}

65 #ifde‡
HAVE_HTONLL


67 
uöt64_t
 
	$exam∂e_¡ohŒ
(
uöt64_t
 
vÆue
)

69  
	`¡ohŒ
(
vÆue
);

70 
	}
}

72 
uöt64_t
 
	$exam∂e_ht⁄Œ
(
uöt64_t
 
vÆue
)

74  
	`ht⁄Œ
(
vÆue
);

75 
	}
}

79 
uöt64_t
 
	$exam∂e_¡ohŒ
(
uöt64_t
 
vÆue
)

81  
	`sw≠64
(
vÆue
);

82 
	}
}

84 
uöt64_t
 
	$exam∂e_ht⁄Œ
(
uöt64_t
 
vÆue
)

86  
	`sw≠64
(
vÆue
);

87 
	}
}

	@example/byteorder.h

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


43 
uöt64_t
 
exam∂e_¡ohŒ
(uint64_t);

45 
uöt64_t
 
exam∂e_ht⁄Œ
(uint64_t);

47 #ifde‡
__˝lu•lus


	@example/interface_v0.cc

8 
	~"mem_c⁄fig.h
"

10 
	~<ˇs£π
>

11 
	~<sys/ty≥s.h
>

12 
	~<c°dio
>

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

15 
	~<˚ºno
>

16 
	~<c°dlib
>

17 
	~<c°rög
>

19 
	~<libmemˇched¥Ÿocﬁ-0.0/h™dÀr.h
>

20 
	~<exam∂e/byã‹dî.h
>

21 
	~"exam∂e/memˇched_light.h
"

22 
	~"exam∂e/°‹age.h
"

23 
	~"utû/log.hµ
"

26 
usög
 
«me•a˚
 
	gd©adif„ª¡ül
;

28 
	gutû
::
log_öfo_°
 *
log_fûe

NULL
;

30 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$no›_comm™d_h™dÀr
(c⁄° *
cookõ
,

31 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

32 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

34 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

35 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

37 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

38 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code

PROTOCOL_BINARY_CMD_NOOP
;

39 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

40 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

42  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

43 
	}
}

45 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$quô_comm™d_h™dÀr
(c⁄° *
cookõ
,

46 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

47 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

49 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

50 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

52 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

53 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code

PROTOCOL_BINARY_CMD_QUIT
;

54 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

55 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

57 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_QUIT
)

59 
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

63  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

64 
	}
}

66 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$gë_comm™d_h™dÀr
(c⁄° *
cookõ
,

67 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

68 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

70 
uöt8_t
 
›code

hódî
->
ªque°
.opcode;

71 
	u¥Ÿocﬁ_bö¨y_ª•⁄£_gë_un
 {

72 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
ª•⁄£
;

73 
buf„r
[4096];

76 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë_un
 
msg
;

77 
	`mem£t
(&
msg
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_gë_un
));

79 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

80 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code
= opcode;

81 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

82 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

84 
ôem
 *ôem
	`gë_ôem
(
hódî
 + 1, 
	`¡ohs
(hódî->
ªque°
.
keyÀn
));

85 i‡(
ôem
)

87 
msg
.
ª•⁄£
.
mesßge
.
body
.
Êags

	`ht⁄l
(
ôem
->flags);

88 *
±r
(*)(
msg
.
ª•⁄£
.
byãs
 + (*
hódî
) + 4);

89 
uöt32_t
 
bodysize
= 4;

90 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`exam∂e_ht⁄Œ
(
ôem
->cas);

91 i‡(
›code
 =
PROTOCOL_BINARY_CMD_GETK
 || opcodê=
PROTOCOL_BINARY_CMD_GETKQ
)

93 
	`mem˝y
(
±r
, 
ôem
->
key
, iãm->
nkey
);

94 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
keyÀn

	`ht⁄s
((
uöt16_t
)
ôem
->
nkey
);

95 
±r
 +
ôem
->
nkey
;

96 
bodysize
 +(
uöt32_t
)
ôem
->
nkey
;

98 
	`mem˝y
(
±r
, 
ôem
->
d©a
, iãm->
size
);

99 
bodysize
 +(
uöt32_t
)
ôem
->
size
;

100 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
bodyÀn

	`ht⁄l
(
bodysize
);

101 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
exéí
= 4;

103 
	`ªÀa£_ôem
(
ôem
);

104  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
msg
);

106 i‡(
›code
 =
PROTOCOL_BINARY_CMD_GET
 || opcodê=
PROTOCOL_BINARY_CMD_GETK
)

108 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
);

109  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
msg
);

113  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

114 
	}
}

116 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$dñëe_comm™d_h™dÀr
(c⁄° *
cookõ
,

117 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

118 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

120 
size_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

122 *
key
((*)
hódî
) + (*header);

123 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

124 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

126 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

127 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code
hódî->
ªque°
.opcode;

128 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

130 i‡(
	`dñëe_ôem
(
key
, 
keyÀn
Ë=
Ál£
)

132 
log_fûe
->
	`wrôe
(
utû
::
VERBOSE_NOTICE
, "%†nŸ found: %.*s", 
__func__
, 
keyÀn
, 
key
);

133 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
);

134  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

136 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_DELETE
)

138 
log_fûe
->
	`wrôe
(
utû
::
VERBOSE_NOTICE
, "%†nŸ found: %.*s", 
__func__
, 
keyÀn
, 
key
);

140 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

141  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

144 
log_fûe
->
	`wrôe
(
utû
::
VERBOSE_NOTICE
, "%†dñëed: %.*s", 
__func__
, 
keyÀn
, 
key
);

146  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

147 
	}
}

149 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$Êush_comm™d_h™dÀr
(c⁄° *
cookõ
,

150 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

151 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

153 
uöt8_t
 
›code

hódî
->
ªque°
.opcode;

156 
	`Êush
(0);

158 i‡(
›code
 =
PROTOCOL_BINARY_CMD_FLUSH
)

160 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

161 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

163 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

164 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code
= opcode;

165 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

166 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

168  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

171  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

172 
	}
}

174 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$¨ôhmëic_comm™d_h™dÀr
(c⁄° *
cookõ
,

175 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

176 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

178 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 *
ªq
’rŸocﬁ_bö¨y_ªque°_ö¸*)
hódî
;

179 
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
 
ª•⁄£
;

180 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
));

182 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

183 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code
hódî->
ªque°
.opcode;

184 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

186 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

187 
uöt64_t
 
öôül

	`exam∂e_¡ohŒ
(
ªq
->
mesßge
.
body
.initial);

188 
uöt64_t
 
dñè

	`exam∂e_¡ohŒ
(
ªq
->
mesßge
.
body
.delta);

189 
uöt32_t
 
expú©i⁄

	`¡ohl
(
ªq
->
mesßge
.
body
.expiration);

190 
uöt32_t
 
Êags
= 0;

191 *
key

ªq
->
byãs
 + (req->bytes);

192 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

194 
uöt64_t
 
vÆue

öôül
;

196 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

197 i‡(
ôem
 !
NULL
)

199 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_INCREMENT
 ||

200 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_INCREMENTQ
)

202 
vÆue
(*(
uöt64_t
*)
ôem
->
d©a
Ë+ 
dñè
;

206 i‡(
dñè
 > *(
uöt64_t
*)
ôem
->
d©a
)

208 
vÆue
= 0;

212 
vÆue
*(
uöt64_t
*)
ôem
->
d©a
 - 
dñè
;

215 
expú©i⁄
(
uöt32_t
)
ôem
->
exp
;

216 
Êags

ôem
->flags;

218 
	`ªÀa£_ôem
(
ôem
);

219 
	`dñëe_ôem
(
key
, 
keyÀn
);

222 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, (
vÆue
), 
Êags
, (
time_t
)
expú©i⁄
);

223 i‡(
ôem
 =
NULL
)

225 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

229 
	`mem˝y
(
ôem
->
d©a
, &
vÆue
, (value));

230 
	`put_ôem
(
ôem
);

233 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
rvÆ
);

234 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

236 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
bodyÀn

	`¡ohl
(8);

237 
ª•⁄£
.
mesßge
.
body
.
vÆue

	`exam∂e_¡ohŒ
((*(
uöt64_t
*)
ôem
->
d©a
));

238 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`exam∂e_¡ohŒ
(
ôem
->cas);

240 
	`ªÀa£_ôem
(
ôem
);

241 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_INCREMENTQ
 ||

242 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_DECREMENTQ
)

244  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

248  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

249 
	}
}

251 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$vîsi⁄_comm™d_h™dÀr
(c⁄° *
cookõ
,

252 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

253 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

255 c⁄° *
vîsi⁄°rög
= "1.0.0";

256 
	u¥Ÿocﬁ_bö¨y_ª•⁄£_hódî_un


258 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
∑ckë
;

259 
buf„r
[256];

262 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî_un
 
ª•⁄£
;

263 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî_un
));

265 
ª•⁄£
.
∑ckë
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

266 
ª•⁄£
.
∑ckë
.ª•⁄£.
›code

PROTOCOL_BINARY_CMD_VERSION
;

267 
ª•⁄£
.
∑ckë
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

268 
ª•⁄£
.
∑ckë
.ª•⁄£.
›aque

hódî
->
ªque°
.opaque;

269 
ª•⁄£
.
∑ckë
.ª•⁄£.
ˇs
= 0;

270 
ª•⁄£
.
∑ckë
.ª•⁄£.
bodyÀn

	`ht⁄l
((
uöt32_t
)
	`°æí
(
vîsi⁄°rög
));

272 
	`as£π
((
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
Ë+
	`°æí
(
vîsi⁄°rög
) <= 256);

273 
	`mem˝y
(
ª•⁄£
.
buf„r
 + (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
), 
vîsi⁄°rög
, 
	`°æí
(versionstring));

275  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

276 
	}
}

278 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$c⁄ˇt_comm™d_h™dÀr
(c⁄° *
cookõ
,

279 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

280 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

282 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

283 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

284 
uöt64_t
 
ˇs

	`exam∂e_¡ohŒ
(
hódî
->
ªque°
.cas);

285 *
key

hódî
 + 1;

286 
uöt32_t
 
vÆÀn

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
;

287 *
vÆ
(*)
key
 + 
keyÀn
;

289 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

290 
ôem
 *
nôem

NULL
;

292 i‡(
ôem
 =
NULL
)

294 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

296 i‡(
ˇs
 !0 && ca†!
ôem
->cas)

298 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

300 i‡((
nôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, 
ôem
->
size
 + 
vÆÀn
,

301 
ôem
->
Êags
, iãm->
exp
)Ë=
NULL
)

303 
	`ªÀa£_ôem
(
ôem
);

304 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

308 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_APPEND
 ||

309 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_APPENDQ
)

311 
	`mem˝y
(
nôem
->
d©a
, 
ôem
->d©a, iãm->
size
);

312 
	`mem˝y
(((*)(
nôem
->
d©a
)Ë+ 
ôem
->
size
, 
vÆ
, 
vÆÀn
);

316 
	`mem˝y
(
nôem
->
d©a
, 
vÆ
, 
vÆÀn
);

317 
	`mem˝y
(((*)(
nôem
->
d©a
)Ë+ 
vÆÀn
, 
ôem
->d©a, iãm->
size
);

319 
	`ªÀa£_ôem
(
ôem
);

320 
	`dñëe_ôem
(
key
, 
keyÀn
);

321 
	`put_ôem
(
nôem
);

322 
ˇs

nôem
->cas;

323 
	`ªÀa£_ôem
(
nôem
);

325 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_APPEND
 ||

326 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_PREPEND
)

328 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

329 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

331 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

332 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code
hódî->
ªque°
.opcode;

333 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
rvÆ
);

334 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

335 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`exam∂e_ht⁄Œ
(cas);

337  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

341  
rvÆ
;

342 
	}
}

344 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$£t_comm™d_h™dÀr
(c⁄° *
cookõ
,

345 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

346 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

348 
size_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

349 
size_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

350 
¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
 *
ªque°
’rŸocﬁ_bö¨y_ªque°_ª∂a˚*)
hódî
;

351 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

352 
time_t
 
timeout
—ime_t)
	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

353 *
key
((*)
hódî
) + (*header) + 8;

354 *
d©a

key
 + 
keyÀn
;

356 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

357 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

359 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

360 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code
hódî->
ªque°
.opcode;

361 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

362 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

364 i‡(
hódî
->
ªque°
.
ˇs
 != 0)

367 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

368 i‡(
ôem
 !
NULL
)

370 i‡(
ôem
->
ˇs
 !
	`exam∂e_¡ohŒ
(
hódî
->
ªque°
.cas))

372 
	`ªÀa£_ôem
(
ôem
);

373 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
);

374  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

376 
	`ªÀa£_ôem
(
ôem
);

380 
	`dñëe_ôem
(
key
, 
keyÀn
);

381 
ôem
* iãm
	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, 
timeout
);

382 i‡(
ôem
 =
NULL
)

384 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_ENOMEM
);

388 
	`put_ôem
(
ôem
);

390 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_SET
)

392 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`exam∂e_ht⁄Œ
(
ôem
->cas);

393 
	`ªÀa£_ôem
(
ôem
);

394  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

396 
	`ªÀa£_ôem
(
ôem
);

398  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

401  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

402 
	}
}

404 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$add_comm™d_h™dÀr
(c⁄° *
cookõ
,

405 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

406 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

408 
size_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

409 
size_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

410 
¥Ÿocﬁ_bö¨y_ªque°_add
 *
ªque°
’rŸocﬁ_bö¨y_ªque°_add*)
hódî
;

411 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

412 
time_t
 
timeout
—ime_t)
	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

413 *
key
((*)
hódî
) + (*header) + 8;

414 *
d©a

key
 + 
keyÀn
;

416 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

417 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

419 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

420 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code
hódî->
ªque°
.opcode;

421 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

422 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

424 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

425 i‡(
ôem
 =
NULL
)

427 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, 
timeout
);

428 i‡(
ôem
 =
NULL
)

429 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_ENOMEM
);

432 
	`put_ôem
(
ôem
);

434 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_ADD
)

436 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`exam∂e_ht⁄Œ
(
ôem
->cas);

437 
	`ªÀa£_ôem
(
ôem
);

438  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

440 
	`ªÀa£_ôem
(
ôem
);

441  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

446 
	`ªÀa£_ôem
(
ôem
);

447 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
);

450  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

451 
	}
}

453 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$ª∂a˚_comm™d_h™dÀr
(c⁄° *
cookõ
,

454 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

455 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

457 
size_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

458 
size_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

459 
¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
 *
ªque°
’rŸocﬁ_bö¨y_ªque°_ª∂a˚*)
hódî
;

460 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

461 
time_t
 
timeout
—ime_t)
	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

462 *
key
((*)
hódî
) + (*header) + 8;

463 *
d©a

key
 + 
keyÀn
;

465 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

466 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

468 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

469 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code
hódî->
ªque°
.opcode;

470 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

471 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

473 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

474 i‡(
ôem
 =
NULL
)

476 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
);

478 i‡(
hódî
->
ªque°
.
ˇs
 =0 || 
	`exam∂e_¡ohŒ
(hódî->ªque°.ˇsË=
ôem
->cas)

480 
	`ªÀa£_ôem
(
ôem
);

481 
	`dñëe_ôem
(
key
, 
keyÀn
);

482 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, 
timeout
);

484 i‡(
ôem
 =
NULL
)

486 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_ENOMEM
);

490 
	`put_ôem
(
ôem
);

492 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_REPLACE
)

494 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`exam∂e_ht⁄Œ
(
ôem
->cas);

495 
	`ªÀa£_ôem
(
ôem
);

496  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

498 
	`ªÀa£_ôem
(
ôem
);

499  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

504 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
);

505 
	`ªÀa£_ôem
(
ôem
);

508  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

509 
	}
}

511 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$°©_comm™d_h™dÀr
(c⁄° *
cookõ
,

512 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

513 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

516 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

517 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

519 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

520 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code

PROTOCOL_BINARY_CMD_STAT
;

521 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

522 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

524  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

525 
	}
}

527 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 
	göãrÁ˚_v0_im∂
;

529 
öôülize_öãrÁ˚_v0_h™dÀr
(
utû
::
log_öfo_°
& 
¨g
)

531 
log_fûe
&
¨g
;

533 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚_vîsi⁄

MEMCACHED_PROTOCOL_HANDLER_V0
;

534 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_GET
]
gë_comm™d_h™dÀr
;

535 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_SET
]
£t_comm™d_h™dÀr
;

536 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_ADD
]
add_comm™d_h™dÀr
;

537 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_REPLACE
]
ª∂a˚_comm™d_h™dÀr
;

538 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_DELETE
]
dñëe_comm™d_h™dÀr
;

539 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_INCREMENT
]
¨ôhmëic_comm™d_h™dÀr
;

540 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_DECREMENT
]
¨ôhmëic_comm™d_h™dÀr
;

541 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_QUIT
]
quô_comm™d_h™dÀr
;

542 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_FLUSH
]
Êush_comm™d_h™dÀr
;

543 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_GETQ
]
gë_comm™d_h™dÀr
;

544 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_NOOP
]
no›_comm™d_h™dÀr
;

545 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_VERSION
]
vîsi⁄_comm™d_h™dÀr
;

546 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_GETK
]
gë_comm™d_h™dÀr
;

547 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_GETKQ
]
gë_comm™d_h™dÀr
;

548 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_APPEND
]
c⁄ˇt_comm™d_h™dÀr
;

549 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_PREPEND
]
c⁄ˇt_comm™d_h™dÀr
;

550 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_STAT
]
°©_comm™d_h™dÀr
;

551 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_SETQ
]
£t_comm™d_h™dÀr
;

552 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_ADDQ
]
add_comm™d_h™dÀr
;

553 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_REPLACEQ
]
ª∂a˚_comm™d_h™dÀr
;

554 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_DELETEQ
]
dñëe_comm™d_h™dÀr
;

555 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_INCREMENTQ
]
¨ôhmëic_comm™d_h™dÀr
;

556 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_DECREMENTQ
]
¨ôhmëic_comm™d_h™dÀr
;

557 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_QUITQ
]
quô_comm™d_h™dÀr
;

558 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_FLUSHQ
]
Êush_comm™d_h™dÀr
;

559 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_APPENDQ
]
c⁄ˇt_comm™d_h™dÀr
;

560 
	göãrÁ˚_v0_im∂
.
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_PREPENDQ
]
c⁄ˇt_comm™d_h™dÀr
;

	@example/interface_v1.cc

11 
	~"mem_c⁄fig.h
"

13 
	~<ˇs£π
>

14 
	~<˚ºno
>

15 
	~<c°dio
>

16 
	~<c°dlib
>

17 
	~<c°rög
>

18 
	~<f˙é.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<uni°d.h
>

22 
	~<libmemˇched¥Ÿocﬁ-0.0/h™dÀr.h
>

23 
	~<exam∂e/byã‹dî.h
>

24 
	~"exam∂e/memˇched_light.h
"

25 
	~"exam∂e/°‹age.h
"

26 
	~"utû/log.hµ
"

28 
	gd©adif„ª¡ül
::
utû
::
log_öfo_°
 *
log_fûe

NULL
;

30 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$add_h™dÀr
(c⁄° *
cookõ
,

31 c⁄° *
key
,

32 
uöt16_t
 
keyÀn
,

33 c⁄° *
d©a
,

34 
uöt32_t
 
d©Æí
,

35 
uöt32_t
 
Êags
,

36 
uöt32_t
 
ex±ime
,

37 
uöt64_t
 *
ˇs
)

39 ()
cookõ
;

40 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

41 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

42 i‡(
ôem
 =
NULL
)

44 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, (
time_t
)
ex±ime
);

45 i‡(
ôem
 == 0)

47 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

51 
	`put_ôem
(
ôem
);

52 *
ˇs

ôem
->cas;

53 
	`ªÀa£_ôem
(
ôem
);

58 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

61  
rvÆ
;

62 
	}
}

64 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$≠≥nd_h™dÀr
(c⁄° *
cookõ
,

65 c⁄° *
key
,

66 
uöt16_t
 
keyÀn
,

67 c⁄° * 
vÆ
,

68 
uöt32_t
 
vÆÀn
,

69 
uöt64_t
 
ˇs
,

70 
uöt64_t
 *
ªsu…_ˇs
)

72 ()
cookõ
;

73 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

75 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

76 
ôem
 *
nôem
;

78 i‡(
ôem
 =
NULL
)

80 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

82 i‡(
ˇs
 !0 && ca†!
ôem
->cas)

84 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

86 i‡((
nôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, 
ôem
->
size
 + 
vÆÀn
,

87 
ôem
->
Êags
, iãm->
exp
)Ë=
NULL
)

89 
	`ªÀa£_ôem
(
ôem
);

90 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

94 
	`mem˝y
(
nôem
->
d©a
, 
ôem
->d©a, iãm->
size
);

95 
	`mem˝y
(((*)(
nôem
->
d©a
)Ë+ 
ôem
->
size
, 
vÆ
, 
vÆÀn
);

96 
	`ªÀa£_ôem
(
ôem
);

97 
	`dñëe_ôem
(
key
, 
keyÀn
);

98 
	`put_ôem
(
nôem
);

99 *
ªsu…_ˇs

nôem
->
ˇs
;

100 
	`ªÀa£_ôem
(
nôem
);

103  
rvÆ
;

104 
	}
}

106 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$de¸emít_h™dÀr
(c⁄° *
cookõ
,

107 c⁄° *
key
,

108 
uöt16_t
 
keyÀn
,

109 
uöt64_t
 
dñè
,

110 
uöt64_t
 
öôül
,

111 
uöt32_t
 
expú©i⁄
,

112 
uöt64_t
 *
ªsu…
,

113 
uöt64_t
 *
ªsu…_ˇs
) {

114 ()
cookõ
;

115 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

116 
uöt64_t
 
vÆ

öôül
;

117 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

119 i‡(
ôem
 !
NULL
)

121 i‡(
dñè
 > *(
uöt64_t
*)
ôem
->
d©a
)

122 
vÆ
= 0;

124 
vÆ
*(
uöt64_t
*)
ôem
->
d©a
 - 
dñè
;

126 
expú©i⁄
(
uöt32_t
)
ôem
->
exp
;

127 
	`ªÀa£_ôem
(
ôem
);

128 
	`dñëe_ôem
(
key
, 
keyÀn
);

131 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, (
öôül
), 0, (
time_t
)
expú©i⁄
);

132 i‡(
ôem
 == 0)

134 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

138 
	`mem˝y
(
ôem
->
d©a
, &
vÆ
, (val));

139 
	`put_ôem
(
ôem
);

140 *
ªsu…

vÆ
;

141 *
ªsu…_ˇs

ôem
->
ˇs
;

142 
	`ªÀa£_ôem
(
ôem
);

145  
rvÆ
;

146 
	}
}

148 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$dñëe_h™dÀr
(const *,

149 c⁄° *
key
,

150 
uöt16_t
 
keyÀn
,

151 
uöt64_t
 
ˇs
)

153 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

155 i‡(
ˇs
 != 0)

157 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

158 i‡(
ôem
 !
NULL
)

160 i‡(
ôem
->
ˇs
 != cas)

162 
	`ªÀa£_ôem
(
ôem
);

163  
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

165 
	`ªÀa£_ôem
(
ôem
);

169 i‡(!
	`dñëe_ôem
(
key
, 
keyÀn
))

171 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

174  
rvÆ
;

175 
	}
}

178 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$Êush_h™dÀr
(c⁄° * , 
uöt32_t
 )

180  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

181 
	}
}

183 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$gë_h™dÀr
(c⁄° *
cookõ
,

184 c⁄° *
key
,

185 
uöt16_t
 
keyÀn
,

186 
memˇched_bö¨y_¥Ÿocﬁ_gë_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
) {

187 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

189 i‡(
ôem
 =
NULL
)

191  
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

194 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rc
;

195 
rc

	`ª•⁄£_h™dÀr
(
cookõ
, 
key
, (
uöt16_t
)
keyÀn
,

196 
ôem
->
d©a
, (
uöt32_t
)ôem->
size
, iãm->
Êags
,

197 
ôem
->
ˇs
);

198 
	`ªÀa£_ôem
(
ôem
);

199  
rc
;

200 
	}
}

202 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$ö¸emít_h™dÀr
(c⁄° *
cookõ
,

203 c⁄° *
key
,

204 
uöt16_t
 
keyÀn
,

205 
uöt64_t
 
dñè
,

206 
uöt64_t
 
öôül
,

207 
uöt32_t
 
expú©i⁄
,

208 
uöt64_t
 *
ªsu…
,

209 
uöt64_t
 *
ªsu…_ˇs
) {

210 ()
cookõ
;

211 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

212 
uöt64_t
 
vÆ

öôül
;

213 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

215 i‡(
ôem
 !
NULL
)

217 
vÆ
(*(
uöt64_t
*)
ôem
->
d©a
Ë+ 
dñè
;

218 
expú©i⁄
(
uöt32_t
)
ôem
->
exp
;

219 
	`ªÀa£_ôem
(
ôem
);

220 
	`dñëe_ôem
(
key
, 
keyÀn
);

223 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, (
öôül
), 0, (
time_t
)
expú©i⁄
);

224 i‡(
ôem
 =
NULL
)

226 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

230 
buf„r
[1024] = {0};

231 
	`mem˝y
(
buf„r
, 
key
, 
keyÀn
);

232 
	`mem˝y
(
ôem
->
d©a
, &
vÆ
, (val));

233 
	`put_ôem
(
ôem
);

234 *
ªsu…

vÆ
;

235 *
ªsu…_ˇs

ôem
->
ˇs
;

236 
	`ªÀa£_ôem
(
ôem
);

239  
rvÆ
;

240 
	}
}

242 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$no›_h™dÀr
(c⁄° *
cookõ
) {

243 ()
cookõ
;

244  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

245 
	}
}

247 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$¥ïíd_h™dÀr
(c⁄° *
cookõ
,

248 c⁄° *
key
,

249 
uöt16_t
 
keyÀn
,

250 c⁄° * 
vÆ
,

251 
uöt32_t
 
vÆÀn
,

252 
uöt64_t
 
ˇs
,

253 
uöt64_t
 *
ªsu…_ˇs
) {

254 ()
cookõ
;

255 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

257 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

258 
ôem
 *
nôem

NULL
;

260 i‡(
ôem
 =
NULL
)

262 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

264 i‡(
ˇs
 !0 && ca†!
ôem
->cas)

266 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

268 i‡((
nôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, 
ôem
->
size
 + 
vÆÀn
,

269 
ôem
->
Êags
, iãm->
exp
)Ë=
NULL
)

271 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

275 
	`mem˝y
(
nôem
->
d©a
, 
vÆ
, 
vÆÀn
);

276 
	`mem˝y
(((*)(
nôem
->
d©a
)Ë+ 
vÆÀn
, 
ôem
->d©a, iãm->
size
);

277 
	`ªÀa£_ôem
(
ôem
);

278 
ôem

NULL
;

279 
	`dñëe_ôem
(
key
, 
keyÀn
);

280 
	`put_ôem
(
nôem
);

281 *
ªsu…_ˇs

nôem
->
ˇs
;

284 i‡(
ôem
)

285 
	`ªÀa£_ôem
(
ôem
);

287 i‡(
nôem
)

288 
	`ªÀa£_ôem
(
nôem
);

290  
rvÆ
;

291 
	}
}

293 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$quô_h™dÀr
(const *)

295  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

296 
	}
}

298 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$ª∂a˚_h™dÀr
(const *,

299 c⁄° *
key
,

300 
uöt16_t
 
keyÀn
,

301 c⁄° * 
d©a
,

302 
uöt32_t
 
d©Æí
,

303 
uöt32_t
 
Êags
,

304 
uöt32_t
 
ex±ime
,

305 
uöt64_t
 
ˇs
,

306 
uöt64_t
 *
ªsu…_ˇs
)

308 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

309 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

311 i‡(
ôem
 =
NULL
)

313 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

315 i‡(
ˇs
 =0 || ca†=
ôem
->cas)

317 
	`ªÀa£_ôem
(
ôem
);

318 
	`dñëe_ôem
(
key
, 
keyÀn
);

319 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, (
time_t
)
ex±ime
);

320 i‡(
ôem
 == 0)

322 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

326 
	`put_ôem
(
ôem
);

327 *
ªsu…_ˇs

ôem
->
ˇs
;

328 
	`ªÀa£_ôem
(
ôem
);

333 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

334 
	`ªÀa£_ôem
(
ôem
);

337  
rvÆ
;

338 
	}
}

340 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$£t_h™dÀr
(c⁄° *
cookõ
,

341 c⁄° *
key
,

342 
uöt16_t
 
keyÀn
,

343 c⁄° * 
d©a
,

344 
uöt32_t
 
d©Æí
,

345 
uöt32_t
 
Êags
,

346 
uöt32_t
 
ex±ime
,

347 
uöt64_t
 
ˇs
,

348 
uöt64_t
 *
ªsu…_ˇs
) {

349 ()
cookõ
;

350 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

352 i‡(
ˇs
 != 0)

354 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

355 i‡(
ôem
 !
NULL
 && 
ˇs
 != item->cas)

358 
	`ªÀa£_ôem
(
ôem
);

359  
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

363 
	`dñëe_ôem
(
key
, 
keyÀn
);

364 
ôem
* iãm
	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, (
time_t
)
ex±ime
);

365 i‡(
ôem
 == 0)

367 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

371 
	`put_ôem
(
ôem
);

372 *
ªsu…_ˇs

ôem
->
ˇs
;

373 
	`ªÀa£_ôem
(
ôem
);

376  
rvÆ
;

377 
	}
}

379 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$°©_h™dÀr
(c⁄° *
cookõ
,

381 
uöt16_t
,

382 
memˇched_bö¨y_¥Ÿocﬁ_°©_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

385  
	`ª•⁄£_h™dÀr
(
cookõ
, 
NULL
, 0, NULL, 0);

386 
	}
}

388 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$vîsi⁄_h™dÀr
(c⁄° *
cookõ
,

389 
memˇched_bö¨y_¥Ÿocﬁ_vîsi⁄_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

391 c⁄° *
vîsi⁄
= "0.1.1";

392  
	`ª•⁄£_h™dÀr
(
cookõ
, 
vîsi⁄
, (
uöt32_t
)
	`°æí
(version));

393 
	}
}

395 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 
	göãrÁ˚_v1_im∂
;

397 
öôülize_öãrÁ˚_v1_h™dÀr
(
d©adif„ª¡ül
::
utû
::
log_öfo_°
& 
¨g
)

399 
log_fûe
&
¨g
;

400 
mem£t
(&
öãrÁ˚_v1_im∂
, 0, (
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
));

402 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚_vîsi⁄

MEMCACHED_PROTOCOL_HANDLER_V1
;

403 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	gadd

add_h™dÀr
;

404 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	g≠≥nd

≠≥nd_h™dÀr
;

405 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	gde¸emít

de¸emít_h™dÀr
;

406 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	gdñëe_obje˘

dñëe_h™dÀr
;

407 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	gÊush_obje˘

Êush_h™dÀr
;

408 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	ggë

gë_h™dÀr
;

409 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	gö¸emít

ö¸emít_h™dÀr
;

410 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	gno›

no›_h™dÀr
;

411 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	g¥ïíd

¥ïíd_h™dÀr
;

412 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	gquô

quô_h™dÀr
;

413 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	gª∂a˚

ª∂a˚_h™dÀr
;

414 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	g£t

£t_h™dÀr
;

415 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	g°©

°©_h™dÀr
;

416 
	göãrÁ˚_v1_im∂
.
	göãrÁ˚
.
	gv1
.
	gvîsi⁄

vîsi⁄_h™dÀr
;

	@example/memcached_light.cc

26 
	~<mem_c⁄fig.h
>

28 
	~<libmemˇched¥Ÿocﬁ-0.0/h™dÀr.h
>

29 
	~<libmemˇched/sockë.hµ
>

30 
	~<exam∂e/byã‹dî.h
>

31 
	~"exam∂e/°‹age.h
"

32 
	~"exam∂e/memˇched_light.h
"

34 
	~"utû/d´m⁄.hµ
"

35 
	~"utû/log.hµ
"

36 
	~"utû/pidfûe.hµ
"

38 
usög
 
«me•a˚
 
	gd©adif„ª¡ül
;

40 
	~<evít.h
>

42 
	~<ˇs£π
>

43 
	~<˚ºno
>

44 
	~<c°dio
>

45 
	~<c°dlib
>

46 
	~<c°rög
>

47 
	~<f˙é.h
>

48 
	~<gë›t.h
>

49 
	~<io°ªam
>

50 
	~<sys/ty≥s.h
>

51 
	~<uni°d.h
>

53 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 
öãrÁ˚_v0_im∂
;

54 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 
öãrÁ˚_v1_im∂
;

56 
memˇched_sockë_t
 
	g£rvî_sockës
[1024];

57 
	gnum_£rvî_sockës
= 0;

59 
	sc⁄√˘i⁄


61 *
	mu£rd©a
;

62 
evít
 
	mevít
;

66 
	gmaxc⁄ns
= 1024;

68 
c⁄√˘i⁄
 *
	gsockë_u£rd©a_m≠
;

69 
evít_ba£
 *
	gevít_ba£

NULL
;

71 
	s›ti⁄s_°
 {

72 
	m°d
::
°rög
 
pid_fûe
;

73 
	m°d
::
°rög
 
£rvi˚
;

74 
	m°d
::
°rög
 
log_fûe
;

75 
boﬁ
 
	mis_vîbo£
;

76 
boﬁ
 
	m›t_d´m⁄
;

78 
›ti⁄s_°
() :

79 
£rvi˚
("9999"),

80 
is_vîbo£
(
Ál£
),

81 
›t_d´m⁄
(
Ál£
)

86 
›ti⁄s_°
 
	gglobÆ_›ti⁄s
;

94 
	$drive_˛õ¡
(
memˇched_sockë_t
 
fd
, , *
¨g
)

96 
c⁄√˘i⁄
 *
˛õ¡
(c⁄√˘i⁄*)
¨g
;

97 
memˇched_¥Ÿocﬁ_˛õ¡_°
* 
c
(memˇched_¥Ÿocﬁ_˛õ¡_°*)
˛õ¡
->
u£rd©a
;

98 
	`as£π
(
c
 !
NULL
);

100 
memˇched_¥Ÿocﬁ_evít_t
 
evíts

	`memˇched_¥Ÿocﬁ_˛õ¡_w‹k
(
c
);

101 i‡(
evíts
 & 
MEMCACHED_PROTOCOL_ERROR_EVENT
)

103 i‡(
globÆ_›ti⁄s
.
is_vîbo£
)

105 
sockaddr_ö
 
sö
;

106 
sockÀn_t
 
addæí
(
sö
);

108 i‡(
	`gësock«me
(
fd
, (
sockaddr
 *)&
sö
, &
addæí
) != -1)

110 
°d
::
cout
 << 
__FILE__
 << ":" << 
__LINE__


112 << " " << 
	`öë_¡ﬂ
(
sö
.
sö_addr
Ë<< ":" << sö.
sö_p‹t


113 << " fd:" << 
fd


114 << 
°d
::
ídl
;

118 
°d
::
cout
 << 
__FILE__
 << ":" << 
__LINE__
 << "˛o£(ËMEMCACHED_PROTOCOL_ERROR_EVENT" << std::
ídl
;

122 
	`memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
c
);

123 
	`˛o£sockë
(
fd
);

127 
Êags
 = 0;

128 i‡(
evíts
 & 
MEMCACHED_PROTOCOL_WRITE_EVENT
)

130 
Êags

EV_WRITE
;

133 i‡(
evíts
 & 
MEMCACHED_PROTOCOL_READ_EVENT
)

135 
Êags
|
EV_READ
;

138 
	`evít_£t
(&
˛õ¡
->
evít
, (
fd
), 
Êags
, 
drive_˛õ¡
, client);

139 
	`evít_ba£_£t
(
evít_ba£
, &
˛õ¡
->
evít
);

141 i‡(
	`evít_add
(&
˛õ¡
->
evít
, 0) == -1)

143 
	`memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
c
);

144 
	`˛o£sockë
(
fd
);

147 
	}
}

155 
	$ac˚±_h™dÀr
(
memˇched_sockë_t
 
fd
, , *
¨g
)

157 
c⁄√˘i⁄
 *
£rvî
(c⁄√˘i⁄ *)
¨g
;

159 
sockaddr_°‹age
 
addr
;

160 
sockÀn_t
 
addæí
(
addr
);

161 
memˇched_sockë_t
 
sock

	`ac˚±
(
fd
, (
sockaddr
 *)&
addr
, &
addæí
);

163 i‡(
sock
 =
INVALID_SOCKET
)

165 
	`≥º‹
("FailedÅoáccept client");

168 #i‚de‡
WIN32


169 i‡(
sock
 >
maxc⁄ns
)

171 
	`˛o£sockë
(
sock
);

176 
memˇched_¥Ÿocﬁ_˛õ¡_°
* 
c

	`memˇched_¥Ÿocﬁ_¸óã_˛õ¡
((
memˇched_¥Ÿocﬁ_°
*)
£rvî
->
u£rd©a
, 
sock
);

177 i‡(
c
 =
NULL
)

179 
	`˛o£sockë
(
sock
);

183 
	`memˇched_¥Ÿocﬁ_˛õ¡_£t_vîbo£
(
c
, 
globÆ_›ti⁄s
.
is_vîbo£
);

184 
c⁄√˘i⁄
 *
˛õ¡
 = &
sockë_u£rd©a_m≠
[
sock
];

185 
˛õ¡
->
u£rd©a

c
;

187 
	`evít_£t
(&
˛õ¡
->
evít
, (
sock
), 
EV_READ
, 
drive_˛õ¡
, client);

188 
	`evít_ba£_£t
(
evít_ba£
, &
˛õ¡
->
evít
);

189 i‡(
	`evít_add
(&
˛õ¡
->
evít
, 0) == -1)

191 
°d
::
˚º
 << "FaûedÅÿaddÉvíàf‹ " << 
sock
 << std::
ídl
;

192 
	`memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
c
);

193 
	`˛o£sockë
(
sock
);

196 
	}
}

198 
boﬁ
 
£rvî_sockë
(
utû
::
log_öfo_°
& 
log_fûe
, c⁄° 
°d
::
°rög
& 
£rvi˚
)

200 
addröfo
 *
ai
;

201 
addröfo
 
	ghöts
;

202 
mem£t
(&
höts
, 0, (
addröfo
));

204 
	ghöts
.
	gai_Êags

AI_PASSIVE
;

205 
	ghöts
.
	gai_Ámûy

AF_UNSPEC
;

206 
	ghöts
.
	gai_sockty≥

SOCK_STREAM
;

208 
	gîr‹

gëaddröfo
("127.0.0.1", 
£rvi˚
.
c_°r
(), &
höts
, &
ai
);

209 i‡(
	gîr‹
 != 0)

211 i‡(
îr‹
 !
EAI_SYSTEM
)

213 
°d
::
°rög
 
buf„r
("getaddrinfo: ");

214 
	gbuf„r
+
gai_°ªº‹
(
îr‹
);

215 
	glog_fûe
.
wrôe
(
utû
::
VERBOSE_ERROR
, 
buf„r
.
c_°r
());

219 
	g°d
::
°rög
 
buf„r
("getaddrinfo: ");

220 
	gbuf„r
+
°ªº‹
(
î∫o
);

221 
	glog_fûe
.
wrôe
(
utû
::
VERBOSE_ERROR
, 
buf„r
.
c_°r
());

224  
	gÁl£
;

227 
lögî
 
	glög
= {0, 0};

229 
addröfo
 *
	g√xt

ai
;Çext;Çext
√xt
->
ai_√xt
)

231 
memˇched_sockë_t
 
sock

sockë
(
ai
->
ai_Ámûy
,ái->
ai_sockty≥
,ái->
ai_¥Ÿocﬁ
);

232 i‡(
	gsock
 =
INVALID_SOCKET
)

234 
°d
::
°rög
 
buf„r
("FailedÅo create socket: ");

235 
	gbuf„r
+
°ªº‹
(
î∫o
);

236 
	glog_fûe
.
wrôe
(
utû
::
VERBOSE_ERROR
, 
buf„r
.
c_°r
());

240 
	gÊags
;

241 #ifde‡
WIN32


242 
u_l⁄g
 
	g¨g
 = 1;

243 i‡(
io˘lsockë
(
sock
, 
FIONBIO
, &
¨g
Ë=
SOCKET_ERROR
)

245 
°d
::
˚º
 << "FaûedÅÿ£àn⁄blockög io: " << 
°ªº‹
(
î∫o
Ë<< std::
ídl
;

246 
˛o£sockë
(
sock
);

250 
	gÊags

f˙é
(
sock
, 
F_GETFL
, 0);

251 i‡(
	gÊags
 == -1)

253 
°d
::
°rög
 
buf„r
("FailedÅo get socket flags: ");

254 
	gbuf„r
+
°ªº‹
(
î∫o
);

255 
	glog_fûe
.
wrôe
(
utû
::
VERBOSE_ERROR
, 
buf„r
.
c_°r
());

256 
˛o£sockë
(
sock
);

260 i‡((
	gÊags
 & 
	gO_NONBLOCK
Ë!
O_NONBLOCK
)

262 i‡(
f˙é
(
sock
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

264 
°d
::
°rög
 
buf„r
("FailedÅo set socketÅoÇonblocking mode: ");

265 
	gbuf„r
+
°ªº‹
(
î∫o
);

266 
	glog_fûe
.
wrôe
(
utû
::
VERBOSE_ERROR
, 
buf„r
.
c_°r
());

267 
˛o£sockë
(
sock
);

273 
	gÊags
= 1;

274 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
Êags
, (flags)) != 0)

276 
°d
::
˚º
 << "FaûedÅÿ£àSO_REUSEADDR: " << 
°ªº‹
(
î∫o
Ë<< std::
ídl
;

279 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
Êags
, (flags)) != 0)

281 
°d
::
˚º
 << "FaûedÅÿ£àSO_KEEPALIVE: " << 
°ªº‹
(
î∫o
Ë<< std::
ídl
;

284 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_LINGER
, (*)&
lög
, (ling)) != 0)

286 
°d
::
˚º
 << "FaûedÅÿ£àSO_LINGER: " << 
°ªº‹
(
î∫o
Ë<< std::
ídl
;

289 i‡(
£tsock›t
(
sock
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*)&
Êags
, (flags)) != 0)

291 
°d
::
˚º
 << "FaûedÅÿ£àTCP_NODELAY: " << 
°ªº‹
(
î∫o
Ë<< std::
ídl
;

294 i‡(
böd
(
sock
, 
√xt
->
ai_addr
,Çext->
ai_addæí
Ë=
SOCKET_ERROR
)

296 i‡(
gë_sockë_î∫o
(Ë!
EADDRINUSE
)

298 
°d
::
˚º
 << "böd(): " << 
°ªº‹
(
î∫o
Ë<< std::
ídl
;

299 
‰ìaddröfo
(
ai
);

301 
˛o£sockë
(
sock
);

305 i‡(
li°í
(
sock
, 1024Ë=
SOCKET_ERROR
)

307 
°d
::
°rög
 
buf„r
("listen(): ");

308 
	gbuf„r
+
°ªº‹
(
î∫o
);

309 
	glog_fûe
.
wrôe
(
utû
::
VERBOSE_ERROR
, 
buf„r
.
c_°r
());

310 
˛o£sockë
(
sock
);

314 i‡(
	gglobÆ_›ti⁄s
.
	gis_vîbo£
)

316 
	g°d
::
°rög
 
buf„r
("ListeningÅo: ");

317 
	gbuf„r
+
globÆ_›ti⁄s
.
£rvi˚
;

318 
	glog_fûe
.
wrôe
(
utû
::
VERBOSE_NOTICE
, 
buf„r
.
c_°r
());

321 
	g£rvî_sockës
[
num_£rvî_sockës
++]
sock
;

324 
‰ìaddröfo
(
ai
);

326  (
	gnum_£rvî_sockës
 > 0Ë? 
	gåue
 : 
Ál£
;

334 c⁄° * 
	$comcode2°r
(
uöt8_t
 
cmd
)

336 c⁄° * c⁄° 
ãxt
[] = {

345 i‡(
cmd
 <
PROTOCOL_BINARY_CMD_PREPENDQ
)

347  
ãxt
[
cmd
];

350  
NULL
;

351 
	}
}

356 
	$¥e_execuã
(c⁄° *
cookõ
,

357 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
)

359 i‡(
globÆ_›ti⁄s
.
is_vîbo£
)

361 i‡(
hódî
)

363 c⁄° *
cmd

	`comcode2°r
(
hódî
->
ªque°
.
›code
);

364 i‡(
cmd
 !
NULL
)

366 
°d
::
cout
 << "¥e_execuã from " << 
cookõ
 << ": " << 
cmd
 << std::
ídl
;

370 
°d
::
cout
 << "¥e_execuã from " << 
cookõ
 << ": " << 
hódî
->
ªque°
.
›code
 << std::
ídl
;

375 
°d
::
cout
 << "¥e_execuã from " << 
cookõ
 << std::
ídl
;

378 
	}
}

383 
	$po°_execuã
(c⁄° *
cookõ
,

384 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
)

386 i‡(
globÆ_›ti⁄s
.
is_vîbo£
)

388 i‡(
hódî
)

390 c⁄° *
cmd

	`comcode2°r
(
hódî
->
ªque°
.
›code
);

391 i‡(
cmd
 !
NULL
)

393 
°d
::
cout
 << "po°_execuã from " << 
cookõ
 << ": " << 
cmd
 << std::
ídl
;

397 
°d
::
cout
 << "po°_execuã from " << 
cookõ
 << ": " << 
hódî
->
ªque°
.
›code
 << std::
ídl
;

402 
°d
::
cout
 << "po°_execuã from " << 
cookõ
 << std::
ídl
;

405 
	}
}

411 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$unknown
(c⁄° *
cookõ
,

412 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

413 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

415 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
;

416 
	`mem£t
(&
ª•⁄£
, 0, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
));

418 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
magic

PROTOCOL_BINARY_RES
;

419 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›code
hódî->
ªque°
.opcode;

420 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
);

421 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
›aque
hódî->
ªque°
.opaque;

423  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
*)&
ª•⁄£
);

424 
	}
}

433 
	$maö
(
¨gc
, **
¨gv
)

435 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
öãrÁ˚
&
öãrÁ˚_v0_im∂
;

438 
	el⁄g_›ti⁄_t
 {

439 
OPT_HELP
,

440 
OPT_VERBOSE
,

441 
OPT_DAEMON
,

442 
OPT_PROTOCOL_VERSION
,

443 
OPT_VERSION
,

444 
OPT_PORT
,

445 
OPT_MAX_CONNECTIONS
,

446 
OPT_LOGFILE
,

447 
OPT_PIDFILE


450 
›ti⁄
 
l⁄g_›ti⁄s
[]=

452 { "hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
 },

453 { "p‹t", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PORT
 },

454 { "vîbo£", 
no_¨gumít
, 
NULL
, 
OPT_VERBOSE
 },

455 { "d´m⁄", 
no_¨gumít
, 
NULL
, 
OPT_DAEMON
 },

456 { "¥Ÿocﬁ", 
no_¨gumít
, 
NULL
, 
OPT_PROTOCOL_VERSION
 },

457 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
 },

458 { "max-c⁄√˘i⁄s", 
ªquúed_¨gumít
, 
NULL
, 
OPT_MAX_CONNECTIONS
 },

459 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PIDFILE
 },

460 { "log-fûe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_LOGFILE
 },

464 
boﬁ
 
›t_hñp

Ál£
;

465 
›ti⁄_ödex
;

466 
boﬁ
 
d⁄e

Ál£
;

467 
d⁄e
 =
Ál£
)

469 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
))

472 
d⁄e

åue
;

475 
OPT_PROTOCOL_VERSION
:

476 
öãrÁ˚
&
öãrÁ˚_v1_im∂
;

479 
OPT_PIDFILE
:

480 
globÆ_›ti⁄s
.
pid_fûe

›èrg
;

483 
OPT_LOGFILE
:

484 
globÆ_›ti⁄s
.
log_fûe

›èrg
;

487 
OPT_VERBOSE
:

488 
globÆ_›ti⁄s
.
is_vîbo£

åue
;

491 
OPT_VERSION
:

494 
OPT_DAEMON
:

495 
globÆ_›ti⁄s
.
›t_d´m⁄

åue
;

498 
OPT_PORT
:

499 
globÆ_›ti⁄s
.
£rvi˚

›èrg
;

502 
OPT_MAX_CONNECTIONS
:

503 
maxc⁄ns

	`©oi
(
›èrg
);

506 
OPT_HELP
:

507 
›t_hñp

åue
;

512 
°d
::
˚º
 << "Unknow¿›ti⁄: " << 
›èrg
 << std::
ídl
;

513  
EXIT_FAILURE
;

518 i‡(
›t_hñp
)

520 
°d
::
cout
 << "Ußge: " << 
¨gv
[0] << std::
ídl
;

521 
›ti⁄
 *
±r_›ti⁄

l⁄g_›ti⁄s
;Öå_›ti⁄->
«me
;Ötr_option++)

523 
°d
::
cout
 << "\t" << 
±r_›ti⁄
->
«me
 << std::
ídl
;

525  
EXIT_SUCCESS
;

529 i‡(
globÆ_›ti⁄s
.
›t_d´m⁄
)

531 
utû
::
	`d´m⁄ize
(
Ál£
, 
åue
);

534 i‡(
	`öôülize_°‹age
(Ë=
Ál£
)

537  
EXIT_FAILURE
;

540 
utû
::
Pidfûe
 
	`_pid_fûe
(
globÆ_›ti⁄s
.
pid_fûe
);

542 i‡(
_pid_fûe
.
	`¸óã
(Ë=
Ál£
)

544 
°d
::
˚º
 << "FaûedÅÿ¸óãÖid-fûe" << 
_pid_fûe
.
	`îr‹_mesßge
(Ë<< std::
ídl
;

545  
EXIT_FAILURE
;

548 
utû
::
log_öfo_°
 
	`log_fûe
(
¨gv
[0], 
globÆ_›ti⁄s
.
log_fûe
, 
Ál£
);

549 
log_fûe
.
	`wrôe
(
utû
::
VERBOSE_NOTICE
, "startingÜog");

555 
	`öôülize_öãrÁ˚_v0_h™dÀr
(
log_fûe
);

556 
	`öôülize_öãrÁ˚_v1_h™dÀr
(
log_fûe
);

559 i‡(
	`£rvî_sockë
(
log_fûe
, 
globÆ_›ti⁄s
.
£rvi˚
Ë=
Ál£
)

561  
EXIT_FAILURE
;

564 i‡(
num_£rvî_sockës
 == 0)

566 
log_fûe
.
	`wrôe
(
utû
::
VERBOSE_ERROR
, "No server socketsáreávailable.");

567  
EXIT_FAILURE
;

575 
öãrÁ˚
->
¥e_execuã
=Öre_execute;

576 
öãrÁ˚
->
po°_execuã
=Öost_execute;

577 
öãrÁ˚
->
unknown
= unknown;

579 
memˇched_¥Ÿocﬁ_°
 *
¥Ÿocﬁ_h™dÀ
;

580 i‡((
¥Ÿocﬁ_h™dÀ

	`memˇched_¥Ÿocﬁ_¸óã_ö°™˚
()Ë=
NULL
)

582 
log_fûe
.
	`wrôe
(
utû
::
VERBOSE_ERROR
, "No server socketsáreávailable.");

583  
EXIT_FAILURE
;

586 
sockë_u£rd©a_m≠
(
c⁄√˘i⁄
*)
	`ˇŒoc
((
size_t
)(
maxc⁄ns
), (connection));

587 i‡(
sockë_u£rd©a_m≠
 =
NULL
)

589 
log_fûe
.
	`wrôe
(
utû
::
VERBOSE_ERROR
, "FailedÅoállocateÑoom for connections");

590  
EXIT_FAILURE
;

593 
	`memˇched_bö¨y_¥Ÿocﬁ_£t_ˇŒbacks
(
¥Ÿocﬁ_h™dÀ
, 
öãrÁ˚
);

594 
	`memˇched_bö¨y_¥Ÿocﬁ_£t_≥d™tic
(
¥Ÿocﬁ_h™dÀ
, 
åue
);

596 
evít_ba£

	`evít_öô
();

597 i‡(
evít_ba£
 =
NULL
)

599 
°d
::
˚º
 << "FaûedÅÿ¸óãá¿ö°™˚ o‡libevít" << std::
ídl
;

600  
EXIT_FAILURE
;

603 
xx
0; xx < 
num_£rvî_sockës
; ++xx)

605 
c⁄√˘i⁄
 *
c⁄n
&
sockë_u£rd©a_m≠
[
£rvî_sockës
[
xx
]];

606 
c⁄n
->
u£rd©a

¥Ÿocﬁ_h™dÀ
;

608 
	`evít_£t
(&
c⁄n
->
evít
, (
£rvî_sockës
[
xx
]), 
EV_READ
 | 
EV_PERSIST
, 
ac˚±_h™dÀr
, conn);

610 
	`evít_ba£_£t
(
evít_ba£
, &
c⁄n
->
evít
);

611 i‡(
	`evít_add
(&
c⁄n
->
evít
, 0) == -1)

613 
log_fûe
.
	`wrôe
(
utû
::
VERBOSE_ERROR
, "FailedÅoáddÉvent");

614 
	`˛o£sockë
(
£rvî_sockës
[
xx
]);

618 i‡(
globÆ_›ti⁄s
.
›t_d´m⁄
)

620 i‡(
utû
::
	`d´m⁄_is_ªady
(
åue
Ë=
Ál£
)

622 
log_fûe
.
	`wrôe
(
utû
::
VERBOSE_ERROR
, "Failed for util::daemon_is_ready()");

623  
EXIT_FAILURE
;

629 
	`evít_ba£_lo›
(
evít_ba£
, 0))

632 
log_fûe
.
	`wrôe
(
utû
::
VERBOSE_ERROR
, "event_base_loop() failed");

636 
log_fûe
.
	`wrôe
(
utû
::
VERBOSE_ERROR
, "event_base_loop(),ÇoÉvents wereÑegistered");

642 
log_fûe
.
	`wrôe
(
utû
::
VERBOSE_NOTICE
, "exiting");

645  
EXIT_SUCCESS
;

646 
	}
}

	@example/memcached_light.h

39 #¥agm®
⁄˚


41 
	~"utû/log.hµ
"

43 
öôülize_öãrÁ˚_v0_h™dÀr
(
d©adif„ª¡ül
::
utû
::
log_öfo_°
&);

44 
öôülize_öãrÁ˚_v1_h™dÀr
(
d©adif„ª¡ül
::
utû
::
log_öfo_°
&);

	@example/storage.cc

2 
	~"mem_c⁄fig.h
"

3 
	~<°dlib.h
>

4 
	~<öây≥s.h
>

5 
	~<time.h
>

6 
	~<°dboﬁ.h
>

7 
	~<°rög.h
>

8 
	~"°‹age.h
"

10 
	sli°_íåy
 {

11 
ôem
 
	môem
;

12 
li°_íåy
 *
	m√xt
;

13 
li°_íåy
 *
	m¥ev
;

16 
li°_íåy
 *
	groŸ
;

17 
uöt64_t
 
	gˇs
;

19 
boﬁ
 
	$öôülize_°‹age
()

21  
åue
;

22 
	}
}

24 
	$shutdown_°‹age
()

27 
	}
}

29 
	$put_ôem
(
ôem
* item)

31 
li°_íåy
* 
íåy
(li°_íåy*)
ôem
;

33 
	`upd©e_ˇs
(
ôem
);

35 i‡(
roŸ
 =
NULL
)

37 
íåy
->
√xt
íåy->
¥ev
=Éntry;

41 
íåy
->
¥ev

roŸ
->prev;

42 
íåy
->
√xt

roŸ
;

43 
íåy
->
¥ev
->
√xt
=Éntry;

44 
íåy
->
√xt
->
¥ev
=Éntry;

47 
roŸ

íåy
;

48 
	}
}

50 
ôem
* 
	$gë_ôem
(c⁄° * 
key
, 
size_t
 
nkey
)

52 
li°_íåy
 *
wÆkî

roŸ
;

54 i‡(
roŸ
 =
NULL
)

56  
NULL
;

61 i‡(((
ôem
*)
wÆkî
)->
nkey
 ==Çkey &&

62 
	`memcmp
(((
ôem
*)
wÆkî
)->
key
, key, 
nkey
) == 0)

64  (
ôem
*)
wÆkî
;

66 
wÆkî
wÆkî->
√xt
;

67 } 
wÆkî
 !
roŸ
);

69  
NULL
;

70 
	}
}

72 
ôem
* 
	$¸óã_ôem
(c⁄° * 
key
, 
size_t
 
nkey
, c⁄° * 
d©a
,

73 
size_t
 
size
, 
uöt32_t
 
Êags
, 
time_t
 
exp
)

75 
ôem
* 
ªt
(ôem*)
	`ˇŒoc
(1, (
li°_íåy
));

77 i‡(
ªt
 !
NULL
)

79 
ªt
->
key

	`mÆloc
(
nkey
);

80 i‡(
size
 > 0)

82 
ªt
->
d©a

	`mÆloc
(
size
);

85 i‡(
ªt
->
key
 =
NULL
 || (
size
 > 0 &&Ñë->
d©a
 == NULL))

87 
	`‰ì
(
ªt
->
key
);

88 
	`‰ì
(
ªt
->
d©a
);

89 
	`‰ì
(
ªt
);

90  
NULL
;

93 
	`mem˝y
(
ªt
->
key
, key, 
nkey
);

94 i‡(
d©a
 !
NULL
)

96 
	`mem˝y
(
ªt
->
d©a
, d©a, 
size
);

99 
ªt
->
nkey
=Çkey;

100 
ªt
->
size
= size;

101 
ªt
->
Êags
= flags;

102 
ªt
->
exp
=Éxp;

105  
ªt
;

106 
	}
}

108 
boﬁ
 
	$dñëe_ôem
(c⁄° * 
key
, 
size_t
 
nkey
)

110 
ôem
* iãm
	`gë_ôem
(
key
, 
nkey
);

111 
boﬁ
 
ªt

Ál£
;

113 i‡(
ôem
)

116 
li°_íåy
 *
íåy
(li°_íåy*)
ôem
;

118 i‡(
íåy
->
√xt
 ==Éntry)

121 
roŸ

NULL
;

127 
roŸ

íåy
->
√xt
;

128 
íåy
->
¥ev
->
√xt
=Éntry->next;

129 
íåy
->
√xt
->
¥ev
=Éntry->prev;

132 
	`‰ì
(
ôem
->
key
);

133 
	`‰ì
(
ôem
->
d©a
);

134 
	`‰ì
(
ôem
);

135 
ªt

åue
;

138  
ªt
;

139 
	}
}

141 
	$Êush
(
uöt32_t
 )

144 i‡(
roŸ
 =
NULL
)

149 
roŸ
->
¥ev
->
√xt

NULL
;

150 
roŸ
 !
NULL
)

152 
ôem
* 
tmp
(ôem*)
roŸ
;

153 
roŸ
roŸ->
√xt
;

155 
	`‰ì
(
tmp
->
key
);

156 
	`‰ì
(
tmp
->
d©a
);

157 
	`‰ì
(
tmp
);

159 
	}
}

161 
	$upd©e_ˇs
(
ôem
* item)

163 
ôem
->
ˇs
= ++cas;

164 
	}
}

166 
	$ªÀa£_ôem
(
ôem
* )

168 
	}
}

	@example/storage.h

2 #¥agm®
⁄˚


4 
	sôem
 {

5 
uöt64_t
 
	mˇs
;

6 * 
	mkey
;

7 
size_t
 
	mnkey
;

8 * 
	md©a
;

9 
size_t
 
	msize
;

10 
uöt32_t
 
	mÊags
;

11 
time_t
 
	mexp
;

14 
boﬁ
 
öôülize_°‹age
();

15 
shutdown_°‹age
();

17 
upd©e_ˇs
(
ôem
* item);

18 
put_ôem
(
ôem
* item);

19 
ôem
* 
gë_ôem
(c⁄° * 
key
, 
size_t
 
nkey
);

20 
ôem
* 
¸óã_ôem
(c⁄° * 
key
, 
size_t
 
nkey
, c⁄° *
d©a
,

21 
size_t
 
size
, 
uöt32_t
 
Êags
, 
time_t
 
exp
);

22 
boﬁ
 
dñëe_ôem
(c⁄° * 
key
, 
size_t
 
nkey
);

23 
Êush
(
uöt32_t
 
whí
);

24 
ªÀa£_ôem
(
ôem
* item);

	@libhashkit-1.0/algorithm.h

44 #¥agm®
⁄˚


46 #ifde‡
__˝lu•lus


50 
HASHKIT_API


51 
uöt32_t
 
libhashkô_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
);

53 
HASHKIT_API


54 
uöt32_t
 
libhashkô_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

56 
HASHKIT_API


57 
uöt32_t
 
libhashkô_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

59 
HASHKIT_API


60 
uöt32_t
 
libhashkô_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

62 
HASHKIT_API


63 
uöt32_t
 
libhashkô_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

65 
HASHKIT_API


66 
uöt32_t
 
libhashkô_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

68 
HASHKIT_API


69 
uöt32_t
 
libhashkô_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
);

71 
HASHKIT_API


72 
uöt32_t
 
libhashkô_murmur
(c⁄° *
key
, 
size_t
 
key_Àngth
);

74 
HASHKIT_API


75 
uöt32_t
 
libhashkô_murmur3
(c⁄° *
key
, 
size_t
 
key_Àngth
);

77 
HASHKIT_API


78 
uöt32_t
 
libhashkô_jíkös
(c⁄° *
key
, 
size_t
 
key_Àngth
);

80 
HASHKIT_API


81 
uöt32_t
 
libhashkô_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
);

83 
HASHKIT_API


84 
libhashkô_md5_sig«tuª
(c⁄° *
key
, 
size_t
 
Àngth
, *
ªsu…
);

86 #ifde‡
__˝lu•lus


	@libhashkit-1.0/behavior.h

47 #¥agm®
⁄˚


49 #ifde‡
__˝lu•lus


54 #ifde‡
__˝lu•lus


	@libhashkit-1.0/configure.h

42 #¥agm®
⁄˚


44 
	#LIBHASHKIT_VERSION_STRING
 "1.0.0"

	)

45 
	#LIBHASHKIT_VERSION_HEX
 0x01000000

	)

47 #ifde‡
__˝lu•lus


51 #ifde‡
__˝lu•lus


	@libhashkit-1.0/digest.h

42 #¥agm®
⁄˚


44 #ifde‡
__˝lu•lus


48 
HASHKIT_API


49 
uöt32_t
 
hashkô_dige°
(c⁄° 
hashkô_°
 *
£lf
, c⁄° *
key
, 
size_t
 
key_Àngth
);

55 
HASHKIT_API


56 
uöt32_t
 
libhashkô_dige°
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
);

58 #ifde‡
__˝lu•lus


	@libhashkit-1.0/function.h

41 #¥agm®
⁄˚


43 #ifde‡
__˝lu•lus


50 
HASHKIT_API


51 
hashkô_ªtu∫_t
 
hashkô_£t_fun˘i⁄
(
hashkô_°
 *
hash
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
);

53 
HASHKIT_API


54 
hashkô_ªtu∫_t
 
hashkô_£t_cu°om_fun˘i⁄
(
hashkô_°
 *
hash
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
);

56 
HASHKIT_API


57 
hashkô_hash_Æg‹ôhm_t
 
hashkô_gë_fun˘i⁄
(c⁄° 
hashkô_°
 *
hash
);

62 
HASHKIT_API


63 
hashkô_ªtu∫_t
 
hashkô_£t_di°ributi⁄_fun˘i⁄
(
hashkô_°
 *
hash
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
);

65 
HASHKIT_API


66 
hashkô_ªtu∫_t
 
hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
);

68 
HASHKIT_API


69 
hashkô_hash_Æg‹ôhm_t
 
hashkô_gë_di°ributi⁄_fun˘i⁄
(c⁄° 
hashkô_°
 *
£lf
);

71 #ifde‡
__˝lu•lus


	@libhashkit-1.0/has.h

41 #¥agm®
⁄˚


43 #ifde‡
__˝lu•lus


47 
HASHKIT_API


48 
boﬁ
 
libhashkô_has_Æg‹ôhm
(c⁄° 
hashkô_hash_Æg‹ôhm_t
);

50 #ifde‡
__˝lu•lus


	@libhashkit-1.0/hashkit.h

42 #¥agm®
⁄˚


45 #i‡!
deföed
(
__˝lu•lus
)

46 
	~<°dboﬁ.h
>

48 
	~<öây≥s.h
>

49 
	~<sys/ty≥s.h
>

51 
	~<libhashkô-1.0/visibûôy.h
>

52 
	~<libhashkô-1.0/c⁄figuª.h
>

53 
	~<libhashkô-1.0/ty≥s.h
>

54 
	~<libhashkô-1.0/has.h
>

55 
	~<libhashkô-1.0/Æg‹ôhm.h
>

56 
	~<libhashkô-1.0/behavi‹.h
>

57 
	~<libhashkô-1.0/dige°.h
>

58 
	~<libhashkô-1.0/fun˘i⁄.h
>

59 
	~<libhashkô-1.0/°r_Æg‹ôhm.h
>

60 
	~<libhashkô-1.0/°ªº‹.h
>

61 
	~<libhashkô-1.0/°rög.h
>

63 
	shashkô_°


65 
	shashkô_fun˘i⁄_°
 {

66 
hashkô_hash_‚
 
	mfun˘i⁄
;

67 *
	mc⁄ãxt
;

68 } 
	mba£_hash
, 
	mdi°ributi⁄_hash
;

71 
boﬁ
 
	mis_ba£_ßme_di°ribuãd
:1;

72 } 
	mÊags
;

75 
boﬁ
 
	mis_Æloˇãd
:1;

76 } 
	m›ti⁄s
;

78 *
	m_key
;

81 #ifde‡
__˝lu•lus


85 
HASHKIT_API


86 
hashkô_°
 *
hashkô_¸óã
(hashkô_° *
hash
);

88 
HASHKIT_API


89 
hashkô_°
 *
hashkô_˛⁄e
(hashkô_° *
de°ö©i⁄
, c⁄° hashkô_° *
±r
);

91 
HASHKIT_API


92 
boﬁ
 
hashkô_com∑ª
(c⁄° 
hashkô_°
 *
fú°
, c⁄° hashkô_° *
£c⁄d
);

94 
HASHKIT_API


95 
hashkô_‰ì
(
hashkô_°
 *
hash
);

97 
HASHKIT_API


98 
hashkô_°rög_°
 *
hashkô_í¸y±
(
hashkô_°
 *,

99 c⁄° * 
sour˚
, 
size_t
 
sour˚_Àngth
);

101 
HASHKIT_API


102 
hashkô_°rög_°
 *
hashkô_de¸y±
(
hashkô_°
 *,

103 c⁄° * 
sour˚
, 
size_t
 
sour˚_Àngth
);

105 
HASHKIT_API


106 
boﬁ
 
hashkô_key
(
hashkô_°
 *, c⁄° *
key
, c⁄° 
size_t
 
key_Àngth
);

108 #ifde‡
__˝lu•lus


	@libhashkit-1.0/hashkit.hpp

39 #¥agm®
⁄˚


41 
	~<libhashkô-1.0/hashkô.h
>

42 
	~<°rög
>

44 ˛as†
	cHashkô
 {

46 
	mpublic
:

48 
	$Hashkô
()

50 
	`hashkô_¸óã
(&
£lf
);

53 
	$Hashkô
(c⁄° 
Hashkô
& 
sour˚
)

55 
	`hashkô_˛⁄e
(&
£lf
, &
sour˚
.self);

56 
	}
}

58 
	gHashkô
& 
	g›î©‹
=(c⁄° 
Hashkô
& 
sour˚
)

60 
hashkô_‰ì
(&
£lf
);

61 
hashkô_˛⁄e
(&
£lf
, &
sour˚
.self);

63  *
	gthis
;

66 
‰õnd
 
boﬁ
 
	g›î©‹
==(c⁄° 
Hashkô
 &
À·
, c⁄° 
	gHashkô
 &
	gright
)

68  
hashkô_com∑ª
(&
À·
.
£lf
, &
right
.self);

71 
uöt32_t
 
dige°
(
°d
::
°rög
& 
°r
)

73  
hashkô_dige°
(&
£lf
, 
°r
.
c_°r
(), så.
Àngth
());

76 
uöt32_t
 
	$dige°
(c⁄° *
key
, 
size_t
 
key_Àngth
)

78  
	`hashkô_dige°
(&
£lf
, 
key
, 
key_Àngth
);

79 
	}
}

81 
hashkô_ªtu∫_t
 
	$£t_fun˘i⁄
(
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

83  
	`hashkô_£t_fun˘i⁄
(&
£lf
, 
hash_Æg‹ôhm
);

84 
	}
}

86 
hashkô_ªtu∫_t
 
	$£t_di°ributi⁄_fun˘i⁄
(
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

88  
	`hashkô_£t_fun˘i⁄
(&
£lf
, 
hash_Æg‹ôhm
);

89 
	}
}

91 ~
	$Hashkô
()

93 
	`hashkô_‰ì
(&
£lf
);

94 
	}
}

95 
	g¥iv©e
:

97 
hashkô_°
 
£lf
;

	@libhashkit-1.0/str_algorithm.h

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


43 
HASHKIT_API


44 c⁄° *
libhashkô_°rög_hash
(
hashkô_hash_Æg‹ôhm_t
 
ty≥
);

46 #ifde‡
__˝lu•lus


	@libhashkit-1.0/strerror.h

39 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


45 
HASHKIT_API


46 c⁄° *
hashkô_°ªº‹
(
hashkô_°
 *
±r
, 
hashkô_ªtu∫_t
 
rc
);

48 #ifde‡
__˝lu•lus


	@libhashkit-1.0/string.h

39 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


42 
	ghashkô_°rög_°
;

45 #ifde‡
__˝lu•lus


49 
HASHKIT_API


50 
hashkô_°rög_‰ì
(
hashkô_°rög_°
 *
±r
);

53 
HASHKIT_API


54 
size_t
 
hashkô_°rög_Àngth
(c⁄° 
hashkô_°rög_°
 *
£lf
);

56 
HASHKIT_API


57 c⁄° *
hashkô_°rög_c_°r
(c⁄° 
hashkô_°rög_°
* 
£lf
);

59 #ifde‡
__˝lu•lus


	@libhashkit-1.0/types.h

39 #¥agm®
⁄˚


42 
	mHASHKIT_SUCCESS
,

43 
	mHASHKIT_FAILURE
,

44 
	mHASHKIT_MEMORY_ALLOCATION_FAILURE
,

45 
	mHASHKIT_INVALID_HASH
,

46 
	mHASHKIT_INVALID_ARGUMENT
,

47 
	mHASHKIT_MAXIMUM_RETURN


48 } 
	thashkô_ªtu∫_t
;

50 
ölöe
 
boﬁ
 
	$hashkô_suc˚ss
(c⁄° 
hashkô_ªtu∫_t
 
rc
)

52  (
rc
 =
HASHKIT_SUCCESS
);

53 
	}
}

55 
ölöe
 
boﬁ
 
	$hashkô_Áûed
(c⁄° 
hashkô_ªtu∫_t
 
rc
)

57  (
rc
 !
HASHKIT_SUCCESS
);

58 
	}
}

61 
	mHASHKIT_HASH_DEFAULT
= 0,

62 
	mHASHKIT_HASH_MD5
,

63 
	mHASHKIT_HASH_CRC
,

64 
	mHASHKIT_HASH_FNV1_64
,

65 
	mHASHKIT_HASH_FNV1A_64
,

66 
	mHASHKIT_HASH_FNV1_32
,

67 
	mHASHKIT_HASH_FNV1A_32
,

68 
	mHASHKIT_HASH_HSIEH
,

69 
	mHASHKIT_HASH_MURMUR
,

70 
	mHASHKIT_HASH_JENKINS
,

71 
	mHASHKIT_HASH_MURMUR3
,

72 
	mHASHKIT_HASH_CUSTOM
,

73 
	mHASHKIT_HASH_MAX


74 } 
	thashkô_hash_Æg‹ôhm_t
;

81 
	mHASHKIT_DISTRIBUTION_MODULA
,

82 
	mHASHKIT_DISTRIBUTION_RANDOM
,

83 
	mHASHKIT_DISTRIBUTION_KETAMA
,

84 
	mHASHKIT_DISTRIBUTION_MAX


85 } 
	thashkô_di°ributi⁄_t
;

87 #ifde‡
__˝lu•lus


91 
hashkô_°
 
	thashkô_°
;

92 
hashkô_°rög_°
 
	thashkô_°rög_°
;

94 
uöt32_t
 (*
	thashkô_hash_‚
)(c⁄° *
	tkey
, 
	tsize_t
 
	tkey_Àngth
, *
	tc⁄ãxt
);

96 #ifde‡
__˝lu•lus


	@libhashkit-1.0/visibility.h

16 #¥agm®
⁄˚


26 #i‡
deföed
(
BUILDING_HASHKIT
)

27 #i‡
deföed
(
HAVE_VISIBILITY
) && HAVE_VISIBILITY

28 
	#HASHKIT_API
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

29 
	#HASHKIT_LOCAL
 
	`__©åibuã__
 ((
	`visibûôy
("hiddí")))

	)

30 #ñi‡
deföed
 (
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

31 
	#HASHKIT_API
 
__globÆ


	)

32 
	#HASHKIT_LOCAL
 
__hiddí


	)

33 #ñi‡
deföed
(
_MSC_VER
)

34 
	#HASHKIT_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

35 
	#HASHKIT_LOCAL


	)

37 
	#HASHKIT_API


	)

38 
	#HASHKIT_LOCAL


	)

41 #i‡
deföed
(
_MSC_VER
)

42 
	#HASHKIT_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

43 
	#HASHKIT_LOCAL


	)

45 
	#HASHKIT_API


	)

46 
	#HASHKIT_LOCAL


	)

	@libhashkit/aes.cc

38 
	~"libhashkô/comm⁄.h
"

40 
	~"libhashkô/rijnd´l.hµ
"

42 
	~<c°rög
>

44 
	#AES_KEY_LENGTH
 256

	)

45 
	#AES_BLOCK_SIZE
 16

	)

47 
	eí¸y±_t


49 
	mAES_ENCRYPT
,

50 
	mAES_DECRYPT


53 
	s_key_t
 {

54 
	mƒ
;

55 
uöt32_t
 
	mrk
[4*(
AES_MAXNR
 +1)];

58 
	s´s_key_t
 {

59 
_key_t
 
	mícode_key
;

60 
_key_t
 
	mdecode_key
;

63 
´s_key_t
* 
	$´s_¸óã_key
(c⁄° *
key
, c⁄° 
size_t
 
key_Àngth
)

65 
´s_key_t
* 
_´s_key
◊es_key_t*)
	`ˇŒoc
(1, (aes_key_t));

66 i‡(
_´s_key
)

68 
uöt8_t
 
rkey
[
AES_KEY_LENGTH
/8];

69 
uöt8_t
 *
rkey_íd

rkey
 +
AES_KEY_LENGTH
/8;

70 c⁄° *
key_íd

key
 +
key_Àngth
;

72 
	`mem£t
(
rkey
, 0, (rkey));

74 
uöt8_t
 *
±r

rkey
;

75 c⁄° * 
•å

key
;

76 ; 
•å
 < 
key_íd
; 
±r
++,sptr++)

78 i‡(
±r
 =
rkey_íd
)

80 
±r

rkey
;

82 *
±r
^(
uöt8_t
Ë*
•å
;

85 
_´s_key
->
decode_key
.
ƒ

	`rijnd´lKeySëupDec
(_´s_key->decode_key.
rk
, 
rkey
, 
AES_KEY_LENGTH
);

86 
_´s_key
->
ícode_key
.
ƒ

	`rijnd´lKeySëupEnc
(_´s_key->ícode_key.
rk
, 
rkey
, 
AES_KEY_LENGTH
);

89  
_´s_key
;

90 
	}
}

92 
´s_key_t
* 
	$´s_˛⁄e_key
(
´s_key_t
 *
_´s_key
)

94 i‡(
_´s_key
 =
NULL
)

96  
NULL
;

99 
´s_key_t
* 
_´s_˛⁄e_key
◊es_key_t*)
	`ˇŒoc
(1, (aes_key_t));

100 i‡(
_´s_˛⁄e_key
)

102 
	`mem˝y
(
_´s_˛⁄e_key
, 
_´s_key
, (
´s_key_t
));

105  
_´s_˛⁄e_key
;

106 
	}
}

108 
hashkô_°rög_°
* 
	$´s_í¸y±
(
´s_key_t
 *
_´s_key
,

109 c⁄° * 
sour˚
, 
size_t
 
sour˚_Àngth
)

111 i‡(
_´s_key
 =
NULL
)

113  
NULL
;

116 
size_t
 
num_blocks

sour˚_Àngth
/
AES_BLOCK_SIZE
;

118 
hashkô_°rög_°
* 
de°ö©i⁄

	`hashkô_°rög_¸óã
(
sour˚_Àngth
);

119 i‡(
de°ö©i⁄
)

121 *
de°

	`hashkô_°rög_c_°r_muèbÀ
(
de°ö©i⁄
);

123 
size_t
 
x

num_blocks
; x > 0; x--)

125 
	`rijnd´lEn¸y±
(
_´s_key
->
ícode_key
.
rk
, _´s_key->ícode_key.
ƒ
, (c⁄° 
uöt8_t
*Ë
sour˚
,

126 (
uöt8_t
*Ë
de°
);

127 
sour˚
+
AES_BLOCK_SIZE
;

128 
de°
+
AES_BLOCK_SIZE
;

131 
uöt8_t
 
block
[
AES_BLOCK_SIZE
];

132 
∑d_Àn

AES_BLOCK_SIZE
 - (
sour˚_Àngth
 - AES_BLOCK_SIZE*
num_blocks
);

133 
	`mem˝y
(
block
, 
sour˚
, 16 -
∑d_Àn
);

134 
	`mem£t
(
block
 + 
AES_BLOCK_SIZE
 -
∑d_Àn
,Öad_len,Öad_len);

135 
	`rijnd´lEn¸y±
(
_´s_key
->
ícode_key
.
rk
, _´s_key->ícode_key.
ƒ
, 
block
, (
uöt8_t
*Ë
de°
);

136 
	`hashkô_°rög_£t_Àngth
(
de°ö©i⁄
, 
AES_BLOCK_SIZE
*(
num_blocks
 + 1));

139  
de°ö©i⁄
;

140 
	}
}

142 
hashkô_°rög_°
* 
	$´s_de¸y±
(
´s_key_t
 *
_´s_key
,

143 c⁄° * 
sour˚
, 
size_t
 
sour˚_Àngth
)

145 i‡(
_´s_key
 =
NULL
)

147  
NULL
;

150 
size_t
 
num_blocks

sour˚_Àngth
/
AES_BLOCK_SIZE
;

151 i‡((
sour˚_Àngth
 !
num_blocks
*
AES_BLOCK_SIZE
Ë
‹
Çum_blocks ==0 )

153  
NULL
;

156 
hashkô_°rög_°
* 
de°ö©i⁄

	`hashkô_°rög_¸óã
(
sour˚_Àngth
);

157 i‡(
de°ö©i⁄
)

159 *
de°

	`hashkô_°rög_c_°r_muèbÀ
(
de°ö©i⁄
);

161 
size_t
 
x
 = 
num_blocks
-1; x > 0; x--)

163 
	`rijnd´lDe¸y±
(
_´s_key
->
decode_key
.
rk
, _´s_key->decode_key.
ƒ
, (c⁄° 
uöt8_t
*Ë
sour˚
, (uöt8_t*Ë
de°
);

164 
sour˚
+
AES_BLOCK_SIZE
;

165 
de°
+
AES_BLOCK_SIZE
;

168 
uöt8_t
 
block
[
AES_BLOCK_SIZE
];

169 
	`rijnd´lDe¸y±
(
_´s_key
->
decode_key
.
rk
, _´s_key->decode_key.
ƒ
, (c⁄° 
uöt8_t
*Ë
sour˚
, 
block
);

171 
∑d_Àn
(Ë(Ë
block
[
AES_BLOCK_SIZE
-1];

172 i‡(
∑d_Àn
 > 
AES_BLOCK_SIZE
)

174 
	`hashkô_°rög_‰ì
(
de°ö©i⁄
);

175  
NULL
;

180 
	`mem˝y
(
de°
, 
block
, 
AES_BLOCK_SIZE
 - 
∑d_Àn
);

181 
	`hashkô_°rög_£t_Àngth
(
de°ö©i⁄
, 
AES_BLOCK_SIZE
*
num_blocks
 - 
∑d_Àn
);

184  
de°ö©i⁄
;

185 
	}
}

	@libhashkit/aes.h

37 #¥agm®
⁄˚


39 
	g´s_key_t
;

41 
hashkô_°rög_°
* 
´s_í¸y±
(
´s_key_t
* 
_´s_key
,

42 c⁄° * 
sour˚
, 
size_t
 
sour˚_Àngth
);

44 
hashkô_°rög_°
* 
´s_de¸y±
(
´s_key_t
* 
_´s_key
,

45 c⁄° * 
sour˚
, 
size_t
 
sour˚_Àngth
);

47 
´s_key_t
* 
´s_¸óã_key
(c⁄° *
key
, c⁄° 
size_t
 
key_Àngth
);

49 
´s_key_t
* 
´s_˛⁄e_key
◊es_key_t* 
_´s_key
);

	@libhashkit/algorithm.cc

37 
	~"libhashkô/comm⁄.h
"

39 
uöt32_t
 
	$libhashkô_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
)

41  
	`hashkô_⁄e_©_a_time
(
key
, 
key_Àngth
, 
NULL
);

42 
	}
}

44 
uöt32_t
 
	$libhashkô_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

46  
	`hashkô_‚v1_64
(
key
, 
key_Àngth
, 
NULL
);

47 
	}
}

49 
uöt32_t
 
	$libhashkô_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

51  
	`hashkô_‚v1a_64
(
key
, 
key_Àngth
, 
NULL
);

52 
	}
}

54 
uöt32_t
 
	$libhashkô_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

56  
	`hashkô_‚v1_32
(
key
, 
key_Àngth
, 
NULL
);

57 
	}
}

59 
uöt32_t
 
	$libhashkô_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

61  
	`hashkô_‚v1a_32
(
key
, 
key_Àngth
, 
NULL
);

62 
	}
}

64 
uöt32_t
 
	$libhashkô_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

66  
	`hashkô_¸c32
(
key
, 
key_Àngth
, 
NULL
);

67 
	}
}

69 
uöt32_t
 
	$libhashkô_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
)

71  
	`hashkô_hsõh
(
key
, 
key_Àngth
, 
NULL
);

72 
	}
}

74 
uöt32_t
 
	$libhashkô_murmur3
(c⁄° *
key
, 
size_t
 
key_Àngth
)

76  
	`hashkô_murmur3
(
key
, 
key_Àngth
, 
NULL
);

77 
	}
}

79 
uöt32_t
 
	$libhashkô_murmur
(c⁄° *
key
, 
size_t
 
key_Àngth
)

81  
	`hashkô_murmur
(
key
, 
key_Àngth
, 
NULL
);

82 
	}
}

84 
uöt32_t
 
	$libhashkô_jíkös
(c⁄° *
key
, 
size_t
 
key_Àngth
)

86  
	`hashkô_jíkös
(
key
, 
key_Àngth
, 
NULL
);

87 
	}
}

89 
uöt32_t
 
	$libhashkô_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
)

91  
	`hashkô_md5
(
key
, 
key_Àngth
, 
NULL
);

92 
	}
}

94 
	$libhashkô_md5_sig«tuª
(c⁄° *
key
, 
size_t
 
Àngth
, *
ªsu…
)

96 
	`md5_sig«tuª
(
key
, (
uöt32_t
)
Àngth
, 
ªsu…
);

97 
	}
}

	@libhashkit/algorithm.h

44 #¥agm®
⁄˚


46 
uöt32_t
 
hashkô_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

48 
uöt32_t
 
hashkô_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

50 
uöt32_t
 
hashkô_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

52 
uöt32_t
 
hashkô_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

54 
uöt32_t
 
hashkô_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

56 
uöt32_t
 
hashkô_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

58 
uöt32_t
 
hashkô_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

60 
uöt32_t
 
hashkô_murmur
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

62 
uöt32_t
 
hashkô_murmur3
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

64 
uöt32_t
 
hashkô_jíkös
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

66 
uöt32_t
 
hashkô_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

	@libhashkit/behavior.cc

38 
	~<libhashkô/comm⁄.h
>

	@libhashkit/common.h

38 #¥agm®
⁄˚


40 
	~"libhashkô/hashkôc⁄.h
"

42 
	~<as£π.h
>

43 
	~<î∫o.h
>

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<m©h.h
>

48 #i‚de‡
__WORDSIZE


49 #ifde‡
__MINGW32__


50 
	#__WORDSIZE
 32

	)

54 
	~<libhashkô-1.0/hashkô.h
>

55 
	~"libhashkô/Æg‹ôhm.h
"

56 
	~"libhashkô/is.h
"

57 
	~"libhashkô/°rög.h
"

58 
	~"libhashkô/´s.h
"

60 #ifde‡
__˝lu•lus


64 
md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
);

66 
upd©e_c⁄töuum
(
hashkô_°
 *
hashkô
);

68 #ifde‡
__˝lu•lus


	@libhashkit/crc32.cc

43 
	~<libhashkô/comm⁄.h
>

45 c⁄° 
uöt32_t
 
	g¸c32èb
[256] = {

112 
uöt32_t
 
	$hashkô_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

114 
uöt64_t
 
x
;

115 
uöt32_t
 
¸c

UINT32_MAX
;

116 ()
c⁄ãxt
;

118 
x
0; x < 
key_Àngth
; x++)

119 
¸c
(¸¯>> 8Ë^ 
¸c32èb
[(¸¯^ (
uöt64_t
)
key
[
x
]) & 0xff];

121  ((~
¸c
) >> 16) & 0x7fff;

122 
	}
}

	@libhashkit/digest.cc

38 
	~<libhashkô/comm⁄.h
>

40 
uöt32_t
 
	$hashkô_dige°
(c⁄° 
hashkô_°
 *
£lf
, c⁄° *
key
, 
size_t
 
key_Àngth
)

42  
£lf
->
ba£_hash
.
	`fun˘i⁄
(
key
, 
key_Àngth
, sñf->ba£_hash.
c⁄ãxt
);

43 
	}
}

45 
uöt32_t
 
	$libhashkô_dige°
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

47 
hash_Æg‹ôhm
)

49 
HASHKIT_HASH_DEFAULT
:

50  
	`libhashkô_⁄e_©_a_time
(
key
, 
key_Àngth
);

51 
HASHKIT_HASH_MD5
:

52  
	`libhashkô_md5
(
key
, 
key_Àngth
);

53 
HASHKIT_HASH_CRC
:

54  
	`libhashkô_¸c32
(
key
, 
key_Àngth
);

55 
HASHKIT_HASH_FNV1_64
:

56  
	`libhashkô_‚v1_64
(
key
, 
key_Àngth
);

57 
HASHKIT_HASH_FNV1A_64
:

58  
	`libhashkô_‚v1a_64
(
key
, 
key_Àngth
);

59 
HASHKIT_HASH_FNV1_32
:

60  
	`libhashkô_‚v1_32
(
key
, 
key_Àngth
);

61 
HASHKIT_HASH_FNV1A_32
:

62  
	`libhashkô_‚v1a_32
(
key
, 
key_Àngth
);

63 
HASHKIT_HASH_HSIEH
:

64 #ifde‡
HAVE_HSIEH_HASH


65  
	`libhashkô_hsõh
(
key
, 
key_Àngth
);

69 
HASHKIT_HASH_MURMUR3
:

70  
	`libhashkô_murmur3
(
key
, 
key_Àngth
);

72 
HASHKIT_HASH_MURMUR
:

73 #ifde‡
HAVE_MURMUR_HASH


74  
	`libhashkô_murmur
(
key
, 
key_Àngth
);

78 
HASHKIT_HASH_JENKINS
:

79  
	`libhashkô_jíkös
(
key
, 
key_Àngth
);

80 
HASHKIT_HASH_CUSTOM
:

81 
HASHKIT_HASH_MAX
:

83 i‡(
DEBUG
)

85 
	`Ârötf
(
°dîr
, "hashkit_hash_t wasÉxtended butÜibhashkit_generate_value wasÇot updated\n");

86 
	`fÊush
(
°dîr
);

87 
	`as£π
(0);

93 
	}
}

	@libhashkit/encrypt.cc

38 
	~<libhashkô/comm⁄.h
>

40 
hashkô_°rög_°
 *
	$hashkô_í¸y±
(
hashkô_°
 *
kô
,

41 c⁄° * 
sour˚
, 
size_t
 
sour˚_Àngth
)

43  
	`´s_í¸y±
(
°©ic_ˇ°
<
´s_key_t
*>(
kô
->
_key
), 
sour˚
, 
sour˚_Àngth
);

44 
	}
}

46 
hashkô_°rög_°
 *
	$hashkô_de¸y±
(
hashkô_°
 *
kô
,

47 c⁄° * 
sour˚
, 
size_t
 
sour˚_Àngth
)

49  
	`´s_de¸y±
(
°©ic_ˇ°
<
´s_key_t
*>(
kô
->
_key
), 
sour˚
, 
sour˚_Àngth
);

50 
	}
}

52 
boﬁ
 
	$hashkô_key
(
hashkô_°
 *
kô
, c⁄° *
key
, c⁄° 
size_t
 
key_Àngth
)

54 i‡(
kô
->
_key
)

56 
	`‰ì
(
kô
->
_key
);

59 
kô
->
_key

	`´s_¸óã_key
(
key
, 
key_Àngth
);

61  
	`boﬁ
(
kô
->
_key
);

62 
	}
}

	@libhashkit/fnv_32.cc

39 
	~<libhashkô/comm⁄.h
>

42 
uöt32_t
 
	gFNV_32_INIT
= 2166136261UL;

43 
uöt32_t
 
	gFNV_32_PRIME
= 16777619;

45 
uöt32_t
 
	$hashkô_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

47 
uöt32_t
 
hash

FNV_32_INIT
;

48 ()
c⁄ãxt
;

50 
size_t
 
x
0; x < 
key_Àngth
; x++)

52 
uöt32_t
 
vÆ
(uöt32_t)
key
[
x
];

53 
hash
 *
FNV_32_PRIME
;

54 
hash
 ^
vÆ
;

57  
hash
;

58 
	}
}

60 
uöt32_t
 
	$hashkô_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

62 
uöt32_t
 
hash

FNV_32_INIT
;

63 ()
c⁄ãxt
;

65 
size_t
 
x
0; x < 
key_Àngth
; x++)

67 
uöt32_t
 
vÆ
(uöt32_t)
key
[
x
];

68 
hash
 ^
vÆ
;

69 
hash
 *
FNV_32_PRIME
;

72  
hash
;

73 
	}
}

	@libhashkit/fnv_64.cc

39 
	~<libhashkô/comm⁄.h
>

41 #i‡
__WORDSIZE
 =64 && 
deföed
(
HAVE_FNV64_HASH
)

44 
uöt64_t
 
	gFNV_64_INIT
= 0xcbf29ce484222325;

45 
uöt64_t
 
	gFNV_64_PRIME
= 0x100000001b3;

47 
uöt32_t
 
	$hashkô_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
, *)

50 
uöt64_t
 
hash

FNV_64_INIT
;

52 
size_t
 
x
0; x < 
key_Àngth
; x++)

54 
hash
 *
FNV_64_PRIME
;

55 
hash
 ^(
uöt64_t
)
key
[
x
];

58  (
uöt32_t
)
hash
;

59 
	}
}

61 
uöt32_t
 
	$hashkô_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
, *)

63 
uöt32_t
 
hash
(uöt32_tË
FNV_64_INIT
;

65 
size_t
 
x
0; x < 
key_Àngth
; x++)

67 
uöt32_t
 
vÆ
(uöt32_t)
key
[
x
];

68 
hash
 ^
vÆ
;

69 
hash
 *(
uöt32_t
Ë
FNV_64_PRIME
;

72  
hash
;

73 
	}
}

76 
uöt32_t
 
	$hashkô_‚v1_64
(c⁄° *, 
size_t
, *)

79 
	}
}

81 
uöt32_t
 
	$hashkô_‚v1a_64
(c⁄° *, 
size_t
, *)

84 
	}
}

	@libhashkit/function.cc

9 
	~<libhashkô/comm⁄.h
>

11 
hashkô_ªtu∫_t
 
_£t_fun˘i⁄
(
hashkô_°
::
hashkô_fun˘i⁄_°
 *
£lf
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

13 i‡(
	g£lf
 =
NULL
)

15  
HASHKIT_INVALID_ARGUMENT
;

18 
	ghash_Æg‹ôhm
)

20 
	gHASHKIT_HASH_MD5
:

21 
£lf
->
fun˘i⁄

hashkô_md5
;

24 
	gHASHKIT_HASH_CRC
:

25 
£lf
->
fun˘i⁄

hashkô_¸c32
;

28 
	gHASHKIT_HASH_FNV1_64
:

29 i‡(
libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_FNV1_64
))

31 
£lf
->
fun˘i⁄

hashkô_‚v1_64
;

34  
	gHASHKIT_INVALID_ARGUMENT
;

36 
	gHASHKIT_HASH_FNV1A_64
:

37 i‡(
libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_FNV1_64
))

39 
£lf
->
fun˘i⁄

hashkô_‚v1a_64
;

42  
	gHASHKIT_INVALID_ARGUMENT
;

44 
	gHASHKIT_HASH_FNV1_32
:

45 
£lf
->
fun˘i⁄

hashkô_‚v1_32
;

48 
	gHASHKIT_HASH_FNV1A_32
:

49 
£lf
->
fun˘i⁄

hashkô_‚v1a_32
;

52 
	gHASHKIT_HASH_HSIEH
:

53 i‡(
libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_HSIEH
))

55 
£lf
->
fun˘i⁄

hashkô_hsõh
;

58  
	gHASHKIT_INVALID_ARGUMENT
;

60 
	gHASHKIT_HASH_MURMUR3
:

61 
HASHKIT_HASH_MURMUR
:

62 i‡(
libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_MURMUR
))

64 
£lf
->
fun˘i⁄

hashkô_murmur
;

67  
	gHASHKIT_INVALID_ARGUMENT
;

69 
	gHASHKIT_HASH_JENKINS
:

70 
£lf
->
fun˘i⁄

hashkô_jíkös
;

73 
	gHASHKIT_HASH_CUSTOM
:

74  
HASHKIT_INVALID_ARGUMENT
;

76 
	gHASHKIT_HASH_DEFAULT
:

77 
£lf
->
fun˘i⁄

hashkô_⁄e_©_a_time
;

80 
	gHASHKIT_HASH_MAX
:

81 
£lf
->
fun˘i⁄

hashkô_⁄e_©_a_time
;

82  
	gHASHKIT_INVALID_HASH
;

85 
	g£lf
->
	gc⁄ãxt

NULL
;

87  
	gHASHKIT_SUCCESS
;

90 
hashkô_ªtu∫_t
 
	$hashkô_£t_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

92  
	`_£t_fun˘i⁄
(&
£lf
->
ba£_hash
, 
hash_Æg‹ôhm
);

93 
	}
}

95 
hashkô_ªtu∫_t
 
	$hashkô_£t_di°ributi⁄_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

97  
	`_£t_fun˘i⁄
(&
£lf
->
di°ributi⁄_hash
, 
hash_Æg‹ôhm
);

98 
	}
}

100 
hashkô_ªtu∫_t
 
_£t_cu°om_fun˘i⁄
(
hashkô_°
::
hashkô_fun˘i⁄_°
 *
£lf
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
)

102 i‡(
	g£lf
 =
NULL
)

104  
HASHKIT_INVALID_ARGUMENT
;

107 i‡(
	gfun˘i⁄
)

109 
	g£lf
->
	gfun˘i⁄

fun˘i⁄
;

110 
	g£lf
->
	gc⁄ãxt

c⁄ãxt
;

112  
	gHASHKIT_SUCCESS
;

115  
	gHASHKIT_FAILURE
;

118 
hashkô_ªtu∫_t
 
	$hashkô_£t_cu°om_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
)

120 i‡(
£lf
 =
NULL
)

122  
HASHKIT_INVALID_ARGUMENT
;

126  
	`_£t_cu°om_fun˘i⁄
(&
£lf
->
ba£_hash
, 
fun˘i⁄
, 
c⁄ãxt
);

127 
	}
}

129 
hashkô_ªtu∫_t
 
	$hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
)

131 i‡(
£lf
 =
NULL
)

133  
HASHKIT_INVALID_ARGUMENT
;

136  
	`_£t_cu°om_fun˘i⁄
(&
£lf
->
di°ributi⁄_hash
, 
fun˘i⁄
, 
c⁄ãxt
);

137 
	}
}

139 
hashkô_hash_Æg‹ôhm_t
 
	$gë_fun˘i⁄_ty≥
(c⁄° 
hashkô_hash_‚
 
fun˘i⁄
)

141 i‡(
fun˘i⁄
 =
hashkô_⁄e_©_a_time
)

143  
HASHKIT_HASH_DEFAULT
;

145 i‡(
fun˘i⁄
 =
hashkô_md5
)

147  
HASHKIT_HASH_MD5
;

149 i‡(
fun˘i⁄
 =
hashkô_¸c32
)

151  
HASHKIT_HASH_CRC
;

153 i‡(
fun˘i⁄
 =
hashkô_‚v1_64
)

155  
HASHKIT_HASH_FNV1_64
;

157 i‡(
fun˘i⁄
 =
hashkô_‚v1a_64
)

159  
HASHKIT_HASH_FNV1A_64
;

161 i‡(
fun˘i⁄
 =
hashkô_‚v1_32
)

163  
HASHKIT_HASH_FNV1_32
;

165 i‡(
fun˘i⁄
 =
hashkô_‚v1a_32
)

167  
HASHKIT_HASH_FNV1A_32
;

169 i‡(
fun˘i⁄
 =
hashkô_hsõh
)

171  
HASHKIT_HASH_HSIEH
;

173 i‡(
fun˘i⁄
 =
hashkô_murmur
)

175  
HASHKIT_HASH_MURMUR
;

177 i‡(
fun˘i⁄
 =
hashkô_jíkös
)

179  
HASHKIT_HASH_JENKINS
;

182  
HASHKIT_HASH_CUSTOM
;

183 
	}
}

185 
hashkô_hash_Æg‹ôhm_t
 
	$hashkô_gë_fun˘i⁄
(c⁄° 
hashkô_°
 *
£lf
)

187 i‡(
£lf
 =
NULL
)

189  
HASHKIT_HASH_DEFAULT
;

192  
	`gë_fun˘i⁄_ty≥
(
£lf
->
ba£_hash
.
fun˘i⁄
);

193 
	}
}

195 
hashkô_hash_Æg‹ôhm_t
 
	$hashkô_gë_di°ributi⁄_fun˘i⁄
(c⁄° 
hashkô_°
 *
£lf
)

197 i‡(
£lf
 =
NULL
)

199  
HASHKIT_HASH_DEFAULT
;

202  
	`gë_fun˘i⁄_ty≥
(
£lf
->
di°ributi⁄_hash
.
fun˘i⁄
);

203 
	}
}

	@libhashkit/has.cc

39 
	~<libhashkô/comm⁄.h
>

41 
boﬁ
 
	$libhashkô_has_Æg‹ôhm
(c⁄° 
hashkô_hash_Æg‹ôhm_t
 
Ægo
)

43 
Ægo
)

45 
HASHKIT_HASH_FNV1_64
:

46 
HASHKIT_HASH_FNV1A_64
:

47 #i‡
__WORDSIZE
 =64 && 
	`deföed
(
HAVE_FNV64_HASH
)

48  
åue
;

50  
Ál£
;

53 
HASHKIT_HASH_HSIEH
:

54 #ifde‡
HAVE_HSIEH_HASH


55  
åue
;

57  
Ál£
;

60 
HASHKIT_HASH_MURMUR3
:

61 
HASHKIT_HASH_MURMUR
:

62 #ifde‡
HAVE_MURMUR_HASH


63  
åue
;

65  
Ál£
;

68 
HASHKIT_HASH_FNV1_32
:

69 
HASHKIT_HASH_FNV1A_32
:

70 
HASHKIT_HASH_DEFAULT
:

71 
HASHKIT_HASH_MD5
:

72 
HASHKIT_HASH_CRC
:

73 
HASHKIT_HASH_JENKINS
:

74 
HASHKIT_HASH_CUSTOM
:

75  
åue
;

77 
HASHKIT_HASH_MAX
:

81  
Ál£
;

82 
	}
}

	@libhashkit/hashkit.cc

39 
	~<libhashkô/comm⁄.h
>

41 
ölöe
 
	$_hashkô_öô
(
hashkô_°
 *
£lf
)

43 
£lf
->
ba£_hash
.
fun˘i⁄

hashkô_⁄e_©_a_time
;

44 
£lf
->
ba£_hash
.
c⁄ãxt

NULL
;

46 
£lf
->
di°ributi⁄_hash
.
fun˘i⁄

hashkô_⁄e_©_a_time
;

47 
£lf
->
di°ributi⁄_hash
.
c⁄ãxt

NULL
;

49 
£lf
->
Êags
.
is_ba£_ßme_di°ribuãd

åue
;

50 
£lf
->
_key

NULL
;

51 
	}
}

53 
ölöe
 
hashkô_°
 *
	$_hashkô_¸óã
(
hashkô_°
 *
£lf
)

55 i‡(
£lf
)

57 
£lf
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

61 
£lf
(
hashkô_°
*)
	`ˇŒoc
(1, (hashkit_st));

62 i‡(
£lf
 =
NULL
)

64  
NULL
;

67 
£lf
->
›ti⁄s
.
is_Æloˇãd

åue
;

70  
£lf
;

71 
	}
}

73 
hashkô_°
 *
	$hashkô_¸óã
(
hashkô_°
 *
£lf
)

75 
£lf

	`_hashkô_¸óã
(self);

76 i‡(
£lf
 =
NULL
)

78  
NULL
;

81 
	`_hashkô_öô
(
£lf
);

83  
£lf
;

84 
	}
}

87 
	$hashkô_‰ì
(
hashkô_°
 *
£lf
)

89 i‡(
£lf
 
™d
 sñf->
_key
)

91 
	`‰ì
(
£lf
->
_key
);

92 
£lf
->
_key

NULL
;

95 i‡(
	`hashkô_is_Æloˇãd
(
£lf
))

97 
	`‰ì
(
£lf
);

99 
	}
}

101 
hashkô_°
 *
	$hashkô_˛⁄e
(
hashkô_°
 *
de°ö©i⁄
, c⁄° hashkô_° *
sour˚
)

103 i‡(
sour˚
 =
NULL
)

105  
	`hashkô_¸óã
(
de°ö©i⁄
);

109 
de°ö©i⁄

	`_hashkô_¸óã
(destination);

112 i‡(
de°ö©i⁄
 =
NULL
)

114  
NULL
;

117 
de°ö©i⁄
->
ba£_hash

sour˚
->base_hash;

118 
de°ö©i⁄
->
di°ributi⁄_hash

sour˚
->distribution_hash;

119 
de°ö©i⁄
->
Êags

sour˚
->flags;

120 
de°ö©i⁄
->
_key

	`´s_˛⁄e_key
(
°©ic_ˇ°
<
´s_key_t
*>(
sour˚
->_key));

122  
de°ö©i⁄
;

123 
	}
}

125 
boﬁ
 
	$hashkô_com∑ª
(c⁄° 
hashkô_°
 *
fú°
, c⁄° hashkô_° *
£c⁄d
)

127 i‡(
nŸ
 
fú°
 
‹
ÇŸ 
£c⁄d
)

128  
Ál£
;

130 i‡(
fú°
->
ba£_hash
.
fun˘i⁄
 =
£c⁄d
->ba£_hash.fun˘i⁄ 
™d


131 
fú°
->
ba£_hash
.
c⁄ãxt
 =
£c⁄d
->ba£_hash.c⁄ãxà
™d


132 
fú°
->
di°ributi⁄_hash
.
fun˘i⁄
 =
£c⁄d
->di°ributi⁄_hash.fun˘i⁄ 
™d


133 
fú°
->
di°ributi⁄_hash
.
c⁄ãxt
 =
£c⁄d
->di°ributi⁄_hash.c⁄ãxà
™d


134 
fú°
->
Êags
.
is_ba£_ßme_di°ribuãd
 =
£c⁄d
->flags.is_base_same_distributed)

136  
åue
;

139  
Ál£
;

140 
	}
}

	@libhashkit/hashkit.h

38 #¥agm®
⁄˚


40 
	~<libhashkô-1.0/hashkô.h
>

	@libhashkit/hashkitcon.h

38 #¥agm®
⁄˚


40 
	~"mem_c⁄fig.h
"

	@libhashkit/hsieh.cc

45 
	~<libhashkô/comm⁄.h
>

47 #unde‡
gë16bôs


48 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
))

49 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

52 #i‡!
deföed
 (
gë16bôs
)

53 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8)\

54 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

57 #ifde‡
HAVE_HSIEH_HASH


58 
uöt32_t
 
	$hashkô_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
, *)

60 
uöt32_t
 
hash
 = 0, 
tmp
;

61 
ªm
;

63 i‡(
key_Àngth
 <0 || 
key
 =
NULL
)

66 
ªm
 = 
key_Àngth
 & 3;

67 
key_Àngth
 >>= 2;

70 ;
key_Àngth
 > 0; key_length--)

72 
hash
 +
	`gë16bôs
 (
key
);

73 
tmp
 = (
	`gë16bôs
 (
key
+2Ë<< 11Ë^ 
hash
;

74 
hash
 = (hash << 16Ë^ 
tmp
;

75 
key
 +2* (
uöt16_t
);

76 
hash
 += hash >> 11;

80 
ªm
)

82 3: 
hash
 +
	`gë16bôs
 (
key
);

83 
hash
 ^= hash << 16;

84 
hash
 ^(
uöt32_t
)
key
[ (
uöt16_t
)] << 18;

85 
hash
 += hash >> 11;

87 2: 
hash
 +
	`gë16bôs
 (
key
);

88 
hash
 ^= hash << 11;

89 
hash
 += hash >> 17;

91 1: 
hash
 +()(*
key
);

92 
hash
 ^= hash << 10;

93 
hash
 += hash >> 1;

99 
hash
 ^= hash << 3;

100 
hash
 += hash >> 5;

101 
hash
 ^= hash << 4;

102 
hash
 += hash >> 17;

103 
hash
 ^= hash << 25;

104 
hash
 += hash >> 6;

106  
hash
;

107 
	}
}

109 
uöt32_t
 
	$hashkô_hsõh
(c⁄° *, 
size_t
 , *)

112 
	}
}

	@libhashkit/is.h

39 #¥agm®
⁄˚


41 
	#hashkô_is_Æloˇãd
(
__obje˘
Ë((__obje˘)->
›ti⁄s
.
is_Æloˇãd
)

	)

42 
	#hashkô_is_öôülized
(
__obje˘
Ë((__obje˘)->
›ti⁄s
.
is_öôülized
)

	)

	@libhashkit/jenkins.cc

51 
	~<libhashkô/comm⁄.h
>

53 
	#hashsize
(
n
Ë((
uöt32_t
)1<<“))

	)

54 
	#hashmask
(
n
Ë(
	`hashsize
“)-1)

	)

55 
	#rŸ
(
x
,
k
Ë(((x)<<(k)Ë| ((x)>>(32-(k))))

	)

57 
	#mix
(
a
,
b
,
c
) \

59 
a
 -
c
;á ^
	`rŸ
(c, 4); c +
b
; \

60 
b
 -
a
; b ^
	`rŸ
◊, 6);á +
c
; \

61 
c
 -
b
; c ^
	`rŸ
(b, 8); b +
a
; \

62 
a
 -
c
;á ^
	`rŸ
(c,16); c +
b
; \

63 
b
 -
a
; b ^
	`rŸ
◊,19);á +
c
; \

64 
c
 -
b
; c ^
	`rŸ
(b, 4); b +
a
; \

65 }

	)

67 
	#föÆ
(
a
,
b
,
c
) \

69 
c
 ^
b
; c -
	`rŸ
(b,14); \

70 
a
 ^
c
;á -
	`rŸ
(c,11); \

71 
b
 ^
a
; b -
	`rŸ
(a,25); \

72 
c
 ^
b
; c -
	`rŸ
(b,16); \

73 
a
 ^
c
;á -
	`rŸ
(c,4); \

74 
b
 ^
a
; b -
	`rŸ
(a,14); \

75 
c
 ^
b
; c -
	`rŸ
(b,24); \

76 }

	)

78 
	#JENKINS_INITVAL
 13

	)

96 
uöt32_t
 
	$hashkô_jíkös
(c⁄° *
key
, 
size_t
 
Àngth
, *)

98 
uöt32_t
 
a
,
b
,
c
;

99 #i‚de‡
WORDS_BIGENDIAN


100 uni⁄ { c⁄° *
±r
; 
size_t
 
i
; } 
u
;

101 
u
.
±r
 = 
key
;

105 
a
 = 
b
 = 
c
 = 0xdódbì‡+ ((
uöt32_t
)
Àngth
Ë+ 
JENKINS_INITVAL
;

107 #i‚de‡
WORDS_BIGENDIAN


108 i‡((
u
.
i
 & 0x3) == 0)

110 c⁄° 
uöt32_t
 *
k
 = (c⁄° uöt32_à*)
key
;

113 
Àngth
 > 12)

115 
a
 +
k
[0];

116 
b
 +
k
[1];

117 
c
 +
k
[2];

118 
	`mix
(
a
,
b
,
c
);

119 
Àngth
 -= 12;

120 
k
 += 3;

133 
Àngth
)

135 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

136 11: 
c
+=
k
[2]&0xffffff; 
b
+=k[1]; 
a
+=k[0]; ;

137 10: 
c
+=
k
[2]&0xffff; 
b
+=k[1]; 
a
+=k[0]; ;

138 9 : 
c
+=
k
[2]&0xff; 
b
+=k[1]; 
a
+=k[0]; ;

139 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

140 7 : 
b
+=
k
[1]&0xffffff; 
a
+=k[0]; ;

141 6 : 
b
+=
k
[1]&0xffff; 
a
+=k[0]; ;

142 5 : 
b
+=
k
[1]&0xff; 
a
+=k[0]; ;

143 4 : 
a
+=
k
[0]; ;

144 3 : 
a
+=
k
[0]&0xffffff; ;

145 2 : 
a
+=
k
[0]&0xffff; ;

146 1 : 
a
+=
k
[0]&0xff; ;

147 0 :  
c
;

148 :  
c
;

152 i‡((
u
.
i
 & 0x1) == 0)

154 c⁄° 
uöt16_t
 *
k
 = (c⁄° uöt16_à*)
key
;

155 c⁄° 
uöt8_t
 *
k8
;

158 
Àngth
 > 12)

160 
a
 +
k
[0] + (((
uöt32_t
)k[1])<<16);

161 
b
 +
k
[2] + (((
uöt32_t
)k[3])<<16);

162 
c
 +
k
[4] + (((
uöt32_t
)k[5])<<16);

163 
	`mix
(
a
,
b
,
c
);

164 
Àngth
 -= 12;

165 
k
 += 6;

169 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

170 
Àngth
)

172 12: 
c
+=
k
[4]+(((
uöt32_t
)k[5])<<16);

173 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

174 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

176 11: 
c
+=((
uöt32_t
)
k8
[10])<<16;

177 10: 
c
+=
k
[4];

178 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

179 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

181 9 : 
c
+=
k8
[8];

182 8 : 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

183 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

185 7 : 
b
+=((
uöt32_t
)
k8
[6])<<16;

186 6 : 
b
+=
k
[2];

187 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

189 5 : 
b
+=
k8
[4];

190 4 : 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

192 3 : 
a
+=((
uöt32_t
)
k8
[2])<<16;

193 2 : 
a
+=
k
[0];

195 1 : 
a
+=
k8
[0];

197 0 :  
c
;

198 :  
c
;

205 c⁄° 
uöt8_t
 *
k
 = (c⁄° uöt8_à*)
key
;

208 
Àngth
 > 12)

210 
a
 +
k
[0];

211 
a
 +((
uöt32_t
)
k
[1])<<8;

212 
a
 +((
uöt32_t
)
k
[2])<<16;

213 
a
 +((
uöt32_t
)
k
[3])<<24;

214 
b
 +
k
[4];

215 
b
 +((
uöt32_t
)
k
[5])<<8;

216 
b
 +((
uöt32_t
)
k
[6])<<16;

217 
b
 +((
uöt32_t
)
k
[7])<<24;

218 
c
 +
k
[8];

219 
c
 +((
uöt32_t
)
k
[9])<<8;

220 
c
 +((
uöt32_t
)
k
[10])<<16;

221 
c
 +((
uöt32_t
)
k
[11])<<24;

222 
	`mix
(
a
,
b
,
c
);

223 
Àngth
 -= 12;

224 
k
 += 12;

228 
Àngth
)

230 12: 
c
+=((
uöt32_t
)
k
[11])<<24;

231 11: 
c
+=((
uöt32_t
)
k
[10])<<16;

232 10: 
c
+=((
uöt32_t
)
k
[9])<<8;

233 9 : 
c
+=
k
[8];

234 8 : 
b
+=((
uöt32_t
)
k
[7])<<24;

235 7 : 
b
+=((
uöt32_t
)
k
[6])<<16;

236 6 : 
b
+=((
uöt32_t
)
k
[5])<<8;

237 5 : 
b
+=
k
[4];

238 4 : 
a
+=((
uöt32_t
)
k
[3])<<24;

239 3 : 
a
+=((
uöt32_t
)
k
[2])<<16;

240 2 : 
a
+=((
uöt32_t
)
k
[1])<<8;

241 1 : 
a
+=
k
[0];

243 0 :  
c
;

244  :  
c
;

246 #i‚de‡
WORDS_BIGENDIAN


250 
	`föÆ
(
a
,
b
,
c
);

251  
c
;

252 
	}
}

	@libhashkit/ketama.cc

39 
	~<libhashkô/comm⁄.h
>

40 
	~<m©h.h
>

43 
uöt32_t
 
	$këama_£rvî_hash
(c⁄° *
key
, 
key_Àngth
, 
Æignmít
)

45 
ªsu…s
[16];

47 
	`md5_sig«tuª
((*)
key
, 
key_Àngth
, 
ªsu…s
);

48  ((
uöt32_t
Ë(
ªsu…s
[3 + 
Æignmít
 * 4] & 0xFF) << 24)

49 | ((
uöt32_t
Ë(
ªsu…s
[2 + 
Æignmít
 * 4] & 0xFF) << 16)

50 | ((
uöt32_t
Ë(
ªsu…s
[1 + 
Æignmít
 * 4] & 0xFF) << 8)

51 | (
ªsu…s
[0 + 
Æignmít
 * 4] & 0xFF);

52 
	}
}

54 
	$c⁄töuum_poöts_cmp
(c⁄° *
t1
, c⁄° *
t2
)

56 
hashkô_c⁄töuum_poöt_°
 *
˘1
(hashkô_c⁄töuum_poöt_° *)
t1
;

57 
hashkô_c⁄töuum_poöt_°
 *
˘2
(hashkô_c⁄töuum_poöt_° *)
t2
;

59 i‡(
˘1
->
vÆue
 =
˘2
->value)

61 i‡(
˘1
->
vÆue
 > 
˘2
->value)

65 
	}
}

67 
	$upd©e_c⁄töuum
(
hashkô_°
 *
hashkô
)

69 
uöt32_t
 
cou¡
;

70 
uöt32_t
 
c⁄töuum_ödex
= 0;

71 
uöt32_t
 
vÆue
;

72 
uöt32_t
 
poöts_ödex
;

73 
uöt32_t
 
poöts_cou¡
= 0;

74 
uöt32_t
 
poöts_≥r_£rvî
;

75 
uöt32_t
 
poöts_≥r_hash
;

76 
uöt64_t
 
tŸÆ_weight
= 0;

77 
uöt32_t
 
live_£rvîs
;

78 
uöt8_t
 *
c⁄ãxt
;

80 i‡(
hashkô
->
a˘ive_‚
 !
NULL
 || hashkô->
weight_‚
 != NULL)

82 
live_£rvîs
= 0;

84 
cou¡
0, 
c⁄ãxt

hashkô
->
li°
; cou¡ < hashkô->
li°_size
;

85 
cou¡
++, 
c⁄ãxt
+
hashkô
->
c⁄ãxt_size
)

87 i‡(
hashkô
->
a˘ive_‚
 !
NULL
)

89 i‡(
hashkô
->
	`a˘ive_‚
(
c⁄ãxt
))

90 
live_£rvîs
++;

95 i‡(
hashkô
->
weight_‚
 !
NULL
)

96 
tŸÆ_weight
+
hashkô
->
	`weight_‚
(
c⁄ãxt
);

100 i‡(
hashkô
->
a˘ive_‚
 =
NULL
)

101 
live_£rvîs
(
uöt32_t
)
hashkô
->
li°_size
;

103 i‡(
live_£rvîs
 == 0)

106 i‡(
hashkô
->
weight_‚
 =
NULL
)

108 
poöts_≥r_£rvî

HASHKIT_POINTS_PER_NODE
;

109 
poöts_≥r_hash
= 1;

113 
poöts_≥r_£rvî

HASHKIT_POINTS_PER_NODE_WEIGHTED
;

114 
poöts_≥r_hash
= 4;

117 i‡(
live_£rvîs
 > 
hashkô
->
c⁄töuum_cou¡
)

119 
hashkô_c⁄töuum_poöt_°
 *
√w_c⁄töuum
;

121 
√w_c⁄töuum

	`ªÆloc
(
hashkô
->
c⁄töuum
,

122 (
hashkô_c⁄töuum_poöt_°
) *

123 (
live_£rvîs
 + 
HASHKIT_CONTINUUM_ADDITION
) *

124 
poöts_≥r_£rvî
);

126 i‡(
√w_c⁄töuum
 =
NULL
)

127  
ENOMEM
;

129 
hashkô
->
c⁄töuum

√w_c⁄töuum
;

130 
hashkô
->
c⁄töuum_cou¡

live_£rvîs
 + 
HASHKIT_CONTINUUM_ADDITION
;

133 
cou¡
0, 
c⁄ãxt

hashkô
->
li°
; cou¡ < hashkô->
li°_size
;

134 
cou¡
++, 
c⁄ãxt
+
hashkô
->
c⁄ãxt_size
)

136 i‡(
hashkô
->
a˘ive_‚
 !
NULL
 && hashkô->
	`a˘ive_‚
(
c⁄ãxt
Ë=
Ál£
)

139 i‡(
hashkô
->
weight_‚
 !
NULL
)

141 
p˘
 = ()
hashkô
->
	`weight_‚
(
c⁄ãxt
Ë/ ()
tŸÆ_weight
;

142 
poöts_≥r_£rvî
(
uöt32_t
Ë((
	`Êo‹f
((Ë(
p˘
 * 
HASHKIT_POINTS_PER_NODE_WEIGHTED
 / 4 * ()
live_£rvîs
 + 0.0000000001))) * 4);

145 
poöts_ödex
= 0;

146 
poöts_ödex
 < 
poöts_≥r_£rvî
 / 
poöts_≥r_hash
;

147 
poöts_ödex
++)

149 
s‹t_ho°
[
HASHKIT_CONTINUUM_KEY_SIZE
]= "";

150 
size_t
 
s‹t_ho°_Àngth
;

152 i‡(
hashkô
->
c⁄töuum_key_‚
 =
NULL
)

154 
s‹t_ho°_Àngth
(
size_t
Ë
	`¢¥ötf
(
s‹t_ho°
, 
HASHKIT_CONTINUUM_KEY_SIZE
, "%u",

155 
poöts_ödex
);

159 
s‹t_ho°_Àngth

hashkô
->
	`c⁄töuum_key_‚
(
s‹t_ho°
, 
HASHKIT_CONTINUUM_KEY_SIZE
,

160 
poöts_ödex
, 
c⁄ãxt
);

163 i‡(
hashkô
->
weight_‚
 =
NULL
)

165 i‡(
hashkô
->
c⁄töuum_hash_‚
 =
NULL
)

166 
vÆue

	`hashkô_deÁu…
(
s‹t_ho°
, 
s‹t_ho°_Àngth
);

168 
vÆue

hashkô
->
	`c⁄töuum_hash_‚
(
s‹t_ho°
, 
s‹t_ho°_Àngth
);

170 
hashkô
->
c⁄töuum
[
c⁄töuum_ödex
].
ödex

cou¡
;

171 
hashkô
->
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

175 
i
;

176 
i
 = 0; i < 
poöts_≥r_hash
; i++)

178 
vÆue

	`këama_£rvî_hash
(
s‹t_ho°
, (
uöt32_t
Ë
s‹t_ho°_Àngth
, (Ë
i
);

179 
hashkô
->
c⁄töuum
[
c⁄töuum_ödex
].
ödex

cou¡
;

180 
hashkô
->
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

185 
poöts_cou¡
+
poöts_≥r_£rvî
;

188 
hashkô
->
c⁄töuum_poöts_cou¡

poöts_cou¡
;

189 
	`qs‹t
(
hashkô
->
c⁄töuum
, hashkô->
c⁄töuum_poöts_cou¡
, (
hashkô_c⁄töuum_poöt_°
),

190 
c⁄töuum_poöts_cmp
);

193 
	}
}

	@libhashkit/md5.cc

69 
	~<libhashkô/comm⁄.h
>

71 
	~<°rög.h
>

72 
	~<sys/ty≥s.h
>

74 
	#GCC_VERSION
 (
__GNUC__
 * 10000 \

75 + 
__GNUC_MINOR__
 * 100 \

76 + 
__GNUC_PATCHLEVEL__
)

	)

78 #i‡
GCC_VERSION
 > 40600

79 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunsafe-loop-optimizations"

83 *
	tPOINTER
;

84 c⁄° *
	tCONST_POINTER
;

88 
	tUINT4
;

93 
UINT4
 
	m°©e
[4];

94 
UINT4
 
	mcou¡
[2];

95 
	mbuf„r
[64];

96 } 
	tMD5_CTX
;

98 
MD5Inô
 (
MD5_CTX
 *
c⁄ãxt
);

99 
MD5Upd©e
 ( 
MD5_CTX
 *
c⁄ãxt
,

100 c⁄° *
öput
,

101 
öputLí
);

102 
MD5FöÆ
 ( 
dige°
[16],

103 
MD5_CTX
 *
c⁄ãxt
);

107 
	#S11
 7

	)

108 
	#S12
 12

	)

109 
	#S13
 17

	)

110 
	#S14
 22

	)

111 
	#S21
 5

	)

112 
	#S22
 9

	)

113 
	#S23
 14

	)

114 
	#S24
 20

	)

115 
	#S31
 4

	)

116 
	#S32
 11

	)

117 
	#S33
 16

	)

118 
	#S34
 23

	)

119 
	#S41
 6

	)

120 
	#S42
 10

	)

121 
	#S43
 15

	)

122 
	#S44
 21

	)

125 
MD5Tønsf‹m
 (
UINT4
 
°©e
[4],

126 c⁄° 
block
[64]);

127 
Encode
 (*
ouçut
,

128 
UINT4
 *
öput
,

129 
Àn
);

130 
Decode
(
UINT4
 *
ouçut
, c⁄° *
öput
, 
Àn
);

132 
	gPADDING
[64] = {

140 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

141 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

142 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

143 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

147 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

152 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

153 (
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

154 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

155 (
a
Ë+(
b
); \

156 }

	)

157 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

158 (
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

159 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

160 (
a
Ë+(
b
); \

161 }

	)

162 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

163 (
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

164 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

165 (
a
Ë+(
b
); \

166 }

	)

167 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

168 (
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

169 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

170 (
a
Ë+(
b
); \

171 }

	)

178 
	$md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
)

180 
MD5_CTX
 
my_md5
;

182 
	`MD5Inô
(&
my_md5
);

183 ()
	`MD5Upd©e
(&
my_md5
, 
key
, 
Àngth
);

184 
	`MD5FöÆ
(
ªsu…
, &
my_md5
);

185 
	}
}

189 
	$MD5Inô
 (
MD5_CTX
 *
c⁄ãxt
)

191 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

194 
c⁄ãxt
->
°©e
[0] = 0x67452301;

195 
c⁄ãxt
->
°©e
[1] = 0xefcdab89;

196 
c⁄ãxt
->
°©e
[2] = 0x98badcfe;

197 
c⁄ãxt
->
°©e
[3] = 0x10325476;

198 
	}
}

205 
	$MD5Upd©e
 (

206 
MD5_CTX
 *
c⁄ãxt
,

207 c⁄° *
öput
,

208 
öputLí
)

210 
i
, 
idx
, 
∑πLí
;

213 
idx
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3F);

217 i‡((
c⁄ãxt
->
cou¡
[0] +((
UINT4
)
öputLí
 << 3))

218 < ((
UINT4
)
öputLí
 << 3))

219 
c⁄ãxt
->
cou¡
[1]++;

220 
c⁄ãxt
->
cou¡
[1] +((
UINT4
)
öputLí
 >> 29);

222 
∑πLí
 = 64 - 
idx
;

226 i‡(
öputLí
 >
∑πLí
) {

227 
	`mem˝y
((
POINTER
)&
c⁄ãxt
->
buf„r
[
idx
], (
CONST_POINTER
)
öput
, 
∑πLí
);

228 
	`MD5Tønsf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

230 
i
 = 
∑πLí
; i + 63 < 
öputLí
; i += 64)

231 
	`MD5Tønsf‹m
 (
c⁄ãxt
->
°©e
, (
CONST_POINTER
)&
öput
[
i
]);

233 
idx
 = 0;

236 
i
 = 0;

239 
	`mem˝y
((
POINTER
)&
c⁄ãxt
->
buf„r
[
idx
], (
CONST_POINTER
)&
öput
[
i
],

240 
öputLí
-
i
);

241 
	}
}

247 
	$MD5FöÆ
 (

248 
dige°
[16],

249 
MD5_CTX
 *
c⁄ãxt
)

251 
bôs
[8];

252 
idx
, 
∑dLí
;

255 
	`Encode
 (
bôs
, 
c⁄ãxt
->
cou¡
, 8);

259 
idx
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3f);

260 
∑dLí
 = (
idx
 < 56) ? (56 - idx) : (120 - idx);

261 
	`MD5Upd©e
 (
c⁄ãxt
, 
PADDING
, 
∑dLí
);

264 
	`MD5Upd©e
 (
c⁄ãxt
, 
bôs
, 8);

267 
	`Encode
 (
dige°
, 
c⁄ãxt
->
°©e
, 16);

271 
	`mem£t
((
POINTER
)
c⁄ãxt
, 0,  (*context));

272 
	}
}

276 
	$MD5Tønsf‹m
 (

277 
UINT4
 
°©e
[4],

278 c⁄° 
block
[64])

280 
UINT4
 
a
 = 
°©e
[0], 
b
 = sèã[1], 
c
 = sèã[2], 
d
 = sèã[3], 
x
[16];

282 
	`Decode
 (
x
, 
block
, 64);

285 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S11
, 0xd76aa478);

286 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 1], 
S12
, 0xe8c7b756);

287 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S13
, 0x242070db);

288 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 3], 
S14
, 0xc1bdceee);

289 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S11
, 0xf57c0faf);

290 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 5], 
S12
, 0x4787c62a);

291 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S13
, 0xa8304613);

292 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 7], 
S14
, 0xfd469501);

293 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S11
, 0x698098d8);

294 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 9], 
S12
, 0x8b44f7af);

295 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S13
, 0xffff5bb1);

296 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[11], 
S14
, 0x895cd7be);

297 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S11
, 0x6b901122);

298 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[13], 
S12
, 0xfd987193);

299 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S13
, 0xa679438e);

300 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[15], 
S14
, 0x49b40821);

303 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S21
, 0xf61e2562);

304 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 6], 
S22
, 0xc040b340);

305 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S23
, 0x265e5a51);

306 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 0], 
S24
, 0xe9b6c7aa);

307 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S21
, 0xd62f105d);

308 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[10], 
S22
, 0x2441453);

309 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S23
, 0xd8a1e681);

310 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 4], 
S24
, 0xe7d3fbc8);

311 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S21
, 0x21e1cde6);

312 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[14], 
S22
, 0xc33707d6);

313 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S23
, 0xf4d50d87);

314 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 8], 
S24
, 0x455a14ed);

315 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S21
, 0xa9e3e905);

316 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 2], 
S22
, 0xfcefa3f8);

317 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S23
, 0x676f02d9);

318 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[12], 
S24
, 0x8d2a4c8a);

321 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S31
, 0xfffa3942);

322 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 8], 
S32
, 0x8771f681);

323 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S33
, 0x6d9d6122);

324 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[14], 
S34
, 0xfde5380c);

325 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S31
, 0xa4beea44);

326 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 4], 
S32
, 0x4bdecfa9);

327 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S33
, 0xf6bb4b60);

328 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[10], 
S34
, 0xbebfbc70);

329 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S31
, 0x289b7ec6);

330 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 0], 
S32
, 0xeaa127fa);

331 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S33
, 0xd4ef3085);

332 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 6], 
S34
, 0x4881d05);

333 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S31
, 0xd9d4d039);

334 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[12], 
S32
, 0xe6db99e5);

335 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S33
, 0x1fa27cf8);

336 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 2], 
S34
, 0xc4ac5665);

339 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S41
, 0xf4292244);

340 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 7], 
S42
, 0x432aff97);

341 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S43
, 0xab9423a7);

342 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 5], 
S44
, 0xfc93a039);

343 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S41
, 0x655b59c3);

344 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 3], 
S42
, 0x8f0ccc92);

345 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S43
, 0xffeff47d);

346 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 1], 
S44
, 0x85845dd1);

347 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S41
, 0x6fa87e4f);

348 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[15], 
S42
, 0xfe2ce6e0);

349 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S43
, 0xa3014314);

350 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[13], 
S44
, 0x4e0811a1);

351 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S41
, 0xf7537e82);

352 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[11], 
S42
, 0xbd3af235);

353 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S43
, 0x2ad7d2bb);

354 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 9], 
S44
, 0xeb86d391);

357 
°©e
[0] +
a
;

358 
°©e
[1] +
b
;

359 
°©e
[2] +
c
;

360 
°©e
[3] +
d
;

364 
	`mem£t
((
POINTER
)
x
, 0,  (x));

365 
	}
}

370 
	$Encode
 (

371 *
ouçut
,

372 
UINT4
 *
öput
,

373 
Àn
)

375 
i
, 
j
;

377 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4) {

378 
ouçut
[
j
] = ()(
öput
[
i
] & 0xff);

379 
ouçut
[
j
+1] = ()((
öput
[
i
] >> 8) & 0xff);

380 
ouçut
[
j
+2] = ()((
öput
[
i
] >> 16) & 0xff);

381 
ouçut
[
j
+3] = ()((
öput
[
i
] >> 24) & 0xff);

383 
	}
}

389 
	$Decode
 (

390 
UINT4
 *
ouçut
,

391 c⁄° *
öput
,

392 
Àn
)

394 
i
, 
j
;

396 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4)

397 
ouçut
[
i
] = ((
UINT4
)
öput
[
j
]) | (((UINT4)input[j+1]) << 8) |

398 (((
UINT4
)
öput
[
j
+2]) << 16) | (((UINT4)input[j+3]) << 24);

399 
	}
}

401 
uöt32_t
 
	$hashkô_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

403 
ªsu…s
[16];

404 ()
c⁄ãxt
;

406 
	`md5_sig«tuª
((*)
key
, ()
key_Àngth
, 
ªsu…s
);

408  ((
uöt32_t
Ë(
ªsu…s
[3] & 0xFF) << 24)

409 | ((
uöt32_t
Ë(
ªsu…s
[2] & 0xFF) << 16)

410 | ((
uöt32_t
Ë(
ªsu…s
[1] & 0xFF) << 8)

411 | (
ªsu…s
[0] & 0xFF);

412 
	}
}

	@libhashkit/murmur.cc

55 
	~<libhashkô/comm⁄.h
>

57 #ifde‡
HAVE_MURMUR_HASH


59 
uöt32_t
 
	$hashkô_murmur
(c⁄° *
key
, 
size_t
 
Àngth
, *
c⁄ãxt
)

66 c⁄° 
m
= 0x5bd1e995;

67 c⁄° 
uöt32_t
 
£ed
(0xdódbì‡* (uöt32_t)
Àngth
);

68 c⁄° 
r
= 24;

73 
uöt32_t
 
h

£ed
 ^ (uöt32_t)
Àngth
;

77 c⁄° * 
d©a
(c⁄° *)
key
;

78 ()
c⁄ãxt
;

80 
Àngth
 >= 4)

82 
k
 = *(*)
d©a
;

84 
k
 *
m
;

85 
k
 ^k >> 
r
;

86 
k
 *
m
;

88 
h
 *
m
;

89 
h
 ^
k
;

91 
d©a
 += 4;

92 
Àngth
 -= 4;

97 
Àngth
)

99 3: 
h
 ^((
uöt32_t
)
d©a
[2]) << 16;

100 2: 
h
 ^((
uöt32_t
)
d©a
[1]) << 8;

101 1: 
h
 ^
d©a
[0];

102 
h
 *
m
;

111 
h
 ^= h >> 13;

112 
h
 *
m
;

113 
h
 ^= h >> 15;

115  
h
;

116 
	}
}

119 
uöt32_t
 
	$hashkô_murmur
(c⁄° *, 
size_t
 , *)

122 
	}
}

	@libhashkit/murmur3.cc

10 
	~"libhashkô/hashkôc⁄.h
"

12 
	~"libhashkô/murmur3.h
"

17 #ifde‡
__GNUC__


18 
	#FORCE_INLINE
 
	`__©åibuã__
((
Æways_ölöe
)Ë
ölöe


	)

20 
	#FORCE_INLINE
 
ölöe


	)

23 
FORCE_INLINE
 
uöt32_t
 
	$rŸl32
 ( 
uöt32_t
 
x
, 
öt8_t
 
r
 )

25  (
x
 << 
r
) | (x >> (32 -Ñ));

26 
	}
}

28 
FORCE_INLINE
 
uöt64_t
 
	$rŸl64
 ( 
uöt64_t
 
x
, 
öt8_t
 
r
 )

30  (
x
 << 
r
) | (x >> (64 -Ñ));

31 
	}
}

33 
	#ROTL32
(
x
,
y
Ë
	`rŸl32
(x,y)

	)

34 
	#ROTL64
(
x
,
y
Ë
	`rŸl64
(x,y)

	)

36 
	#BIG_CONSTANT
(
x
Ë(x##
LLU
)

	)

42 
	#gëblock
(
p
, 
i
Ë’[i])

	)

47 
FORCE_INLINE
 
uöt32_t
 
	$fmix32
 ( 
uöt32_t
 
h
 )

49 
h
 ^= h >> 16;

50 
h
 *= 0x85ebca6b;

51 
h
 ^= h >> 13;

52 
h
 *= 0xc2b2ae35;

53 
h
 ^= h >> 16;

55  
h
;

56 
	}
}

60 
FORCE_INLINE
 
uöt64_t
 
	$fmix64
 ( 
uöt64_t
 
k
 )

62 
k
 ^= k >> 33;

63 
k
 *
	`BIG_CONSTANT
(0xff51afd7ed558ccd);

64 
k
 ^= k >> 33;

65 
k
 *
	`BIG_CONSTANT
(0xc4ceb9fe1a85ec53);

66 
k
 ^= k >> 33;

68  
k
;

69 
	}
}

73 
	$MurmurHash3_x86_32
 ( c⁄° * 
key
, 
Àn
,

74 
uöt32_t
 
£ed
, * 
out
 )

76 c⁄° 
uöt8_t
 * 
d©a
 = (c⁄° uöt8_t*)
key
;

77 c⁄° 
nblocks
 = 
Àn
 / 4;

78 
i
;

80 
uöt32_t
 
h1
 = 
£ed
;

82 
uöt32_t
 
c1
 = 0xcc9e2d51;

83 
uöt32_t
 
c2
 = 0x1b873593;

88 c⁄° 
uöt32_t
 * 
blocks
 = (c⁄° uöt32_à*)(
d©a
 + 
nblocks
*4);

90 
i
 = -
nblocks
; i; i++)

92 
uöt32_t
 
k1
 = 
	`gëblock
(
blocks
,
i
);

94 
k1
 *
c1
;

95 
k1
 = 
	`ROTL32
(k1,15);

96 
k1
 *
c2
;

98 
h1
 ^
k1
;

99 
h1
 = 
	`ROTL32
(h1,13);

100 
h1
 = h1*5+0xe6546b64;

106 c⁄° 
uöt8_t
 * 
èû
 = (c⁄° uöt8_t*)(
d©a
 + 
nblocks
*4);

108 
uöt32_t
 
k1
 = 0;

110 
Àn
 & 3)

112 3: 
k1
 ^
èû
[2] << 16;

113 2: 
k1
 ^
èû
[1] << 8;

114 1: 
k1
 ^
èû
[0];

115 
k1
 *
c1
; k1 = 
	`ROTL32
(k1,15); k1 *
c2
; 
h1
 ^= k1;

121 
h1
 ^
Àn
;

123 
h1
 = 
	`fmix32
(h1);

125 *(
uöt32_t
*)
out
 = 
h1
;

126 
	}
}

130 
	$MurmurHash3_x86_128
 ( c⁄° * 
key
, c⁄° 
Àn
,

131 
uöt32_t
 
£ed
, * 
out
 )

133 c⁄° 
uöt8_t
 * 
d©a
 = (c⁄° uöt8_t*)
key
;

134 c⁄° 
nblocks
 = 
Àn
 / 16;

135 
i
;

137 
uöt32_t
 
h1
 = 
£ed
;

138 
uöt32_t
 
h2
 = 
£ed
;

139 
uöt32_t
 
h3
 = 
£ed
;

140 
uöt32_t
 
h4
 = 
£ed
;

142 
uöt32_t
 
c1
 = 0x239b961b;

143 
uöt32_t
 
c2
 = 0xab0e9789;

144 
uöt32_t
 
c3
 = 0x38b34ae5;

145 
uöt32_t
 
c4
 = 0xa1e38b93;

150 c⁄° 
uöt32_t
 * 
blocks
 = (c⁄° uöt32_à*)(
d©a
 + 
nblocks
*16);

152 
i
 = -
nblocks
; i; i++)

154 
uöt32_t
 
k1
 = 
	`gëblock
(
blocks
,
i
*4+0);

155 
uöt32_t
 
k2
 = 
	`gëblock
(
blocks
,
i
*4+1);

156 
uöt32_t
 
k3
 = 
	`gëblock
(
blocks
,
i
*4+2);

157 
uöt32_t
 
k4
 = 
	`gëblock
(
blocks
,
i
*4+3);

159 
k1
 *
c1
; k1 = 
	`ROTL32
(k1,15); k1 *
c2
; 
h1
 ^= k1;

161 
h1
 = 
	`ROTL32
(h1,19); h1 +
h2
; h1 = h1*5+0x561ccd1b;

163 
k2
 *
c2
; k2 = 
	`ROTL32
(k2,16); k2 *
c3
; 
h2
 ^= k2;

165 
h2
 = 
	`ROTL32
(h2,17); h2 +
h3
; h2 = h2*5+0x0bcaa747;

167 
k3
 *
c3
; k3 = 
	`ROTL32
(k3,17); k3 *
c4
; 
h3
 ^= k3;

169 
h3
 = 
	`ROTL32
(h3,15); h3 +
h4
; h3 = h3*5+0x96cd1c35;

171 
k4
 *
c4
; k4 = 
	`ROTL32
(k4,18); k4 *
c1
; 
h4
 ^= k4;

173 
h4
 = 
	`ROTL32
(h4,13); h4 +
h1
; h4 = h4*5+0x32ac3b17;

179 c⁄° 
uöt8_t
 * 
èû
 = (c⁄° uöt8_t*)(
d©a
 + 
nblocks
*16);

181 
uöt32_t
 
k1
 = 0;

182 
uöt32_t
 
k2
 = 0;

183 
uöt32_t
 
k3
 = 0;

184 
uöt32_t
 
k4
 = 0;

186 
Àn
 & 15)

188 15: 
k4
 ^
èû
[14] << 16;

189 14: 
k4
 ^
èû
[13] << 8;

190 13: 
k4
 ^
èû
[12] << 0;

191 
k4
 *
c4
; k4 = 
	`ROTL32
(k4,18); k4 *
c1
; 
h4
 ^= k4;

193 12: 
k3
 ^
èû
[11] << 24;

194 11: 
k3
 ^
èû
[10] << 16;

195 10: 
k3
 ^
èû
[ 9] << 8;

196 9: 
k3
 ^
èû
[ 8] << 0;

197 
k3
 *
c3
; k3 = 
	`ROTL32
(k3,17); k3 *
c4
; 
h3
 ^= k3;

199 8: 
k2
 ^
èû
[ 7] << 24;

200 7: 
k2
 ^
èû
[ 6] << 16;

201 6: 
k2
 ^
èû
[ 5] << 8;

202 5: 
k2
 ^
èû
[ 4] << 0;

203 
k2
 *
c2
; k2 = 
	`ROTL32
(k2,16); k2 *
c3
; 
h2
 ^= k2;

205 4: 
k1
 ^
èû
[ 3] << 24;

206 3: 
k1
 ^
èû
[ 2] << 16;

207 2: 
k1
 ^
èû
[ 1] << 8;

208 1: 
k1
 ^
èû
[ 0] << 0;

209 
k1
 *
c1
; k1 = 
	`ROTL32
(k1,15); k1 *
c2
; 
h1
 ^= k1;

215 
h1
 ^
Àn
; 
h2
 ^Àn; 
h3
 ^Àn; 
h4
 ^=Üen;

217 
h1
 +
h2
; h1 +
h3
; h1 +
h4
;

218 
h2
 +
h1
; 
h3
 +h1; 
h4
 += h1;

220 
h1
 = 
	`fmix32
(h1);

221 
h2
 = 
	`fmix32
(h2);

222 
h3
 = 
	`fmix32
(h3);

223 
h4
 = 
	`fmix32
(h4);

225 
h1
 +
h2
; h1 +
h3
; h1 +
h4
;

226 
h2
 +
h1
; 
h3
 +h1; 
h4
 += h1;

228 ((
uöt32_t
*)
out
)[0] = 
h1
;

229 ((
uöt32_t
*)
out
)[1] = 
h2
;

230 ((
uöt32_t
*)
out
)[2] = 
h3
;

231 ((
uöt32_t
*)
out
)[3] = 
h4
;

232 
	}
}

236 
	$MurmurHash3_x64_128
 ( c⁄° * 
key
, c⁄° 
Àn
,

237 c⁄° 
uöt32_t
 
£ed
, * 
out
 )

239 c⁄° 
uöt8_t
 * 
d©a
 = (c⁄° uöt8_t*)
key
;

240 c⁄° 
nblocks
 = 
Àn
 / 16;

241 
i
;

243 
uöt64_t
 
h1
 = 
£ed
;

244 
uöt64_t
 
h2
 = 
£ed
;

246 
uöt64_t
 
c1
 = 
	`BIG_CONSTANT
(0x87c37b91114253d5);

247 
uöt64_t
 
c2
 = 
	`BIG_CONSTANT
(0x4cf5ad432745937f);

252 c⁄° 
uöt64_t
 * 
blocks
 = (c⁄° uöt64_à*)(
d©a
);

254 
i
 = 0; i < 
nblocks
; i++)

256 
uöt64_t
 
k1
 = 
	`gëblock
(
blocks
,
i
*2+0);

257 
uöt64_t
 
k2
 = 
	`gëblock
(
blocks
,
i
*2+1);

259 
k1
 *
c1
; k1 = 
	`ROTL64
(k1,31); k1 *
c2
; 
h1
 ^= k1;

261 
h1
 = 
	`ROTL64
(h1,27); h1 +
h2
; h1 = h1*5+0x52dce729;

263 
k2
 *
c2
; k2 = 
	`ROTL64
(k2,33); k2 *
c1
; 
h2
 ^= k2;

265 
h2
 = 
	`ROTL64
(h2,31); h2 +
h1
; h2 = h2*5+0x38495ab5;

271 c⁄° 
uöt8_t
 * 
èû
 = (c⁄° uöt8_t*)(
d©a
 + 
nblocks
*16);

273 
uöt64_t
 
k1
 = 0;

274 
uöt64_t
 
k2
 = 0;

276 
Àn
 & 15)

278 15: 
k2
 ^(
uöt64_t
)(
èû
[14]) << 48;

279 14: 
k2
 ^(
uöt64_t
)(
èû
[13]) << 40;

280 13: 
k2
 ^(
uöt64_t
)(
èû
[12]) << 32;

281 12: 
k2
 ^(
uöt64_t
)(
èû
[11]) << 24;

282 11: 
k2
 ^(
uöt64_t
)(
èû
[10]) << 16;

283 10: 
k2
 ^(
uöt64_t
)(
èû
[ 9]) << 8;

284 9: 
k2
 ^(
uöt64_t
)(
èû
[ 8]) << 0;

285 
k2
 *
c2
; k2 = 
	`ROTL64
(k2,33); k2 *
c1
; 
h2
 ^= k2;

287 8: 
k1
 ^(
uöt64_t
)(
èû
[ 7]) << 56;

288 7: 
k1
 ^(
uöt64_t
)(
èû
[ 6]) << 48;

289 6: 
k1
 ^(
uöt64_t
)(
èû
[ 5]) << 40;

290 5: 
k1
 ^(
uöt64_t
)(
èû
[ 4]) << 32;

291 4: 
k1
 ^(
uöt64_t
)(
èû
[ 3]) << 24;

292 3: 
k1
 ^(
uöt64_t
)(
èû
[ 2]) << 16;

293 2: 
k1
 ^(
uöt64_t
)(
èû
[ 1]) << 8;

294 1: 
k1
 ^(
uöt64_t
)(
èû
[ 0]) << 0;

295 
k1
 *
c1
; k1 = 
	`ROTL64
(k1,31); k1 *
c2
; 
h1
 ^= k1;

301 
h1
 ^
Àn
; 
h2
 ^=Üen;

303 
h1
 +
h2
;

304 
h2
 +
h1
;

306 
h1
 = 
	`fmix64
(h1);

307 
h2
 = 
	`fmix64
(h2);

309 
h1
 +
h2
;

310 
h2
 +
h1
;

312 ((
uöt64_t
*)
out
)[0] = 
h1
;

313 ((
uöt64_t
*)
out
)[1] = 
h2
;

314 
	}
}

	@libhashkit/murmur3.h

6 #¥agm®
⁄˚


10 
MurmurHash3_x86_32
 (c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
, *
out
);

12 
MurmurHash3_x86_128
(c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
, *
out
);

14 
MurmurHash3_x64_128
(c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
, *
out
);

	@libhashkit/murmur3_api.cc

38 
	~"libhashkô/comm⁄.h
"

39 
	~"libhashkô/murmur3.h
"

41 
uöt32_t
 
	$hashkô_murmur3
(c⁄° *
key
, 
size_t
 
Àngth
, *)

43 c⁄° 
uöt32_t
 
£ed
(0xdódbì‡* (uöt32_t)
Àngth
);

45 
uöt32_t
 
ªt
;

46 
	`MurmurHash3_x86_32
(
key
, (
Àngth
), 
£ed
, &
ªt
);

48  
ªt
;

49 
	}
}

	@libhashkit/nohsieh.cc

37 
	~<libhashkô/comm⁄.h
>

39 #ifde‡
HAVE_HSIEH_HASH


42 
uöt32_t
 
	$hashkô_hsõh
(c⁄° *, 
size_t
 , *)

45 
	}
}

	@libhashkit/one_at_a_time.cc

44 
	~<libhashkô/comm⁄.h
>

46 
uöt32_t
 
	$hashkô_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

48 c⁄° *
±r

key
;

49 
uöt32_t
 
vÆue
= 0;

50 ()
c⁄ãxt
;

52 
key_Àngth
--)

54 
uöt32_t
 
vÆ
(uöt32_tË*
±r
++;

55 
vÆue
 +
vÆ
;

56 
vÆue
 += (value << 10);

57 
vÆue
 ^= (value >> 6);

59 
vÆue
 += (value << 3);

60 
vÆue
 ^= (value >> 11);

61 
vÆue
 += (value << 15);

63  
vÆue
;

64 
	}
}

	@libhashkit/rijndael.cc

63 
	~<as£π.h
>

64 
	~<°dlib.h
>

66 
	~"libhashkô/rijnd´l.hµ
"

82 c⁄° 
u32
 
	gTe0
[256] = {

148 c⁄° 
u32
 
	gTe1
[256] = {

214 c⁄° 
u32
 
	gTe2
[256] = {

280 c⁄° 
u32
 
	gTe3
[256] = {

347 c⁄° 
u32
 
	gTe4
[256] = {

413 c⁄° 
u32
 
	gTd0
[256] = {

479 c⁄° 
u32
 
	gTd1
[256] = {

545 c⁄° 
u32
 
	gTd2
[256] = {

612 c⁄° 
u32
 
	gTd3
[256] = {

678 c⁄° 
u32
 
	gTd4
[256] = {

744 c⁄° 
u32
 
	grc⁄
[] = {

750 
	#SWAP
(
x
Ë(
	`_ÃŸl
(x, 8Ë& 0x00ff00f‡| 
	`_ÃŸr
(x, 8Ë& 0xff00ff00)

	)

752 #ifde‡
_MSC_VER


753 
	#GETU32
(
p
Ë
	`SWAP
(*((
u32
 *)’)))

	)

754 
	#PUTU32
(
˘
, 
°
Ë{ *((
u32
 *)(˘)Ë
	`SWAP
((°)); }

	)

756 
	#GETU32
(
±
Ë(((
u32
)’t)[0] << 24Ë^ ((u32)’t)[1] << 16Ë^ ((u32)’t)[2] << 8Ë^ ((u32)’t)[3]))

	)

757 
	#PUTU32
(
˘
, 
°
Ë{ (˘)[0] = (
u8
)((°Ë>> 24); (˘)[1] = (u8)((°Ë>> 16); (˘)[2] = (u8)((°Ë>> 8); (˘)[3] = (u8)(°); }

	)

765 
	$rijnd´lKeySëupEnc
(
u32
 
rk
[ ], c⁄° 
u8
 
cùhîKey
[], 
keyBôs
) {

766 
i
 = 0;

767 
u32
 
ãmp
;

769 
rk
[0] = 
	`GETU32
(
cùhîKey
 );

770 
rk
[1] = 
	`GETU32
(
cùhîKey
 + 4);

771 
rk
[2] = 
	`GETU32
(
cùhîKey
 + 8);

772 
rk
[3] = 
	`GETU32
(
cùhîKey
 + 12);

773 i‡(
keyBôs
 == 128) {

775 
ãmp
 = 
rk
[3];

776 
rk
[4] =Ñk[0] ^

777 (
Te4
[(
ãmp
 >> 16) & 0xff] & 0xff000000) ^

778 (
Te4
[(
ãmp
 >> 8) & 0xff] & 0x00ff0000) ^

779 (
Te4
[(
ãmp
 ) & 0xff] & 0x0000ff00) ^

780 (
Te4
[(
ãmp
 >> 24) ] & 0x000000ff) ^

781 
rc⁄
[
i
];

782 
rk
[5] =Ñk[1] ^Ñk[4];

783 
rk
[6] =Ñk[2] ^Ñk[5];

784 
rk
[7] =Ñk[3] ^Ñk[6];

785 i‡(++
i
 == 10) {

788 
rk
 += 4;

791 
rk
[4] = 
	`GETU32
(
cùhîKey
 + 16);

792 
rk
[5] = 
	`GETU32
(
cùhîKey
 + 20);

793 i‡(
keyBôs
 == 192) {

795 
ãmp
 = 
rk
[ 5];

796 
rk
[ 6] =Ñk[ 0] ^

797 (
Te4
[(
ãmp
 >> 16) & 0xff] & 0xff000000) ^

798 (
Te4
[(
ãmp
 >> 8) & 0xff] & 0x00ff0000) ^

799 (
Te4
[(
ãmp
 ) & 0xff] & 0x0000ff00) ^

800 (
Te4
[(
ãmp
 >> 24) ] & 0x000000ff) ^

801 
rc⁄
[
i
];

802 
rk
[ 7] =Ñk[ 1] ^Ñk[ 6];

803 
rk
[ 8] =Ñk[ 2] ^Ñk[ 7];

804 
rk
[ 9] =Ñk[ 3] ^Ñk[ 8];

805 i‡(++
i
 == 8) {

808 
rk
[10] =Ñk[ 4] ^Ñk[ 9];

809 
rk
[11] =Ñk[ 5] ^Ñk[10];

810 
rk
 += 6;

813 
rk
[6] = 
	`GETU32
(
cùhîKey
 + 24);

814 
rk
[7] = 
	`GETU32
(
cùhîKey
 + 28);

815 i‡(
keyBôs
 == 256) {

817 
ãmp
 = 
rk
[ 7];

818 
rk
[ 8] =Ñk[ 0] ^

819 (
Te4
[(
ãmp
 >> 16) & 0xff] & 0xff000000) ^

820 (
Te4
[(
ãmp
 >> 8) & 0xff] & 0x00ff0000) ^

821 (
Te4
[(
ãmp
 ) & 0xff] & 0x0000ff00) ^

822 (
Te4
[(
ãmp
 >> 24) ] & 0x000000ff) ^

823 
rc⁄
[
i
];

824 
rk
[ 9] =Ñk[ 1] ^Ñk[ 8];

825 
rk
[10] =Ñk[ 2] ^Ñk[ 9];

826 
rk
[11] =Ñk[ 3] ^Ñk[10];

827 i‡(++
i
 == 7) {

830 
ãmp
 = 
rk
[11];

831 
rk
[12] =Ñk[ 4] ^

832 (
Te4
[(
ãmp
 >> 24) ] & 0xff000000) ^

833 (
Te4
[(
ãmp
 >> 16) & 0xff] & 0x00ff0000) ^

834 (
Te4
[(
ãmp
 >> 8) & 0xff] & 0x0000ff00) ^

835 (
Te4
[(
ãmp
 ) & 0xff] & 0x000000ff);

836 
rk
[13] =Ñk[ 5] ^Ñk[12];

837 
rk
[14] =Ñk[ 6] ^Ñk[13];

838 
rk
[15] =Ñk[ 7] ^Ñk[14];

840 
rk
 += 8;

844 
	}
}

851 
	$rijnd´lKeySëupDec
(
u32
 
rk
[ ], c⁄° 
u8
 
cùhîKey
[], 
keyBôs
) {

852 
Nr
, 
i
, 
j
;

853 
u32
 
ãmp
;

856 
Nr
 = 
	`rijnd´lKeySëupEnc
(
rk
, 
cùhîKey
, 
keyBôs
);

858 
i
 = 0, 
j
 = 4*
Nr
; i < j; i += 4, j -= 4) {

859 
ãmp
 = 
rk
[
i
 ];Ñk[ò] =Ñk[
j
 ];Ñk[j ] =Åemp;

860 
ãmp
 = 
rk
[
i
 + 1];Ñk[ò+ 1] =Ñk[
j
 + 1];Ñk[j + 1] =Åemp;

861 
ãmp
 = 
rk
[
i
 + 2];Ñk[ò+ 2] =Ñk[
j
 + 2];Ñk[j + 2] =Åemp;

862 
ãmp
 = 
rk
[
i
 + 3];Ñk[ò+ 3] =Ñk[
j
 + 3];Ñk[j + 3] =Åemp;

865 
i
 = 1; i < 
Nr
; i++) {

866 
rk
 += 4;

867 
rk
[0] =

868 
Td0
[
Te4
[(
rk
[0] >> 24) ] & 0xff] ^

869 
Td1
[
Te4
[(
rk
[0] >> 16) & 0xff] & 0xff] ^

870 
Td2
[
Te4
[(
rk
[0] >> 8) & 0xff] & 0xff] ^

871 
Td3
[
Te4
[(
rk
[0] ) & 0xff] & 0xff];

872 
rk
[1] =

873 
Td0
[
Te4
[(
rk
[1] >> 24) ] & 0xff] ^

874 
Td1
[
Te4
[(
rk
[1] >> 16) & 0xff] & 0xff] ^

875 
Td2
[
Te4
[(
rk
[1] >> 8) & 0xff] & 0xff] ^

876 
Td3
[
Te4
[(
rk
[1] ) & 0xff] & 0xff];

877 
rk
[2] =

878 
Td0
[
Te4
[(
rk
[2] >> 24) ] & 0xff] ^

879 
Td1
[
Te4
[(
rk
[2] >> 16) & 0xff] & 0xff] ^

880 
Td2
[
Te4
[(
rk
[2] >> 8) & 0xff] & 0xff] ^

881 
Td3
[
Te4
[(
rk
[2] ) & 0xff] & 0xff];

882 
rk
[3] =

883 
Td0
[
Te4
[(
rk
[3] >> 24) ] & 0xff] ^

884 
Td1
[
Te4
[(
rk
[3] >> 16) & 0xff] & 0xff] ^

885 
Td2
[
Te4
[(
rk
[3] >> 8) & 0xff] & 0xff] ^

886 
Td3
[
Te4
[(
rk
[3] ) & 0xff] & 0xff];

888  
Nr
;

889 
	}
}

891 
	$rijnd´lEn¸y±
(c⁄° 
u32
 
rk
[ ], 
Nr
, c⁄° 
u8
 
±
[16], u8 
˘
[16]) {

892 
u32
 
s0
, 
s1
, 
s2
, 
s3
, 
t0
, 
t1
, 
t2
, 
t3
;

893 #i‚de‡
FULL_UNROLL


894 
r
;

901 
s0
 = 
	`GETU32
(
±
 ) ^ 
rk
[0];

902 
s1
 = 
	`GETU32
(
±
 + 4Ë^ 
rk
[1];

903 
s2
 = 
	`GETU32
(
±
 + 8Ë^ 
rk
[2];

904 
s3
 = 
	`GETU32
(
±
 + 12Ë^ 
rk
[3];

905 #ifde‡
FULL_UNROLL


907 
t0
 = 
Te0
[
s0
 >> 24] ^ 
Te1
[(
s1
 >> 16Ë& 0xff] ^ 
Te2
[(
s2
 >> 8Ë& 0xff] ^ 
Te3
[
s3
 & 0xff] ^ 
rk
[ 4];

908 
t1
 = 
Te0
[
s1
 >> 24] ^ 
Te1
[(
s2
 >> 16Ë& 0xff] ^ 
Te2
[(
s3
 >> 8Ë& 0xff] ^ 
Te3
[
s0
 & 0xff] ^ 
rk
[ 5];

909 
t2
 = 
Te0
[
s2
 >> 24] ^ 
Te1
[(
s3
 >> 16Ë& 0xff] ^ 
Te2
[(
s0
 >> 8Ë& 0xff] ^ 
Te3
[
s1
 & 0xff] ^ 
rk
[ 6];

910 
t3
 = 
Te0
[
s3
 >> 24] ^ 
Te1
[(
s0
 >> 16Ë& 0xff] ^ 
Te2
[(
s1
 >> 8Ë& 0xff] ^ 
Te3
[
s2
 & 0xff] ^ 
rk
[ 7];

912 
s0
 = 
Te0
[
t0
 >> 24] ^ 
Te1
[(
t1
 >> 16Ë& 0xff] ^ 
Te2
[(
t2
 >> 8Ë& 0xff] ^ 
Te3
[
t3
 & 0xff] ^ 
rk
[ 8];

913 
s1
 = 
Te0
[
t1
 >> 24] ^ 
Te1
[(
t2
 >> 16Ë& 0xff] ^ 
Te2
[(
t3
 >> 8Ë& 0xff] ^ 
Te3
[
t0
 & 0xff] ^ 
rk
[ 9];

914 
s2
 = 
Te0
[
t2
 >> 24] ^ 
Te1
[(
t3
 >> 16Ë& 0xff] ^ 
Te2
[(
t0
 >> 8Ë& 0xff] ^ 
Te3
[
t1
 & 0xff] ^ 
rk
[10];

915 
s3
 = 
Te0
[
t3
 >> 24] ^ 
Te1
[(
t0
 >> 16Ë& 0xff] ^ 
Te2
[(
t1
 >> 8Ë& 0xff] ^ 
Te3
[
t2
 & 0xff] ^ 
rk
[11];

917 
t0
 = 
Te0
[
s0
 >> 24] ^ 
Te1
[(
s1
 >> 16Ë& 0xff] ^ 
Te2
[(
s2
 >> 8Ë& 0xff] ^ 
Te3
[
s3
 & 0xff] ^ 
rk
[12];

918 
t1
 = 
Te0
[
s1
 >> 24] ^ 
Te1
[(
s2
 >> 16Ë& 0xff] ^ 
Te2
[(
s3
 >> 8Ë& 0xff] ^ 
Te3
[
s0
 & 0xff] ^ 
rk
[13];

919 
t2
 = 
Te0
[
s2
 >> 24] ^ 
Te1
[(
s3
 >> 16Ë& 0xff] ^ 
Te2
[(
s0
 >> 8Ë& 0xff] ^ 
Te3
[
s1
 & 0xff] ^ 
rk
[14];

920 
t3
 = 
Te0
[
s3
 >> 24] ^ 
Te1
[(
s0
 >> 16Ë& 0xff] ^ 
Te2
[(
s1
 >> 8Ë& 0xff] ^ 
Te3
[
s2
 & 0xff] ^ 
rk
[15];

922 
s0
 = 
Te0
[
t0
 >> 24] ^ 
Te1
[(
t1
 >> 16Ë& 0xff] ^ 
Te2
[(
t2
 >> 8Ë& 0xff] ^ 
Te3
[
t3
 & 0xff] ^ 
rk
[16];

923 
s1
 = 
Te0
[
t1
 >> 24] ^ 
Te1
[(
t2
 >> 16Ë& 0xff] ^ 
Te2
[(
t3
 >> 8Ë& 0xff] ^ 
Te3
[
t0
 & 0xff] ^ 
rk
[17];

924 
s2
 = 
Te0
[
t2
 >> 24] ^ 
Te1
[(
t3
 >> 16Ë& 0xff] ^ 
Te2
[(
t0
 >> 8Ë& 0xff] ^ 
Te3
[
t1
 & 0xff] ^ 
rk
[18];

925 
s3
 = 
Te0
[
t3
 >> 24] ^ 
Te1
[(
t0
 >> 16Ë& 0xff] ^ 
Te2
[(
t1
 >> 8Ë& 0xff] ^ 
Te3
[
t2
 & 0xff] ^ 
rk
[19];

927 
t0
 = 
Te0
[
s0
 >> 24] ^ 
Te1
[(
s1
 >> 16Ë& 0xff] ^ 
Te2
[(
s2
 >> 8Ë& 0xff] ^ 
Te3
[
s3
 & 0xff] ^ 
rk
[20];

928 
t1
 = 
Te0
[
s1
 >> 24] ^ 
Te1
[(
s2
 >> 16Ë& 0xff] ^ 
Te2
[(
s3
 >> 8Ë& 0xff] ^ 
Te3
[
s0
 & 0xff] ^ 
rk
[21];

929 
t2
 = 
Te0
[
s2
 >> 24] ^ 
Te1
[(
s3
 >> 16Ë& 0xff] ^ 
Te2
[(
s0
 >> 8Ë& 0xff] ^ 
Te3
[
s1
 & 0xff] ^ 
rk
[22];

930 
t3
 = 
Te0
[
s3
 >> 24] ^ 
Te1
[(
s0
 >> 16Ë& 0xff] ^ 
Te2
[(
s1
 >> 8Ë& 0xff] ^ 
Te3
[
s2
 & 0xff] ^ 
rk
[23];

932 
s0
 = 
Te0
[
t0
 >> 24] ^ 
Te1
[(
t1
 >> 16Ë& 0xff] ^ 
Te2
[(
t2
 >> 8Ë& 0xff] ^ 
Te3
[
t3
 & 0xff] ^ 
rk
[24];

933 
s1
 = 
Te0
[
t1
 >> 24] ^ 
Te1
[(
t2
 >> 16Ë& 0xff] ^ 
Te2
[(
t3
 >> 8Ë& 0xff] ^ 
Te3
[
t0
 & 0xff] ^ 
rk
[25];

934 
s2
 = 
Te0
[
t2
 >> 24] ^ 
Te1
[(
t3
 >> 16Ë& 0xff] ^ 
Te2
[(
t0
 >> 8Ë& 0xff] ^ 
Te3
[
t1
 & 0xff] ^ 
rk
[26];

935 
s3
 = 
Te0
[
t3
 >> 24] ^ 
Te1
[(
t0
 >> 16Ë& 0xff] ^ 
Te2
[(
t1
 >> 8Ë& 0xff] ^ 
Te3
[
t2
 & 0xff] ^ 
rk
[27];

937 
t0
 = 
Te0
[
s0
 >> 24] ^ 
Te1
[(
s1
 >> 16Ë& 0xff] ^ 
Te2
[(
s2
 >> 8Ë& 0xff] ^ 
Te3
[
s3
 & 0xff] ^ 
rk
[28];

938 
t1
 = 
Te0
[
s1
 >> 24] ^ 
Te1
[(
s2
 >> 16Ë& 0xff] ^ 
Te2
[(
s3
 >> 8Ë& 0xff] ^ 
Te3
[
s0
 & 0xff] ^ 
rk
[29];

939 
t2
 = 
Te0
[
s2
 >> 24] ^ 
Te1
[(
s3
 >> 16Ë& 0xff] ^ 
Te2
[(
s0
 >> 8Ë& 0xff] ^ 
Te3
[
s1
 & 0xff] ^ 
rk
[30];

940 
t3
 = 
Te0
[
s3
 >> 24] ^ 
Te1
[(
s0
 >> 16Ë& 0xff] ^ 
Te2
[(
s1
 >> 8Ë& 0xff] ^ 
Te3
[
s2
 & 0xff] ^ 
rk
[31];

942 
s0
 = 
Te0
[
t0
 >> 24] ^ 
Te1
[(
t1
 >> 16Ë& 0xff] ^ 
Te2
[(
t2
 >> 8Ë& 0xff] ^ 
Te3
[
t3
 & 0xff] ^ 
rk
[32];

943 
s1
 = 
Te0
[
t1
 >> 24] ^ 
Te1
[(
t2
 >> 16Ë& 0xff] ^ 
Te2
[(
t3
 >> 8Ë& 0xff] ^ 
Te3
[
t0
 & 0xff] ^ 
rk
[33];

944 
s2
 = 
Te0
[
t2
 >> 24] ^ 
Te1
[(
t3
 >> 16Ë& 0xff] ^ 
Te2
[(
t0
 >> 8Ë& 0xff] ^ 
Te3
[
t1
 & 0xff] ^ 
rk
[34];

945 
s3
 = 
Te0
[
t3
 >> 24] ^ 
Te1
[(
t0
 >> 16Ë& 0xff] ^ 
Te2
[(
t1
 >> 8Ë& 0xff] ^ 
Te3
[
t2
 & 0xff] ^ 
rk
[35];

947 
t0
 = 
Te0
[
s0
 >> 24] ^ 
Te1
[(
s1
 >> 16Ë& 0xff] ^ 
Te2
[(
s2
 >> 8Ë& 0xff] ^ 
Te3
[
s3
 & 0xff] ^ 
rk
[36];

948 
t1
 = 
Te0
[
s1
 >> 24] ^ 
Te1
[(
s2
 >> 16Ë& 0xff] ^ 
Te2
[(
s3
 >> 8Ë& 0xff] ^ 
Te3
[
s0
 & 0xff] ^ 
rk
[37];

949 
t2
 = 
Te0
[
s2
 >> 24] ^ 
Te1
[(
s3
 >> 16Ë& 0xff] ^ 
Te2
[(
s0
 >> 8Ë& 0xff] ^ 
Te3
[
s1
 & 0xff] ^ 
rk
[38];

950 
t3
 = 
Te0
[
s3
 >> 24] ^ 
Te1
[(
s0
 >> 16Ë& 0xff] ^ 
Te2
[(
s1
 >> 8Ë& 0xff] ^ 
Te3
[
s2
 & 0xff] ^ 
rk
[39];

951 i‡(
Nr
 > 10) {

953 
s0
 = 
Te0
[
t0
 >> 24] ^ 
Te1
[(
t1
 >> 16Ë& 0xff] ^ 
Te2
[(
t2
 >> 8Ë& 0xff] ^ 
Te3
[
t3
 & 0xff] ^ 
rk
[40];

954 
s1
 = 
Te0
[
t1
 >> 24] ^ 
Te1
[(
t2
 >> 16Ë& 0xff] ^ 
Te2
[(
t3
 >> 8Ë& 0xff] ^ 
Te3
[
t0
 & 0xff] ^ 
rk
[41];

955 
s2
 = 
Te0
[
t2
 >> 24] ^ 
Te1
[(
t3
 >> 16Ë& 0xff] ^ 
Te2
[(
t0
 >> 8Ë& 0xff] ^ 
Te3
[
t1
 & 0xff] ^ 
rk
[42];

956 
s3
 = 
Te0
[
t3
 >> 24] ^ 
Te1
[(
t0
 >> 16Ë& 0xff] ^ 
Te2
[(
t1
 >> 8Ë& 0xff] ^ 
Te3
[
t2
 & 0xff] ^ 
rk
[43];

958 
t0
 = 
Te0
[
s0
 >> 24] ^ 
Te1
[(
s1
 >> 16Ë& 0xff] ^ 
Te2
[(
s2
 >> 8Ë& 0xff] ^ 
Te3
[
s3
 & 0xff] ^ 
rk
[44];

959 
t1
 = 
Te0
[
s1
 >> 24] ^ 
Te1
[(
s2
 >> 16Ë& 0xff] ^ 
Te2
[(
s3
 >> 8Ë& 0xff] ^ 
Te3
[
s0
 & 0xff] ^ 
rk
[45];

960 
t2
 = 
Te0
[
s2
 >> 24] ^ 
Te1
[(
s3
 >> 16Ë& 0xff] ^ 
Te2
[(
s0
 >> 8Ë& 0xff] ^ 
Te3
[
s1
 & 0xff] ^ 
rk
[46];

961 
t3
 = 
Te0
[
s3
 >> 24] ^ 
Te1
[(
s0
 >> 16Ë& 0xff] ^ 
Te2
[(
s1
 >> 8Ë& 0xff] ^ 
Te3
[
s2
 & 0xff] ^ 
rk
[47];

962 i‡(
Nr
 > 12) {

964 
s0
 = 
Te0
[
t0
 >> 24] ^ 
Te1
[(
t1
 >> 16Ë& 0xff] ^ 
Te2
[(
t2
 >> 8Ë& 0xff] ^ 
Te3
[
t3
 & 0xff] ^ 
rk
[48];

965 
s1
 = 
Te0
[
t1
 >> 24] ^ 
Te1
[(
t2
 >> 16Ë& 0xff] ^ 
Te2
[(
t3
 >> 8Ë& 0xff] ^ 
Te3
[
t0
 & 0xff] ^ 
rk
[49];

966 
s2
 = 
Te0
[
t2
 >> 24] ^ 
Te1
[(
t3
 >> 16Ë& 0xff] ^ 
Te2
[(
t0
 >> 8Ë& 0xff] ^ 
Te3
[
t1
 & 0xff] ^ 
rk
[50];

967 
s3
 = 
Te0
[
t3
 >> 24] ^ 
Te1
[(
t0
 >> 16Ë& 0xff] ^ 
Te2
[(
t1
 >> 8Ë& 0xff] ^ 
Te3
[
t2
 & 0xff] ^ 
rk
[51];

969 
t0
 = 
Te0
[
s0
 >> 24] ^ 
Te1
[(
s1
 >> 16Ë& 0xff] ^ 
Te2
[(
s2
 >> 8Ë& 0xff] ^ 
Te3
[
s3
 & 0xff] ^ 
rk
[52];

970 
t1
 = 
Te0
[
s1
 >> 24] ^ 
Te1
[(
s2
 >> 16Ë& 0xff] ^ 
Te2
[(
s3
 >> 8Ë& 0xff] ^ 
Te3
[
s0
 & 0xff] ^ 
rk
[53];

971 
t2
 = 
Te0
[
s2
 >> 24] ^ 
Te1
[(
s3
 >> 16Ë& 0xff] ^ 
Te2
[(
s0
 >> 8Ë& 0xff] ^ 
Te3
[
s1
 & 0xff] ^ 
rk
[54];

972 
t3
 = 
Te0
[
s3
 >> 24] ^ 
Te1
[(
s0
 >> 16Ë& 0xff] ^ 
Te2
[(
s1
 >> 8Ë& 0xff] ^ 
Te3
[
s2
 & 0xff] ^ 
rk
[55];

975 
rk
 +
Nr
 << 2;

980 
r
 = 
Nr
 >> 1;

982 
t0
 =

983 
Te0
[(
s0
 >> 24) ] ^

984 
Te1
[(
s1
 >> 16) & 0xff] ^

985 
Te2
[(
s2
 >> 8) & 0xff] ^

986 
Te3
[(
s3
 ) & 0xff] ^

987 
rk
[4];

988 
t1
 =

989 
Te0
[(
s1
 >> 24) ] ^

990 
Te1
[(
s2
 >> 16) & 0xff] ^

991 
Te2
[(
s3
 >> 8) & 0xff] ^

992 
Te3
[(
s0
 ) & 0xff] ^

993 
rk
[5];

994 
t2
 =

995 
Te0
[(
s2
 >> 24) ] ^

996 
Te1
[(
s3
 >> 16) & 0xff] ^

997 
Te2
[(
s0
 >> 8) & 0xff] ^

998 
Te3
[(
s1
 ) & 0xff] ^

999 
rk
[6];

1000 
t3
 =

1001 
Te0
[(
s3
 >> 24) ] ^

1002 
Te1
[(
s0
 >> 16) & 0xff] ^

1003 
Te2
[(
s1
 >> 8) & 0xff] ^

1004 
Te3
[(
s2
 ) & 0xff] ^

1005 
rk
[7];

1007 
rk
 += 8;

1008 i‡(--
r
 == 0) {

1012 
s0
 =

1013 
Te0
[(
t0
 >> 24) ] ^

1014 
Te1
[(
t1
 >> 16) & 0xff] ^

1015 
Te2
[(
t2
 >> 8) & 0xff] ^

1016 
Te3
[(
t3
 ) & 0xff] ^

1017 
rk
[0];

1018 
s1
 =

1019 
Te0
[(
t1
 >> 24) ] ^

1020 
Te1
[(
t2
 >> 16) & 0xff] ^

1021 
Te2
[(
t3
 >> 8) & 0xff] ^

1022 
Te3
[(
t0
 ) & 0xff] ^

1023 
rk
[1];

1024 
s2
 =

1025 
Te0
[(
t2
 >> 24) ] ^

1026 
Te1
[(
t3
 >> 16) & 0xff] ^

1027 
Te2
[(
t0
 >> 8) & 0xff] ^

1028 
Te3
[(
t1
 ) & 0xff] ^

1029 
rk
[2];

1030 
s3
 =

1031 
Te0
[(
t3
 >> 24) ] ^

1032 
Te1
[(
t0
 >> 16) & 0xff] ^

1033 
Te2
[(
t1
 >> 8) & 0xff] ^

1034 
Te3
[(
t2
 ) & 0xff] ^

1035 
rk
[3];

1042 
s0
 =

1043 (
Te4
[(
t0
 >> 24) ] & 0xff000000) ^

1044 (
Te4
[(
t1
 >> 16) & 0xff] & 0x00ff0000) ^

1045 (
Te4
[(
t2
 >> 8) & 0xff] & 0x0000ff00) ^

1046 (
Te4
[(
t3
 ) & 0xff] & 0x000000ff) ^

1047 
rk
[0];

1048 
	`PUTU32
(
˘
 , 
s0
);

1049 
s1
 =

1050 (
Te4
[(
t1
 >> 24) ] & 0xff000000) ^

1051 (
Te4
[(
t2
 >> 16) & 0xff] & 0x00ff0000) ^

1052 (
Te4
[(
t3
 >> 8) & 0xff] & 0x0000ff00) ^

1053 (
Te4
[(
t0
 ) & 0xff] & 0x000000ff) ^

1054 
rk
[1];

1055 
	`PUTU32
(
˘
 + 4, 
s1
);

1056 
s2
 =

1057 (
Te4
[(
t2
 >> 24) ] & 0xff000000) ^

1058 (
Te4
[(
t3
 >> 16) & 0xff] & 0x00ff0000) ^

1059 (
Te4
[(
t0
 >> 8) & 0xff] & 0x0000ff00) ^

1060 (
Te4
[(
t1
 ) & 0xff] & 0x000000ff) ^

1061 
rk
[2];

1062 
	`PUTU32
(
˘
 + 8, 
s2
);

1063 
s3
 =

1064 (
Te4
[(
t3
 >> 24) ] & 0xff000000) ^

1065 (
Te4
[(
t0
 >> 16) & 0xff] & 0x00ff0000) ^

1066 (
Te4
[(
t1
 >> 8) & 0xff] & 0x0000ff00) ^

1067 (
Te4
[(
t2
 ) & 0xff] & 0x000000ff) ^

1068 
rk
[3];

1069 
	`PUTU32
(
˘
 + 12, 
s3
);

1070 
	}
}

1072 
	$rijnd´lDe¸y±
(c⁄° 
u32
 
rk
[ ], 
Nr
, c⁄° 
u8
 
˘
[16], u8 
±
[16]) {

1073 
u32
 
s0
, 
s1
, 
s2
, 
s3
, 
t0
, 
t1
, 
t2
, 
t3
;

1074 #i‚de‡
FULL_UNROLL


1075 
r
;

1082 
s0
 = 
	`GETU32
(
˘
 ) ^ 
rk
[0];

1083 
s1
 = 
	`GETU32
(
˘
 + 4Ë^ 
rk
[1];

1084 
s2
 = 
	`GETU32
(
˘
 + 8Ë^ 
rk
[2];

1085 
s3
 = 
	`GETU32
(
˘
 + 12Ë^ 
rk
[3];

1086 #ifde‡
FULL_UNROLL


1088 
t0
 = 
Td0
[
s0
 >> 24] ^ 
Td1
[(
s3
 >> 16Ë& 0xff] ^ 
Td2
[(
s2
 >> 8Ë& 0xff] ^ 
Td3
[
s1
 & 0xff] ^ 
rk
[ 4];

1089 
t1
 = 
Td0
[
s1
 >> 24] ^ 
Td1
[(
s0
 >> 16Ë& 0xff] ^ 
Td2
[(
s3
 >> 8Ë& 0xff] ^ 
Td3
[
s2
 & 0xff] ^ 
rk
[ 5];

1090 
t2
 = 
Td0
[
s2
 >> 24] ^ 
Td1
[(
s1
 >> 16Ë& 0xff] ^ 
Td2
[(
s0
 >> 8Ë& 0xff] ^ 
Td3
[
s3
 & 0xff] ^ 
rk
[ 6];

1091 
t3
 = 
Td0
[
s3
 >> 24] ^ 
Td1
[(
s2
 >> 16Ë& 0xff] ^ 
Td2
[(
s1
 >> 8Ë& 0xff] ^ 
Td3
[
s0
 & 0xff] ^ 
rk
[ 7];

1093 
s0
 = 
Td0
[
t0
 >> 24] ^ 
Td1
[(
t3
 >> 16Ë& 0xff] ^ 
Td2
[(
t2
 >> 8Ë& 0xff] ^ 
Td3
[
t1
 & 0xff] ^ 
rk
[ 8];

1094 
s1
 = 
Td0
[
t1
 >> 24] ^ 
Td1
[(
t0
 >> 16Ë& 0xff] ^ 
Td2
[(
t3
 >> 8Ë& 0xff] ^ 
Td3
[
t2
 & 0xff] ^ 
rk
[ 9];

1095 
s2
 = 
Td0
[
t2
 >> 24] ^ 
Td1
[(
t1
 >> 16Ë& 0xff] ^ 
Td2
[(
t0
 >> 8Ë& 0xff] ^ 
Td3
[
t3
 & 0xff] ^ 
rk
[10];

1096 
s3
 = 
Td0
[
t3
 >> 24] ^ 
Td1
[(
t2
 >> 16Ë& 0xff] ^ 
Td2
[(
t1
 >> 8Ë& 0xff] ^ 
Td3
[
t0
 & 0xff] ^ 
rk
[11];

1098 
t0
 = 
Td0
[
s0
 >> 24] ^ 
Td1
[(
s3
 >> 16Ë& 0xff] ^ 
Td2
[(
s2
 >> 8Ë& 0xff] ^ 
Td3
[
s1
 & 0xff] ^ 
rk
[12];

1099 
t1
 = 
Td0
[
s1
 >> 24] ^ 
Td1
[(
s0
 >> 16Ë& 0xff] ^ 
Td2
[(
s3
 >> 8Ë& 0xff] ^ 
Td3
[
s2
 & 0xff] ^ 
rk
[13];

1100 
t2
 = 
Td0
[
s2
 >> 24] ^ 
Td1
[(
s1
 >> 16Ë& 0xff] ^ 
Td2
[(
s0
 >> 8Ë& 0xff] ^ 
Td3
[
s3
 & 0xff] ^ 
rk
[14];

1101 
t3
 = 
Td0
[
s3
 >> 24] ^ 
Td1
[(
s2
 >> 16Ë& 0xff] ^ 
Td2
[(
s1
 >> 8Ë& 0xff] ^ 
Td3
[
s0
 & 0xff] ^ 
rk
[15];

1103 
s0
 = 
Td0
[
t0
 >> 24] ^ 
Td1
[(
t3
 >> 16Ë& 0xff] ^ 
Td2
[(
t2
 >> 8Ë& 0xff] ^ 
Td3
[
t1
 & 0xff] ^ 
rk
[16];

1104 
s1
 = 
Td0
[
t1
 >> 24] ^ 
Td1
[(
t0
 >> 16Ë& 0xff] ^ 
Td2
[(
t3
 >> 8Ë& 0xff] ^ 
Td3
[
t2
 & 0xff] ^ 
rk
[17];

1105 
s2
 = 
Td0
[
t2
 >> 24] ^ 
Td1
[(
t1
 >> 16Ë& 0xff] ^ 
Td2
[(
t0
 >> 8Ë& 0xff] ^ 
Td3
[
t3
 & 0xff] ^ 
rk
[18];

1106 
s3
 = 
Td0
[
t3
 >> 24] ^ 
Td1
[(
t2
 >> 16Ë& 0xff] ^ 
Td2
[(
t1
 >> 8Ë& 0xff] ^ 
Td3
[
t0
 & 0xff] ^ 
rk
[19];

1108 
t0
 = 
Td0
[
s0
 >> 24] ^ 
Td1
[(
s3
 >> 16Ë& 0xff] ^ 
Td2
[(
s2
 >> 8Ë& 0xff] ^ 
Td3
[
s1
 & 0xff] ^ 
rk
[20];

1109 
t1
 = 
Td0
[
s1
 >> 24] ^ 
Td1
[(
s0
 >> 16Ë& 0xff] ^ 
Td2
[(
s3
 >> 8Ë& 0xff] ^ 
Td3
[
s2
 & 0xff] ^ 
rk
[21];

1110 
t2
 = 
Td0
[
s2
 >> 24] ^ 
Td1
[(
s1
 >> 16Ë& 0xff] ^ 
Td2
[(
s0
 >> 8Ë& 0xff] ^ 
Td3
[
s3
 & 0xff] ^ 
rk
[22];

1111 
t3
 = 
Td0
[
s3
 >> 24] ^ 
Td1
[(
s2
 >> 16Ë& 0xff] ^ 
Td2
[(
s1
 >> 8Ë& 0xff] ^ 
Td3
[
s0
 & 0xff] ^ 
rk
[23];

1113 
s0
 = 
Td0
[
t0
 >> 24] ^ 
Td1
[(
t3
 >> 16Ë& 0xff] ^ 
Td2
[(
t2
 >> 8Ë& 0xff] ^ 
Td3
[
t1
 & 0xff] ^ 
rk
[24];

1114 
s1
 = 
Td0
[
t1
 >> 24] ^ 
Td1
[(
t0
 >> 16Ë& 0xff] ^ 
Td2
[(
t3
 >> 8Ë& 0xff] ^ 
Td3
[
t2
 & 0xff] ^ 
rk
[25];

1115 
s2
 = 
Td0
[
t2
 >> 24] ^ 
Td1
[(
t1
 >> 16Ë& 0xff] ^ 
Td2
[(
t0
 >> 8Ë& 0xff] ^ 
Td3
[
t3
 & 0xff] ^ 
rk
[26];

1116 
s3
 = 
Td0
[
t3
 >> 24] ^ 
Td1
[(
t2
 >> 16Ë& 0xff] ^ 
Td2
[(
t1
 >> 8Ë& 0xff] ^ 
Td3
[
t0
 & 0xff] ^ 
rk
[27];

1118 
t0
 = 
Td0
[
s0
 >> 24] ^ 
Td1
[(
s3
 >> 16Ë& 0xff] ^ 
Td2
[(
s2
 >> 8Ë& 0xff] ^ 
Td3
[
s1
 & 0xff] ^ 
rk
[28];

1119 
t1
 = 
Td0
[
s1
 >> 24] ^ 
Td1
[(
s0
 >> 16Ë& 0xff] ^ 
Td2
[(
s3
 >> 8Ë& 0xff] ^ 
Td3
[
s2
 & 0xff] ^ 
rk
[29];

1120 
t2
 = 
Td0
[
s2
 >> 24] ^ 
Td1
[(
s1
 >> 16Ë& 0xff] ^ 
Td2
[(
s0
 >> 8Ë& 0xff] ^ 
Td3
[
s3
 & 0xff] ^ 
rk
[30];

1121 
t3
 = 
Td0
[
s3
 >> 24] ^ 
Td1
[(
s2
 >> 16Ë& 0xff] ^ 
Td2
[(
s1
 >> 8Ë& 0xff] ^ 
Td3
[
s0
 & 0xff] ^ 
rk
[31];

1123 
s0
 = 
Td0
[
t0
 >> 24] ^ 
Td1
[(
t3
 >> 16Ë& 0xff] ^ 
Td2
[(
t2
 >> 8Ë& 0xff] ^ 
Td3
[
t1
 & 0xff] ^ 
rk
[32];

1124 
s1
 = 
Td0
[
t1
 >> 24] ^ 
Td1
[(
t0
 >> 16Ë& 0xff] ^ 
Td2
[(
t3
 >> 8Ë& 0xff] ^ 
Td3
[
t2
 & 0xff] ^ 
rk
[33];

1125 
s2
 = 
Td0
[
t2
 >> 24] ^ 
Td1
[(
t1
 >> 16Ë& 0xff] ^ 
Td2
[(
t0
 >> 8Ë& 0xff] ^ 
Td3
[
t3
 & 0xff] ^ 
rk
[34];

1126 
s3
 = 
Td0
[
t3
 >> 24] ^ 
Td1
[(
t2
 >> 16Ë& 0xff] ^ 
Td2
[(
t1
 >> 8Ë& 0xff] ^ 
Td3
[
t0
 & 0xff] ^ 
rk
[35];

1128 
t0
 = 
Td0
[
s0
 >> 24] ^ 
Td1
[(
s3
 >> 16Ë& 0xff] ^ 
Td2
[(
s2
 >> 8Ë& 0xff] ^ 
Td3
[
s1
 & 0xff] ^ 
rk
[36];

1129 
t1
 = 
Td0
[
s1
 >> 24] ^ 
Td1
[(
s0
 >> 16Ë& 0xff] ^ 
Td2
[(
s3
 >> 8Ë& 0xff] ^ 
Td3
[
s2
 & 0xff] ^ 
rk
[37];

1130 
t2
 = 
Td0
[
s2
 >> 24] ^ 
Td1
[(
s1
 >> 16Ë& 0xff] ^ 
Td2
[(
s0
 >> 8Ë& 0xff] ^ 
Td3
[
s3
 & 0xff] ^ 
rk
[38];

1131 
t3
 = 
Td0
[
s3
 >> 24] ^ 
Td1
[(
s2
 >> 16Ë& 0xff] ^ 
Td2
[(
s1
 >> 8Ë& 0xff] ^ 
Td3
[
s0
 & 0xff] ^ 
rk
[39];

1132 i‡(
Nr
 > 10) {

1134 
s0
 = 
Td0
[
t0
 >> 24] ^ 
Td1
[(
t3
 >> 16Ë& 0xff] ^ 
Td2
[(
t2
 >> 8Ë& 0xff] ^ 
Td3
[
t1
 & 0xff] ^ 
rk
[40];

1135 
s1
 = 
Td0
[
t1
 >> 24] ^ 
Td1
[(
t0
 >> 16Ë& 0xff] ^ 
Td2
[(
t3
 >> 8Ë& 0xff] ^ 
Td3
[
t2
 & 0xff] ^ 
rk
[41];

1136 
s2
 = 
Td0
[
t2
 >> 24] ^ 
Td1
[(
t1
 >> 16Ë& 0xff] ^ 
Td2
[(
t0
 >> 8Ë& 0xff] ^ 
Td3
[
t3
 & 0xff] ^ 
rk
[42];

1137 
s3
 = 
Td0
[
t3
 >> 24] ^ 
Td1
[(
t2
 >> 16Ë& 0xff] ^ 
Td2
[(
t1
 >> 8Ë& 0xff] ^ 
Td3
[
t0
 & 0xff] ^ 
rk
[43];

1139 
t0
 = 
Td0
[
s0
 >> 24] ^ 
Td1
[(
s3
 >> 16Ë& 0xff] ^ 
Td2
[(
s2
 >> 8Ë& 0xff] ^ 
Td3
[
s1
 & 0xff] ^ 
rk
[44];

1140 
t1
 = 
Td0
[
s1
 >> 24] ^ 
Td1
[(
s0
 >> 16Ë& 0xff] ^ 
Td2
[(
s3
 >> 8Ë& 0xff] ^ 
Td3
[
s2
 & 0xff] ^ 
rk
[45];

1141 
t2
 = 
Td0
[
s2
 >> 24] ^ 
Td1
[(
s1
 >> 16Ë& 0xff] ^ 
Td2
[(
s0
 >> 8Ë& 0xff] ^ 
Td3
[
s3
 & 0xff] ^ 
rk
[46];

1142 
t3
 = 
Td0
[
s3
 >> 24] ^ 
Td1
[(
s2
 >> 16Ë& 0xff] ^ 
Td2
[(
s1
 >> 8Ë& 0xff] ^ 
Td3
[
s0
 & 0xff] ^ 
rk
[47];

1143 i‡(
Nr
 > 12) {

1145 
s0
 = 
Td0
[
t0
 >> 24] ^ 
Td1
[(
t3
 >> 16Ë& 0xff] ^ 
Td2
[(
t2
 >> 8Ë& 0xff] ^ 
Td3
[
t1
 & 0xff] ^ 
rk
[48];

1146 
s1
 = 
Td0
[
t1
 >> 24] ^ 
Td1
[(
t0
 >> 16Ë& 0xff] ^ 
Td2
[(
t3
 >> 8Ë& 0xff] ^ 
Td3
[
t2
 & 0xff] ^ 
rk
[49];

1147 
s2
 = 
Td0
[
t2
 >> 24] ^ 
Td1
[(
t1
 >> 16Ë& 0xff] ^ 
Td2
[(
t0
 >> 8Ë& 0xff] ^ 
Td3
[
t3
 & 0xff] ^ 
rk
[50];

1148 
s3
 = 
Td0
[
t3
 >> 24] ^ 
Td1
[(
t2
 >> 16Ë& 0xff] ^ 
Td2
[(
t1
 >> 8Ë& 0xff] ^ 
Td3
[
t0
 & 0xff] ^ 
rk
[51];

1150 
t0
 = 
Td0
[
s0
 >> 24] ^ 
Td1
[(
s3
 >> 16Ë& 0xff] ^ 
Td2
[(
s2
 >> 8Ë& 0xff] ^ 
Td3
[
s1
 & 0xff] ^ 
rk
[52];

1151 
t1
 = 
Td0
[
s1
 >> 24] ^ 
Td1
[(
s0
 >> 16Ë& 0xff] ^ 
Td2
[(
s3
 >> 8Ë& 0xff] ^ 
Td3
[
s2
 & 0xff] ^ 
rk
[53];

1152 
t2
 = 
Td0
[
s2
 >> 24] ^ 
Td1
[(
s1
 >> 16Ë& 0xff] ^ 
Td2
[(
s0
 >> 8Ë& 0xff] ^ 
Td3
[
s3
 & 0xff] ^ 
rk
[54];

1153 
t3
 = 
Td0
[
s3
 >> 24] ^ 
Td1
[(
s2
 >> 16Ë& 0xff] ^ 
Td2
[(
s1
 >> 8Ë& 0xff] ^ 
Td3
[
s0
 & 0xff] ^ 
rk
[55];

1156 
rk
 +
Nr
 << 2;

1161 
r
 = 
Nr
 >> 1;

1163 
t0
 =

1164 
Td0
[(
s0
 >> 24) ] ^

1165 
Td1
[(
s3
 >> 16) & 0xff] ^

1166 
Td2
[(
s2
 >> 8) & 0xff] ^

1167 
Td3
[(
s1
 ) & 0xff] ^

1168 
rk
[4];

1169 
t1
 =

1170 
Td0
[(
s1
 >> 24) ] ^

1171 
Td1
[(
s0
 >> 16) & 0xff] ^

1172 
Td2
[(
s3
 >> 8) & 0xff] ^

1173 
Td3
[(
s2
 ) & 0xff] ^

1174 
rk
[5];

1175 
t2
 =

1176 
Td0
[(
s2
 >> 24) ] ^

1177 
Td1
[(
s1
 >> 16) & 0xff] ^

1178 
Td2
[(
s0
 >> 8) & 0xff] ^

1179 
Td3
[(
s3
 ) & 0xff] ^

1180 
rk
[6];

1181 
t3
 =

1182 
Td0
[(
s3
 >> 24) ] ^

1183 
Td1
[(
s2
 >> 16) & 0xff] ^

1184 
Td2
[(
s1
 >> 8) & 0xff] ^

1185 
Td3
[(
s0
 ) & 0xff] ^

1186 
rk
[7];

1188 
rk
 += 8;

1189 i‡(--
r
 == 0) {

1193 
s0
 =

1194 
Td0
[(
t0
 >> 24) ] ^

1195 
Td1
[(
t3
 >> 16) & 0xff] ^

1196 
Td2
[(
t2
 >> 8) & 0xff] ^

1197 
Td3
[(
t1
 ) & 0xff] ^

1198 
rk
[0];

1199 
s1
 =

1200 
Td0
[(
t1
 >> 24) ] ^

1201 
Td1
[(
t0
 >> 16) & 0xff] ^

1202 
Td2
[(
t3
 >> 8) & 0xff] ^

1203 
Td3
[(
t2
 ) & 0xff] ^

1204 
rk
[1];

1205 
s2
 =

1206 
Td0
[(
t2
 >> 24) ] ^

1207 
Td1
[(
t1
 >> 16) & 0xff] ^

1208 
Td2
[(
t0
 >> 8) & 0xff] ^

1209 
Td3
[(
t3
 ) & 0xff] ^

1210 
rk
[2];

1211 
s3
 =

1212 
Td0
[(
t3
 >> 24) ] ^

1213 
Td1
[(
t2
 >> 16) & 0xff] ^

1214 
Td2
[(
t1
 >> 8) & 0xff] ^

1215 
Td3
[(
t0
 ) & 0xff] ^

1216 
rk
[3];

1223 
s0
 =

1224 (
Td4
[(
t0
 >> 24) ] & 0xff000000) ^

1225 (
Td4
[(
t3
 >> 16) & 0xff] & 0x00ff0000) ^

1226 (
Td4
[(
t2
 >> 8) & 0xff] & 0x0000ff00) ^

1227 (
Td4
[(
t1
 ) & 0xff] & 0x000000ff) ^

1228 
rk
[0];

1229 
	`PUTU32
(
±
 , 
s0
);

1230 
s1
 =

1231 (
Td4
[(
t1
 >> 24) ] & 0xff000000) ^

1232 (
Td4
[(
t0
 >> 16) & 0xff] & 0x00ff0000) ^

1233 (
Td4
[(
t3
 >> 8) & 0xff] & 0x0000ff00) ^

1234 (
Td4
[(
t2
 ) & 0xff] & 0x000000ff) ^

1235 
rk
[1];

1236 
	`PUTU32
(
±
 + 4, 
s1
);

1237 
s2
 =

1238 (
Td4
[(
t2
 >> 24) ] & 0xff000000) ^

1239 (
Td4
[(
t1
 >> 16) & 0xff] & 0x00ff0000) ^

1240 (
Td4
[(
t0
 >> 8) & 0xff] & 0x0000ff00) ^

1241 (
Td4
[(
t3
 ) & 0xff] & 0x000000ff) ^

1242 
rk
[2];

1243 
	`PUTU32
(
±
 + 8, 
s2
);

1244 
s3
 =

1245 (
Td4
[(
t3
 >> 24) ] & 0xff000000) ^

1246 (
Td4
[(
t2
 >> 16) & 0xff] & 0x00ff0000) ^

1247 (
Td4
[(
t1
 >> 8) & 0xff] & 0x0000ff00) ^

1248 (
Td4
[(
t0
 ) & 0xff] & 0x000000ff) ^

1249 
rk
[3];

1250 
	`PUTU32
(
±
 + 12, 
s3
);

1251 
	}
}

1253 #ifde‡
INTERMEDIATE_VALUE_KAT


1255 
	$rijnd´lEn¸y±Round
(c⁄° 
u32
 
rk
[ ], 
Nr
, 
u8
 
block
[16], 
rounds
) {

1256 
r
;

1257 
u32
 
s0
, 
s1
, 
s2
, 
s3
, 
t0
, 
t1
, 
t2
, 
t3
;

1263 
s0
 = 
	`GETU32
(
block
 ) ^ 
rk
[0];

1264 
s1
 = 
	`GETU32
(
block
 + 4Ë^ 
rk
[1];

1265 
s2
 = 
	`GETU32
(
block
 + 8Ë^ 
rk
[2];

1266 
s3
 = 
	`GETU32
(
block
 + 12Ë^ 
rk
[3];

1267 
rk
 += 4;

1272 
r
 = (
rounds
 < 
Nr
 ?Ñounds : Nr - 1);Ñ > 0;Ñ--) {

1273 
t0
 =

1274 
Te0
[(
s0
 >> 24) ] ^

1275 
Te1
[(
s1
 >> 16) & 0xff] ^

1276 
Te2
[(
s2
 >> 8) & 0xff] ^

1277 
Te3
[(
s3
 ) & 0xff] ^

1278 
rk
[0];

1279 
t1
 =

1280 
Te0
[(
s1
 >> 24) ] ^

1281 
Te1
[(
s2
 >> 16) & 0xff] ^

1282 
Te2
[(
s3
 >> 8) & 0xff] ^

1283 
Te3
[(
s0
 ) & 0xff] ^

1284 
rk
[1];

1285 
t2
 =

1286 
Te0
[(
s2
 >> 24) ] ^

1287 
Te1
[(
s3
 >> 16) & 0xff] ^

1288 
Te2
[(
s0
 >> 8) & 0xff] ^

1289 
Te3
[(
s1
 ) & 0xff] ^

1290 
rk
[2];

1291 
t3
 =

1292 
Te0
[(
s3
 >> 24) ] ^

1293 
Te1
[(
s0
 >> 16) & 0xff] ^

1294 
Te2
[(
s1
 >> 8) & 0xff] ^

1295 
Te3
[(
s2
 ) & 0xff] ^

1296 
rk
[3];

1298 
s0
 = 
t0
;

1299 
s1
 = 
t1
;

1300 
s2
 = 
t2
;

1301 
s3
 = 
t3
;

1302 
rk
 += 4;

1310 i‡(
rounds
 =
Nr
) {

1311 
t0
 =

1312 (
Te4
[(
s0
 >> 24) ] & 0xff000000) ^

1313 (
Te4
[(
s1
 >> 16) & 0xff] & 0x00ff0000) ^

1314 (
Te4
[(
s2
 >> 8) & 0xff] & 0x0000ff00) ^

1315 (
Te4
[(
s3
 ) & 0xff] & 0x000000ff) ^

1316 
rk
[0];

1317 
t1
 =

1318 (
Te4
[(
s1
 >> 24) ] & 0xff000000) ^

1319 (
Te4
[(
s2
 >> 16) & 0xff] & 0x00ff0000) ^

1320 (
Te4
[(
s3
 >> 8) & 0xff] & 0x0000ff00) ^

1321 (
Te4
[(
s0
 ) & 0xff] & 0x000000ff) ^

1322 
rk
[1];

1323 
t2
 =

1324 (
Te4
[(
s2
 >> 24) ] & 0xff000000) ^

1325 (
Te4
[(
s3
 >> 16) & 0xff] & 0x00ff0000) ^

1326 (
Te4
[(
s0
 >> 8) & 0xff] & 0x0000ff00) ^

1327 (
Te4
[(
s1
 ) & 0xff] & 0x000000ff) ^

1328 
rk
[2];

1329 
t3
 =

1330 (
Te4
[(
s3
 >> 24) ] & 0xff000000) ^

1331 (
Te4
[(
s0
 >> 16) & 0xff] & 0x00ff0000) ^

1332 (
Te4
[(
s1
 >> 8) & 0xff] & 0x0000ff00) ^

1333 (
Te4
[(
s2
 ) & 0xff] & 0x000000ff) ^

1334 
rk
[3];

1336 
s0
 = 
t0
;

1337 
s1
 = 
t1
;

1338 
s2
 = 
t2
;

1339 
s3
 = 
t3
;

1342 
	`PUTU32
(
block
 , 
s0
);

1343 
	`PUTU32
(
block
 + 4, 
s1
);

1344 
	`PUTU32
(
block
 + 8, 
s2
);

1345 
	`PUTU32
(
block
 + 12, 
s3
);

1346 
	}
}

1348 
	$rijnd´lDe¸y±Round
(c⁄° 
u32
 
rk
[ ], 
Nr
, 
u8
 
block
[16], 
rounds
) {

1349 
r
;

1350 
u32
 
s0
, 
s1
, 
s2
, 
s3
, 
t0
, 
t1
, 
t2
, 
t3
;

1356 
s0
 = 
	`GETU32
(
block
 ) ^ 
rk
[0];

1357 
s1
 = 
	`GETU32
(
block
 + 4Ë^ 
rk
[1];

1358 
s2
 = 
	`GETU32
(
block
 + 8Ë^ 
rk
[2];

1359 
s3
 = 
	`GETU32
(
block
 + 12Ë^ 
rk
[3];

1360 
rk
 += 4;

1365 
r
 = (
rounds
 < 
Nr
 ?Ñounds : Nr) - 1;Ñ > 0;Ñ--) {

1366 
t0
 =

1367 
Td0
[(
s0
 >> 24) ] ^

1368 
Td1
[(
s3
 >> 16) & 0xff] ^

1369 
Td2
[(
s2
 >> 8) & 0xff] ^

1370 
Td3
[(
s1
 ) & 0xff] ^

1371 
rk
[0];

1372 
t1
 =

1373 
Td0
[(
s1
 >> 24) ] ^

1374 
Td1
[(
s0
 >> 16) & 0xff] ^

1375 
Td2
[(
s3
 >> 8) & 0xff] ^

1376 
Td3
[(
s2
 ) & 0xff] ^

1377 
rk
[1];

1378 
t2
 =

1379 
Td0
[(
s2
 >> 24) ] ^

1380 
Td1
[(
s1
 >> 16) & 0xff] ^

1381 
Td2
[(
s0
 >> 8) & 0xff] ^

1382 
Td3
[(
s3
 ) & 0xff] ^

1383 
rk
[2];

1384 
t3
 =

1385 
Td0
[(
s3
 >> 24) ] ^

1386 
Td1
[(
s2
 >> 16) & 0xff] ^

1387 
Td2
[(
s1
 >> 8) & 0xff] ^

1388 
Td3
[(
s0
 ) & 0xff] ^

1389 
rk
[3];

1391 
s0
 = 
t0
;

1392 
s1
 = 
t1
;

1393 
s2
 = 
t2
;

1394 
s3
 = 
t3
;

1395 
rk
 += 4;

1403 
t0
 =

1404 (
Td4
[(
s0
 >> 24) ] & 0xff000000) ^

1405 (
Td4
[(
s3
 >> 16) & 0xff] & 0x00ff0000) ^

1406 (
Td4
[(
s2
 >> 8) & 0xff] & 0x0000ff00) ^

1407 (
Td4
[(
s1
 ) & 0xff] & 0x000000ff);

1408 
t1
 =

1409 (
Td4
[(
s1
 >> 24) ] & 0xff000000) ^

1410 (
Td4
[(
s0
 >> 16) & 0xff] & 0x00ff0000) ^

1411 (
Td4
[(
s3
 >> 8) & 0xff] & 0x0000ff00) ^

1412 (
Td4
[(
s2
 ) & 0xff] & 0x000000ff);

1413 
t2
 =

1414 (
Td4
[(
s2
 >> 24) ] & 0xff000000) ^

1415 (
Td4
[(
s1
 >> 16) & 0xff] & 0x00ff0000) ^

1416 (
Td4
[(
s0
 >> 8) & 0xff] & 0x0000ff00) ^

1417 (
Td4
[(
s3
 ) & 0xff] & 0x000000ff);

1418 
t3
 =

1419 (
Td4
[(
s3
 >> 24) ] & 0xff000000) ^

1420 (
Td4
[(
s2
 >> 16) & 0xff] & 0x00ff0000) ^

1421 (
Td4
[(
s1
 >> 8) & 0xff] & 0x0000ff00) ^

1422 (
Td4
[(
s0
 ) & 0xff] & 0x000000ff);

1424 i‡(
rounds
 =
Nr
) {

1425 
t0
 ^
rk
[0];

1426 
t1
 ^
rk
[1];

1427 
t2
 ^
rk
[2];

1428 
t3
 ^
rk
[3];

1431 
	`PUTU32
(
block
 , 
t0
);

1432 
	`PUTU32
(
block
 + 4, 
t1
);

1433 
	`PUTU32
(
block
 + 8, 
t2
);

1434 
	`PUTU32
(
block
 + 12, 
t3
);

1435 
	}
}

	@libhashkit/rijndael.hpp

27 #¥agm®
⁄˚


29 
	#MAXKC
 (256/32)

	)

30 
	#MAXKB
 (256/8)

	)

31 
	#MAXNR
 14

	)

33 
	#AES_MAXKC
 
MAXKC


	)

34 
	#AES_MAXKB
 
MAXKB


	)

35 
	#AES_MAXNR
 
MAXNR


	)

37 
	tu8
;

38 
	tu16
;

39 
	tu32
;

41 
rijnd´lKeySëupEnc
(
u32
 
rk
[ ], c⁄° 
u8
 
cùhîKey
[], 
keyBôs
);

42 
rijnd´lKeySëupDec
(
u32
 
rk
[ ], c⁄° 
u8
 
cùhîKey
[], 
keyBôs
);

43 
rijnd´lEn¸y±
(c⁄° 
u32
 
rk
[ ], 
Nr
, c⁄° 
u8
 
±
[16], u8 
˘
[16]);

44 
rijnd´lDe¸y±
(c⁄° 
u32
 
rk
[ ], 
Nr
, c⁄° 
u8
 
˘
[16], u8 
±
[16]);

46 #ifde‡
INTERMEDIATE_VALUE_KAT


47 
rijnd´lEn¸y±Round
(c⁄° 
u32
 
rk
[ ], 
Nr
, 
u8
 
block
[16], 
rounds
);

48 
rijnd´lDe¸y±Round
(c⁄° 
u32
 
rk
[ ], 
Nr
, 
u8
 
block
[16], 
rounds
);

	@libhashkit/str_algorithm.cc

37 
	~<libhashkô/comm⁄.h
>

39 c⁄° * 
	$libhashkô_°rög_hash
(
hashkô_hash_Æg‹ôhm_t
 
ty≥
)

41 
ty≥
)

43 
HASHKIT_HASH_DEFAULT
:  "DEFAULT";

44 
HASHKIT_HASH_MD5
:  "MD5";

45 
HASHKIT_HASH_CRC
:  "CRC";

46 
HASHKIT_HASH_FNV1_64
:  "FNV1_64";

47 
HASHKIT_HASH_FNV1A_64
:  "FNV1A_64";

48 
HASHKIT_HASH_FNV1_32
:  "FNV1_32";

49 
HASHKIT_HASH_FNV1A_32
:  "FNV1A_32";

50 
HASHKIT_HASH_HSIEH
:  "HSIEH";

51 
HASHKIT_HASH_MURMUR
:  "MURMUR";

52 
HASHKIT_HASH_MURMUR3
:  "MURMUR3";

53 
HASHKIT_HASH_JENKINS
:  "JENKINS";

54 
HASHKIT_HASH_CUSTOM
:  "CUSTOM";

56 
HASHKIT_HASH_MAX
:  "INVALID";

58 
	}
}

	@libhashkit/strerror.cc

40 
	~<libhashkô/comm⁄.h
>

42 c⁄° *
	$hashkô_°ªº‹
(
hashkô_°
 *
±r
, 
hashkô_ªtu∫_t
 
rc
)

44 ()
±r
;

45 
rc
)

47 
HASHKIT_SUCCESS
:  "SUCCESS";

48 
HASHKIT_FAILURE
:  "FAILURE";

49 
HASHKIT_MEMORY_ALLOCATION_FAILURE
:  "MEMORY ALLOCATION FAILURE";

50 
HASHKIT_INVALID_ARGUMENT
:  "INVALID ARGUMENT";

51 
HASHKIT_INVALID_HASH
:  "INVALID hashkit_hash_algorithm_t";

52 
HASHKIT_MAXIMUM_RETURN
:

56 
	}
}

	@libhashkit/string.cc

38 
	~<libhashkô/comm⁄.h
>

40 
	~<ˇs£π
>

41 
	~<c°rög
>

43 
	#HASHKIT_BLOCK_SIZE
 1024

	)

45 
	shashkô_°rög_°
 {

46 *
	míd
;

47 
size_t
 
	mcuºít_size
;

48 *
	m°rög
;

51 
ölöe
 
boﬁ
 
	$_°rög_check
(
hashkô_°rög_°
 *
°rög
, 
size_t
 
√ed
)

53 i‡(
√ed
 
™d
Çìd > (
size_t
)(
°rög
->
cuºít_size
 - (size_t)(°rög->
íd
 - string->string)))

55 
size_t
 
cuºít_off£t
(size_tË(
°rög
->
íd
 - string->string);

58 
size_t
 
adju°
(
√ed
 - (size_t)(
°rög
->
cuºít_size
 - (size_t)(°rög->
íd
 - såög->°rög))Ë/ 
HASHKIT_BLOCK_SIZE
;

59 
adju°
++;

61 
size_t
 
√w_size
(Ë* (size_t)((
adju°
 * 
HASHKIT_BLOCK_SIZE
Ë+ 
°rög
->
cuºít_size
);

63 i‡(
√w_size
 < 
√ed
)

65  
Ál£
;

68 *
√w_vÆue
(*)
	`ªÆloc
(
°rög
->°rög, 
√w_size
);

70 i‡(
√w_vÆue
 =
NULL
)

72  
Ál£
;

75 
°rög
->°rög
√w_vÆue
;

76 
°rög
->
íd
°rög->°rög + 
cuºít_off£t
;

78 
°rög
->
cuºít_size
+(
HASHKIT_BLOCK_SIZE
 * 
adju°
);

81  
åue
;

82 
	}
}

84 
ölöe
 
	$_öô_°rög
(
hashkô_°rög_°
 *
£lf
)

86 
£lf
->
cuºít_size
= 0;

87 
£lf
->
íd
£lf->
°rög

NULL
;

88 
	}
}

90 
hashkô_°rög_°
 *
	$hashkô_°rög_¸óã
(
size_t
 
öôül_size
)

92 
hashkô_°rög_°
* 
£lf
(hashkô_°rög_°*)
	`ˇŒoc
(1, (hashkit_string_st));

94 i‡(
£lf
)

96 i‡(
	`_°rög_check
(
£lf
, 
öôül_size
Ë=
Ál£
)

98 
	`‰ì
(
£lf
);

100  
NULL
;

104  
£lf
;

105 
	}
}

108 
boﬁ
 
	$hashkô_°rög_≠≥nd_nuŒ
(
hashkô_°rög_°
 *
°rög
)

110 i‡(
	`_°rög_check
(
°rög
, 1Ë=
Ál£
)

112  
Ál£
;

115 *
°rög
->
íd
= 0;

117  
åue
;

118 
	}
}

121 
boﬁ
 
	$hashkô_°rög_≠≥nd_ch¨a˘î
(
hashkô_°rög_°
 *
°rög
,

122 
ch¨a˘î
)

124 i‡(
	`_°rög_check
(
°rög
, 1Ë=
Ál£
)

126  
Ál£
;

129 *
°rög
->
íd

ch¨a˘î
;

130 
°rög
->
íd
++;

132  
åue
;

133 
	}
}

135 
boﬁ
 
	$hashkô_°rög_≠≥nd
(
hashkô_°rög_°
 *
°rög
,

136 c⁄° *
vÆue
, 
size_t
 
Àngth
)

138 i‡(
	`_°rög_check
(
°rög
, 
Àngth
Ë=
Ál£
)

140  
Ál£
;

143 
	`as£π
(
Àngth
 <
°rög
->
cuºít_size
);

144 
	`as£π
(
°rög
->string);

145 
	`as£π
(
°rög
->
íd
 >= string->string);

147 
	`mem˝y
(
°rög
->
íd
, 
vÆue
, 
Àngth
);

148 
°rög
->
íd
+
Àngth
;

150  
åue
;

151 
	}
}

153 *
	$hashkô_°rög_c_c›y
(
hashkô_°rög_°
 *
°rög
)

155 i‡(
	`hashkô_°rög_Àngth
(
°rög
) == 0)

157  
NULL
;

160 *
c_±r

°©ic_ˇ°
<*>(
	`mÆloc
((
	`hashkô_°rög_Àngth
(
°rög
)+1) * ()));

161 i‡(
c_±r
 =
NULL
)

163  
NULL
;

166 
	`mem˝y
(
c_±r
, 
	`hashkô_°rög_c_°r
(
°rög
), 
	`hashkô_°rög_Àngth
(string));

167 
c_±r
[
	`hashkô_°rög_Àngth
(
°rög
)]= 0;

169  
c_±r
;

170 
	}
}

172 
	$hashkô_°rög_ª£t
(
hashkô_°rög_°
 *
°rög
)

174 
°rög
->
íd
= string->string;

175 
	}
}

177 
	$hashkô_°rög_‰ì
(
hashkô_°rög_°
 *
±r
)

179 i‡(
±r
 =
NULL
)

184 i‡(
±r
->
°rög
)

186 
	`‰ì
(
±r
->
°rög
);

188 
	`‰ì
(
±r
);

189 
	}
}

191 
boﬁ
 
	$hashkô_°rög_ªsize
(
hashkô_°rög_°
& 
°rög
, c⁄° 
size_t
 
√ed
)

193  
	`_°rög_check
(&
°rög
, 
√ed
);

194 
	}
}

196 
size_t
 
	$hashkô_°rög_Àngth
(c⁄° 
hashkô_°rög_°
 *
£lf
)

198  
	`size_t
(
£lf
->
íd
 -£lf->
°rög
);

199 
	}
}

201 
size_t
 
	$hashkô_°rög_max_size
(c⁄° 
hashkô_°rög_°
 *
£lf
)

203  
£lf
->
cuºít_size
;

204 
	}
}

206 *
	$hashkô_°rög_èke
(
hashkô_°rög_°
 *
£lf
)

208 
	`as£π
(
£lf
);

209 i‡(
£lf
 =
NULL
)

211  
NULL
;

213 *
vÆue

£lf
->
°rög
;

215 
	`_öô_°rög
(
£lf
);

217  
vÆue
;

218 
	}
}

220 *
	$hashkô_°rög_c_°r_muèbÀ
(
hashkô_°rög_°
 *
£lf
)

222 
	`as£π
(
£lf
);

223 i‡(
£lf
 =
NULL
)

225  
NULL
;

227  
£lf
->
°rög
;

228 
	}
}

230 c⁄° *
	$hashkô_°rög_c_°r
(c⁄° 
hashkô_°rög_°
* 
£lf
)

232 
	`as£π
(
£lf
);

233 i‡(
£lf
 =
NULL
)

235  
NULL
;

237  
£lf
->
°rög
;

238 
	}
}

240 
	$hashkô_°rög_£t_Àngth
(
hashkô_°rög_°
 *
£lf
, 
size_t
 
Àngth
)

242 
	`as£π
(
£lf
);

243 i‡(
£lf
 
™d
 
	`_°rög_check
(£lf, 
Àngth
))

245 
£lf
->
íd
£lf->
°rög
 +
Àngth
;

247 
	}
}

	@libhashkit/string.h

37 #¥agm®
⁄˚


39 
hashkô_°rög_°
 *
hashkô_°rög_¸óã
(
size_t
 
öôül_size
);

41 
boﬁ
 
hashkô_°rög_≠≥nd_ch¨a˘î
(
hashkô_°rög_°
 *
°rög
, 
ch¨a˘î
);

43 
boﬁ
 
hashkô_°rög_≠≥nd
(
hashkô_°rög_°
 *
°rög
, c⁄° *
vÆue
, 
size_t
 
Àngth
);

45 *
hashkô_°rög_c_c›y
(
hashkô_°rög_°
 *
°rög
);

47 
hashkô_°rög_ª£t
(
hashkô_°rög_°
 *
°rög
);

49 
boﬁ
 
hashkô_°rög_ªsize
(
hashkô_°rög_°
& 
°rög
, c⁄° 
size_t
 
√ed
);

51 
size_t
 
hashkô_°rög_max_size
(c⁄° 
hashkô_°rög_°
 *
£lf
);

53 *
hashkô_°rög_èke
(
hashkô_°rög_°
 *
£lf
);

55 *
hashkô_°rög_c_°r_muèbÀ
(
hashkô_°rög_°
 *
£lf
);

57 
hashkô_°rög_£t_Àngth
(
hashkô_°rög_°
 *
£lf
, 
size_t
 
Àngth
);

	@libmemcached-1.0/alloc.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


47 (*
memˇched_‰ì_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, *
	tmem
, *
	tc⁄ãxt
);

48 *(*
	tmemˇched_mÆloc_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, c⁄° 
	tsize_t
 
	tsize
, *
	tc⁄ãxt
);

49 *(*
	tmemˇched_ªÆloc_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, *
	tmem
, c⁄° 
	tsize_t
 
	tsize
, *
	tc⁄ãxt
);

50 *(*
	tmemˇched_ˇŒoc_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, 
	tsize_t
 
	t√Àm
, c⁄° size_à
	tñsize
, *
	tc⁄ãxt
);

52 #ifde‡
__˝lu•lus


	@libmemcached-1.0/allocators.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_£t_mem‹y_Æloˇt‹s
(
memˇched_°
 *
±r
,

46 
memˇched_mÆloc_‚
 
mem_mÆloc
,

47 
memˇched_‰ì_‚
 
mem_‰ì
,

48 
memˇched_ªÆloc_‚
 
mem_ªÆloc
,

49 
memˇched_ˇŒoc_‚
 
mem_ˇŒoc
,

50 *
c⁄ãxt
);

52 
LIBMEMCACHED_API


53 
memˇched_gë_mem‹y_Æloˇt‹s
(c⁄° 
memˇched_°
 *
±r
,

54 
memˇched_mÆloc_‚
 *
mem_mÆloc
,

55 
memˇched_‰ì_‚
 *
mem_‰ì
,

56 
memˇched_ªÆloc_‚
 *
mem_ªÆloc
,

57 
memˇched_ˇŒoc_‚
 *
mem_ˇŒoc
);

59 
LIBMEMCACHED_API


60 *
memˇched_gë_mem‹y_Æloˇt‹s_c⁄ãxt
(c⁄° 
memˇched_°
 *
±r
);

62 #ifde‡
__˝lu•lus


	@libmemcached-1.0/analyze.h

38 
	~<libmemˇched-1.0/°ru˘/™Æysis.h
>

40 #¥agm®
⁄˚


42 #ifde‡
__˝lu•lus


46 
LIBMEMCACHED_API


47 
memˇched_™Æysis_°
 *
memˇched_™Æyze
(
memˇched_°
 *
memc
,

48 
memˇched_°©_°
 *
memc_°©
,

49 
memˇched_ªtu∫_t
 *
îr‹
);

51 
LIBMEMCACHED_API


52 
memˇched_™Æyze_‰ì
(
memˇched_™Æysis_°
 *);

54 #ifde‡
__˝lu•lus


	@libmemcached-1.0/auto.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_ö¸emít
(
memˇched_°
 *
±r
,

46 c⁄° *
key
, 
size_t
 
key_Àngth
,

47 
uöt32_t
 
off£t
,

48 
uöt64_t
 *
vÆue
);

49 
LIBMEMCACHED_API


50 
memˇched_ªtu∫_t
 
memˇched_de¸emít
(
memˇched_°
 *
±r
,

51 c⁄° *
key
, 
size_t
 
key_Àngth
,

52 
uöt32_t
 
off£t
,

53 
uöt64_t
 *
vÆue
);

55 
LIBMEMCACHED_API


56 
memˇched_ªtu∫_t
 
memˇched_ö¸emít_by_key
(
memˇched_°
 *
±r
,

57 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

58 c⁄° *
key
, 
size_t
 
key_Àngth
,

59 
uöt64_t
 
off£t
,

60 
uöt64_t
 *
vÆue
);

62 
LIBMEMCACHED_API


63 
memˇched_ªtu∫_t
 
memˇched_de¸emít_by_key
(
memˇched_°
 *
±r
,

64 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

65 c⁄° *
key
, 
size_t
 
key_Àngth
,

66 
uöt64_t
 
off£t
,

67 
uöt64_t
 *
vÆue
);

69 
LIBMEMCACHED_API


70 
memˇched_ªtu∫_t
 
memˇched_ö¸emít_wôh_öôül
(
memˇched_°
 *
±r
,

71 c⁄° *
key
,

72 
size_t
 
key_Àngth
,

73 
uöt64_t
 
off£t
,

74 
uöt64_t
 
öôül
,

75 
time_t
 
expú©i⁄
,

76 
uöt64_t
 *
vÆue
);

78 
LIBMEMCACHED_API


79 
memˇched_ªtu∫_t
 
memˇched_de¸emít_wôh_öôül
(
memˇched_°
 *
±r
,

80 c⁄° *
key
,

81 
size_t
 
key_Àngth
,

82 
uöt64_t
 
off£t
,

83 
uöt64_t
 
öôül
,

84 
time_t
 
expú©i⁄
,

85 
uöt64_t
 *
vÆue
);

87 
LIBMEMCACHED_API


88 
memˇched_ªtu∫_t
 
memˇched_ö¸emít_wôh_öôül_by_key
(
memˇched_°
 *
±r
,

89 c⁄° *
group_key
,

90 
size_t
 
group_key_Àngth
,

91 c⁄° *
key
,

92 
size_t
 
key_Àngth
,

93 
uöt64_t
 
off£t
,

94 
uöt64_t
 
öôül
,

95 
time_t
 
expú©i⁄
,

96 
uöt64_t
 *
vÆue
);

98 
LIBMEMCACHED_API


99 
memˇched_ªtu∫_t
 
memˇched_de¸emít_wôh_öôül_by_key
(
memˇched_°
 *
±r
,

100 c⁄° *
group_key
,

101 
size_t
 
group_key_Àngth
,

102 c⁄° *
key
,

103 
size_t
 
key_Àngth
,

104 
uöt64_t
 
off£t
,

105 
uöt64_t
 
öôül
,

106 
time_t
 
expú©i⁄
,

107 
uöt64_t
 *
vÆue
);

109 #ifde‡
__˝lu•lus


	@libmemcached-1.0/basic_string.h

37 #¥agm®
⁄˚


41 
	smemˇched_°rög_t
 {

42 c⁄° *
	mc_°r
;

43 
size_t
 
	msize
;

46 
	#memˇched_size
(
X
Ë(X).
size
;

	)

47 
	#memˇched_c_°r
(
X
Ë(X).
c_°r
;

	)

48 
	#memˇched_°rög_∑øm
(
X
Ë(X).
c_°r
, (X).
size


	)

50 #ifde‡
__˝lu•lus


51 
	#memˇched_°rög_¥ötf
(
X
Ë((X).
size
), (X).
c_°r


	)

53 
	#memˇched_°rög_¥ötf
(
X
Ë()((X).
size
), (X).
c_°r


	)

	@libmemcached-1.0/behavior.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_behavi‹_£t
(
memˇched_°
 *
±r
, c⁄° 
memˇched_behavi‹_t
 
Êag
, 
uöt64_t
 
d©a
);

47 
LIBMEMCACHED_API


48 
uöt64_t
 
memˇched_behavi‹_gë
(
memˇched_°
 *
±r
, c⁄° 
memˇched_behavi‹_t
 
Êag
);

50 
LIBMEMCACHED_API


51 
memˇched_ªtu∫_t
 
memˇched_behavi‹_£t_di°ributi⁄
(
memˇched_°
 *
±r
, 
memˇched_£rvî_di°ributi⁄_t
 
ty≥
);

53 
LIBMEMCACHED_API


54 
memˇched_£rvî_di°ributi⁄_t
 
memˇched_behavi‹_gë_di°ributi⁄
(
memˇched_°
 *
±r
);

56 
LIBMEMCACHED_API


57 
memˇched_ªtu∫_t
 
memˇched_behavi‹_£t_key_hash
(
memˇched_°
 *
±r
, 
memˇched_hash_t
 
ty≥
);

59 
LIBMEMCACHED_API


60 
memˇched_hash_t
 
memˇched_behavi‹_gë_key_hash
(
memˇched_°
 *
±r
);

62 
LIBMEMCACHED_API


63 
memˇched_ªtu∫_t
 
memˇched_behavi‹_£t_di°ributi⁄_hash
(
memˇched_°
 *
±r
, 
memˇched_hash_t
 
ty≥
);

65 
LIBMEMCACHED_API


66 
memˇched_hash_t
 
memˇched_behavi‹_gë_di°ributi⁄_hash
(
memˇched_°
 *
±r
);

68 
LIBMEMCACHED_API


69 c⁄° *
libmemˇched_°rög_behavi‹
(c⁄° 
memˇched_behavi‹_t
 
Êag
);

71 
LIBMEMCACHED_API


72 c⁄° *
libmemˇched_°rög_di°ributi⁄
(c⁄° 
memˇched_£rvî_di°ributi⁄_t
 
Êag
);

74 
LIBMEMCACHED_API


75 
memˇched_ªtu∫_t
 
memˇched_buckë_£t
(
memˇched_°
 *
£lf
,

76 c⁄° 
uöt32_t
 *
ho°_m≠
,

77 c⁄° 
uöt32_t
 *
f‹w¨d_m≠
,

78 c⁄° 
uöt32_t
 
buckës
,

79 c⁄° 
uöt32_t
 
ª∂iˇs
);

81 #ifde‡
__˝lu•lus


	@libmemcached-1.0/callback.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_ˇŒback_£t
(
memˇched_°
 *
±r
,

46 c⁄° 
memˇched_ˇŒback_t
 
Êag
,

47 c⁄° *
d©a
);

48 
LIBMEMCACHED_API


49 *
memˇched_ˇŒback_gë
(
memˇched_°
 *
±r
,

50 c⁄° 
memˇched_ˇŒback_t
 
Êag
,

51 
memˇched_ªtu∫_t
 *
îr‹
);

53 #ifde‡
__˝lu•lus


	@libmemcached-1.0/callbacks.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
memˇched_ªtu∫_t
 (*
	tmemˇched_execuã_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, 
	tmemˇched_ªsu…_°
 *
	tªsu…
, *
	tc⁄ãxt
);

45 
memˇched_ªtu∫_t
 (*
	tmemˇched_£rvî_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, c⁄° 
	tmemˇched_ö°™˚_°
 * 
	t£rvî
, *
	tc⁄ãxt
);

46 
memˇched_ªtu∫_t
 (*
	tmemˇched_°©_‚
)(c⁄° 
	tmemˇched_ö°™˚_°
 * 
	t£rvî
,

47 c⁄° *
	tkey
, 
	tsize_t
 
	tkey_Àngth
,

48 c⁄° *
	tvÆue
, 
	tsize_t
 
	tvÆue_Àngth
,

49 *
	tc⁄ãxt
);

51 #ifde‡
__˝lu•lus


	@libmemcached-1.0/configure.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


45 
	#LIBMEMCACHED_WITH_SASL_SUPPORT
 0

	)

47 
	#LIBMEMCACHED_VERSION_STRING
 "1.0.17"

	)

48 
	#LIBMEMCACHED_VERSION_HEX
 0x01000017

	)

50 #ifde‡
__˝lu•lus


	@libmemcached-1.0/defaults.h

39 #¥agm®
⁄˚


42 
	#MEMCACHED_DEFAULT_PORT
 11211

	)

43 
	#MEMCACHED_POINTS_PER_SERVER
 100

	)

44 
	#MEMCACHED_POINTS_PER_SERVER_KETAMA
 160

	)

45 
	#MEMCACHED_CONTINUUM_SIZE
 
MEMCACHED_POINTS_PER_SERVER
*100

	)

46 
	#MEMCACHED_STRIDE
 4

	)

47 
	#MEMCACHED_DEFAULT_TIMEOUT
 5000

	)

48 
	#MEMCACHED_DEFAULT_CONNECT_TIMEOUT
 4000

	)

49 
	#MEMCACHED_CONTINUUM_ADDITION
 10

	)

50 
	#MEMCACHED_EXPIRATION_NOT_ADD
 0xffffffffU

	)

51 
	#MEMCACHED_SERVER_FAILURE_LIMIT
 5

	)

52 
	#MEMCACHED_SERVER_FAILURE_RETRY_TIMEOUT
 2

	)

53 
	#MEMCACHED_SERVER_FAILURE_DEAD_TIMEOUT
 0

	)

	@libmemcached-1.0/delete.h

39 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


45 
LIBMEMCACHED_API


46 
memˇched_ªtu∫_t
 
memˇched_dñëe
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

47 
time_t
 
expú©i⁄
);

49 
LIBMEMCACHED_API


50 
memˇched_ªtu∫_t
 
memˇched_dñëe_by_key
(
memˇched_°
 *
±r
,

51 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

52 c⁄° *
key
, 
size_t
 
key_Àngth
,

53 
time_t
 
expú©i⁄
);

55 #ifde‡
__˝lu•lus


	@libmemcached-1.0/deprecated_types.h

42 #¥agm®
⁄˚


47 
memˇched_ªtu∫_t
 
	tmemˇched_ªtu∫
;

48 
memˇched_£rvî_di°ributi⁄_t
 
	tmemˇched_£rvî_di°ributi⁄
;

49 
memˇched_behavi‹_t
 
	tmemˇched_behavi‹
;

50 
memˇched_ˇŒback_t
 
	tmemˇched_ˇŒback
;

51 
memˇched_hash_t
 
	tmemˇched_hash
;

52 
memˇched_c⁄√˘i⁄_t
 
	tmemˇched_c⁄√˘i⁄
;

53 
memˇched_˛⁄e_‚
 
	tmemˇched_˛⁄e_func
;

54 
memˇched_˛ónup_‚
 
	tmemˇched_˛ónup_func
;

55 
memˇched_execuã_‚
 
	tmemˇched_execuã_fun˘i⁄
;

56 
memˇched_£rvî_‚
 
	tmemˇched_£rvî_fun˘i⁄
;

57 
memˇched_åiggî_key_‚
 
	tmemˇched_åiggî_key
;

58 
memˇched_åiggî_dñëe_key_‚
 
	tmemˇched_åiggî_dñëe_key
;

59 
memˇched_dump_‚
 
	tmemˇched_dump_func
;

	@libmemcached-1.0/dump.h

38 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


45 
LIBMEMCACHED_API


46 
memˇched_ªtu∫_t
 
memˇched_dump
(
memˇched_°
 *
±r
, 
memˇched_dump_‚
 *
fun˘i⁄
, *
c⁄ãxt
, 
uöt32_t
 
numbî_of_ˇŒbacks
);

49 #ifde‡
__˝lu•lus


	@libmemcached-1.0/encoding_key.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_£t_ícodög_key
(
memˇched_°
*, c⁄° *
°r
, 
size_t
 
Àngth
);

47 #ifde‡
__˝lu•lus


	@libmemcached-1.0/error.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 c⁄° *
memˇched_îr‹
(c⁄° 
memˇched_°
 *);

47 
LIBMEMCACHED_API


48 c⁄° *
memˇched_œ°_îr‹_mesßge
(c⁄° 
memˇched_°
 *);

50 
LIBMEMCACHED_API


51 
memˇched_îr‹_¥öt
(c⁄° 
memˇched_°
 *);

53 
LIBMEMCACHED_API


54 
memˇched_ªtu∫_t
 
memˇched_œ°_îr‹
(c⁄° 
memˇched_°
 *);

56 
LIBMEMCACHED_API


57 
memˇched_œ°_îr‹_î∫o
(c⁄° 
memˇched_°
 *);

59 
LIBMEMCACHED_API


60 c⁄° *
memˇched_£rvî_îr‹
(c⁄° 
memˇched_ö°™˚_°
 * 
±r
);

62 
LIBMEMCACHED_API


63 
memˇched_ªtu∫_t
 
memˇched_£rvî_îr‹_ªtu∫
(c⁄° 
memˇched_ö°™˚_°
 * 
±r
);

65 #ifde‡
__˝lu•lus


	@libmemcached-1.0/exception.hpp

13 #¥agm®
⁄˚


15 
	~<°dex˚±
>

16 
	~<°rög
>

18 
«me•a˚
 
	gmemˇche


20 ˛as†
	cEx˚±i⁄
 : 
public
 
°d
::
ru¡ime_îr‹


22 
public
:

23 
Ex˚±i⁄
(c⁄° 
°d
::
°rög
& 
msg
, 
ö_î∫o
)

25 
°d
::
ru¡ime_îr‹
(
msg
),

26 
_î∫o
(
ö_î∫o
)

29 
Ex˚±i⁄
(c⁄° *
msg
, 
ö_î∫o
)

31 
°d
::
ru¡ime_îr‹
(°d::
°rög
(
msg
)),

32 
_î∫o
(
ö_î∫o
) {}

34 
	gvútuÆ
 ~
Ex˚±i⁄
(Ë
throw
() {}

36 
gëEºno
() const

38  
	g_î∫o
;

41 
	g¥iv©e
:

42 
_î∫o
;

45 ˛as†
	cW¨nög
 : 
public
 
Ex˚±i⁄


47 
public
:

48 
W¨nög
(c⁄° 
°d
::
°rög
& 
msg
, 
ö_î∫o
Ë: 
Ex˚±i⁄
(msg, in_errno) {}

49 
W¨nög
(c⁄° *
msg
, 
ö_î∫o
Ë: 
Ex˚±i⁄
(msg, in_errno) {}

52 ˛as†
	cEº‹
 : 
public
 
Ex˚±i⁄


54 
public
:

55 
Eº‹
(c⁄° 
°d
::
°rög
& 
msg
, 
ö_î∫o
Ë: 
Ex˚±i⁄
(msg, in_errno) {}

56 
Eº‹
(c⁄° *
msg
, 
ö_î∫o
Ë: 
Ex˚±i⁄
(msg, in_errno) {}

57 
	gvútuÆ
 ~
Eº‹
(Ë
throw
() {}

	@libmemcached-1.0/exist.h

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


43 
LIBMEMCACHED_API


44 
memˇched_ªtu∫_t
 
memˇched_exi°
(
memˇched_°
 *
memc
, c⁄° *
key
, 
size_t
 
key_Àngth
);

46 
LIBMEMCACHED_API


47 
memˇched_ªtu∫_t
 
memˇched_exi°_by_key
(
memˇched_°
 *
memc
,

48 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

49 c⁄° *
key
, 
size_t
 
key_Àngth
);

50 #ifde‡
__˝lu•lus


	@libmemcached-1.0/fetch.h

38 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


45 
LIBMEMCACHED_API


46 
memˇched_ªtu∫_t
 
memˇched_„tch_execuã
(
memˇched_°
 *
±r
,

47 
memˇched_execuã_‚
 *
ˇŒback
,

48 *
c⁄ãxt
,

49 
uöt32_t
 
numbî_of_ˇŒbacks
);

51 #ifde‡
__˝lu•lus


	@libmemcached-1.0/flush.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_Êush
(
memˇched_°
 *
±r
, 
time_t
 
expú©i⁄
);

47 #ifde‡
__˝lu•lus


	@libmemcached-1.0/flush_buffers.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_Êush_buf„rs
(
memˇched_°
 *
mem
);

47 #ifde‡
__˝lu•lus


	@libmemcached-1.0/get.h

38 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


46 
LIBMEMCACHED_API


47 *
memˇched_gë
(
memˇched_°
 *
±r
,

48 c⁄° *
key
, 
size_t
 
key_Àngth
,

49 
size_t
 *
vÆue_Àngth
,

50 
uöt32_t
 *
Êags
,

51 
memˇched_ªtu∫_t
 *
îr‹
);

53 
LIBMEMCACHED_API


54 
memˇched_ªtu∫_t
 
memˇched_mgë
(
memˇched_°
 *
±r
,

55 c⁄° * c⁄° *
keys
,

56 c⁄° 
size_t
 *
key_Àngth
,

57 
size_t
 
numbî_of_keys
);

59 
LIBMEMCACHED_API


60 *
memˇched_gë_by_key
(
memˇched_°
 *
±r
,

61 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

62 c⁄° *
key
, 
size_t
 
key_Àngth
,

63 
size_t
 *
vÆue_Àngth
,

64 
uöt32_t
 *
Êags
,

65 
memˇched_ªtu∫_t
 *
îr‹
);

67 
LIBMEMCACHED_API


68 
memˇched_ªtu∫_t
 
memˇched_mgë_by_key
(
memˇched_°
 *
±r
,

69 c⁄° *
group_key
,

70 
size_t
 
group_key_Àngth
,

71 c⁄° * c⁄° *
keys
,

72 c⁄° 
size_t
 *
key_Àngth
,

73 c⁄° 
size_t
 
numbî_of_keys
);

75 
LIBMEMCACHED_API


76 *
memˇched_„tch
(
memˇched_°
 *
±r
,

77 *
key
,

78 
size_t
 *
key_Àngth
,

79 
size_t
 *
vÆue_Àngth
,

80 
uöt32_t
 *
Êags
,

81 
memˇched_ªtu∫_t
 *
îr‹
);

83 
LIBMEMCACHED_API


84 
memˇched_ªsu…_°
 *
memˇched_„tch_ªsu…
(
memˇched_°
 *
±r
,

85 
memˇched_ªsu…_°
 *
ªsu…
,

86 
memˇched_ªtu∫_t
 *
îr‹
);

88 
LIBMEMCACHED_API


89 
memˇched_ªtu∫_t
 
memˇched_mgë_execuã
(
memˇched_°
 *
±r
,

90 c⁄° * c⁄° *
keys
,

91 c⁄° 
size_t
 *
key_Àngth
,

92 c⁄° 
size_t
 
numbî_of_keys
,

93 
memˇched_execuã_‚
 *
ˇŒback
,

94 *
c⁄ãxt
,

95 c⁄° 
uöt32_t
 
numbî_of_ˇŒbacks
);

97 
LIBMEMCACHED_API


98 
memˇched_ªtu∫_t
 
memˇched_mgë_execuã_by_key
(
memˇched_°
 *
±r
,

99 c⁄° *
group_key
,

100 
size_t
 
group_key_Àngth
,

101 c⁄° * c⁄° *
keys
,

102 c⁄° 
size_t
 *
key_Àngth
,

103 
size_t
 
numbî_of_keys
,

104 
memˇched_execuã_‚
 *
ˇŒback
,

105 *
c⁄ãxt
,

106 c⁄° 
uöt32_t
 
numbî_of_ˇŒbacks
);

108 #ifde‡
__˝lu•lus


	@libmemcached-1.0/hash.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


45 
LIBMEMCACHED_API


46 
uöt32_t
 
memˇched_gíî©e_hash_vÆue
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
memˇched_hash_t
 
hash_Æg‹ôhm
);

48 
LIBMEMCACHED_API


49 c⁄° 
hashkô_°
 *
memˇched_gë_hashkô
(c⁄° 
memˇched_°
 *
±r
);

51 
LIBMEMCACHED_API


52 
memˇched_ªtu∫_t
 
memˇched_£t_hashkô
(
memˇched_°
 *
±r
, 
hashkô_°
 *
hashk
);

54 
LIBMEMCACHED_API


55 
uöt32_t
 
memˇched_gíî©e_hash
(c⁄° 
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
);

57 
LIBMEMCACHED_API


58 
memˇched_aut€je˘
(
memˇched_°
 *
±r
);

60 
LIBMEMCACHED_API


61 c⁄° * 
libmemˇched_°rög_hash
(
memˇched_hash_t
 
ty≥
);

63 #ifde‡
__˝lu•lus


	@libmemcached-1.0/limits.h

39 #¥agm®
⁄˚


41 
	#MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 20

	)

42 
	#MEMCACHED_MAX_BUFFER
 8196

	)

43 
	#MEMCACHED_MAX_HOST_SORT_LENGTH
 86

	)

44 
	#MEMCACHED_MAX_KEY
 251

	)

45 
	#MEMCACHED_PREFIX_KEY_MAX_SIZE
 128

	)

46 
	#MEMCACHED_VERSION_STRING_LENGTH
 24

	)

	@libmemcached-1.0/memcached.h

38 #¥agm®
⁄˚


41 #i‚de‡
__STDC_FORMAT_MACROS


42 
	#__STDC_FORMAT_MACROS


	)

45 #ifde‡
__˝lu•lus


46 
	~<å1/cöây≥s
>

47 
	~<c°ddef
>

48 
	~<c°dlib
>

50 
	~<öây≥s.h
>

51 
	~<°ddef.h
>

52 
	~<°dlib.h
>

53 
	~<°dboﬁ.h
>

56 
	~<sys/ty≥s.h
>

58 
	~<libmemˇched-1.0/visibûôy.h
>

59 
	~<libmemˇched-1.0/c⁄figuª.h
>

60 
	~<libmemˇched-1.0/∂©f‹m.h
>

62 
	~<libmemˇched-1.0/limôs.h
>

63 
	~<libmemˇched-1.0/deÁu…s.h
>

65 
	~<libmemˇched-1.0/ty≥s/behavi‹.h
>

66 
	~<libmemˇched-1.0/ty≥s/ˇŒback.h
>

67 
	~<libmemˇched-1.0/ty≥s/c⁄√˘i⁄.h
>

68 
	~<libmemˇched-1.0/ty≥s/hash.h
>

69 
	~<libmemˇched-1.0/ty≥s/ªtu∫.h
>

70 
	~<libmemˇched-1.0/ty≥s/£rvî_di°ributi⁄.h
>

72 
	~<libmemˇched-1.0/ªtu∫.h
>

74 
	~<libmemˇched-1.0/ty≥s.h
>

75 
	~<libmemˇched-1.0/ˇŒbacks.h
>

76 
	~<libmemˇched-1.0/Æloc.h
>

77 
	~<libmemˇched-1.0/åiggîs.h
>

79 
	~<libhashkô-1.0/hashkô.h
>

81 
	~<libmemˇched-1.0/°ru˘/ˇŒback.h
>

82 
	~<libmemˇched-1.0/°ru˘/°rög.h
>

83 
	~<libmemˇched-1.0/°ru˘/ªsu….h
>

84 
	~<libmemˇched-1.0/°ru˘/Æloˇt‹.h
>

85 
	~<libmemˇched-1.0/°ru˘/ß¶.h
>

86 
	~<libmemˇched-1.0/°ru˘/memˇched.h
>

87 
	~<libmemˇched-1.0/°ru˘/£rvî.h
>

88 
	~<libmemˇched-1.0/°ru˘/°©.h
>

90 
	~<libmemˇched-1.0/basic_°rög.h
>

91 
	~<libmemˇched-1.0/îr‹.h
>

92 
	~<libmemˇched-1.0/°©s.h
>

95 
	~<libmemˇched-1.0/Æloˇt‹s.h
>

96 
	~<libmemˇched-1.0/™Æyze.h
>

97 
	~<libmemˇched-1.0/auto.h
>

98 
	~<libmemˇched-1.0/behavi‹.h
>

99 
	~<libmemˇched-1.0/ˇŒback.h
>

100 
	~<libmemˇched-1.0/dñëe.h
>

101 
	~<libmemˇched-1.0/dump.h
>

102 
	~<libmemˇched-1.0/ícodög_key.h
>

103 
	~<libmemˇched-1.0/exi°.h
>

104 
	~<libmemˇched-1.0/„tch.h
>

105 
	~<libmemˇched-1.0/Êush.h
>

106 
	~<libmemˇched-1.0/Êush_buf„rs.h
>

107 
	~<libmemˇched-1.0/gë.h
>

108 
	~<libmemˇched-1.0/hash.h
>

109 
	~<libmemˇched-1.0/›ti⁄s.h
>

110 
	~<libmemˇched-1.0/∑r£.h
>

111 
	~<libmemˇched-1.0/quô.h
>

112 
	~<libmemˇched-1.0/ªsu….h
>

113 
	~<libmemˇched-1.0/£rvî.h
>

114 
	~<libmemˇched-1.0/£rvî_li°.h
>

115 
	~<libmemˇched-1.0/°‹age.h
>

116 
	~<libmemˇched-1.0/°ªº‹.h
>

117 
	~<libmemˇched-1.0/touch.h
>

118 
	~<libmemˇched-1.0/vîbosôy.h
>

119 
	~<libmemˇched-1.0/vîsi⁄.h
>

120 
	~<libmemˇched-1.0/ß¶.h
>

122 
	~<libmemˇched-1.0/dïªˇãd_ty≥s.h
>

124 #ifde‡
__˝lu•lus


128 
LIBMEMCACHED_API


129 
memˇched_£rvîs_ª£t
(
memˇched_°
 *
±r
);

131 
LIBMEMCACHED_API


132 
memˇched_°
 *
memˇched_¸óã
(memˇched_° *
±r
);

134 
LIBMEMCACHED_API


135 
memˇched_°
 *
memˇched
(c⁄° *
°rög
, 
size_t
 
°rög_Àngth
);

137 
LIBMEMCACHED_API


138 
memˇched_‰ì
(
memˇched_°
 *
±r
);

140 
LIBMEMCACHED_API


141 
memˇched_ªtu∫_t
 
memˇched_ª£t
(
memˇched_°
 *
±r
);

143 
LIBMEMCACHED_API


144 
memˇched_ª£t_œ°_disc⁄√˘ed_£rvî
(
memˇched_°
 *
±r
);

146 
LIBMEMCACHED_API


147 
memˇched_°
 *
memˇched_˛⁄e
(memˇched_° *
˛⁄e
, c⁄° memˇched_° *
±r
);

149 
LIBMEMCACHED_API


150 *
memˇched_gë_u£r_d©a
(c⁄° 
memˇched_°
 *
±r
);

152 
LIBMEMCACHED_API


153 *
memˇched_£t_u£r_d©a
(
memˇched_°
 *
±r
, *
d©a
);

155 
LIBMEMCACHED_API


156 
memˇched_ªtu∫_t
 
memˇched_push
(
memˇched_°
 *
de°ö©i⁄
, c⁄° memˇched_° *
sour˚
);

158 
LIBMEMCACHED_API


159 c⁄° 
memˇched_ö°™˚_°
 * 
memˇched_£rvî_ö°™˚_by_posôi⁄
(c⁄° 
memˇched_°
 *
±r
, 
uöt32_t
 
£rvî_key
);

161 
LIBMEMCACHED_API


162 
uöt32_t
 
memˇched_£rvî_cou¡
(c⁄° 
memˇched_°
 *);

164 
LIBMEMCACHED_API


165 
uöt64_t
 
memˇched_quîy_id
(c⁄° 
memˇched_°
 *);

167 #ifde‡
__˝lu•lus


	@libmemcached-1.0/memcached.hpp

51 #¥agm®
⁄˚


53 
	~<libmemˇched-1.0/memˇched.h
>

55 
	~<libmemˇched/ex˚±i⁄.hµ
>

58 
	~<°rög.h
>

60 
	~<s°ªam
>

61 
	~<°rög
>

62 
	~<ve˘‹
>

63 
	~<m≠
>

65 
«me•a˚
 
	gmemˇche


72 ˛as†
	cMemˇche


74 
	gpublic
:

76 
Memˇche
()

78 
memc_

memˇched
(
NULL
, 0);

81 
Memˇche
(c⁄° 
°d
::
°rög
 &
c⁄fig
)

83 
memc_

memˇched
(
c⁄fig
.
c_°r
(), c⁄fig.
size
());

86 
Memˇche
(c⁄° 
°d
::
°rög
 &
ho°«me
, 
ö_p‹t_t
 
p‹t
)

88 
	gmemc_

memˇched
(
NULL
, 0);

89 i‡(
	gmemc_
)

91 
memˇched_£rvî_add
(
memc_
, 
ho°«me
.
c_°r
(), 
p‹t
);

95 
Memˇche
(
memˇched_°
 *
˛⁄e
)

97 
	gmemc_

memˇched_˛⁄e
(
NULL
, 
˛⁄e
);

100 
Memˇche
(c⁄° Memˇchê&
rhs
)

102 
	gmemc_

memˇched_˛⁄e
(
NULL
, 
rhs
.
gëIm∂
());

105 
	gMemˇche
 &
	g›î©‹
=(c⁄° 
Memˇche
 &
rhs
)

107 i‡(
this
 !&
rhs
)

109 
memˇched_‰ì
(
memc_
);

110 
	gmemc_

memˇched_˛⁄e
(
NULL
, 
rhs
.
gëIm∂
());

113  *
	gthis
;

116 ~
Memˇche
()

118 
memˇched_‰ì
(
memc_
);

124 c⁄° 
memˇched_°
 *
gëIm∂
() const

126  
	gmemc_
;

135 c⁄° 
	g°d
::
°rög
 
gëEº‹
(
memˇched_ªtu∫_t
 
rc
) const

138  
memˇched_°ªº‹
(
NULL
, 
rc
);

141 
boﬁ
 
îr‹
(
°d
::
°rög
& 
îr‹_mesßge
) const

143 i‡(
memˇched_Áûed
(
memˇched_œ°_îr‹
(
memc_
)))

145 
îr‹_mesßge
+
memˇched_œ°_îr‹_mesßge
(
memc_
);

146  
	gåue
;

149  
	gÁl£
;

152 
boﬁ
 
îr‹
() const

154 i‡(
memˇched_Áûed
(
memˇched_œ°_îr‹
(
memc_
)))

156  
	gåue
;

159  
	gÁl£
;

162 
boﬁ
 
îr‹
(
memˇched_ªtu∫_t
& 
¨g
) const

164 
	g¨g

memˇched_œ°_îr‹
(
memc_
);

165  
memˇched_Áûed
(
¨g
);

168 
boﬁ
 
£tBehavi‹
(
memˇched_behavi‹_t
 
Êag
, 
uöt64_t
 
d©a
)

170  (
memˇched_suc˚ss
(
memˇched_behavi‹_£t
(
memc_
, 
Êag
, 
d©a
)));

173 
uöt64_t
 
gëBehavi‹
(
memˇched_behavi‹_t
 
Êag
)

175  
memˇched_behavi‹_gë
(
memc_
, 
Êag
);

184 
boﬁ
 
c⁄figuª
(c⁄° 
°d
::
°rög
 &
c⁄figuøti⁄
)

186 
memˇched_°
 *
√w_memc

memˇched
(
c⁄figuøti⁄
.
c_°r
(), c⁄figuøti⁄.
size
());

188 i‡(
	g√w_memc
)

190 
memˇched_‰ì
(
memc_
);

191 
	gmemc_

√w_memc
;

193  
	gåue
;

196  
	gÁl£
;

206 
boﬁ
 
addSîvî
(c⁄° 
°d
::
°rög
 &
£rvî_«me
, 
ö_p‹t_t
 
p‹t
)

208  
memˇched_suc˚ss
(
memˇched_£rvî_add
(
memc_
, 
£rvî_«me
.
c_°r
(), 
p‹t
));

218 
boﬁ
 
ªmoveSîvî
(c⁄° 
°d
::
°rög
 &
£rvî_«me
, 
ö_p‹t_t
 
p‹t
)

220 
	g°d
::
°rög
 
tmp_°r
;

221 
	g°d
::
o°rög°ªam
 
°r°m
;

222 
	gtmp_°r
.
≠≥nd
(",");

223 
	gtmp_°r
.
≠≥nd
(
£rvî_«me
);

224 
	gtmp_°r
.
≠≥nd
(":");

225 
	g°r°m
 << 
	gp‹t
;

226 
	gtmp_°r
.
≠≥nd
(
°r°m
.
°r
());

230  
	gÁl£
;

241 
memˇched_ªtu∫_t
 
„tch
(
°d
::
°rög
 &
key
,

242 
°d
::
ve˘‹
<> &
ªt_vÆ
,

243 
uöt32_t
 &
Êags
,

244 
uöt64_t
 &
ˇs_vÆue
)

246 
memˇched_ªtu∫_t
 
	grc
;

248 
memˇched_ªsu…_°
 *
	gªsu…
;

249 i‡((
	gªsu…

memˇched_„tch_ªsu…
(
memc_
, 
NULL
, &
rc
)))

252 
	gkey
.
assign
(
memˇched_ªsu…_key_vÆue
(
ªsu…
), 
memˇched_ªsu…_key_Àngth
(result));

255 
	gªt_vÆ
.
ª£rve
(
memˇched_ªsu…_Àngth
(
ªsu…
) +1);

256 
	gªt_vÆ
.
assign
(
memˇched_ªsu…_vÆue
(
ªsu…
),

257 
memˇched_ªsu…_vÆue
(
ªsu…
Ë+
memˇched_ªsu…_Àngth
(result) +1);

258 
	gªt_vÆ
.
ªsize
(
memˇched_ªsu…_Àngth
(
ªsu…
));

261 
	gÊags

memˇched_ªsu…_Êags
(
ªsu…
);

262 
	gˇs_vÆue

memˇched_ªsu…_ˇs
(
ªsu…
);

264 
memˇched_ªsu…_‰ì
(
ªsu…
);

266  
	grc
;

269 
memˇched_ªtu∫_t
 
„tch
(
°d
::
°rög
 &
key
,

270 
°d
::
ve˘‹
<> &
ªt_vÆ
)

272 
uöt32_t
 
Êags
= 0;

273 
uöt64_t
 
	gˇs_vÆue
= 0;

275  
„tch
(
key
, 
ªt_vÆ
, 
Êags
, 
ˇs_vÆue
);

286 
boﬁ
 
gë
(c⁄° 
°d
::
°rög
 &
key
, std::
ve˘‹
<> &
ªt_vÆ
)

288 
uöt32_t
 
Êags
= 0;

289 
memˇched_ªtu∫_t
 
	grc
;

290 
size_t
 
	gvÆue_Àngth
= 0;

292 *
	gvÆue

memˇched_gë
(
memc_
, 
key
.
c_°r
(), key.
Àngth
(),

293 &
vÆue_Àngth
, &
Êags
, &
rc
);

294 i‡(
	gvÆue
 !
NULL
 && 
ªt_vÆ
.
em±y
())

296 
ªt_vÆ
.
ª£rve
(
vÆue_Àngth
 +1);

297 
	gªt_vÆ
.
assign
(
vÆue
, vÆuê+
vÆue_Àngth
 +1);

298 
	gªt_vÆ
.
ªsize
(
vÆue_Àngth
);

299 
‰ì
(
vÆue
);

301  
	gåue
;

304  
	gÁl£
;

319 
boﬁ
 
gëByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

320 c⁄° 
°d
::
°rög
 &
key
,

321 
°d
::
ve˘‹
<> &
ªt_vÆ
)

323 
uöt32_t
 
Êags
= 0;

324 
memˇched_ªtu∫_t
 
	grc
;

325 
size_t
 
	gvÆue_Àngth
= 0;

327 *
	gvÆue

memˇched_gë_by_key
(
memc_
,

328 
ma°î_key
.
c_°r
(), ma°î_key.
Àngth
(),

329 
key
.
c_°r
(), key.
Àngth
(),

330 &
vÆue_Àngth
, &
Êags
, &
rc
);

331 i‡(
	gvÆue
)

333 
	gªt_vÆ
.
ª£rve
(
vÆue_Àngth
 +1);

334 
	gªt_vÆ
.
assign
(
vÆue
, vÆuê+
vÆue_Àngth
 +1);

335 
	gªt_vÆ
.
ªsize
(
vÆue_Àngth
);

336 
‰ì
(
vÆue
);

338  
	gåue
;

340  
	gÁl£
;

350 
boﬁ
 
mgë
(c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& 
keys
)

352 
°d
::
ve˘‹
<c⁄° *> 
ªÆ_keys
;

353 
	g°d
::
ve˘‹
<
size_t
> 
key_Àn
;

360 
	gªÆ_keys
.
ª£rve
(
keys
.
size
());

361 
	gkey_Àn
.
ª£rve
(
keys
.
size
());

363 
	g°d
::
ve˘‹
<
°d
::
°rög
>::
c⁄°_ôî©‹
 
ô

keys
.
begö
();

365 
	gô
 !
keys
.
íd
())

367 
ªÆ_keys
.
push_back
(
c⁄°_ˇ°
<*>((*
ô
).
c_°r
()));

368 
	gkey_Àn
.
push_back
((*
ô
).
Àngth
());

369 ++
	gô
;

376 i‡(
nŸ
 
	gªÆ_keys
.
em±y
())

378  
memˇched_suc˚ss
(
memˇched_mgë
(
memc_
, &
ªÆ_keys
[0], &
key_Àn
[0],Ñól_keys.
size
()));

381  
	gÁl£
;

395 
boﬁ
 
£t
(c⁄° 
°d
::
°rög
 &
key
,

396 c⁄° 
°d
::
ve˘‹
<> &
vÆue
,

397 
time_t
 
expú©i⁄
,

398 
uöt32_t
 
Êags
)

400 
memˇched_ªtu∫_t
 
	grc

memˇched_£t
(
memc_
,

401 
key
.
c_°r
(), key.
Àngth
(),

402 &
vÆue
[0], vÆue.
size
(),

403 
expú©i⁄
, 
Êags
);

404  
memˇched_suc˚ss
(
rc
);

407 
boﬁ
 
£t
(c⁄° 
°d
::
°rög
 &
key
,

408 c⁄° * 
vÆue
, c⁄° 
size_t
 
vÆue_Àngth
,

409 
time_t
 
expú©i⁄
,

410 
uöt32_t
 
Êags
)

412 
memˇched_ªtu∫_t
 
	grc

memˇched_£t
(
memc_
,

413 
key
.
c_°r
(), key.
Àngth
(),

414 
vÆue
, 
vÆue_Àngth
,

415 
expú©i⁄
, 
Êags
);

416  
memˇched_suc˚ss
(
rc
);

430 
boﬁ
 
£tByKey
(c⁄° 
°d
::
°rög
& 
ma°î_key
,

431 c⁄° 
°d
::
°rög
& 
key
,

432 c⁄° 
°d
::
ve˘‹
<> &
vÆue
,

433 
time_t
 
expú©i⁄
,

434 
uöt32_t
 
Êags
)

436  
memˇched_suc˚ss
(
memˇched_£t_by_key
(
memc_
, 
ma°î_key
.
c_°r
(),

437 
ma°î_key
.
Àngth
(),

438 
key
.
c_°r
(), key.
Àngth
(),

439 &
vÆue
[0], vÆue.
size
(),

440 
expú©i⁄
,

441 
Êags
));

454 
boﬁ
 
£tAŒ
(c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& 
keys
,

455 c⁄° 
°d
::
ve˘‹
< std::ve˘‹<> *>& 
vÆues
,

456 
time_t
 
expú©i⁄
,

457 
uöt32_t
 
Êags
)

459 
boﬁ
 
	gªtvÆ

åue
;

460 
	g°d
::
ve˘‹
<
°d
::
°rög
>::
c⁄°_ôî©‹
 
key_ô

keys
.
begö
();

461 
	g°d
::
ve˘‹
< 
°d
::ve˘‹<> *>::
c⁄°_ôî©‹
 
vÆ_ô

vÆues
.
begö
();

462 
	gkey_ô
 !
keys
.
íd
())

464 
ªtvÆ

£t
((*
key_ô
), *(*
vÆ_ô
), 
expú©i⁄
, 
Êags
);

465 i‡(
	gªtvÆ
 =
Ál£
)

467  
ªtvÆ
;

469 ++
	gkey_ô
;

470 ++
	gvÆ_ô
;

472  
	gªtvÆ
;

484 
boﬁ
 
£tAŒ
(c⁄° 
°d
::
m≠
<c⁄° std::
°rög
, std::
ve˘‹
<> >& 
key_vÆue_m≠
,

485 
time_t
 
expú©i⁄
,

486 
uöt32_t
 
Êags
)

488 
boﬁ
 
	gªtvÆ

åue
;

489 
	g°d
::
m≠
<c⁄° 
°d
::
°rög
, std::
ve˘‹
<> >::
c⁄°_ôî©‹
 
ô

key_vÆue_m≠
.
begö
();

491 
	gô
 !
key_vÆue_m≠
.
íd
())

493 
ªtvÆ

£t
(
ô
->
fú°
, it->
£c⁄d
, 
expú©i⁄
, 
Êags
);

494 i‡(
	gªtvÆ
 =
Ál£
)

497  
Ál£
;

499 ++
	gô
;

502  
	gåue
;

515 
boﬁ
 
ö¸emít
(c⁄° 
°d
::
°rög
& 
key
, 
uöt32_t
 
off£t
, 
uöt64_t
 *
vÆue
)

517  
memˇched_suc˚ss
(
memˇched_ö¸emít
(
memc_
, 
key
.
c_°r
(), key.
Àngth
(), 
off£t
, 
vÆue
));

530 
boﬁ
 
de¸emít
(c⁄° 
°d
::
°rög
& 
key
, 
uöt32_t
 
off£t
, 
uöt64_t
 *
vÆue
)

532  
memˇched_suc˚ss
(
memˇched_de¸emít
(
memc_
, 
key
.
c_°r
(),

533 
key
.
Àngth
(),

534 
off£t
, 
vÆue
));

546 
boﬁ
 
add
(c⁄° 
°d
::
°rög
& 
key
, c⁄° std::
ve˘‹
<>& 
vÆue
)

548  
memˇched_suc˚ss
(
memˇched_add
(
memc_
, 
key
.
c_°r
(), key.
Àngth
(),

549 &
vÆue
[0], vÆue.
size
(), 0, 0));

562 
boﬁ
 
addByKey
(c⁄° 
°d
::
°rög
& 
ma°î_key
,

563 c⁄° 
°d
::
°rög
& 
key
,

564 c⁄° 
°d
::
ve˘‹
<>& 
vÆue
)

566  
memˇched_suc˚ss
(
memˇched_add_by_key
(
memc_
,

567 
ma°î_key
.
c_°r
(),

568 
ma°î_key
.
Àngth
(),

569 
key
.
c_°r
(),

570 
key
.
Àngth
(),

571 &
vÆue
[0],

572 
vÆue
.
size
(),

584 
boﬁ
 
ª∂a˚
(c⁄° 
°d
::
°rög
& 
key
, c⁄° std::
ve˘‹
<>& 
vÆue
)

586  
memˇched_suc˚ss
(
memˇched_ª∂a˚
(
memc_
, 
key
.
c_°r
(), key.
Àngth
(),

587 &
vÆue
[0], vÆue.
size
(),

601 
boﬁ
 
ª∂a˚ByKey
(c⁄° 
°d
::
°rög
& 
ma°î_key
,

602 c⁄° 
°d
::
°rög
& 
key
,

603 c⁄° 
°d
::
ve˘‹
<>& 
vÆue
)

605  
memˇched_suc˚ss
(
memˇched_ª∂a˚_by_key
(
memc_
,

606 
ma°î_key
.
c_°r
(),

607 
ma°î_key
.
Àngth
(),

608 
key
.
c_°r
(),

609 
key
.
Àngth
(),

610 &
vÆue
[0],

611 
vÆue
.
size
(),

622 
boﬁ
 
¥ïíd
(c⁄° 
°d
::
°rög
& 
key
, c⁄° std::
ve˘‹
<>& 
vÆue
)

624  
memˇched_suc˚ss
(
memˇched_¥ïíd
(
memc_
, 
key
.
c_°r
(), key.
Àngth
(),

625 &
vÆue
[0], vÆue.
size
(), 0, 0));

638 
boﬁ
 
¥ïídByKey
(c⁄° 
°d
::
°rög
& 
ma°î_key
,

639 c⁄° 
°d
::
°rög
& 
key
,

640 c⁄° 
°d
::
ve˘‹
<>& 
vÆue
)

642  
memˇched_suc˚ss
(
memˇched_¥ïíd_by_key
(
memc_
,

643 
ma°î_key
.
c_°r
(),

644 
ma°î_key
.
Àngth
(),

645 
key
.
c_°r
(),

646 
key
.
Àngth
(),

647 &
vÆue
[0],

648 
vÆue
.
size
(),

660 
boﬁ
 
≠≥nd
(c⁄° 
°d
::
°rög
& 
key
, c⁄° std::
ve˘‹
<>& 
vÆue
)

662  
memˇched_suc˚ss
(
memˇched_≠≥nd
(
memc_
,

663 
key
.
c_°r
(),

664 
key
.
Àngth
(),

665 &
vÆue
[0],

666 
vÆue
.
size
(),

680 
boﬁ
 
≠≥ndByKey
(c⁄° 
°d
::
°rög
& 
ma°î_key
,

681 c⁄° 
°d
::
°rög
& 
key
,

682 c⁄° 
°d
::
ve˘‹
<> &
vÆue
)

684  
memˇched_suc˚ss
(
memˇched_≠≥nd_by_key
(
memc_
,

685 
ma°î_key
.
c_°r
(),

686 
ma°î_key
.
Àngth
(),

687 
key
.
c_°r
(),

688 
key
.
Àngth
(),

689 &
vÆue
[0],

690 
vÆue
.
size
(),

702 
boﬁ
 
ˇs
(c⁄° 
°d
::
°rög
& 
key
,

703 c⁄° 
°d
::
ve˘‹
<>& 
vÆue
,

704 
uöt64_t
 
ˇs_¨g
)

706  
memˇched_suc˚ss
(
memˇched_ˇs
(
memc_
, 
key
.
c_°r
(), key.
Àngth
(),

707 &
vÆue
[0], vÆue.
size
(),

708 0, 0, 
ˇs_¨g
));

721 
boﬁ
 
ˇsByKey
(c⁄° 
°d
::
°rög
& 
ma°î_key
,

722 c⁄° 
°d
::
°rög
& 
key
,

723 c⁄° 
°d
::
ve˘‹
<> &
vÆue
,

724 
uöt64_t
 
ˇs_¨g
)

726  
memˇched_suc˚ss
(
memˇched_ˇs_by_key
(
memc_
,

727 
ma°î_key
.
c_°r
(),

728 
ma°î_key
.
Àngth
(),

729 
key
.
c_°r
(),

730 
key
.
Àngth
(),

731 &
vÆue
[0],

732 
vÆue
.
size
(),

733 0, 0, 
ˇs_¨g
));

742 
boﬁ
 
ªmove
(c⁄° 
°d
::
°rög
& 
key
)

744  
memˇched_suc˚ss
(
memˇched_dñëe
(
memc_
, 
key
.
c_°r
(), key.
Àngth
(), 0));

754 
boﬁ
 
ªmove
(c⁄° 
°d
::
°rög
& 
key
, 
time_t
 
expú©i⁄
)

756  
memˇched_suc˚ss
(
memˇched_dñëe
(
memc_
,

757 
key
.
c_°r
(),

758 
key
.
Àngth
(),

759 
expú©i⁄
));

769 
boﬁ
 
ªmoveByKey
(c⁄° 
°d
::
°rög
& 
ma°î_key
,

770 c⁄° 
°d
::
°rög
& 
key
)

772  
memˇched_suc˚ss
(
memˇched_dñëe_by_key
(
memc_
,

773 
ma°î_key
.
c_°r
(),

774 
ma°î_key
.
Àngth
(),

775 
key
.
c_°r
(),

776 
key
.
Àngth
(),

788 
boﬁ
 
ªmoveByKey
(c⁄° 
°d
::
°rög
& 
ma°î_key
,

789 c⁄° 
°d
::
°rög
& 
key
,

790 
time_t
 
expú©i⁄
)

792  
memˇched_suc˚ss
(
memˇched_dñëe_by_key
(
memc_
,

793 
ma°î_key
.
c_°r
(),

794 
ma°î_key
.
Àngth
(),

795 
key
.
c_°r
(),

796 
key
.
Àngth
(),

797 
expú©i⁄
));

807 
boﬁ
 
Êush
(
time_t
 
expú©i⁄
= 0)

809  
memˇched_suc˚ss
(
memˇched_Êush
(
memc_
, 
expú©i⁄
));

816 c⁄° 
	g°d
::
°rög
 
libVîsi⁄
() const

818 c⁄° *
vî

memˇched_lib_vîsi⁄
();

819 c⁄° 
	g°d
::
°rög
 
vîsi⁄
(
vî
);

820  
	gvîsi⁄
;

831 
boﬁ
 
gëSèts
(
°d
::
m≠
< std::
°rög
, std::m≠<°d::°rög, std::°rög> >& 
°©s_m≠
)

833 
memˇched_ªtu∫_t
 
rc
;

834 
memˇched_°©_°
 *
	g°©s

memˇched_°©
(
memc_
, 
NULL
, &
rc
);

836 i‡(
	grc
 !
MEMCACHED_SUCCESS
 &&

837 
rc
 !
MEMCACHED_SOME_ERRORS
)

839  
Ál£
;

842 
uöt32_t
 
	g£rvî_cou¡

memˇched_£rvî_cou¡
(
memc_
);

848 
uöt32_t
 
	gx
0; x < 
	g£rvî_cou¡
; x++)

850 c⁄° 
memˇched_ö°™˚_°
 * 
	gö°™˚

memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_
, 
x
);

851 
	g°d
::
o°rög°ªam
 
°r°m
;

852 
	g°d
::
°rög
 
£rvî_«me
(
memˇched_£rvî_«me
(
ö°™˚
));

853 
	g£rvî_«me
.
≠≥nd
(":");

854 
	g°r°m
 << 
memˇched_£rvî_p‹t
(
ö°™˚
);

855 
	g£rvî_«me
.
≠≥nd
(
°r°m
.
°r
());

857 
	g°d
::
m≠
<
°d
::
°rög
, std::°rög> 
£rvî_°©s
;

858 **
	gli°

memˇched_°©_gë_keys
(
memc_
, &
°©s
[
x
], &
rc
);

859 ** 
	g±r

li°
; *ptr;Ötr++)

861 *
	gvÆue

memˇched_°©_gë_vÆue
(
memc_
, &
°©s
[
x
], *
±r
, &
rc
);

862 
	g£rvî_°©s
[*
±r
]
vÆue
;

863 
‰ì
(
vÆue
);

866 
	g°©s_m≠
[
£rvî_«me
]
£rvî_°©s
;

867 
‰ì
(
li°
);

870 
memˇched_°©_‰ì
(
memc_
, 
°©s
);

871  
	gåue
;

874 
	g¥iv©e
:

875 
memˇched_°
 *
memc_
;

	@libmemcached-1.0/options.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
libmemˇched_check_c⁄figuøti⁄
(c⁄° *
›ti⁄_°rög
, 
size_t
 
Àngth
, *
îr‹_buf„r
, size_à
îr‹_buf„r_size
);

47 #ifde‡
__˝lu•lus


	@libmemcached-1.0/parse.h

12 #¥agm®
⁄˚


14 #ifde‡
__˝lu•lus


18 
LIBMEMCACHED_API


19 
memˇched_£rvî_li°_°
 
memˇched_£rvîs_∑r£
(c⁄° *
£rvî_°rögs
);

21 #ifde‡
__˝lu•lus


	@libmemcached-1.0/platform.h

38 #¥agm®
⁄˚


41 #i‡
deföed
(
_WIN32
)

42 
	~<wösock2.h
>

43 
	~<ws2t˝ù.h
>

45 #i‚de‡
HAVE_IN_PORT_T


46 
	tö_p‹t_t
;

47 
	#HAVE_IN_PORT_T
 1

	)

50 
SOCKET
 
	tmemˇched_sockë_t
;

53 
	~<sys/sockë.h
>

54 
	~<√töë/ö.h
>

55 
	~<¨∑/öë.h
>

56 
	~<√tdb.h
>

57 
	~<sys/un.h
>

58 
	~<√töë/t˝.h
>

60 
	tmemˇched_sockë_t
;

	@libmemcached-1.0/quit.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_quô
(
memˇched_°
 *
±r
);

47 #ifde‡
__˝lu•lus


	@libmemcached-1.0/result.h

38 
	~<libmemˇched-1.0/°ru˘/ªsu….h
>

40 #¥agm®
⁄˚


42 #ifde‡
__˝lu•lus


47 
LIBMEMCACHED_API


48 
memˇched_ªsu…_‰ì
(
memˇched_ªsu…_°
 *
ªsu…
);

50 
LIBMEMCACHED_API


51 
memˇched_ªsu…_ª£t
(
memˇched_ªsu…_°
 *
±r
);

53 
LIBMEMCACHED_API


54 
memˇched_ªsu…_°
 *
memˇched_ªsu…_¸óã
(c⁄° 
memˇched_°
 *
±r
,

55 
memˇched_ªsu…_°
 *
ªsu…
);

57 
LIBMEMCACHED_API


58 c⁄° *
memˇched_ªsu…_key_vÆue
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

60 
LIBMEMCACHED_API


61 
size_t
 
memˇched_ªsu…_key_Àngth
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

63 
LIBMEMCACHED_API


64 c⁄° *
memˇched_ªsu…_vÆue
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

66 
LIBMEMCACHED_API


67 *
memˇched_ªsu…_èke_vÆue
(
memˇched_ªsu…_°
 *
£lf
);

69 
LIBMEMCACHED_API


70 
size_t
 
memˇched_ªsu…_Àngth
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

72 
LIBMEMCACHED_API


73 
uöt32_t
 
memˇched_ªsu…_Êags
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

75 
LIBMEMCACHED_API


76 
uöt64_t
 
memˇched_ªsu…_ˇs
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

78 
LIBMEMCACHED_API


79 
memˇched_ªtu∫_t
 
memˇched_ªsu…_£t_vÆue
(
memˇched_ªsu…_°
 *
±r
, c⁄° *
vÆue
, 
size_t
 
Àngth
);

81 
LIBMEMCACHED_API


82 
memˇched_ªsu…_£t_Êags
(
memˇched_ªsu…_°
 *
£lf
, 
uöt32_t
 
Êags
);

84 
LIBMEMCACHED_API


85 
memˇched_ªsu…_£t_expú©i⁄
(
memˇched_ªsu…_°
 *
£lf
, 
time_t
 
expú©i⁄
);

87 #ifde‡
__˝lu•lus


	@libmemcached-1.0/return.h

37 #¥agm®
⁄˚


39 
ölöe
 
boﬁ
 
	$memˇched_suc˚ss
(
memˇched_ªtu∫_t
 
rc
)

41  (
rc
 =
MEMCACHED_BUFFERED
 ||

42 
rc
 =
MEMCACHED_DELETED
 ||

43 
rc
 =
MEMCACHED_END
 ||

44 
rc
 =
MEMCACHED_ITEM
 ||

45 
rc
 =
MEMCACHED_STAT
 ||

46 
rc
 =
MEMCACHED_STORED
 ||

47 
rc
 =
MEMCACHED_SUCCESS
 ||

48 
rc
 =
MEMCACHED_VALUE
);

49 
	}
}

51 
ölöe
 
boﬁ
 
	$memˇched_Áûed
(
memˇched_ªtu∫_t
 
rc
)

53  (
rc
 !
MEMCACHED_SUCCESS
 &&

54 
rc
 !
MEMCACHED_END
 &&

55 
rc
 !
MEMCACHED_STORED
 &&

56 
rc
 !
MEMCACHED_STAT
 &&

57 
rc
 !
MEMCACHED_DELETED
 &&

58 
rc
 !
MEMCACHED_BUFFERED
 &&

59 
rc
 !
MEMCACHED_VALUE
);

60 
	}
}

62 
ölöe
 
boﬁ
 
	$memˇched_Áèl
(
memˇched_ªtu∫_t
 
rc
)

65 
rc
 !
MEMCACHED_BUFFERED
 &&

66 
rc
 !
MEMCACHED_CLIENT_ERROR
 &&

67 
rc
 !
MEMCACHED_DATA_EXISTS
 &&

68 
rc
 !
MEMCACHED_DELETED
 &&

69 
rc
 !
MEMCACHED_E2BIG
 &&

70 
rc
 !
MEMCACHED_END
 &&

71 
rc
 !
MEMCACHED_ITEM
 &&

72 
rc
 !
MEMCACHED_ERROR
 &&

73 
rc
 !
MEMCACHED_NOTFOUND
 &&

74 
rc
 !
MEMCACHED_NOTSTORED
 &&

75 
rc
 !
MEMCACHED_SERVER_MEMORY_ALLOCATION_FAILURE
 &&

76 
rc
 !
MEMCACHED_STAT
 &&

77 
rc
 !
MEMCACHED_STORED
 &&

78 
rc
 !
MEMCACHED_SUCCESS
 &&

79 
rc
 !
MEMCACHED_VALUE
);

80 
	}
}

82 
	#memˇched_c⁄töue
(
__memˇched_ªtu∫_t
Ë((__memˇched_ªtu∫_tË=
MEMCACHED_IN_PROGRESS
)

	)

	@libmemcached-1.0/sasl.h

38 #¥agm®
⁄˚


40 #i‡
deföed
(
LIBMEMCACHED_WITH_SASL_SUPPORT
) && LIBMEMCACHED_WITH_SASL_SUPPORT

41 
	~<ß¶/ß¶.h
>

43 
	#ß¶_ˇŒback_t
 

	)

46 #ifde‡
__˝lu•lus


50 
LIBMEMCACHED_API


51 
memˇched_£t_ß¶_ˇŒbacks
(
memˇched_°
 *
±r
,

52 c⁄° 
ß¶_ˇŒback_t
 *
ˇŒbacks
);

54 
LIBMEMCACHED_API


55 
memˇched_ªtu∫_t
 
memˇched_£t_ß¶_auth_d©a
(
memˇched_°
 *
±r
,

56 c⁄° *
u£∫ame
,

57 c⁄° *
∑ssw‹d
);

59 
LIBMEMCACHED_API


60 
memˇched_ªtu∫_t
 
memˇched_de°roy_ß¶_auth_d©a
(
memˇched_°
 *
±r
);

63 
LIBMEMCACHED_API


64 
ß¶_ˇŒback_t
 *
memˇched_gë_ß¶_ˇŒbacks
(
memˇched_°
 *
±r
);

66 #ifde‡
__˝lu•lus


70 
	~<libmemˇched-1.0/°ru˘/ß¶.h
>

	@libmemcached-1.0/server.h

39 #¥agm®
⁄˚


41 
	~<libmemˇched-1.0/°ru˘/£rvî.h
>

43 #ifde‡
__˝lu•lus


47 
LIBMEMCACHED_API


48 
memˇched_ªtu∫_t
 
memˇched_£rvî_curs‹
(c⁄° 
memˇched_°
 *
±r
,

49 c⁄° 
memˇched_£rvî_‚
 *
ˇŒback
,

50 *
c⁄ãxt
,

51 
uöt32_t
 
numbî_of_ˇŒbacks
);

53 
LIBMEMCACHED_API


54 c⁄° 
memˇched_ö°™˚_°
 * 
memˇched_£rvî_by_key
(
memˇched_°
 *
±r
,

55 c⁄° *
key
,

56 
size_t
 
key_Àngth
,

57 
memˇched_ªtu∫_t
 *
îr‹
);

59 
LIBMEMCACHED_API


60 
memˇched_£rvî_îr‹_ª£t
(
memˇched_£rvî_°
 *
±r
);

62 
LIBMEMCACHED_API


63 
memˇched_£rvî_‰ì
(
memˇched_£rvî_°
 *
±r
);

65 
LIBMEMCACHED_API


66 c⁄° 
memˇched_ö°™˚_°
 * 
memˇched_£rvî_gë_œ°_disc⁄√˘
(c⁄° 
memˇched_°
 *
±r
);

69 
LIBMEMCACHED_API


70 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_udp
(
memˇched_°
 *
±r
,

71 c⁄° *
ho°«me
,

72 
ö_p‹t_t
 
p‹t
);

73 
LIBMEMCACHED_API


74 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_unix_sockë
(
memˇched_°
 *
±r
,

75 c⁄° *
fûíame
);

76 
LIBMEMCACHED_API


77 
memˇched_ªtu∫_t
 
memˇched_£rvî_add
(
memˇched_°
 *
±r
,

78 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
);

80 
LIBMEMCACHED_API


81 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_udp_wôh_weight
(
memˇched_°
 *
±r
,

82 c⁄° *
ho°«me
,

83 
ö_p‹t_t
 
p‹t
,

84 
uöt32_t
 
weight
);

85 
LIBMEMCACHED_API


86 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_unix_sockë_wôh_weight
(
memˇched_°
 *
±r
,

87 c⁄° *
fûíame
,

88 
uöt32_t
 
weight
);

89 
LIBMEMCACHED_API


90 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_wôh_weight
(
memˇched_°
 *
±r
, c⁄° *
ho°«me
,

91 
ö_p‹t_t
 
p‹t
,

92 
uöt32_t
 
weight
);

97 
LIBMEMCACHED_API


98 
uöt32_t
 
memˇched_£rvî_ª•⁄£_cou¡
(c⁄° 
memˇched_ö°™˚_°
 * 
£lf
);

100 
LIBMEMCACHED_API


101 c⁄° *
memˇched_£rvî_«me
(c⁄° 
memˇched_ö°™˚_°
 * 
£lf
);

103 
LIBMEMCACHED_API


104 
ö_p‹t_t
 
memˇched_£rvî_p‹t
(c⁄° 
memˇched_ö°™˚_°
 * 
£lf
);

106 
LIBMEMCACHED_API


107 
memˇched_ö°™˚_√xt_ªåy
(c⁄° 
memˇched_ö°™˚_°
 * 
£lf
, c⁄° 
time_t
 
absﬁuã_time
);

109 
LIBMEMCACHED_API


110 c⁄° *
memˇched_£rvî_ty≥
(c⁄° 
memˇched_ö°™˚_°
 * 
±r
);

112 
LIBMEMCACHED_API


113 
uöt8_t
 
memˇched_£rvî_maj‹_vîsi⁄
(c⁄° 
memˇched_ö°™˚_°
 * 
±r
);

115 
LIBMEMCACHED_API


116 
uöt8_t
 
memˇched_£rvî_mö‹_vîsi⁄
(c⁄° 
memˇched_ö°™˚_°
 * 
±r
);

118 
LIBMEMCACHED_API


119 
uöt8_t
 
memˇched_£rvî_mi¸o_vîsi⁄
(c⁄° 
memˇched_ö°™˚_°
 * 
±r
);

121 #ifde‡
__˝lu•lus


	@libmemcached-1.0/server_list.h

38 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


46 
LIBMEMCACHED_API


47 
memˇched_£rvî_li°_‰ì
(
memˇched_£rvî_li°_°
 
±r
);

49 
LIBMEMCACHED_API


50 
memˇched_ªtu∫_t
 
memˇched_£rvî_push
(
memˇched_°
 *
±r
, c⁄° 
memˇched_£rvî_li°_°
 
li°
);

52 
LIBMEMCACHED_API


53 
memˇched_£rvî_li°_°
 
memˇched_£rvî_li°_≠≥nd
(memˇched_£rvî_li°_° 
±r
,

54 c⁄° *
ho°«me
,

55 
ö_p‹t_t
 
p‹t
,

56 
memˇched_ªtu∫_t
 *
îr‹
);

57 
LIBMEMCACHED_API


58 
memˇched_£rvî_li°_°
 
memˇched_£rvî_li°_≠≥nd_wôh_weight
(memˇched_£rvî_li°_° 
±r
,

59 c⁄° *
ho°«me
,

60 
ö_p‹t_t
 
p‹t
,

61 
uöt32_t
 
weight
,

62 
memˇched_ªtu∫_t
 *
îr‹
);

63 
LIBMEMCACHED_API


64 
uöt32_t
 
memˇched_£rvî_li°_cou¡
(c⁄° 
memˇched_£rvî_li°_°
 
±r
);

66 #ifde‡
__˝lu•lus


	@libmemcached-1.0/stats.h

38 
	~<libmemˇched-1.0/°ru˘/°©.h
>

40 #¥agm®
⁄˚


42 #ifde‡
__˝lu•lus


46 
LIBMEMCACHED_API


47 
memˇched_°©_‰ì
(c⁄° 
memˇched_°
 *, 
memˇched_°©_°
 *);

49 
LIBMEMCACHED_API


50 
memˇched_°©_°
 *
memˇched_°©
(
memˇched_°
 *
±r
, *
¨gs
, 
memˇched_ªtu∫_t
 *
îr‹
);

52 
LIBMEMCACHED_API


53 
memˇched_ªtu∫_t
 
memˇched_°©_£rvî«me
(
memˇched_°©_°
 *
memc_°©
, *
¨gs
,

54 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
);

56 
LIBMEMCACHED_API


57 *
memˇched_°©_gë_vÆue
(c⁄° 
memˇched_°
 *
±r
, 
memˇched_°©_°
 *
memc_°©
,

58 c⁄° *
key
, 
memˇched_ªtu∫_t
 *
îr‹
);

60 
LIBMEMCACHED_API


61 ** 
memˇched_°©_gë_keys
(
memˇched_°
 *
±r
, 
memˇched_°©_°
 *
memc_°©
,

62 
memˇched_ªtu∫_t
 *
îr‹
);

64 
LIBMEMCACHED_API


65 
memˇched_ªtu∫_t
 
memˇched_°©_execuã
(
memˇched_°
 *
memc
, c⁄° *
¨gs
, 
memˇched_°©_‚
 
func
, *
c⁄ãxt
);

67 #ifde‡
__˝lu•lus


	@libmemcached-1.0/storage.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


45 
LIBMEMCACHED_API


46 
memˇched_ªtu∫_t
 
memˇched_£t
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

47 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

48 
time_t
 
expú©i⁄
,

49 
uöt32_t
 
Êags
);

50 
LIBMEMCACHED_API


51 
memˇched_ªtu∫_t
 
memˇched_add
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

52 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

53 
time_t
 
expú©i⁄
,

54 
uöt32_t
 
Êags
);

55 
LIBMEMCACHED_API


56 
memˇched_ªtu∫_t
 
memˇched_ª∂a˚
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

57 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

58 
time_t
 
expú©i⁄
,

59 
uöt32_t
 
Êags
);

60 
LIBMEMCACHED_API


61 
memˇched_ªtu∫_t
 
memˇched_≠≥nd
(
memˇched_°
 *
±r
,

62 c⁄° *
key
, 
size_t
 
key_Àngth
,

63 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

64 
time_t
 
expú©i⁄
,

65 
uöt32_t
 
Êags
);

66 
LIBMEMCACHED_API


67 
memˇched_ªtu∫_t
 
memˇched_¥ïíd
(
memˇched_°
 *
±r
,

68 c⁄° *
key
, 
size_t
 
key_Àngth
,

69 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

70 
time_t
 
expú©i⁄
,

71 
uöt32_t
 
Êags
);

72 
LIBMEMCACHED_API


73 
memˇched_ªtu∫_t
 
memˇched_ˇs
(
memˇched_°
 *
±r
,

74 c⁄° *
key
, 
size_t
 
key_Àngth
,

75 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

76 
time_t
 
expú©i⁄
,

77 
uöt32_t
 
Êags
,

78 
uöt64_t
 
ˇs
);

80 
LIBMEMCACHED_API


81 
memˇched_ªtu∫_t
 
memˇched_£t_by_key
(
memˇched_°
 *
±r
,

82 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

83 c⁄° *
key
, 
size_t
 
key_Àngth
,

84 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

85 
time_t
 
expú©i⁄
,

86 
uöt32_t
 
Êags
);

88 
LIBMEMCACHED_API


89 
memˇched_ªtu∫_t
 
memˇched_add_by_key
(
memˇched_°
 *
±r
,

90 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

91 c⁄° *
key
, 
size_t
 
key_Àngth
,

92 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

93 
time_t
 
expú©i⁄
,

94 
uöt32_t
 
Êags
);

96 
LIBMEMCACHED_API


97 
memˇched_ªtu∫_t
 
memˇched_ª∂a˚_by_key
(
memˇched_°
 *
±r
,

98 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

99 c⁄° *
key
, 
size_t
 
key_Àngth
,

100 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

101 
time_t
 
expú©i⁄
,

102 
uöt32_t
 
Êags
);

104 
LIBMEMCACHED_API


105 
memˇched_ªtu∫_t
 
memˇched_¥ïíd_by_key
(
memˇched_°
 *
±r
,

106 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

107 c⁄° *
key
, 
size_t
 
key_Àngth
,

108 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

109 
time_t
 
expú©i⁄
,

110 
uöt32_t
 
Êags
);

112 
LIBMEMCACHED_API


113 
memˇched_ªtu∫_t
 
memˇched_≠≥nd_by_key
(
memˇched_°
 *
±r
,

114 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

115 c⁄° *
key
, 
size_t
 
key_Àngth
,

116 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

117 
time_t
 
expú©i⁄
,

118 
uöt32_t
 
Êags
);

120 
LIBMEMCACHED_API


121 
memˇched_ªtu∫_t
 
memˇched_ˇs_by_key
(
memˇched_°
 *
±r
,

122 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

123 c⁄° *
key
, 
size_t
 
key_Àngth
,

124 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

125 
time_t
 
expú©i⁄
,

126 
uöt32_t
 
Êags
,

127 
uöt64_t
 
ˇs
);

129 #ifde‡
__˝lu•lus


	@libmemcached-1.0/strerror.h

39 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


45 
LIBMEMCACHED_API


46 c⁄° *
memˇched_°ªº‹
(c⁄° 
memˇched_°
 *
±r
, 
memˇched_ªtu∫_t
 
rc
);

48 #ifde‡
__˝lu•lus


	@libmemcached-1.0/struct/allocator.h

38 #¥agm®
⁄˚


40 
	smemˇched_Æloˇt‹_t
 {

41 
memˇched_ˇŒoc_‚
 
	mˇŒoc
;

42 
memˇched_‰ì_‚
 
	m‰ì
;

43 
memˇched_mÆloc_‚
 
	mmÆloc
;

44 
memˇched_ªÆloc_‚
 
	mªÆloc
;

45 *
	mc⁄ãxt
;

	@libmemcached-1.0/struct/analysis.h

38 #¥agm®
⁄˚


40 
	smemˇched_™Æysis_°
 {

41 
memˇched_°
 *
	mroŸ
;

42 
uöt32_t
 
	mavîage_ôem_size
;

43 
uöt32_t
 
	ml⁄ge°_u±ime
;

44 
uöt32_t
 
	mÀa°_‰ì_£rvî
;

45 
uöt32_t
 
	mmo°_c⁄sumed_£rvî
;

46 
uöt32_t
 
	mﬁde°_£rvî
;

47 
	mpoﬁ_hô_øtio
;

48 
uöt64_t
 
	mmo°_u£d_byãs
;

49 
uöt64_t
 
	mÀa°_ªmaöög_byãs
;

	@libmemcached-1.0/struct/callback.h

38 #¥agm®
⁄˚


40 
	smemˇched_ˇŒback_°
 {

41 
memˇched_execuã_‚
 *
	mˇŒback
;

42 *
	mc⁄ãxt
;

43 
uöt32_t
 
	mnumbî_of_ˇŒback
;

	@libmemcached-1.0/struct/memcached.h

38 #¥agm®
⁄˚


40 
	smemˇched_°
 {

45 
boﬁ
 
	mis_purgög
:1;

46 
boﬁ
 
	mis_¥o˚ssög_öput
:1;

47 
boﬁ
 
	mis_time_f‹_ªbuûd
:1;

48 
boﬁ
 
	mis_∑rsög
:1;

49 } 
	m°©e
;

53 
boﬁ
 
	mauto_eje˘_ho°s
:1;

54 
boﬁ
 
	mbö¨y_¥Ÿocﬁ
:1;

55 
boﬁ
 
	mbuf„r_ªque°s
:1;

56 
boﬁ
 
	mhash_wôh_«me•a˚
:1;

57 
boﬁ
 
	mno_block
:1;

58 
boﬁ
 
	mª∂y
:1;

59 
boﬁ
 
	møndomize_ª∂iˇ_ªad
:1;

60 
boﬁ
 
	msuµ‹t_ˇs
:1;

61 
boﬁ
 
	mt˝_nodñay
:1;

62 
boﬁ
 
	mu£_s‹t_ho°s
:1;

63 
boﬁ
 
	mu£_udp
:1;

64 
boﬁ
 
	mvîify_key
:1;

65 
boﬁ
 
	mt˝_kì∑live
:1;

66 
boﬁ
 
	mis_´s
:1;

67 
boﬁ
 
	mis_„tchög_vîsi⁄
:1;

68 
boﬁ
 
	mnŸ_u£d
:1;

69 } 
	mÊags
;

71 
memˇched_£rvî_di°ributi⁄_t
 
	mdi°ributi⁄
;

72 
hashkô_°
 
	mhashkô
;

74 
	mvîsi⁄
;

75 } 
	m£rvî_öfo
;

76 
uöt32_t
 
	mnumbî_of_ho°s
;

77 
memˇched_ö°™˚_°
 *
	m£rvîs
;

78 
memˇched_ö°™˚_°
 *
	mœ°_disc⁄√˘ed_£rvî
;

79 
öt32_t
 
	m¢d_timeout
;

80 
öt32_t
 
	mrcv_timeout
;

81 
uöt32_t
 
	m£rvî_Áûuª_limô
;

82 
uöt32_t
 
	mio_msg_w©îm¨k
;

83 
uöt32_t
 
	mio_byãs_w©îm¨k
;

84 
uöt32_t
 
	mio_key_¥e„tch
;

85 
uöt32_t
 
	mt˝_kìpidÀ
;

86 
öt32_t
 
	mpﬁl_timeout
;

87 
öt32_t
 
	mc⁄√˘_timeout
;

88 
öt32_t
 
	mªåy_timeout
;

89 
öt32_t
 
	mdód_timeout
;

90 
	m£nd_size
;

91 
	mªcv_size
;

92 *
	mu£r_d©a
;

93 
uöt64_t
 
	mquîy_id
;

94 
uöt32_t
 
	mnumbî_of_ª∂iˇs
;

95 
memˇched_ªsu…_°
 
	mªsu…
;

98 
boﬁ
 
	mweighãd_
;

99 
uöt32_t
 
	mc⁄töuum_cou¡
;

100 
uöt32_t
 
	mc⁄töuum_poöts_cou¡î
;

101 
time_t
 
	m√xt_di°ributi⁄_ªbuûd
;

102 
memˇched_c⁄töuum_ôem_°
 *
	mc⁄töuum
;

103 } 
	mkëama
;

105 
memˇched_vútuÆ_buckë_t
 *
	mvútuÆ_buckë
;

107 
memˇched_Æloˇt‹_t
 
	mÆloˇt‹s
;

109 
memˇched_˛⁄e_‚
 
	m⁄_˛⁄e
;

110 
memˇched_˛ónup_‚
 
	m⁄_˛ónup
;

111 
memˇched_åiggî_key_‚
 
	mgë_key_Áûuª
;

112 
memˇched_åiggî_dñëe_key_‚
 
	mdñëe_åiggî
;

113 
memˇched_ˇŒback_°
 *
	mˇŒbacks
;

114 
memˇched_ß¶_°
 
	mß¶
;

115 
memˇched_îr‹_t
 *
	mîr‹_mesßges
;

116 
memˇched_¨øy_°
 *
	m_«me•a˚
;

118 
uöt32_t
 
	möôül_poﬁ_size
;

119 
uöt32_t
 
	mmax_poﬁ_size
;

120 
öt32_t
 
	mvîsi⁄
;

121 
memˇched_¨øy_°
 *
	mfûíame
;

122 } 
	mc⁄figuª
;

124 
boﬁ
 
	mis_Æloˇãd
:1;

125 } 
	m›ti⁄s
;

	@libmemcached-1.0/struct/result.h

38 #¥agm®
⁄˚


40 
	smemˇched_ªsu…_°
 {

41 
uöt32_t
 
	môem_Êags
;

42 
time_t
 
	môem_expú©i⁄
;

43 
size_t
 
	mkey_Àngth
;

44 
uöt64_t
 
	môem_ˇs
;

45 
memˇched_°
 *
	mroŸ
;

46 
memˇched_°rög_°
 
	mvÆue
;

47 
uöt64_t
 
	mnumîic_vÆue
;

48 
uöt64_t
 
	mcou¡
;

49 
	môem_key
[
MEMCACHED_MAX_KEY
];

51 
boﬁ
 
	mis_Æloˇãd
:1;

52 
boﬁ
 
	mis_öôülized
:1;

53 } 
	m›ti⁄s
;

	@libmemcached-1.0/struct/sasl.h

38 #i‡
deföed
(
LIBMEMCACHED_WITH_SASL_SUPPORT
) && LIBMEMCACHED_WITH_SASL_SUPPORT

39 
	~<ß¶/ß¶.h
>

41 
	#ß¶_ˇŒback_t
 

	)

44 #¥agm®
⁄˚


46 
	smemˇched_ß¶_°
 {

47 
ß¶_ˇŒback_t
 *
	mˇŒbacks
;

52 
boﬁ
 
	mis_Æloˇãd
;

	@libmemcached-1.0/struct/server.h

39 #¥agm®
⁄˚


41 #ifde‡
HAVE_NETDB_H


42 
	~<√tdb.h
>

45 #ifde‡
NI_MAXHOST


46 
	#MEMCACHED_NI_MAXHOST
 
NI_MAXHOST


	)

48 
	#MEMCACHED_NI_MAXHOST
 1025

	)

51 #ifde‡
NI_MAXSERV


52 
	#MEMCACHED_NI_MAXSERV
 
NI_MAXSERV


	)

54 
	#MEMCACHED_NI_MAXSERV
 32

	)

57 
	ememˇched_£rvî_°©e_t
 {

58 
	mMEMCACHED_SERVER_STATE_NEW
,

59 
	mMEMCACHED_SERVER_STATE_ADDRINFO
,

60 
	mMEMCACHED_SERVER_STATE_IN_PROGRESS
,

61 
	mMEMCACHED_SERVER_STATE_CONNECTED
,

62 
	mMEMCACHED_SERVER_STATE_IN_TIMEOUT
,

63 
	mMEMCACHED_SERVER_STATE_DISABLED


66 
	smemˇched_£rvî_°
 {

68 
boﬁ
 
	mis_Æloˇãd
:1;

69 
boﬁ
 
	mis_öôülized
:1;

70 
boﬁ
 
	mis_shuâög_down
:1;

71 
boﬁ
 
	mis_dód
:1;

72 } 
	m›ti⁄s
;

73 
uöt32_t
 
	mnumbî_of_ho°s
;

74 
uöt32_t
 
	mcurs‹_a˘ive
;

75 
ö_p‹t_t
 
	mp‹t
;

76 
uöt32_t
 
	mio_byãs_£¡
;

77 
uöt32_t
 
	mªque°_id
;

78 
uöt32_t
 
	m£rvî_Áûuª_cou¡î
;

79 
uöt64_t
 
	m£rvî_Áûuª_cou¡î_quîy_id
;

80 
uöt32_t
 
	mweight
;

81 
uöt32_t
 
	mvîsi⁄
;

82 
memˇched_£rvî_°©e_t
 
	m°©e
;

84 
uöt32_t
 
	mªad
;

85 
uöt32_t
 
	mwrôe
;

86 
uöt32_t
 
	mtimeouts
;

87 
size_t
 
	m_byãs_ªad
;

88 } 
	mio_waô_cou¡
;

89 
uöt8_t
 
	mmaj‹_vîsi⁄
;

90 
uöt8_t
 
	mmi¸o_vîsi⁄
;

91 
uöt8_t
 
	mmö‹_vîsi⁄
;

92 
memˇched_c⁄√˘i⁄_t
 
	mty≥
;

93 
time_t
 
	m√xt_ªåy
;

94 
memˇched_°
 *
	mroŸ
;

95 
uöt64_t
 
	mlimô_maxbyãs
;

96 
memˇched_îr‹_t
 *
	mîr‹_mesßges
;

97 
	mho°«me
[
MEMCACHED_NI_MAXHOST
];

	@libmemcached-1.0/struct/stat.h

38 #¥agm®
⁄˚


40 
	smemˇched_°©_°
 {

41 
	mc⁄√˘i⁄_°ru˘uªs
;

42 
	mcuº_c⁄√˘i⁄s
;

43 
	mcuº_ôems
;

44 
pid_t
 
	mpid
;

45 
	mpoöãr_size
;

46 
	mrußge_sy°em_mi¸o£c⁄ds
;

47 
	mrußge_sy°em_£c⁄ds
;

48 
	mrußge_u£r_mi¸o£c⁄ds
;

49 
	mrußge_u£r_£c⁄ds
;

50 
	mthªads
;

51 
	mtime
;

52 
	mtŸÆ_c⁄√˘i⁄s
;

53 
	mtŸÆ_ôems
;

54 
	mu±ime
;

55 
	mbyãs
;

56 
	mbyãs_ªad
;

57 
	mbyãs_wrôãn
;

58 
	mcmd_gë
;

59 
	mcmd_£t
;

60 
	mevi˘i⁄s
;

61 
	mgë_hôs
;

62 
	mgë_mis£s
;

63 
	mlimô_maxbyãs
;

64 
	mvîsi⁄
[
MEMCACHED_VERSION_STRING_LENGTH
];

65 *
	m__futuª
;

66 
memˇched_°
 *
	mroŸ
;

	@libmemcached-1.0/struct/string.h

38 #¥agm®
⁄˚


50 
	smemˇched_°rög_°
 {

51 *
	míd
;

52 *
	m°rög
;

53 
size_t
 
	mcuºít_size
;

54 
memˇched_°
 *
	mroŸ
;

56 
boﬁ
 
	mis_Æloˇãd
:1;

57 
boﬁ
 
	mis_öôülized
:1;

58 } 
	m›ti⁄s
;

	@libmemcached-1.0/t/c_sasl_test.c

41 
	~<°dlib.h
>

43 #ifde‡
HAVE_SASL_SASL_H


44 
	~<ß¶/ß¶.h
>

47 
	~<libmemˇched-1.0/memˇched.h
>

49 
	$maö
()

51 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

53 i‡(
memc
 =
NULL
)

55  
EXIT_FAILURE
;

57 
	`memˇched_‰ì
(
memc
);

59  
EXIT_SUCCESS
;

60 
	}
}

	@libmemcached-1.0/t/c_test.c

41 
	~<°dlib.h
>

43 
	~<libmemˇched-1.0/memˇched.h
>

45 
	$maö
()

47 ()
	`memˇched_suc˚ss
(
MEMCACHED_SUCCESS
);

48 ()
	`memˇched_Áûed
(
MEMCACHED_SUCCESS
);

49 ()
	`memˇched_c⁄töue
(
MEMCACHED_SUCCESS
);

51 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

53 i‡(
memc
 =
NULL
)

55  
EXIT_FAILURE
;

57 
	`memˇched_‰ì
(
memc
);

59  
EXIT_SUCCESS
;

60 
	}
}

	@libmemcached-1.0/t/cc_test.cc

41 
	~<c°dlib
>

43 
	~<libmemˇched-1.0/memˇched.h
>

45 
	$maö
()

47 ()
	`memˇched_suc˚ss
(
MEMCACHED_SUCCESS
);

48 ()
	`memˇched_Áûed
(
MEMCACHED_SUCCESS
);

49 ()
	`memˇched_c⁄töue
(
MEMCACHED_SUCCESS
);

51 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

53 i‡(
memc
 =
NULL
)

55  
EXIT_FAILURE
;

58 
	`memˇched_‰ì
(
memc
);

60  
EXIT_SUCCESS
;

61 
	}
}

	@libmemcached-1.0/touch.h

39 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


46 
LIBMEMCACHED_API


47 
memˇched_ªtu∫_t
 
memˇched_touch
(
memˇched_°
 *
±r
,

48 c⁄° *
key
, 
size_t
 
key_Àngth
,

49 
time_t
 
expú©i⁄
);

51 
LIBMEMCACHED_API


52 
memˇched_ªtu∫_t
 
memˇched_touch_by_key
(
memˇched_°
 *
±r
,

53 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

54 c⁄° *
key
, 
size_t
 
key_Àngth
,

55 
time_t
 
expú©i⁄
);

57 #ifde‡
__˝lu•lus


	@libmemcached-1.0/triggers.h

39 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


45 
memˇched_ªtu∫_t
 (*
	tmemˇched_˛⁄e_‚
)(
	tmemˇched_°
 *
	tde°ö©i⁄
, c⁄° memˇched_° *
	tsour˚
);

46 
memˇched_ªtu∫_t
 (*
	tmemˇched_˛ónup_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
);

51 
memˇched_ªtu∫_t
 (*
	tmemˇched_åiggî_key_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
,

52 c⁄° *
	tkey
, 
	tsize_t
 
	tkey_Àngth
,

53 
	tmemˇched_ªsu…_°
 *
	tªsu…
);

54 
memˇched_ªtu∫_t
 (*
	tmemˇched_åiggî_dñëe_key_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
,

55 c⁄° *
	tkey
, 
	tsize_t
 
	tkey_Àngth
);

57 
memˇched_ªtu∫_t
 (*
	tmemˇched_dump_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
,

58 c⁄° *
	tkey
,

59 
	tsize_t
 
	tkey_Àngth
,

60 *
	tc⁄ãxt
);

62 #ifde‡
__˝lu•lus


	@libmemcached-1.0/types.h

39 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


43 
	gmemˇched_°
;

44 
	gmemˇched_°©_°
;

45 
	gmemˇched_™Æysis_°
;

46 
	gmemˇched_ªsu…_°
;

47 
	gmemˇched_¨øy_°
;

48 
	gmemˇched_îr‹_t
;

51 
	gmemˇched_£rvî_°
;

52 
	gmemˇched_ö°™˚_°
;

53 
memˇched_ö°™˚_°
 
	tmemˇched_ö°™˚_°
;

54 
memˇched_£rvî_°
 *
	tmemˇched_£rvî_li°_°
;

56 
	gmemˇched_ˇŒback_°
;

59 
	gmemˇched_°rög_°
;

60 
	gmemˇched_°rög_t
;

61 
	gmemˇched_c⁄töuum_ôem_°
;

65 
memˇched_°
 
	tmemˇched_°
;

66 
memˇched_°©_°
 
	tmemˇched_°©_°
;

67 
memˇched_™Æysis_°
 
	tmemˇched_™Æysis_°
;

68 
memˇched_ªsu…_°
 
	tmemˇched_ªsu…_°
;

69 
memˇched_¨øy_°
 
	tmemˇched_¨øy_°
;

70 
memˇched_îr‹_t
 
	tmemˇched_îr‹_t
;

73 
memˇched_£rvî_°
 
	tmemˇched_£rvî_°
;

74 
memˇched_ö°™˚_°
 
	tmemˇched_ö°™˚_°
;

75 
memˇched_£rvî_°
 *
	tmemˇched_£rvî_li°_°
;

77 
memˇched_ˇŒback_°
 
	tmemˇched_ˇŒback_°
;

80 
memˇched_°rög_°
 
	tmemˇched_°rög_°
;

81 
memˇched_°rög_t
 
	tmemˇched_°rög_t
;

	@libmemcached-1.0/types/behavior.h

39 #¥agm®
⁄˚


41 
	ememˇched_behavi‹_t
 {

42 
	mMEMCACHED_BEHAVIOR_NO_BLOCK
,

43 
	mMEMCACHED_BEHAVIOR_TCP_NODELAY
,

44 
	mMEMCACHED_BEHAVIOR_HASH
,

45 
	mMEMCACHED_BEHAVIOR_KETAMA
,

46 
	mMEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
,

47 
	mMEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
,

48 
	mMEMCACHED_BEHAVIOR_CACHE_LOOKUPS
,

49 
	mMEMCACHED_BEHAVIOR_SUPPORT_CAS
,

50 
	mMEMCACHED_BEHAVIOR_POLL_TIMEOUT
,

51 
	mMEMCACHED_BEHAVIOR_DISTRIBUTION
,

52 
	mMEMCACHED_BEHAVIOR_BUFFER_REQUESTS
,

53 
	mMEMCACHED_BEHAVIOR_USER_DATA
,

54 
	mMEMCACHED_BEHAVIOR_SORT_HOSTS
,

55 
	mMEMCACHED_BEHAVIOR_VERIFY_KEY
,

56 
	mMEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
,

57 
	mMEMCACHED_BEHAVIOR_RETRY_TIMEOUT
,

58 
	mMEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
,

59 
	mMEMCACHED_BEHAVIOR_KETAMA_HASH
,

60 
	mMEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

61 
	mMEMCACHED_BEHAVIOR_SND_TIMEOUT
,

62 
	mMEMCACHED_BEHAVIOR_RCV_TIMEOUT
,

63 
	mMEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
,

64 
	mMEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
,

65 
	mMEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
,

66 
	mMEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
,

67 
	mMEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
,

68 
	mMEMCACHED_BEHAVIOR_NOREPLY
,

69 
	mMEMCACHED_BEHAVIOR_USE_UDP
,

70 
	mMEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
,

71 
	mMEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
,

72 
	mMEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
,

73 
	mMEMCACHED_BEHAVIOR_CORK
,

74 
	mMEMCACHED_BEHAVIOR_TCP_KEEPALIVE
,

75 
	mMEMCACHED_BEHAVIOR_TCP_KEEPIDLE
,

76 
	mMEMCACHED_BEHAVIOR_LOAD_FROM_FILE
,

77 
	mMEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
,

78 
	mMEMCACHED_BEHAVIOR_DEAD_TIMEOUT
,

79 
	mMEMCACHED_BEHAVIOR_MAX


82 #i‚de‡
__˝lu•lus


83 
memˇched_behavi‹_t
 
	tmemˇched_behavi‹_t
;

	@libmemcached-1.0/types/callback.h

39 #¥agm®
⁄˚


41 
	ememˇched_ˇŒback_t
 {

42 
	mMEMCACHED_CALLBACK_PREFIX_KEY
 = 0,

43 
	mMEMCACHED_CALLBACK_USER_DATA
 = 1,

44 
	mMEMCACHED_CALLBACK_CLEANUP_FUNCTION
 = 2,

45 
	mMEMCACHED_CALLBACK_CLONE_FUNCTION
 = 3,

46 
	mMEMCACHED_CALLBACK_GET_FAILURE
 = 7,

47 
	mMEMCACHED_CALLBACK_DELETE_TRIGGER
 = 8,

48 
	mMEMCACHED_CALLBACK_MAX
,

49 
	mMEMCACHED_CALLBACK_NAMESPACE

MEMCACHED_CALLBACK_PREFIX_KEY


52 #i‚de‡
__˝lu•lus


53 
memˇched_ˇŒback_t
 
	tmemˇched_ˇŒback_t
;

	@libmemcached-1.0/types/connection.h

39 #¥agm®
⁄˚


41 
	ememˇched_c⁄√˘i⁄_t
 {

42 
	mMEMCACHED_CONNECTION_TCP
,

43 
	mMEMCACHED_CONNECTION_UDP
,

44 
	mMEMCACHED_CONNECTION_UNIX_SOCKET


47 #i‚de‡
__˝lu•lus


48 
memˇched_c⁄√˘i⁄_t
 
	tmemˇched_c⁄√˘i⁄_t
;

	@libmemcached-1.0/types/hash.h

39 #¥agm®
⁄˚


41 
	ememˇched_hash_t
 {

42 
	mMEMCACHED_HASH_DEFAULT
= 0,

43 
	mMEMCACHED_HASH_MD5
,

44 
	mMEMCACHED_HASH_CRC
,

45 
	mMEMCACHED_HASH_FNV1_64
,

46 
	mMEMCACHED_HASH_FNV1A_64
,

47 
	mMEMCACHED_HASH_FNV1_32
,

48 
	mMEMCACHED_HASH_FNV1A_32
,

49 
	mMEMCACHED_HASH_HSIEH
,

50 
	mMEMCACHED_HASH_MURMUR
,

51 
	mMEMCACHED_HASH_JENKINS
,

52 
	mMEMCACHED_HASH_MURMUR3
,

53 
	mMEMCACHED_HASH_CUSTOM
,

54 
	mMEMCACHED_HASH_MAX


57 #i‚de‡
__˝lu•lus


58 
memˇched_hash_t
 
	tmemˇched_hash_t
;

	@libmemcached-1.0/types/return.h

37 #¥agm®
⁄˚


39 
	ememˇched_ªtu∫_t
 {

40 
	mMEMCACHED_SUCCESS
,

41 
	mMEMCACHED_FAILURE
,

42 
	mMEMCACHED_HOST_LOOKUP_FAILURE
,

43 
	mMEMCACHED_CONNECTION_FAILURE
,

44 
	mMEMCACHED_CONNECTION_BIND_FAILURE
,

45 
	mMEMCACHED_WRITE_FAILURE
,

46 
	mMEMCACHED_READ_FAILURE
,

47 
	mMEMCACHED_UNKNOWN_READ_FAILURE
,

48 
	mMEMCACHED_PROTOCOL_ERROR
,

49 
	mMEMCACHED_CLIENT_ERROR
,

50 
	mMEMCACHED_SERVER_ERROR
,

51 
	mMEMCACHED_ERROR
,

52 
	mMEMCACHED_DATA_EXISTS
,

53 
	mMEMCACHED_DATA_DOES_NOT_EXIST
,

54 
	mMEMCACHED_NOTSTORED
,

55 
	mMEMCACHED_STORED
,

56 
	mMEMCACHED_NOTFOUND
,

57 
	mMEMCACHED_MEMORY_ALLOCATION_FAILURE
,

58 
	mMEMCACHED_PARTIAL_READ
,

59 
	mMEMCACHED_SOME_ERRORS
,

60 
	mMEMCACHED_NO_SERVERS
,

61 
	mMEMCACHED_END
,

62 
	mMEMCACHED_DELETED
,

63 
	mMEMCACHED_VALUE
,

64 
	mMEMCACHED_STAT
,

65 
	mMEMCACHED_ITEM
,

66 
	mMEMCACHED_ERRNO
,

67 
	mMEMCACHED_FAIL_UNIX_SOCKET
,

68 
	mMEMCACHED_NOT_SUPPORTED
,

69 
	mMEMCACHED_NO_KEY_PROVIDED
,

70 
	mMEMCACHED_FETCH_NOTFINISHED
,

71 
	mMEMCACHED_TIMEOUT
,

72 
	mMEMCACHED_BUFFERED
,

73 
	mMEMCACHED_BAD_KEY_PROVIDED
,

74 
	mMEMCACHED_INVALID_HOST_PROTOCOL
,

75 
	mMEMCACHED_SERVER_MARKED_DEAD
,

76 
	mMEMCACHED_UNKNOWN_STAT_KEY
,

77 
	mMEMCACHED_E2BIG
,

78 
	mMEMCACHED_INVALID_ARGUMENTS
,

79 
	mMEMCACHED_KEY_TOO_BIG
,

80 
	mMEMCACHED_AUTH_PROBLEM
,

81 
	mMEMCACHED_AUTH_FAILURE
,

82 
	mMEMCACHED_AUTH_CONTINUE
,

83 
	mMEMCACHED_PARSE_ERROR
,

84 
	mMEMCACHED_PARSE_USER_ERROR
,

85 
	mMEMCACHED_DEPRECATED
,

86 
	mMEMCACHED_IN_PROGRESS
,

87 
	mMEMCACHED_SERVER_TEMPORARILY_DISABLED
,

88 
	mMEMCACHED_SERVER_MEMORY_ALLOCATION_FAILURE
,

89 
	mMEMCACHED_MAXIMUM_RETURN
,

90 
	mMEMCACHED_CONNECTION_SOCKET_CREATE_FAILURE

MEMCACHED_ERROR


93 #i‚de‡
__˝lu•lus


94 
memˇched_ªtu∫_t
 
	tmemˇched_ªtu∫_t
;

	@libmemcached-1.0/types/server_distribution.h

39 #¥agm®
⁄˚


41 
	ememˇched_£rvî_di°ributi⁄_t
 {

42 
	mMEMCACHED_DISTRIBUTION_MODULA
,

43 
	mMEMCACHED_DISTRIBUTION_CONSISTENT
,

44 
	mMEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
,

45 
	mMEMCACHED_DISTRIBUTION_RANDOM
,

46 
	mMEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
,

47 
	mMEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
,

48 
	mMEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
,

49 
	mMEMCACHED_DISTRIBUTION_CONSISTENT_MAX


52 #i‚de‡
__˝lu•lus


53 
memˇched_£rvî_di°ributi⁄_t
 
	tmemˇched_£rvî_di°ributi⁄_t
;

	@libmemcached-1.0/verbosity.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_vîbosôy
(
memˇched_°
 *
±r
, 
uöt32_t
 
vîbosôy
);

48 #ifde‡
__˝lu•lus


	@libmemcached-1.0/version.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_vîsi⁄
(
memˇched_°
 *
±r
);

47 
LIBMEMCACHED_API


48 c⁄° * 
memˇched_lib_vîsi⁄
();

50 #ifde‡
__˝lu•lus


	@libmemcached-1.0/visibility.h

19 #¥agm®
⁄˚


29 #i‡
deföed
(
BUILDING_LIBMEMCACHEDINTERNAL
)

30 #i‡
deföed
(
HAVE_VISIBILITY
) && HAVE_VISIBILITY

31 
	#LIBMEMCACHED_API
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

32 
	#LIBMEMCACHED_LOCAL
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

33 #ñi‡
deföed
 (
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

34 
	#LIBMEMCACHED_API
 
__globÆ


	)

35 
	#LIBMEMCACHED_LOCAL
 
__globÆ


	)

36 #ñi‡
deföed
(
_MSC_VER
)

37 
	#LIBMEMCACHED_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

38 
	#LIBMEMCACHED_LOCAL
 
	`__de˛•ec
(
dŒexp‹t
)

	)

40 
	#LIBMEMCACHED_API


	)

41 
	#LIBMEMCACHED_LOCAL


	)

44 #i‡
deföed
(
BUILDING_LIBMEMCACHED
)

45 #i‡
deföed
(
HAVE_VISIBILITY
) && HAVE_VISIBILITY

46 
	#LIBMEMCACHED_API
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

47 
	#LIBMEMCACHED_LOCAL
 
	`__©åibuã__
 ((
	`visibûôy
("hiddí")))

	)

48 #ñi‡
deföed
 (
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

49 
	#LIBMEMCACHED_API
 
__globÆ


	)

50 
	#LIBMEMCACHED_LOCAL
 
__hiddí


	)

51 #ñi‡
deföed
(
_MSC_VER
)

52 
	#LIBMEMCACHED_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

53 
	#LIBMEMCACHED_LOCAL


	)

55 
	#LIBMEMCACHED_API


	)

56 
	#LIBMEMCACHED_LOCAL


	)

59 #i‡
deföed
(
_MSC_VER
)

60 
	#LIBMEMCACHED_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

61 
	#LIBMEMCACHED_LOCAL


	)

63 
	#LIBMEMCACHED_API


	)

64 
	#LIBMEMCACHED_LOCAL


	)

	@libmemcached/allocators.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
	$_libmemˇched_‰ì
(c⁄° 
memˇched_°
*, *
mem
, *)

42 i‡(
mem
)

44 
°d
::
	`‰ì
(
mem
);

46 
	}
}

48 *
	$_libmemˇched_mÆloc
(c⁄° 
memˇched_°
 *, 
size_t
 
size
, *)

50  
°d
::
	`mÆloc
(
size
);

51 
	}
}

53 *
	$_libmemˇched_ªÆloc
(c⁄° 
memˇched_°
*, *
mem
, 
size_t
 
size
, *)

55  
°d
::
	`ªÆloc
(
mem
, 
size
);

56 
	}
}

58 *
	$_libmemˇched_ˇŒoc
(c⁄° 
memˇched_°
 *
£lf
, 
size_t
 
√Àm
, size_à
size
, *
c⁄ãxt
)

60 i‡(
£lf
->
Æloˇt‹s
.
mÆloc
 !
_libmemˇched_mÆloc
)

62 *
ªt

	`_libmemˇched_mÆloc
(
£lf
, 
√Àm
 * 
size
, 
c⁄ãxt
);

63 i‡(
ªt
)

65 
	`mem£t
(
ªt
, 0, 
√Àm
 * 
size
);

68  
ªt
;

71  
°d
::
	`ˇŒoc
(
√Àm
, 
size
);

72 
	}
}

74 
memˇched_Æloˇt‹_t
 
	$memˇched_Æloˇt‹s_ªtu∫_deÁu…
()

76 
memˇched_Æloˇt‹_t
 
globÆ_deÁu…_Æloˇt‹
{ 
_libmemˇched_ˇŒoc
, 
_libmemˇched_‰ì
, 
_libmemˇched_mÆloc
, 
_libmemˇched_ªÆloc
, 0 };

77  
globÆ_deÁu…_Æloˇt‹
;

78 
	}
}

80 
memˇched_ªtu∫_t
 
	$memˇched_£t_mem‹y_Æloˇt‹s
(
memˇched_°
 *
shñl
,

81 
memˇched_mÆloc_‚
 
mem_mÆloc
,

82 
memˇched_‰ì_‚
 
mem_‰ì
,

83 
memˇched_ªÆloc_‚
 
mem_ªÆloc
,

84 
memˇched_ˇŒoc_‚
 
mem_ˇŒoc
,

85 *
c⁄ãxt
)

87 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

88 i‡(
£lf
 =
NULL
)

90  
MEMCACHED_INVALID_ARGUMENTS
;

94 i‡(
mem_mÆloc
 =
NULL
 
™d
 
mem_‰ì
 =NULLánd 
mem_ªÆloc
 =NULLánd 
mem_ˇŒoc
 == NULL)

96 
£lf
->
Æloˇt‹s

	`memˇched_Æloˇt‹s_ªtu∫_deÁu…
();

98 i‡(
mem_mÆloc
 =
NULL
 
‹
 
mem_‰ì
 =NULL o∏
mem_ªÆloc
 =NULL o∏
mem_ˇŒoc
 == NULL)

100  
	`memˇched_£t_îr‹
(*
£lf
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("NULLÖarameterÖrovided for one or moreállocators"));

104 
£lf
->
Æloˇt‹s
.
mÆloc

mem_mÆloc
;

105 
£lf
->
Æloˇt‹s
.
‰ì

mem_‰ì
;

106 
£lf
->
Æloˇt‹s
.
ªÆloc

mem_ªÆloc
;

107 
£lf
->
Æloˇt‹s
.
ˇŒoc

mem_ˇŒoc
;

108 
£lf
->
Æloˇt‹s
.
c⁄ãxt
= context;

111  
MEMCACHED_SUCCESS
;

112 
	}
}

114 *
	$memˇched_gë_mem‹y_Æloˇt‹s_c⁄ãxt
(c⁄° 
memˇched_°
 *
shñl
)

116 c⁄° 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

117 i‡(
£lf
)

119  
£lf
->
Æloˇt‹s
.
c⁄ãxt
;

122  
NULL
;

123 
	}
}

125 
	$memˇched_gë_mem‹y_Æloˇt‹s
(c⁄° 
memˇched_°
 *
shñl
,

126 
memˇched_mÆloc_‚
 *
mem_mÆloc
,

127 
memˇched_‰ì_‚
 *
mem_‰ì
,

128 
memˇched_ªÆloc_‚
 *
mem_ªÆloc
,

129 
memˇched_ˇŒoc_‚
 *
mem_ˇŒoc
)

131 c⁄° 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

132 i‡(
£lf
)

134 i‡(
mem_mÆloc
)

136 *
mem_mÆloc

£lf
->
Æloˇt‹s
.
mÆloc
;

139 i‡(
mem_‰ì
)

141 *
mem_‰ì

£lf
->
Æloˇt‹s
.
‰ì
;

144 i‡(
mem_ªÆloc
)

146 *
mem_ªÆloc

£lf
->
Æloˇt‹s
.
ªÆloc
;

149 i‡(
mem_ˇŒoc
)

151 *
mem_ˇŒoc

£lf
->
Æloˇt‹s
.
ˇŒoc
;

154 
	}
}

	@libmemcached/allocators.hpp

37 #¥agm®
⁄˚


39 
_libmemˇched_‰ì
(c⁄° 
memˇched_°
 *
±r
, *
mem
, *
c⁄ãxt
);

41 *
_libmemˇched_mÆloc
(c⁄° 
memˇched_°
 *
±r
, c⁄° 
size_t
 
size
, *
c⁄ãxt
);

43 *
_libmemˇched_ªÆloc
(c⁄° 
memˇched_°
 *
±r
, *
mem
, c⁄° 
size_t
 
size
, *
c⁄ãxt
);

45 *
_libmemˇched_ˇŒoc
(c⁄° 
memˇched_°
 *
±r
, 
size_t
 
√Àm
, size_à
size
, *
c⁄ãxt
);

47 
memˇched_Æloˇt‹_t
 
memˇched_Æloˇt‹s_ªtu∫_deÁu…
();

	@libmemcached/analyze.cc

1 
	~<libmemˇched/comm⁄.h
>

3 
	$ˇlc_œrge°_c⁄sum±i⁄
(
memˇched_™Æysis_°
 *
ªsu…
,

4 c⁄° 
uöt32_t
 
£rvî_num
,

5 c⁄° 
uöt64_t
 
nbyãs
)

7 i‡(
ªsu…
->
mo°_u£d_byãs
 < 
nbyãs
)

9 
ªsu…
->
mo°_u£d_byãs

nbyãs
;

10 
ªsu…
->
mo°_c⁄sumed_£rvî

£rvî_num
;

12 
	}
}

14 
	$ˇlc_ﬁde°_node
(
memˇched_™Æysis_°
 *
ªsu…
,

15 c⁄° 
uöt32_t
 
£rvî_num
,

16 c⁄° 
uöt32_t
 
u±ime
)

18 i‡(
ªsu…
->
l⁄ge°_u±ime
 < 
u±ime
)

20 
ªsu…
->
l⁄ge°_u±ime

u±ime
;

21 
ªsu…
->
ﬁde°_£rvî

£rvî_num
;

23 
	}
}

25 
	$ˇlc_Àa°_‰ì_node
(
memˇched_™Æysis_°
 *
ªsu…
,

26 c⁄° 
uöt32_t
 
£rvî_num
,

27 c⁄° 
uöt64_t
 
max_Ælowed_byãs
,

28 c⁄° 
uöt64_t
 
u£d_byãs
)

30 
uöt64_t
 
ªmaöög_byãs

max_Ælowed_byãs
 - 
u£d_byãs
;

32 i‡(
ªsu…
->
Àa°_ªmaöög_byãs
 == 0 ||

33 
ªmaöög_byãs
 < 
ªsu…
->
Àa°_ªmaöög_byãs
)

35 
ªsu…
->
Àa°_ªmaöög_byãs

ªmaöög_byãs
;

36 
ªsu…
->
Àa°_‰ì_£rvî

£rvî_num
;

38 
	}
}

40 
	$ˇlc_avîage_ôem_size
(
memˇched_™Æysis_°
 *
ªsu…
,

41 c⁄° 
uöt64_t
 
tŸÆ_ôems
,

42 c⁄° 
uöt64_t
 
tŸÆ_byãs
)

44 i‡(
tŸÆ_ôems
 > 0 && 
tŸÆ_byãs
 > 0)

46 
ªsu…
->
avîage_ôem_size
(
uöt32_t
Ë(
tŸÆ_byãs
 / 
tŸÆ_ôems
);

48 
	}
}

50 
	$ˇlc_hô_øtio
(
memˇched_™Æysis_°
 *
ªsu…
,

51 c⁄° 
uöt64_t
 
tŸÆ_gë_hôs
,

52 c⁄° 
uöt64_t
 
tŸÆ_gë_cmds
)

54 i‡(
tŸÆ_gë_hôs
 =0 || 
tŸÆ_gë_cmds
 == 0)

56 
ªsu…
->
poﬁ_hô_øtio
= 0;

60 
ãmp
(
tŸÆ_gë_hôs
Ë/ 
tŸÆ_gë_cmds
;

61 
ªsu…
->
poﬁ_hô_øtio

ãmp
 * 100;

62 
	}
}

64 
memˇched_™Æysis_°
 *
	$memˇched_™Æyze
(
memˇched_°
 *
shñl
,

65 
memˇched_°©_°
 *
memc_°©
,

66 
memˇched_ªtu∫_t
 *
îr‹
)

68 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

69 
uöt64_t
 
tŸÆ_ôems
0, 
tŸÆ_byãs
= 0;

70 
uöt64_t
 
tŸÆ_gë_cmds
0, 
tŸÆ_gë_hôs
= 0;

72 i‡(
memc
 =
NULL
 
‹
 
memc_°©
 == NULL)

74  
NULL
;

77 
memˇched_ªtu∫_t
 
nŸ_u£d
;

78 i‡(
îr‹
 =
NULL
)

80 
îr‹
&
nŸ_u£d
;

83 *
îr‹

MEMCACHED_SUCCESS
;

84 
uöt32_t
 
£rvî_cou¡

	`memˇched_£rvî_cou¡
(
memc
);

85 
memˇched_™Æysis_°
 *
ªsu…
(memˇched_™Æysis_°*)
	`libmemˇched_xˇŒoc
(
memc
,

86 
	`memˇched_£rvî_cou¡
(
memc
),

87 
memˇched_™Æysis_°
);

89 i‡(
ªsu…
 =
NULL
)

91 *
îr‹

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

92  
NULL
;

95 
ªsu…
->
roŸ

memc
;

97 
uöt32_t
 
x
0; x < 
£rvî_cou¡
; x++)

99 
	`ˇlc_œrge°_c⁄sum±i⁄
(
ªsu…
, 
x
, 
memc_°©
[x].
byãs
);

100 
	`ˇlc_ﬁde°_node
(
ªsu…
, 
x
, 
	`uöt32_t
(
memc_°©
[x].
u±ime
));

101 
	`ˇlc_Àa°_‰ì_node
(
ªsu…
, 
x
,

102 
memc_°©
[
x
].
limô_maxbyãs
,

103 
memc_°©
[
x
].
byãs
);

105 
tŸÆ_gë_hôs
+
memc_°©
[
x
].
gë_hôs
;

106 
tŸÆ_gë_cmds
+
memc_°©
[
x
].
cmd_gë
;

107 
tŸÆ_ôems
+
memc_°©
[
x
].
cuº_ôems
;

108 
tŸÆ_byãs
+
memc_°©
[
x
].
byãs
;

111 
	`ˇlc_avîage_ôem_size
(
ªsu…
, 
tŸÆ_ôems
, 
tŸÆ_byãs
);

112 
	`ˇlc_hô_øtio
(
ªsu…
, 
tŸÆ_gë_hôs
, 
tŸÆ_gë_cmds
);

114  
ªsu…
;

115 
	}
}

117 
	$memˇched_™Æyze_‰ì
(
memˇched_™Æysis_°
 *
±r
)

119 
	`libmemˇched_‰ì
(
±r
->
roŸ
,Ötr);

120 
	}
}

	@libmemcached/array.c

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<as£π.h
>

40 
	~<iso646.h
>

42 
	smemˇched_¨øy_°


44 
Memˇched
 *
	mroŸ
;

45 
size_t
 
	msize
;

46 
	mc_°r
[];

50 
memˇched_¨øy_°
 *
	$memˇched_¨øy_˛⁄e
(
Memˇched
 *
memc
, c⁄° 
memˇched_¨øy_°
 *
‹igöÆ
)

52 i‡(
‹igöÆ
)

54  
	`memˇched_°r˝y
(
memc
, 
‹igöÆ
->
c_°r
, origöÆ->
size
);

57  
NULL
;

58 
	}
}

60 
memˇched_¨øy_°
 *
	$memˇched_°r˝y
(
Memˇched
 *
memc
, c⁄° *
°r
, 
size_t
 
°r_Àngth
)

62 
	`as£π
(
memc
);

63 
	`as£π
(
°r
);

64 
	`as£π
(
°r_Àngth
);

66 
memˇched_¨øy_°
 *
¨øy
(memˇched_¨øy_° *)
	`libmemˇched_mÆloc
(
memc
, (memˇched_¨øy_°Ë+
°r_Àngth
 +1);

68 i‡(
¨øy
)

70 
¨øy
->
roŸ

memc
;

71 
¨øy
->
size

°r_Àngth
;

72 
	`mem˝y
(
¨øy
->
c_°r
, 
°r
, 
°r_Àngth
);

73 
¨øy
->
c_°r
[
°r_Àngth
]= 0;

76  
¨øy
;

77 
	}
}

79 
boﬁ
 
	$memˇched_¨øy_is_nuŒ
(
memˇched_¨øy_°
 *
¨øy
)

81 i‡(
¨øy
)

83  
Ál£
;

86  
åue
;

87 
	}
}

89 
memˇched_°rög_t
 
	$memˇched_¨øy_to_°rög
(
memˇched_¨øy_°
 *
¨øy
)

91 
	`as£π
(
¨øy
);

92 
	`as£π
(
¨øy
->
c_°r
);

93 
	`as£π
(
¨øy
->
size
);

94 
memˇched_°rög_t
 
tmp
;

95 
tmp
.
c_°r

¨øy
->c_str;

96 
tmp
.
size

¨øy
->size;

98  
tmp
;

99 
	}
}

101 
	$memˇched_¨øy_‰ì
(
memˇched_¨øy_°
 *
¨øy
)

103 i‡(
¨øy
)

105 
	`WATCHPOINT_ASSERT
(
¨øy
->
roŸ
);

106 
	`libmemˇched_‰ì
(
¨øy
->
roŸ
,árray);

108 
	}
}

110 
size_t
 
	$memˇched_¨øy_size
(
memˇched_¨øy_°
 *
¨øy
)

112 i‡(
¨øy
)

114  
¨øy
->
size
;

118 
	}
}

120 c⁄° *
	$memˇched_¨øy_°rög
(
memˇched_¨øy_°
 *
¨øy
)

122 i‡(
¨øy
)

124  
¨øy
->
c_°r
;

127  
NULL
;

128 
	}
}

	@libmemcached/array.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
memˇched_¨øy_°
 *
memˇched_¨øy_˛⁄e
(
Memˇched
* 
memc
, c⁄° memˇched_¨øy_° *
‹igöÆ
);

46 
memˇched_¨øy_°
 *
memˇched_°r˝y
(
Memˇched
* 
memc
, c⁄° *
°r
, 
size_t
 
°r_Àngth
);

48 
memˇched_¨øy_‰ì
(
memˇched_¨øy_°
 *
¨øy
);

50 
size_t
 
memˇched_¨øy_size
(
memˇched_¨øy_°
 *
¨øy
);

52 c⁄° *
memˇched_¨øy_°rög
(
memˇched_¨øy_°
 *
¨øy
);

54 
memˇched_°rög_t
 
memˇched_¨øy_to_°rög
(
memˇched_¨øy_°
 *
¨øy
);

56 
boﬁ
 
memˇched_¨øy_is_nuŒ
(
memˇched_¨øy_°
 *
¨øy
);

58 #ifde‡
__˝lu•lus


62 #ifde‡
__˝lu•lus


63 
	#memˇched_¥öt_¨øy
(
X
Ë
°©ic_ˇ°
<>(
	`memˇched_¨øy_size
(X)), 
	`memˇched_¨øy_°rög
(X)

	)

64 
	#memˇched_∑øm_¨øy
(
X
Ë
	`memˇched_¨øy_°rög
(X), 
	`memˇched_¨øy_size
(X)

	)

66 
	#memˇched_¥öt_¨øy
(
X
Ë()
	`memˇched_¨øy_size
((X)), 
	`memˇched_¨øy_°rög
((X))

	)

67 
	#memˇched_∑øm_¨øy
(
X
Ë
	`memˇched_¨øy_°rög
(X), 
	`memˇched_¨øy_size
(X)

	)

	@libmemcached/assert.hpp

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


41 
	~<ˇs£π
>

43 
	~<as£π.h
>

46 #ifde‡
NDEBUG


47 
	#as£π_msg
(
__ex¥
, 
__mesg
Ë()(__ex¥); ()(__mesg);

	)

48 
	#as£π_vmsg
(
__ex¥
, 
__mesg
, ...Ë()(__ex¥); ()(__mesg);

	)

51 #ifde‡
_WIN32


52 
	~<mÆloc.h
>

54 
	~<Æloˇ.h
>

57 #ifde‡
__˝lu•lus


58 
	~<c°d¨g
>

59 
	~<c°dio
>

61 
	~<°d¨g.h
>

62 
	~<°dio.h
>

65 
	~<libmemˇched/backåa˚.hµ
>

67 
	#as£π_msg
(
__ex¥
, 
__mesg
) \

70 i‡(
	`nŸ
 (
__ex¥
)) \

72 
	`Ârötf
(
°dîr
, "\n%s:%d As£πi⁄ \"%s\" faûed f‹ fun˘i⁄ \"%s\"Üikñy f‹ %s\n", 
__FILE__
, 
__LINE__
, #__ex¥, 
__func__
, (#__mesg));\

73 
	`cu°om_backåa˚
(); \

74 
	`ab‹t
(); \

76 } 0)

	)

78 
	#as£π_vmsg
(
__ex¥
, 
__mesg
, ...) \

81 i‡(
	`nŸ
 (
__ex¥
)) \

83 
size_t
 
ask

	`¢¥ötf
(0, 0, (
__mesg
), 
__VA_ARGS__
); \

84 
ask
++; \

85 *
_îr‹_mesßge
(*)
	`Æloˇ
((Ë* 
ask
); \

86 
size_t
 
_îr‹_mesßge_size

	`¢¥ötf
(
_îr‹_mesßge
, 
ask
, (
__mesg
), 
__VA_ARGS__
); \

87 
	`Ârötf
(
°dîr
, "\n%s:%d As£πi⁄ '%s' faûed f‹ fun˘i⁄ '%s' [ %.*†]\n", 
__FILE__
, 
__LINE__
, #__ex¥, 
__func__
, (
_îr‹_mesßge_size
), 
_îr‹_mesßge
);\

88 
	`cu°om_backåa˚
(); \

89 
	`ab‹t
(); \

91 } 0)

	)

	@libmemcached/auto.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
	$auto_ª•⁄£
(
memˇched_ö°™˚_°
* 
ö°™˚
, c⁄° 
boﬁ
 
ª∂y
, 
memˇched_ªtu∫_t
& 
rc
, 
uöt64_t
* 
vÆue
)

44 i‡(
	`memˇched_suc˚ss
(
rc
))

46 i‡(
ª∂y
 =
Ál£
)

48 *
vÆue

UINT64_MAX
;

52 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, &ö°™˚->
roŸ
->
ªsu…
);

55 i‡(
	`memˇched_Áèl
(
rc
))

57 
	`as£π
(
	`memˇched_œ°_îr‹
(
ö°™˚
->
roŸ
Ë!
MEMCACHED_SUCCESS
);

58 *
vÆue

UINT64_MAX
;

62 *
vÆue

ö°™˚
->
roŸ
->
ªsu…
.
numîic_vÆue
;

64 
	}
}

66 
memˇched_ªtu∫_t
 
	$ãxt_ö¸_de¸
(
memˇched_ö°™˚_°
* 
ö°™˚
,

67 c⁄° 
boﬁ
 
is_ö¸
,

68 c⁄° *
key
, 
size_t
 
key_Àngth
,

69 c⁄° 
uöt64_t
 
off£t
,

70 c⁄° 
boﬁ
 
ª∂y
)

72 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

74 
£nd_Àngth

	`¢¥ötf
(
buf„r
, (buf„r), " %" 
PRIu64
, 
off£t
);

75 i‡(
	`size_t
(
£nd_Àngth
Ë>(
buf„r
Ë
‹
 send_length < 0)

77  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

78 
	`memˇched_lôîÆ_∑øm
("snprintf(MEMCACHED_DEFAULT_COMMAND_SIZE)"));

81 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

83 { 
NULL
, 0 },

84 { 
	`memˇched_lôîÆ_∑øm
("incr ") },

85 { 
	`memˇched_¨øy_°rög
(
ö°™˚
->
roŸ
->
_«me•a˚
), 
	`memˇched_¨øy_size
(instance->root->_namespace) },

86 { 
key
, 
key_Àngth
 },

87 { 
buf„r
, 
	`size_t
(
£nd_Àngth
) },

88 { "Ç‹ïly", 
ª∂y
 ? 0 : 
	`memˇched_lôîÆ_∑øm_size
("Çoreply") },

89 { 
	`memˇched_lôîÆ_∑øm
("\r\n") }

92 i‡(
is_ö¸
 =
Ál£
)

94 
ve˘‹
[1].
buf„r
= "decr ";

97  
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 7, 
åue
);

98 
	}
}

100 
memˇched_ªtu∫_t
 
	$bö¨y_ö¸_de¸
(
memˇched_ö°™˚_°
* 
ö°™˚
,

101 
¥Ÿocﬁ_bö¨y_comm™d
 
cmd
,

102 c⁄° *
key
, c⁄° 
size_t
 
key_Àngth
,

103 c⁄° 
uöt64_t
 
off£t
,

104 c⁄° 
uöt64_t
 
öôül
,

105 c⁄° 
uöt32_t
 
expú©i⁄
,

106 c⁄° 
boﬁ
 
ª∂y
)

108 i‡(
ª∂y
 =
Ál£
)

110 if(
cmd
 =
PROTOCOL_BINARY_CMD_DECREMENT
)

112 
cmd

PROTOCOL_BINARY_CMD_DECREMENTQ
;

115 if(
cmd
 =
PROTOCOL_BINARY_CMD_INCREMENT
)

117 
cmd

PROTOCOL_BINARY_CMD_INCREMENTQ
;

120 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 
ªque°
= {};

122 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

124 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

cmd
;

125 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
 + 
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
)));

126 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
= 20;

127 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

128 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
)(
key_Àngth
 + 
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
Ë+ªque°.mesßge.hódî.ªque°.
exéí
));

129 
ªque°
.
mesßge
.
body
.
dñè

	`memˇched_ht⁄Œ
(
off£t
);

130 
ªque°
.
mesßge
.
body
.
öôül

	`memˇched_ht⁄Œ
(initial);

131 
ªque°
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
((
uöt32_t
)Éxpiration);

133 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

135 { 
NULL
, 0 },

136 { 
ªque°
.
byãs
, (request.bytes) },

137 { 
	`memˇched_¨øy_°rög
(
ö°™˚
->
roŸ
->
_«me•a˚
), 
	`memˇched_¨øy_size
(instance->root->_namespace) },

138 { 
key
, 
key_Àngth
 }

141  
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 4, 
åue
);

142 
	}
}

144 
memˇched_ªtu∫_t
 
	$memˇched_ö¸emít
(
memˇched_°
 *
memc
,

145 c⁄° *
key
, 
size_t
 
key_Àngth
,

146 
uöt32_t
 
off£t
,

147 
uöt64_t
 *
vÆue
)

149  
	`memˇched_ö¸emít_by_key
(
memc
, 
key
, 
key_Àngth
, key, key_Àngth, 
off£t
, 
vÆue
);

150 
	}
}

152 
memˇched_ªtu∫_t
 
	$ö¸emít_de¸emít_by_key
(c⁄° 
¥Ÿocﬁ_bö¨y_comm™d
 
comm™d
,

153 
Memˇched
 *
memc
,

154 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

155 c⁄° *
key
, 
size_t
 
key_Àngth
,

156 
uöt64_t
 
off£t
,

157 
uöt64_t
 *
vÆue
)

159 
uöt64_t
 
loˇl_vÆue
;

160 i‡(
vÆue
 =
NULL
)

162 
vÆue
&
loˇl_vÆue
;

165 
memˇched_ªtu∫_t
 
rc
;

166 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
memc
, 
åue
)))

168  
rc
;

171 i‡(
	`memˇched_is_í¸y±ed
(
memc
))

173  
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
,

174 
	`memˇched_lôîÆ_∑øm
("OperationÇotállowed whileÉncyrption isÉnabled"));

177 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_key_ã°
(*
memc
, (c⁄° **)&
key
, &
key_Àngth
, 1)))

179  
	`memˇched_œ°_îr‹
(
memc
);

182 
uöt32_t
 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
memc
, 
group_key
, 
group_key_Àngth
);

183 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
£rvî_key
);

185 
boﬁ
 
ª∂y

	`memˇched_is_ª∂yög
(
ö°™˚
->
roŸ
);

187 i‡(
	`memˇched_is_bö¨y
(
memc
))

189 
rc

	`bö¨y_ö¸_de¸
(
ö°™˚
, 
comm™d
,

190 
key
, 
key_Àngth
,

191 
	`uöt64_t
(
off£t
), 0, 
MEMCACHED_EXPIRATION_NOT_ADD
,

192 
ª∂y
);

196 
rc

	`ãxt_ö¸_de¸
(
ö°™˚
,

197 
comm™d
 =
PROTOCOL_BINARY_CMD_INCREMENT
 ? 
åue
 : 
Ál£
,

198 
key
, 
key_Àngth
,

199 
off£t
, 
ª∂y
);

202 
	`auto_ª•⁄£
(
ö°™˚
, 
ª∂y
, 
rc
, 
vÆue
);

204  
rc
;

205 
	}
}

207 
memˇched_ªtu∫_t
 
	$ö¸emít_de¸emít_wôh_öôül_by_key
(c⁄° 
¥Ÿocﬁ_bö¨y_comm™d
 
comm™d
,

208 
Memˇched
 *
memc
,

209 c⁄° *
group_key
,

210 
size_t
 
group_key_Àngth
,

211 c⁄° *
key
,

212 
size_t
 
key_Àngth
,

213 
uöt64_t
 
off£t
,

214 
uöt64_t
 
öôül
,

215 
time_t
 
expú©i⁄
,

216 
uöt64_t
 *
vÆue
)

218 
uöt64_t
 
loˇl_vÆue
;

219 i‡(
vÆue
 =
NULL
)

221 
vÆue
&
loˇl_vÆue
;

224 
memˇched_ªtu∫_t
 
rc
;

225 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
memc
, 
åue
)))

227  
rc
;

230 i‡(
	`memˇched_is_í¸y±ed
(
memc
))

232  
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
,

233 
	`memˇched_lôîÆ_∑øm
("OperationÇotállowed whileÉncyrption isÉnabled"));

236 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_key_ã°
(*
memc
, (c⁄° **)&
key
, &
key_Àngth
, 1)))

238  
	`memˇched_œ°_îr‹
(
memc
);

241 
uöt32_t
 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
memc
, 
group_key
, 
group_key_Àngth
);

242 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
£rvî_key
);

244 
boﬁ
 
ª∂y

	`memˇched_is_ª∂yög
(
ö°™˚
->
roŸ
);

246 i‡(
	`memˇched_is_bö¨y
(
memc
))

248 
rc

	`bö¨y_ö¸_de¸
(
ö°™˚
, 
comm™d
,

249 
key
, 
key_Àngth
,

250 
off£t
, 
öôül
, 
	`uöt32_t
(
expú©i⁄
),

251 
ª∂y
);

256 
rc

	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

257 
	`memˇched_lôîÆ_∑øm
("memcached_increment_with_initial_by_key() isÇot supported viaÅhe ASCIIÖrotocol"));

260 
	`auto_ª•⁄£
(
ö°™˚
, 
ª∂y
, 
rc
, 
vÆue
);

262  
rc
;

263 
	}
}

265 
memˇched_ªtu∫_t
 
	$memˇched_de¸emít
(
memˇched_°
 *
memc
,

266 c⁄° *
key
, 
size_t
 
key_Àngth
,

267 
uöt32_t
 
off£t
,

268 
uöt64_t
 *
vÆue
)

270  
	`memˇched_de¸emít_by_key
(
memc
, 
key
, 
key_Àngth
, key, key_Àngth, 
off£t
, 
vÆue
);

271 
	}
}

274 
memˇched_ªtu∫_t
 
	$memˇched_ö¸emít_by_key
(
memˇched_°
 *
shñl
,

275 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

276 c⁄° *
key
, 
size_t
 
key_Àngth
,

277 
uöt64_t
 
off£t
,

278 
uöt64_t
 *
vÆue
)

280 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

281 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_START
();

282 
memˇched_ªtu∫_t
 
rc

	`ö¸emít_de¸emít_by_key
(
PROTOCOL_BINARY_CMD_INCREMENT
,

283 
memc
,

284 
group_key
, 
group_key_Àngth
,

285 
key
, 
key_Àngth
,

286 
off£t
, 
vÆue
);

288 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_END
();

290  
rc
;

291 
	}
}

293 
memˇched_ªtu∫_t
 
	$memˇched_de¸emít_by_key
(
memˇched_°
 *
shñl
,

294 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

295 c⁄° *
key
, 
size_t
 
key_Àngth
,

296 
uöt64_t
 
off£t
,

297 
uöt64_t
 *
vÆue
)

299 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

300 
	`LIBMEMCACHED_MEMCACHED_DECREMENT_START
();

301 
memˇched_ªtu∫_t
 
rc

	`ö¸emít_de¸emít_by_key
(
PROTOCOL_BINARY_CMD_DECREMENT
,

302 
memc
,

303 
group_key
, 
group_key_Àngth
,

304 
key
, 
key_Àngth
,

305 
off£t
, 
vÆue
);

306 
	`LIBMEMCACHED_MEMCACHED_DECREMENT_END
();

308  
rc
;

309 
	}
}

311 
memˇched_ªtu∫_t
 
	$memˇched_ö¸emít_wôh_öôül
(
memˇched_°
 *
memc
,

312 c⁄° *
key
,

313 
size_t
 
key_Àngth
,

314 
uöt64_t
 
off£t
,

315 
uöt64_t
 
öôül
,

316 
time_t
 
expú©i⁄
,

317 
uöt64_t
 *
vÆue
)

319  
	`memˇched_ö¸emít_wôh_öôül_by_key
(
memc
, 
key
, 
key_Àngth
,

320 
key
, 
key_Àngth
,

321 
off£t
, 
öôül
, 
expú©i⁄
, 
vÆue
);

322 
	}
}

324 
memˇched_ªtu∫_t
 
	$memˇched_ö¸emít_wôh_öôül_by_key
(
memˇched_°
 *
shñl
,

325 c⁄° *
group_key
,

326 
size_t
 
group_key_Àngth
,

327 c⁄° *
key
,

328 
size_t
 
key_Àngth
,

329 
uöt64_t
 
off£t
,

330 
uöt64_t
 
öôül
,

331 
time_t
 
expú©i⁄
,

332 
uöt64_t
 *
vÆue
)

334 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_START
();

335 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

336 
memˇched_ªtu∫_t
 
rc

	`ö¸emít_de¸emít_wôh_öôül_by_key
(
PROTOCOL_BINARY_CMD_INCREMENT
,

337 
memc
,

338 
group_key
, 
group_key_Àngth
,

339 
key
, 
key_Àngth
,

340 
off£t
, 
öôül
, 
expú©i⁄
, 
vÆue
);

341 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_END
();

343  
rc
;

344 
	}
}

346 
memˇched_ªtu∫_t
 
	$memˇched_de¸emít_wôh_öôül
(
memˇched_°
 *
memc
,

347 c⁄° *
key
,

348 
size_t
 
key_Àngth
,

349 
uöt64_t
 
off£t
,

350 
uöt64_t
 
öôül
,

351 
time_t
 
expú©i⁄
,

352 
uöt64_t
 *
vÆue
)

354  
	`memˇched_de¸emít_wôh_öôül_by_key
(
memc
, 
key
, 
key_Àngth
,

355 
key
, 
key_Àngth
,

356 
off£t
, 
öôül
, 
expú©i⁄
, 
vÆue
);

357 
	}
}

359 
memˇched_ªtu∫_t
 
	$memˇched_de¸emít_wôh_öôül_by_key
(
memˇched_°
 *
shñl
,

360 c⁄° *
group_key
,

361 
size_t
 
group_key_Àngth
,

362 c⁄° *
key
,

363 
size_t
 
key_Àngth
,

364 
uöt64_t
 
off£t
,

365 
uöt64_t
 
öôül
,

366 
time_t
 
expú©i⁄
,

367 
uöt64_t
 *
vÆue
)

369 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_START
();

370 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

371 
memˇched_ªtu∫_t
 
rc

	`ö¸emít_de¸emít_wôh_öôül_by_key
(
PROTOCOL_BINARY_CMD_DECREMENT
,

372 
memc
,

373 
group_key
, 
group_key_Àngth
,

374 
key
, 
key_Àngth
,

375 
off£t
, 
öôül
, 
expú©i⁄
, 
vÆue
);

377 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_END
();

379  
rc
;

380 
	}
}

	@libmemcached/backtrace.cc

38 
	~"mem_c⁄fig.h
"

40 
	~"libmemˇched/backåa˚.hµ
"

42 
	~<c°dio
>

43 
	~<c°dlib
>

44 
	~<c°rög
>

46 #i‡
deföed
(
HAVE_SHARED_ENABLED
) && HAVE_SHARED_ENABLED

48 #ifde‡
HAVE_EXECINFO_H


49 
	~<execöfo.h
>

52 #ifde‡
HAVE_GCC_ABI_DEMANGLE


53 
	~<cxxabi.h
>

54 
	#USE_DEMANGLE
 1

	)

56 
	#USE_DEMANGLE
 0

	)

59 #ifde‡
HAVE_DLFCN_H


60 
	~<dlf˙.h
>

63 c⁄° 
	gMAX_DEPTH
= 50;

65 
	$cu°om_backåa˚
()

67 #ifde‡
HAVE_EXECINFO_H


68 *
backåa˚_buf„r
[
MAX_DEPTH
 +1];

70 
°ack_‰ames

	`backåa˚
(
backåa˚_buf„r
, 
MAX_DEPTH
);

71 i‡(
°ack_‰ames
)

73 **
symbﬁli°

	`backåa˚_symbﬁs
(
backåa˚_buf„r
, 
°ack_‰ames
);

74 i‡(
symbﬁli°
)

76 
x
0; x < 
°ack_‰ames
; x++)

78 
boﬁ
 
was_dem™gÀd

Ál£
;

80 i‡(
USE_DEMANGLE
)

82 #ifde‡
HAVE_DLFCN_H


83 
Dl_öfo
 
dlöfo
;

84 i‡(
	`dœddr
(
backåa˚_buf„r
[
x
], &
dlöfo
))

86 
dem™gÀd_buf„r
[1024];

87 c⁄° *
ˇŒed_ö
= "<unresolved>";

88 i‡(
dlöfo
.
dli_¢ame
)

90 
size_t
 
dem™gÀd_size
(
dem™gÀd_buf„r
);

91 
°©us
;

92 * 
dem™gÀd
;

93 i‡((
dem™gÀd

abi
::
	`__cxa_dem™gÀ
(
dlöfo
.
dli_¢ame
, 
dem™gÀd_buf„r
, &
dem™gÀd_size
, &
°©us
)))

95 
ˇŒed_ö

dem™gÀd
;

96 
	`Ârötf
(
°dîr
, "---> dem™gÀd: %†-> %s\n", 
dem™gÀd_buf„r
, 
dem™gÀd
);

100 
ˇŒed_ö

dlöfo
.
dli_¢ame
;

103 
was_dem™gÀd

åue
;

104 
	`Ârötf
(
°dîr
, "#%d %p in %sát %s\n",

105 
x
, 
backåa˚_buf„r
[x],

106 
ˇŒed_ö
,

107 
dlöfo
.
dli_‚ame
);

113 i‡(
was_dem™gÀd
 =
Ál£
)

115 
	`Ârötf
(
°dîr
, "?%d %∞ö %s\n", 
x
, 
backåa˚_buf„r
[x], 
symbﬁli°
[x]);

119 ::
	`‰ì
(
symbﬁli°
);

123 
	}
}

127 
	$cu°om_backåa˚
()

129 
	`Ârötf
(
°dîr
, "BacktraceÇull function called\n");

130 
	}
}

	@libmemcached/backtrace.hpp

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
cu°om_backåa˚
();

46 #ifde‡
__˝lu•lus


	@libmemcached/behavior.cc

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<libmemˇched/›ti⁄s.hµ
>

40 
	~<libmemˇched/vútuÆ_buckë.h
>

42 
	~<˘ime
>

43 
	~<sys/ty≥s.h
>

45 
boﬁ
 
	$memˇched_is_c⁄si°ít_di°ributi⁄
(c⁄° 
Memˇched
* 
memc
)

47 
memc
->
di°ributi⁄
)

49 
MEMCACHED_DISTRIBUTION_CONSISTENT
:

50 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
:

51 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
:

52 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
:

53  
åue
;

55 
MEMCACHED_DISTRIBUTION_MODULA
:

56 
MEMCACHED_DISTRIBUTION_RANDOM
:

57 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
:

58 
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
:

62  
Ál£
;

63 
	}
}

71 
memˇched_ªtu∫_t
 
	$memˇched_behavi‹_£t
(
memˇched_°
 *
shñl
,

72 c⁄° 
memˇched_behavi‹_t
 
Êag
,

73 
uöt64_t
 
d©a
)

75 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

76 i‡(
±r
 =
NULL
)

78  
MEMCACHED_INVALID_ARGUMENTS
;

81 
Êag
)

83 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
:

84 
±r
->
numbî_of_ª∂iˇs
(
uöt32_t
)
d©a
;

87 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
:

88 
±r
->
io_msg_w©îm¨k
(
uöt32_t
Ë
d©a
;

91 
MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
:

92 
±r
->
io_byãs_w©îm¨k
(
uöt32_t
)
d©a
;

95 
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
:

96 
±r
->
io_key_¥e„tch
 = (
uöt32_t
)
d©a
;

99 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
:

100 
±r
->
¢d_timeout
(
öt32_t
)
d©a
;

103 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
:

104 
±r
->
rcv_timeout
(
öt32_t
)
d©a
;

107 
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
:

108 
±r
->
Êags
.
auto_eje˘_ho°s

	`boﬁ
(
d©a
);

110 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
:

111 i‡(
d©a
 == 0)

113  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

114 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMITÑequiresá value greaterÅhen zero."));

116 
±r
->
£rvî_Áûuª_limô

	`uöt32_t
(
d©a
);

119 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
:

120 
	`£nd_quô
(
±r
);

121 i‡(
d©a
)

123 
±r
->
Êags
.
vîify_key

Ál£
;

125 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ

	`boﬁ
(
d©a
);

128 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
:

129 
±r
->
Êags
.
suµ‹t_ˇs

	`boﬁ
(
d©a
);

132 
MEMCACHED_BEHAVIOR_NO_BLOCK
:

133 
±r
->
Êags
.
no_block

	`boﬁ
(
d©a
);

134 
	`£nd_quô
(
±r
);

137 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
:

138 i‡(
	`memˇched_is_udp
(
±r
))

140  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

141 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_BUFFER_REQUESTS cannot be set while MEMCACHED_BEHAVIOR_USE_UDP isÉnabled."));

143 
±r
->
Êags
.
buf„r_ªque°s

	`boﬁ
(
d©a
);

144 
	`£nd_quô
(
±r
);

147 
MEMCACHED_BEHAVIOR_USE_UDP
:

148 
	`£nd_quô
(
±r
);

149 
±r
->
Êags
.
u£_udp

	`boﬁ
(
d©a
);

150 i‡(
	`boﬁ
(
d©a
))

152 
±r
->
Êags
.
ª∂y

Ál£
;

153 
±r
->
Êags
.
buf„r_ªque°s

Ál£
;

157 
±r
->
Êags
.
ª∂y

åue
;

161 
MEMCACHED_BEHAVIOR_TCP_NODELAY
:

162 
±r
->
Êags
.
t˝_nodñay

	`boﬁ
(
d©a
);

163 
	`£nd_quô
(
±r
);

166 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
:

167 
±r
->
Êags
.
t˝_kì∑live

	`boﬁ
(
d©a
);

168 
	`£nd_quô
(
±r
);

171 
MEMCACHED_BEHAVIOR_DISTRIBUTION
:

172  
	`memˇched_behavi‹_£t_di°ributi⁄
(
±r
, (
memˇched_£rvî_di°ributi⁄_t
)
d©a
);

174 
MEMCACHED_BEHAVIOR_KETAMA
:

176 i‡(
d©a
)

178  
	`memˇched_behavi‹_£t_di°ributi⁄
(
±r
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
);

181  
	`memˇched_behavi‹_£t_di°ributi⁄
(
±r
, 
MEMCACHED_DISTRIBUTION_MODULA
);

184 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
:

186 i‡(
	`boﬁ
(
d©a
Ë=
Ál£
)

188  
	`memˇched_behavi‹_£t
(
±r
, 
MEMCACHED_BEHAVIOR_KETAMA
, 
åue
);

191 ()
	`memˇched_behavi‹_£t_key_hash
(
±r
, 
MEMCACHED_HASH_MD5
);

192 ()
	`memˇched_behavi‹_£t_di°ributi⁄_hash
(
±r
, 
MEMCACHED_HASH_MD5
);

196  
	`memˇched_behavi‹_£t_di°ributi⁄
(
±r
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
);

199 
MEMCACHED_BEHAVIOR_HASH
:

200  
	`memˇched_behavi‹_£t_key_hash
(
±r
, (
memˇched_hash_t
)(
d©a
));

202 
MEMCACHED_BEHAVIOR_KETAMA_HASH
:

203  
	`memˇched_behavi‹_£t_di°ributi⁄_hash
(
±r
, (
memˇched_hash_t
)(
d©a
));

205 
MEMCACHED_BEHAVIOR_CACHE_LOOKUPS
:

206  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_DEPRECATED
, 
MEMCACHED_AT
,

207 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_CACHE_LOOKUPS has been deprecated."));

209 
MEMCACHED_BEHAVIOR_VERIFY_KEY
:

210 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

212  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

213 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_VERIFY_KEY ifÅhe binaryÖrotocol has beenÉnabled."));

215 
±r
->
Êags
.
vîify_key

	`boﬁ
(
d©a
);

218 
MEMCACHED_BEHAVIOR_SORT_HOSTS
:

220 
±r
->
Êags
.
u£_s‹t_ho°s

	`boﬁ
(
d©a
);

221  
	`run_di°ributi⁄
(
±r
);

224 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
:

225 
±r
->
pﬁl_timeout
(
öt32_t
)
d©a
;

228 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
:

229 
±r
->
c⁄√˘_timeout
(
öt32_t
)
d©a
;

232 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
:

233 i‡(
d©a
 == 0)

235  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

236 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_RETRY_TIMEOUTÑequiresá value greaterÅhen zero."));

238 
±r
->
ªåy_timeout

	`öt32_t
(
d©a
);

241 
MEMCACHED_BEHAVIOR_DEAD_TIMEOUT
:

242 
±r
->
dód_timeout

	`öt32_t
(
d©a
);

245 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
:

246 
±r
->
£nd_size
(
öt32_t
)
d©a
;

247 
	`£nd_quô
(
±r
);

250 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
:

251 
±r
->
ªcv_size
(
öt32_t
)
d©a
;

252 
	`£nd_quô
(
±r
);

255 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
:

256 
±r
->
t˝_kìpidÀ
(
uöt32_t
)
d©a
;

257 
	`£nd_quô
(
±r
);

260 
MEMCACHED_BEHAVIOR_USER_DATA
:

261  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_DEPRECATED
, 
MEMCACHED_AT
,

262 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_USER_DATA deprecated."));

264 
MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
:

265 
±r
->
Êags
.
hash_wôh_«me•a˚

	`boﬁ
(
d©a
);

268 
MEMCACHED_BEHAVIOR_NOREPLY
:

269 i‡(
	`memˇched_is_udp
(
±r
Ë
™d
 
	`boﬁ
(
d©a
Ë=
Ál£
)

271  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

272 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_NOREPLY cannot be disabled while MEMCACHED_BEHAVIOR_USE_UDP isÉnabled."));

276 
±r
->
Êags
.
ª∂y

	`boﬁ
(
d©a
Ë? 
Ál£
 : 
åue
;

279 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
:

280 
±r
->
Êags
.
auto_eje˘_ho°s

	`boﬁ
(
d©a
);

283 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
:

284 
	`§™dom
((
uöt32_t
Ë
	`time
(
NULL
));

285 
±r
->
Êags
.
øndomize_ª∂iˇ_ªad

	`boﬁ
(
d©a
);

288 
MEMCACHED_BEHAVIOR_CORK
:

289  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_DEPRECATED
, 
MEMCACHED_AT
,

290 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_CORK isÇow incorporated intoÅhe driver by default."));

292 
MEMCACHED_BEHAVIOR_LOAD_FROM_FILE
:

293  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

294 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_LOAD_FROM_FILE canÇot be set with memcached_behavior_set()"));

296 
MEMCACHED_BEHAVIOR_MAX
:

299 
	`as£π_msg
(0, "Invalid behaviorÖassedÅo memcached_behavior_set()");

300  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

301 
	`memˇched_lôîÆ_∑øm
("Invalid behaviorÖassedÅo memcached_behavior_set()"));

304  
MEMCACHED_SUCCESS
;

305 
	}
}

307 
boﬁ
 
	$_is_auto_eje˘_ho°
(c⁄° 
memˇched_°
 *
±r
)

309  
±r
->
Êags
.
auto_eje˘_ho°s
;

310 
	}
}

312 
uöt64_t
 
	$memˇched_behavi‹_gë
(
memˇched_°
 *
shñl
,

313 c⁄° 
memˇched_behavi‹_t
 
Êag
)

315 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

316 i‡(
±r
 =
NULL
)

318  
MEMCACHED_INVALID_ARGUMENTS
;

321 
Êag
)

323 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
:

324  
±r
->
numbî_of_ª∂iˇs
;

326 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
:

327  
±r
->
io_msg_w©îm¨k
;

329 
MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
:

330  
±r
->
io_byãs_w©îm¨k
;

332 
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
:

333  
±r
->
io_key_¥e„tch
;

335 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
:

336  
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
;

338 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
:

339  
±r
->
Êags
.
suµ‹t_ˇs
;

341 
MEMCACHED_BEHAVIOR_CACHE_LOOKUPS
:

342  
åue
;

344 
MEMCACHED_BEHAVIOR_NO_BLOCK
:

345  
±r
->
Êags
.
no_block
;

347 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
:

348  
±r
->
Êags
.
buf„r_ªque°s
;

350 
MEMCACHED_BEHAVIOR_USE_UDP
:

351  
	`memˇched_is_udp
(
±r
);

353 
MEMCACHED_BEHAVIOR_TCP_NODELAY
:

354  
±r
->
Êags
.
t˝_nodñay
;

356 
MEMCACHED_BEHAVIOR_VERIFY_KEY
:

357  
±r
->
Êags
.
vîify_key
;

359 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
:

360 i‡(
	`memˇched_is_c⁄si°ít_di°ributi⁄
(
±r
))

362  
	`memˇched_is_weighãd_këama
(
±r
);

364  
Ál£
;

366 
MEMCACHED_BEHAVIOR_DISTRIBUTION
:

367  
±r
->
di°ributi⁄
;

369 
MEMCACHED_BEHAVIOR_KETAMA
:

370  
	`memˇched_is_c⁄si°ít_di°ributi⁄
(
±r
);

372 
MEMCACHED_BEHAVIOR_HASH
:

373  
	`hashkô_gë_fun˘i⁄
(&
±r
->
hashkô
);

375 
MEMCACHED_BEHAVIOR_KETAMA_HASH
:

376  
	`hashkô_gë_fun˘i⁄
(&
±r
->
hashkô
);

378 
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
:

379 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
:

380  
±r
->
£rvî_Áûuª_limô
;

382 
MEMCACHED_BEHAVIOR_SORT_HOSTS
:

383  
±r
->
Êags
.
u£_s‹t_ho°s
;

385 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
:

386  (
uöt64_t
)
±r
->
pﬁl_timeout
;

388 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
:

389  (
uöt64_t
)
±r
->
c⁄√˘_timeout
;

391 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
:

392  (
uöt64_t
)
±r
->
ªåy_timeout
;

394 
MEMCACHED_BEHAVIOR_DEAD_TIMEOUT
:

395  
	`uöt64_t
(
±r
->
dód_timeout
);

397 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
:

398  (
uöt64_t
)
±r
->
¢d_timeout
;

400 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
:

401  (
uöt64_t
)
±r
->
rcv_timeout
;

403 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
:

404  (
uöt64_t
)
±r
->
t˝_kìpidÀ
;

406 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
:

408 
sock_size
= 0;

409 
sockÀn_t
 
sock_Àngth
= ();

411 i‡(
±r
->
£nd_size
 != -1)

413  (
uöt64_t
Ë
±r
->
£nd_size
;

416 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 0);

418 i‡(
ö°™˚
)

422 i‡(
	`memˇched_Áûed
(
	`memˇched_c⁄√˘
(
ö°™˚
)))

427 i‡(
	`memˇched_Áûed
(
	`memˇched_io_waô_f‹_wrôe
(
ö°™˚
)))

432 i‡(
	`gësock›t
(
ö°™˚
->
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
sock_size
, &
sock_Àngth
) < 0)

434 
	`memˇched_£t_î∫o
(*
±r
, 
	`gë_sockë_î∫o
(), 
MEMCACHED_AT
);

439  (
uöt64_t
Ë
sock_size
;

442 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
:

444 
sock_size
= 0;

445 
sockÀn_t
 
sock_Àngth
= ();

447 i‡(
±r
->
ªcv_size
 != -1)

448  (
uöt64_t
Ë
±r
->
ªcv_size
;

450 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 0);

455 i‡(
ö°™˚
)

458 i‡(
	`memˇched_Áûed
(
	`memˇched_c⁄√˘
(
ö°™˚
)))

463 i‡(
	`memˇched_Áûed
(
	`memˇched_io_waô_f‹_wrôe
(
ö°™˚
)))

468 i‡(
	`gësock›t
(
ö°™˚
->
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
sock_size
, &
sock_Àngth
) < 0)

470 
	`memˇched_£t_î∫o
(*
±r
, 
	`gë_sockë_î∫o
(), 
MEMCACHED_AT
);

475  (
uöt64_t
Ë
sock_size
;

478 
MEMCACHED_BEHAVIOR_USER_DATA
:

479 
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_DEPRECATED
, 
MEMCACHED_AT
,

480 
	`memˇched_lôîÆ_∑øm
("MEMCACHED_BEHAVIOR_USER_DATA deprecated."));

483 
MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
:

484  
±r
->
Êags
.
hash_wôh_«me•a˚
;

486 
MEMCACHED_BEHAVIOR_NOREPLY
:

487  
±r
->
Êags
.
ª∂y
 ? 
Ál£
 : 
åue
;

489 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
:

490  
±r
->
Êags
.
auto_eje˘_ho°s
;

492 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
:

493  
±r
->
Êags
.
øndomize_ª∂iˇ_ªad
;

495 
MEMCACHED_BEHAVIOR_CORK
:

496 #ifde‡
HAVE_MSG_MORE


497  
åue
;

499  
Ál£
;

502 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
:

503  
±r
->
Êags
.
t˝_kì∑live
;

505 
MEMCACHED_BEHAVIOR_LOAD_FROM_FILE
:

506  
	`boﬁ
(
	`memˇched_∑r£_fûíame
(
±r
));

508 
MEMCACHED_BEHAVIOR_MAX
:

510 
	`as£π_msg
(0, "Invalid behaviorÖassedÅo memcached_behavior_get()");

515 
	}
}

518 
memˇched_ªtu∫_t
 
	$memˇched_behavi‹_£t_di°ributi⁄
(
memˇched_°
 *
shñl
, 
memˇched_£rvî_di°ributi⁄_t
 
ty≥
)

520 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

521 i‡(
±r
)

523 
ty≥
)

525 
MEMCACHED_DISTRIBUTION_MODULA
:

528 
MEMCACHED_DISTRIBUTION_CONSISTENT
:

529 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
:

530 
	`memˇched_£t_weighãd_këama
(
±r
, 
Ál£
);

533 
MEMCACHED_DISTRIBUTION_RANDOM
:

536 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
:

539 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
:

540 
	`memˇched_£t_weighãd_këama
(
±r
, 
åue
);

543 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
:

547 
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
:

548  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

549 
	`memˇched_lôîÆ_∑øm
("Invalid memcached_server_distribution_t"));

551 
±r
->
di°ributi⁄

ty≥
;

553  
	`run_di°ributi⁄
(
±r
);

556  
MEMCACHED_INVALID_ARGUMENTS
;

557 
	}
}

560 
memˇched_£rvî_di°ributi⁄_t
 
	$memˇched_behavi‹_gë_di°ributi⁄
(
memˇched_°
 *
shñl
)

562 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

563 i‡(
±r
)

565  
±r
->
di°ributi⁄
;

568  
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
;

569 
	}
}

571 
memˇched_ªtu∫_t
 
	$memˇched_behavi‹_£t_key_hash
(
memˇched_°
 *
shñl
, 
memˇched_hash_t
 
ty≥
)

573 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

574 i‡(
±r
)

576 i‡(
	`hashkô_suc˚ss
(
	`hashkô_£t_fun˘i⁄
(&
±r
->
hashkô
, (
hashkô_hash_Æg‹ôhm_t
)
ty≥
)))

578  
MEMCACHED_SUCCESS
;

581  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

582 
	`memˇched_lôîÆ_∑øm
("Invalid memcached_hash_t()"));

585  
MEMCACHED_INVALID_ARGUMENTS
;

586 
	}
}

588 
memˇched_hash_t
 
	$memˇched_behavi‹_gë_key_hash
(
memˇched_°
 *
shñl
)

590 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

591 i‡(
±r
)

593  (
memˇched_hash_t
)
	`hashkô_gë_fun˘i⁄
(&
±r
->
hashkô
);

596  
MEMCACHED_HASH_MAX
;

597 
	}
}

599 
memˇched_ªtu∫_t
 
	$memˇched_behavi‹_£t_di°ributi⁄_hash
(
memˇched_°
 *
shñl
, 
memˇched_hash_t
 
ty≥
)

601 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

602 i‡(
±r
)

604 i‡(
	`hashkô_suc˚ss
(
	`hashkô_£t_di°ributi⁄_fun˘i⁄
(&
±r
->
hashkô
, (
hashkô_hash_Æg‹ôhm_t
)
ty≥
)))

606  
MEMCACHED_SUCCESS
;

609  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

610 
	`memˇched_lôîÆ_∑øm
("Invalid memcached_hash_t()"));

613  
MEMCACHED_INVALID_ARGUMENTS
;

614 
	}
}

616 
memˇched_hash_t
 
	$memˇched_behavi‹_gë_di°ributi⁄_hash
(
memˇched_°
 *
shñl
)

618 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

619 i‡(
±r
)

621  (
memˇched_hash_t
)
	`hashkô_gë_fun˘i⁄
(&
±r
->
hashkô
);

624  
MEMCACHED_HASH_MAX
;

625 
	}
}

627 c⁄° *
	$libmemˇched_°rög_behavi‹
(c⁄° 
memˇched_behavi‹_t
 
Êag
)

629 
Êag
)

631 
MEMCACHED_BEHAVIOR_NO_BLOCK
:  "MEMCACHED_BEHAVIOR_NO_BLOCK";

632 
MEMCACHED_BEHAVIOR_TCP_NODELAY
:  "MEMCACHED_BEHAVIOR_TCP_NODELAY";

633 
MEMCACHED_BEHAVIOR_HASH
:  "MEMCACHED_BEHAVIOR_HASH";

634 
MEMCACHED_BEHAVIOR_KETAMA
:  "MEMCACHED_BEHAVIOR_KETAMA";

635 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
:  "MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE";

636 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
:  "MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE";

637 
MEMCACHED_BEHAVIOR_CACHE_LOOKUPS
:  "MEMCACHED_BEHAVIOR_CACHE_LOOKUPS";

638 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
:  "MEMCACHED_BEHAVIOR_SUPPORT_CAS";

639 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
:  "MEMCACHED_BEHAVIOR_POLL_TIMEOUT";

640 
MEMCACHED_BEHAVIOR_DISTRIBUTION
:  "MEMCACHED_BEHAVIOR_DISTRIBUTION";

641 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
:  "MEMCACHED_BEHAVIOR_BUFFER_REQUESTS";

642 
MEMCACHED_BEHAVIOR_USER_DATA
:  "MEMCACHED_BEHAVIOR_USER_DATA";

643 
MEMCACHED_BEHAVIOR_SORT_HOSTS
:  "MEMCACHED_BEHAVIOR_SORT_HOSTS";

644 
MEMCACHED_BEHAVIOR_VERIFY_KEY
:  "MEMCACHED_BEHAVIOR_VERIFY_KEY";

645 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
:  "MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT";

646 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
:  "MEMCACHED_BEHAVIOR_RETRY_TIMEOUT";

647 
MEMCACHED_BEHAVIOR_DEAD_TIMEOUT
:  "MEMCACHED_BEHAVIOR_DEAD_TIMEOUT";

648 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
:  "MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED";

649 
MEMCACHED_BEHAVIOR_KETAMA_HASH
:  "MEMCACHED_BEHAVIOR_KETAMA_HASH";

650 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
:  "MEMCACHED_BEHAVIOR_BINARY_PROTOCOL";

651 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
:  "MEMCACHED_BEHAVIOR_SND_TIMEOUT";

652 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
:  "MEMCACHED_BEHAVIOR_RCV_TIMEOUT";

653 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
:  "MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT";

654 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
:  "MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK";

655 
MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
:  "MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK";

656 
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
:  "MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH";

657 
MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
:  "MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY";

658 
MEMCACHED_BEHAVIOR_NOREPLY
:  "MEMCACHED_BEHAVIOR_NOREPLY";

659 
MEMCACHED_BEHAVIOR_USE_UDP
:  "MEMCACHED_BEHAVIOR_USE_UDP";

660 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
:  "MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS";

661 
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
:  "MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS";

662 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
:  "MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS";

663 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
:  "MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ";

664 
MEMCACHED_BEHAVIOR_CORK
:  "MEMCACHED_BEHAVIOR_CORK";

665 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
:  "MEMCACHED_BEHAVIOR_TCP_KEEPALIVE";

666 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
:  "MEMCACHED_BEHAVIOR_TCP_KEEPIDLE";

667 
MEMCACHED_BEHAVIOR_LOAD_FROM_FILE
:  "MEMCACHED_BEHAVIOR_LOAD_FROM_FILE";

669 
MEMCACHED_BEHAVIOR_MAX
:  "INVALID memcached_behavior_t";

671 
	}
}

673 c⁄° *
	$libmemˇched_°rög_di°ributi⁄
(c⁄° 
memˇched_£rvî_di°ributi⁄_t
 
Êag
)

675 
Êag
)

677 
MEMCACHED_DISTRIBUTION_MODULA
:  "MEMCACHED_DISTRIBUTION_MODULA";

678 
MEMCACHED_DISTRIBUTION_CONSISTENT
:  "MEMCACHED_DISTRIBUTION_CONSISTENT";

679 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
:  "MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA";

680 
MEMCACHED_DISTRIBUTION_RANDOM
:  "MEMCACHED_DISTRIBUTION_RANDOM";

681 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
:  "MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY";

682 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
:  "MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED";

683 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
:  "MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET";

685 
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
:  "INVALID memcached_server_distribution_t";

687 
	}
}

689 
memˇched_ªtu∫_t
 
	$memˇched_buckë_£t
(
memˇched_°
 *
shñl
,

690 c⁄° 
uöt32_t
 *
ho°_m≠
,

691 c⁄° 
uöt32_t
 *
f‹w¨d_m≠
,

692 c⁄° 
uöt32_t
 
buckës
,

693 c⁄° 
uöt32_t
 
ª∂iˇs
)

695 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

696 
memˇched_ªtu∫_t
 
rc
;

698 i‡(
£lf
 =
NULL
)

700  
MEMCACHED_INVALID_ARGUMENTS
;

703 i‡(
ho°_m≠
 =
NULL
)

705  
MEMCACHED_INVALID_ARGUMENTS
;

708 
memˇched_£rvî_di°ributi⁄_t
 
ﬁd

	`memˇched_behavi‹_gë_di°ributi⁄
(
£lf
);

710 i‡(
	`memˇched_Áûed
(
rc
 =
	`memˇched_behavi‹_£t_di°ributi⁄
(
£lf
, 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
)))

712  
rc
;

715 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_vútuÆ_buckë_¸óã
(
£lf
, 
ho°_m≠
, 
f‹w¨d_m≠
, 
buckës
, 
ª∂iˇs
)))

717 
	`memˇched_behavi‹_£t_di°ributi⁄
(
£lf
, 
ﬁd
);

720  
rc
;

721 
	}
}

	@libmemcached/behavior.hpp

37 #¥agm®
⁄˚


39 
boﬁ
 
memˇched_is_c⁄si°ít_di°ributi⁄
(c⁄° 
memˇched_°
*);

40 
boﬁ
 
_is_auto_eje˘_ho°
(c⁄° 
memˇched_°
 *
±r
);

	@libmemcached/byteorder.cc

38 
	~"mem_c⁄fig.h
"

39 
	~"libmemˇched/byã‹dî.h
"

42 #i‚de‡
sw≠64


43 
ölöe
 
uöt64_t
 
	$sw≠64
(
uöt64_t
 
ö
)

45 #i‚de‡
WORDS_BIGENDIAN


48 
uöt64_t
 
rv
= 0;

49 
uöt8_t
 
x
= 0; x < 8; ++x)

51 
rv
‘v << 8Ë| (
ö
 & 0xff);

52 
ö
 >>= 8;

54  
rv
;

57  
ö
;

59 
	}
}

63 
uöt64_t
 
	$memˇched_¡ohŒ
(
uöt64_t
 
vÆue
)

65 #ifde‡
HAVE_HTONLL


66  
	`¡ohŒ
(
vÆue
);

68  
	`sw≠64
(
vÆue
);

70 
	}
}

72 
uöt64_t
 
	$memˇched_ht⁄Œ
(
uöt64_t
 
vÆue
)

74 #ifde‡
HAVE_HTONLL


75  
	`ht⁄Œ
(
vÆue
);

77  
	`sw≠64
(
vÆue
);

79 
	}
}

	@libmemcached/byteorder.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
uöt64_t
 
memˇched_¡ohŒ
(uint64_t);

46 
uöt64_t
 
memˇched_ht⁄Œ
(uint64_t);

48 #ifde‡
__˝lu•lus


	@libmemcached/callback.cc

12 
	~<libmemˇched/comm⁄.h
>

13 
	~<sys/ty≥s.h
>

15 #i‚de‡
__INTEL_COMPILER


16 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

23 
memˇched_ªtu∫_t
 
	$memˇched_ˇŒback_£t
(
memˇched_°
 *
shñl
,

24 c⁄° 
memˇched_ˇŒback_t
 
Êag
,

25 c⁄° *
d©a
)

27 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

28 i‡(
±r
)

30 
Êag
)

32 
MEMCACHED_CALLBACK_PREFIX_KEY
:

34  
	`memˇched_£t_«me•a˚
(*
±r
, (*)
d©a
, d©®? 
	`°æí
((*)data) : 0);

37 
MEMCACHED_CALLBACK_USER_DATA
:

39 
±r
->
u£r_d©a

c⁄°_ˇ°
<*>(
d©a
);

43 
MEMCACHED_CALLBACK_CLEANUP_FUNCTION
:

45 
memˇched_˛ónup_‚
 
func
*(memˇched_˛ónup_‚ *)&
d©a
;

46 
±r
->
⁄_˛ónup

func
;

50 
MEMCACHED_CALLBACK_CLONE_FUNCTION
:

52 
memˇched_˛⁄e_‚
 
func
*(memˇched_˛⁄e_‚ *)&
d©a
;

53 
±r
->
⁄_˛⁄e

func
;

57 
MEMCACHED_CALLBACK_GET_FAILURE
:

59 
memˇched_åiggî_key_‚
 
func
*(memˇched_åiggî_key_‚ *)&
d©a
;

60 
±r
->
gë_key_Áûuª

func
;

64 
MEMCACHED_CALLBACK_DELETE_TRIGGER
:

66 i‡(
d©a
)

68 i‡(
	`memˇched_behavi‹_gë
(
±r
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
))

70  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("DeleteÅriggers cannot be used if buffering isÉnabled"));

73 i‡(
	`memˇched_behavi‹_gë
(
±r
, 
MEMCACHED_BEHAVIOR_NOREPLY
))

75  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("DeleteÅriggers cannot be used if MEMCACHED_BEHAVIOR_NOREPLY is set"));

79 
memˇched_åiggî_dñëe_key_‚
 
func
*(memˇched_åiggî_dñëe_key_‚ *)&
d©a
;

80 
±r
->
dñëe_åiggî

func
;

84 
MEMCACHED_CALLBACK_MAX
:

85  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Invalid callback supplied"));

88  
MEMCACHED_SUCCESS
;

91  
MEMCACHED_INVALID_ARGUMENTS
;

92 
	}
}

94 *
	$memˇched_ˇŒback_gë
(
memˇched_°
 *
shñl
,

95 c⁄° 
memˇched_ˇŒback_t
 
Êag
,

96 
memˇched_ªtu∫_t
 *
îr‹
)

98 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

99 
memˇched_ªtu∫_t
 
loˇl_îr‹
;

100 i‡(
îr‹
 =
NULL
)

102 
îr‹
 = &
loˇl_îr‹
;

105 i‡(
±r
 =
NULL
)

107 *
îr‹

MEMCACHED_INVALID_ARGUMENTS
;

108  
NULL
;

111 
Êag
)

113 
MEMCACHED_CALLBACK_PREFIX_KEY
:

115 *
îr‹

MEMCACHED_SUCCESS
;

116 i‡(
±r
->
_«me•a˚
)

118  (*)
	`memˇched_¨øy_°rög
(
±r
->
_«me•a˚
);

120  
NULL
;

123 
MEMCACHED_CALLBACK_USER_DATA
:

125 *
îr‹

±r
->
u£r_d©a
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

126  (*)
±r
->
u£r_d©a
;

129 
MEMCACHED_CALLBACK_CLEANUP_FUNCTION
:

131 *
îr‹

±r
->
⁄_˛ónup
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

132  *(**)&
±r
->
⁄_˛ónup
;

135 
MEMCACHED_CALLBACK_CLONE_FUNCTION
:

137 *
îr‹

±r
->
⁄_˛⁄e
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

138  *(**)&
±r
->
⁄_˛⁄e
;

141 
MEMCACHED_CALLBACK_GET_FAILURE
:

143 *
îr‹

±r
->
gë_key_Áûuª
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

144  *(**)&
±r
->
gë_key_Áûuª
;

147 
MEMCACHED_CALLBACK_DELETE_TRIGGER
:

149 *
îr‹

±r
->
dñëe_åiggî
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

150  *(**)&
±r
->
dñëe_åiggî
;

153 
MEMCACHED_CALLBACK_MAX
:

157 
	`as£π_msg
(0, "Invalid callbackÖassedÅo memcached_callback_get()");

158 *
îr‹

MEMCACHED_FAILURE
;

159  
NULL
;

160 
	}
}

	@libmemcached/common.h

43 #¥agm®
⁄˚


45 
	~<mem_c⁄fig.h
>

47 #ifde‡
__˝lu•lus


48 
	~<c°ddef
>

49 
	~<c°dio
>

50 
	~<c°dlib
>

51 
	~<c°rög
>

52 
	~<˘ime
>

53 
	~<c˘y≥
>

54 
	~<˚ºno
>

55 
	~<˛imôs
>

57 #ifde‡
HAVE_STDDEF_H


58 
	~<°ddef.h
>

60 #ifde‡
HAVE_STDLIB_H


61 
	~<°dio.h
>

63 #ifde‡
HAVE_STDLIB_H


64 
	~<°dlib.h
>

66 
	~<°rög.h
>

67 #ifde‡
HAVE_TIME_H


68 
	~<time.h
>

70 #ifde‡
HAVE_ERRNO_H


71 
	~<î∫o.h
>

73 #ifde‡
HAVE_LIMITS_H


74 
	~<limôs.h
>

78 #ifde‡
HAVE_SYS_UN_H


79 
	~<sys/un.h
>

82 #ifde‡
HAVE_SYS_TIME_H


83 
	~<sys/time.h
>

86 #ifde‡
HAVE_FCNTL_H


87 
	~<f˙é.h
>

90 #ifde‡
HAVE_SYS_TYPES_H


91 
	~<sys/ty≥s.h
>

94 #ifde‡
HAVE_UNISTD_H


95 
	~<uni°d.h
>

98 #ifde‡
HAVE_SYS_SOCKET_H


99 
	~<sys/sockë.h
>

102 #ifde‡
HAVE_STRINGS_H


103 
	~<°rögs.h
>

106 #ifde‡
HAVE_DLFCN_H


107 
	~<dlf˙.h
>

110 #i‡
deföed
(
_WIN32
)

111 
	~"libmemˇched/wödows.hµ
"

114 
	~<libmemˇched-1.0/memˇched.h
>

115 
	~"libmemˇched/w©chpoöt.h
"

116 
	~"libmemˇched/is.h
"

117 
memˇched_°
 
	tMemˇched
;

119 #ifde‡
HAVE_POLL_H


120 
	~<pﬁl.h
>

122 
	~"libmemˇched/pﬁl.h
"

125 #ifde‡
__˝lu•lus


126 
memˇched_ö°™˚_°
* 
memˇched_ö°™˚_„tch
(
memˇched_°
 *
±r
, 
uöt32_t
 
£rvî_key
);

130 
	~"libmemˇched/îr‹.hµ
"

131 
	~"libmemˇched/mem‹y.h
"

132 
	~"libmemˇched/io.h
"

133 #ifde‡
__˝lu•lus


134 
	~"libmemˇched/°rög.hµ
"

135 
	~"libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
"

136 
	~"libmemˇched/io.hµ
"

137 
	~"libmemˇched/udp.hµ
"

138 
	~"libmemˇched/do.hµ
"

139 
	~"libmemˇched/sockë.hµ
"

140 
	~"libmemˇched/c⁄√˘.hµ
"

141 
	~"libmemˇched/Æloˇt‹s.hµ
"

142 
	~"libmemˇched/hash.hµ
"

143 
	~"libmemˇched/quô.hµ
"

144 
	~"libmemˇched/ö°™˚.hµ
"

145 
	~"libmemˇched/£rvî_ö°™˚.h
"

146 
	~"libmemˇched/£rvî.hµ
"

147 
	~"libmemˇched/Êag.hµ
"

148 
	~"libmemˇched/behavi‹.hµ
"

149 
	~"libmemˇched/ß¶.hµ
"

150 
	~"libmemˇched/£rvî_li°.hµ
"

153 
	~"libmemˇched/öã∫Æ.h
"

154 
	~"libmemˇched/¨øy.h
"

155 
	~"libmemˇched/libmemˇched_¥obes.h
"

156 
	~"libmemˇched/byã‹dî.h
"

157 
	~"libmemˇched/öôülize_quîy.h
"

159 #ifde‡
__˝lu•lus


160 
	~"libmemˇched/ª•⁄£.h
"

161 
	~"libmemˇched/«me•a˚.h
"

163 
	~"libmemˇched/vútuÆ_buckë.h
"

166 #ifde‡
__˝lu•lus


167 
	~"libmemˇched/backåa˚.hµ
"

168 
	~"libmemˇched/as£π.hµ
"

169 
	~"libmemˇched/£rvî.hµ
"

170 
	~"libmemˇched/key.hµ
"

171 
	~"libmemˇched/ícodög_key.h
"

172 
	~"libmemˇched/ªsu….h
"

173 
	~"libmemˇched/vîsi⁄.hµ
"

176 
	~"libmemˇched/c⁄töuum.hµ
"

178 #i‡!
deföed
(
__GNUC__
Ë|| (__GNUC__ =2 && 
__GNUC_MINOR__
 < 96)

180 
	#likñy
(
x
Ëif((x))

	)

181 
	#u∆ikñy
(
x
Ëif((x))

	)

185 
	#likñy
(
x
Ëif(
	`__buûtö_ex≥˘
((xË!0, 1))

	)

186 
	#u∆ikñy
(
x
Ëif(
	`__buûtö_ex≥˘
((xË!0, 0))

	)

189 
	#MEMCACHED_BLOCK_SIZE
 1024

	)

190 
	#MEMCACHED_DEFAULT_COMMAND_SIZE
 350

	)

191 
	#SMALL_STRING_LEN
 1024

	)

192 
	#HUGE_STRING_LEN
 8196

	)

194 #ifde‡
__˝lu•lus


198 
memˇched_ªtu∫_t
 
run_di°ributi⁄
(
memˇched_°
 *
±r
);

200 #ifde‡
__˝lu•lus


201 
ölöe
 
memˇched_£rvî_ª•⁄£_ö¸emít
(
memˇched_ö°™˚_°
* 
ö°™˚
)

203 
ö°™˚
->
evíts
(
POLLIN
);

204 
ö°™˚
->
curs‹_a˘ive_
++;

208 
	#memˇched_£rvî_ª•⁄£_de¸emít
(
A
Ë(A)->
curs‹_a˘ive_
--

	)

209 
	#memˇched_£rvî_ª•⁄£_ª£t
(
A
Ë(A)->
curs‹_a˘ive_
=0

	)

211 
	#memˇched_ö°™˚_ª•⁄£_ö¸emít
(
A
Ë(A)->
curs‹_a˘ive_
++

	)

212 
	#memˇched_ö°™˚_ª•⁄£_de¸emít
(
A
Ë(A)->
curs‹_a˘ive_
--

	)

213 
	#memˇched_ö°™˚_ª•⁄£_ª£t
(
A
Ë(A)->
curs‹_a˘ive_
=0

	)

215 #ifde‡
__˝lu•lus


219 #ifde‡
__˝lu•lus


220 
boﬁ
 
memˇched_purge
(
memˇched_ö°™˚_°
*);

221 
memˇched_ö°™˚_°
* 
memˇched_ö°™˚_by_posôi⁄
(c⁄° 
memˇched_°
 *
±r
, 
uöt32_t
 
£rvî_key
);

	@libmemcached/connect.cc

39 
	~<libmemˇched/comm⁄.h
>

41 
	~<ˇs£π
>

43 #i‚de‡
SOCK_CLOEXEC


44 
	#SOCK_CLOEXEC
 0

	)

47 #i‚de‡
SOCK_NONBLOCK


48 
	#SOCK_NONBLOCK
 0

	)

51 #i‚de‡
FD_CLOEXEC


52 
	#FD_CLOEXEC
 0

	)

55 #i‚de‡
SO_NOSIGPIPE


56 
	#SO_NOSIGPIPE
 0

	)

59 #i‚de‡
TCP_NODELAY


60 
	#TCP_NODELAY
 0

	)

63 #i‚de‡
TCP_KEEPIDLE


64 
	#TCP_KEEPIDLE
 0

	)

67 
memˇched_ªtu∫_t
 
	$c⁄√˘_pﬁl
(
memˇched_ö°™˚_°
* 
£rvî
, c⁄° 
c⁄√˘i⁄_îr‹
)

69 
pﬁlfd
 
fds
[1];

70 
fds
[0].
fd

£rvî
->fd;

71 
fds
[0].
evíts

£rvî
->
	`evíts
();

72 
fds
[0].
ªvíts
= 0;

74 
size_t
 
lo›_max
= 5;

76 i‡(
£rvî
->
roŸ
->
pﬁl_timeout
 == 0)

78  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_TIMEOUT
, 
MEMCACHED_AT
,

79 
	`memˇched_lôîÆ_∑øm
("TheÅimeÅo wait forá connectionÅo beÉstablished was setÅo zero, which means it willálwaysÅimeout (MEMCACHED_TIMEOUT)."));

82 --
lo›_max
)

84 
numbî_of
;

85 i‡((
numbî_of

	`pﬁl
(
fds
, 1, 
£rvî
->
roŸ
->
c⁄√˘_timeout
)) == -1)

87 
loˇl_î∫o

	`gë_sockë_î∫o
();

88 
loˇl_î∫o
)

90 #ifde‡
__löux__


91 
ERESTART
:

93 
EINTR
:

96 
EFAULT
:

97 
ENOMEM
:

98  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

100 
EINVAL
:

101  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

102 
	`memˇched_lôîÆ_∑øm
("RLIMIT_NOFILEÉxceeded, or if OSXÅheÅimeout value was invalid"));

108 
	`as£π_msg
(
£rvî
->
fd
 !
INVALID_SOCKET
, "poll() wasÖassedán invalid file descriptor");

109 
£rvî
->
	`ª£t_sockë
();

110 
£rvî
->
°©e

MEMCACHED_SERVER_STATE_NEW
;

112  
	`memˇched_£t_î∫o
(*
£rvî
, 
loˇl_î∫o
, 
MEMCACHED_AT
);

115 i‡(
numbî_of
 == 0)

117 i‡(
c⁄√˘i⁄_îr‹
 =
EINPROGRESS
)

119 
îr
;

120 
sockÀn_t
 
Àn
(
îr
);

121 i‡(
	`gësock›t
(
£rvî
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr
, &
Àn
) == -1)

123  
	`memˇched_£t_î∫o
(*
£rvî
, 
î∫o
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("getsockopt()Érror'ed whileÜooking forÉrror connect_poll(EINPROGRESS)"));

127 i‡(
îr
 != 0)

129  
	`memˇched_£t_î∫o
(*
£rvî
, 
îr
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("getsockopt() foundÅheÉrror fromÖoll()áfter connect()Ñeturned EINPROGRESS."));

133  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_TIMEOUT
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("(number_of == 0)"));

136 
	`as£π
 (
numbî_of
 == 1);

138 i‡(
fds
[0].
ªvíts
 & 
POLLERR
 
‹


139 
fds
[0].
ªvíts
 & 
POLLHUP
 
‹


140 
fds
[0].
ªvíts
 & 
POLLNVAL
)

142 
îr
;

143 
sockÀn_t
 
Àn
 (
îr
);

144 i‡(
	`gësock›t
(
fds
[0].
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr
, &
Àn
) == -1)

146  
	`memˇched_£t_î∫o
(*
£rvî
, 
î∫o
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("getsockopt()Érrored whileÜooking upÉrror state fromÖoll()"));

150 i‡(
îr
 == 0)

152  
MEMCACHED_SUCCESS
;

154 
î∫o

îr
;

156  
	`memˇched_£t_î∫o
(*
£rvî
, 
îr
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("getsockopt() foundÅheÉrror fromÖoll() during connect."));

158 
	`as£π
(
fds
[0].
ªvíts
 & 
POLLOUT
);

160 i‡(
fds
[0].
ªvíts
 & 
POLLOUT
 
™d
 
c⁄√˘i⁄_îr‹
 =
EINPROGRESS
)

162 
îr
;

163 
sockÀn_t
 
Àn
(
îr
);

164 i‡(
	`gësock›t
(
£rvî
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr
, &
Àn
) == -1)

166  
	`memˇched_£t_î∫o
(*
£rvî
, 
î∫o
, 
MEMCACHED_AT
);

169 i‡(
îr
 == 0)

171  
MEMCACHED_SUCCESS
;

174  
	`memˇched_£t_î∫o
(*
£rvî
, 
îr
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("getsockopt() foundÅheÉrror fromÖoll()áfter connect()Ñeturned EINPROGRESS."));

181  
	`memˇched_£t_î∫o
(*
£rvî
, 
c⁄√˘i⁄_îr‹
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("connect_poll() wasÉxhausted"));

182 
	}
}

184 
memˇched_ªtu∫_t
 
	$£t_ho°öfo
(
memˇched_ö°™˚_°
* 
£rvî
)

186 
	`as£π
(
£rvî
->
ty≥
 !
MEMCACHED_CONNECTION_UNIX_SOCKET
);

187 
£rvî
->
	`˛ór_addröfo
();

189 
°r_p‹t
[
MEMCACHED_NI_MAXSERV
];

190 
Àngth

	`¢¥ötf
(
°r_p‹t
, 
MEMCACHED_NI_MAXSERV
, "%u", 
	`uöt32_t
(
£rvî
->
	`p‹t
()));

191 i‡(
Àngth
 >
MEMCACHED_NI_MAXSERV
 
‹
Üength <= 0)

193  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

194 
	`memˇched_lôîÆ_∑øm
("snprintf(NI_MAXSERV)"));

197 
addröfo
 
höts
;

198 
	`mem£t
(&
höts
, 0, (
addröfo
));

200 
höts
.
ai_Ámûy

AF_INET
;

201 i‡(
	`memˇched_is_udp
(
£rvî
->
roŸ
))

203 
höts
.
ai_¥Ÿocﬁ

IPPROTO_UDP
;

204 
höts
.
ai_sockty≥

SOCK_DGRAM
;

208 
höts
.
ai_sockty≥

SOCK_STREAM
;

209 
höts
.
ai_¥Ÿocﬁ

IPPROTO_TCP
;

212 
	`as£π
(
£rvî
->
addªss_öfo
 =
NULL
);

213 
	`as£π
(
£rvî
->
addªss_öfo_√xt
 =
NULL
);

214 
îrcode
;

215 
	`as£π
(
£rvî
->
	`ho°«me
());

216 
îrcode

	`gëaddröfo
(
£rvî
->
	`ho°«me
(), 
°r_p‹t
, &
höts
, &£rvî->
addªss_öfo
))

219 
£rvî
->
addªss_öfo_√xt
£rvî->
addªss_öfo
;

220 
£rvî
->
°©e

MEMCACHED_SERVER_STATE_ADDRINFO
;

223 
EAI_AGAIN
:

224  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_TIMEOUT
, 
MEMCACHED_AT
, 
	`memˇched_°rög_make_‰om_c°r
(
	`gai_°ªº‹
(
îrcode
)));

226 
EAI_SYSTEM
:

227 
£rvî
->
	`˛ór_addröfo
();

228  
	`memˇched_£t_î∫o
(*
£rvî
, 
î∫o
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("getaddrinfo(EAI_SYSTEM)"));

230 
EAI_BADFLAGS
:

231 
£rvî
->
	`˛ór_addröfo
();

232  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("getaddrinfo(EAI_BADFLAGS)"));

234 
EAI_MEMORY
:

235 
£rvî
->
	`˛ór_addröfo
();

236  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("getaddrinfo(EAI_MEMORY)"));

240 
£rvî
->
	`˛ór_addröfo
();

241  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_HOST_LOOKUP_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_°rög_make_‰om_c°r
(
	`gai_°ªº‹
(
îrcode
)));

245  
MEMCACHED_SUCCESS
;

246 
	}
}

248 
ölöe
 
	$£t_sockë_n⁄blockög
(
memˇched_ö°™˚_°
* 
£rvî
)

250 #i‡
	`deföed
(
_WIN32
)

251 
u_l⁄g
 
¨g
= 1;

252 i‡(
	`io˘lsockë
(
£rvî
->
fd
, 
FIONBIO
, &
¨g
Ë=
SOCKET_ERROR
)

254 
	`memˇched_£t_î∫o
(*
£rvî
, 
	`gë_sockë_î∫o
(), 
NULL
);

257 
Êags
;

259 i‡(
SOCK_NONBLOCK
 == 0)

263 
Êags

	`f˙é
(
£rvî
->
fd
, 
F_GETFL
, 0);

264 } 
Êags
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
));

266 i‡(
Êags
 == -1)

268 
	`memˇched_£t_î∫o
(*
£rvî
, 
î∫o
, 
NULL
);

270 i‡((
Êags
 & 
O_NONBLOCK
) == 0)

272 
rvÆ
;

276 
rvÆ

	`f˙é
(
£rvî
->
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

277 } 
rvÆ
 =-1 && (
î∫o
 =
EINTR
 
‹
Éºnÿ=
EAGAIN
));

279 i‡(
rvÆ
 == -1)

281 
	`memˇched_£t_î∫o
(*
£rvî
, 
î∫o
, 
NULL
);

286 
	}
}

288 
boﬁ
 
	$£t_sockë_›ti⁄s
(
memˇched_ö°™˚_°
* 
£rvî
)

290 
	`as£π_msg
(
£rvî
->
fd
 !
INVALID_SOCKET
, "invalid socket wasÖassedÅo set_socket_options()");

292 #ifde‡
HAVE_FCNTL


294 i‡(
SOCK_CLOEXEC
 == 0)

296 i‡(
FD_CLOEXEC
)

298 
Êags
;

301 
Êags

	`f˙é
(
£rvî
->
fd
, 
F_GETFD
, 0);

302 } 
Êags
 =-1 
	`™d
 (
î∫o
 =
EINTR
 
‹
Éºnÿ=
EAGAIN
));

304 i‡(
Êags
 != -1)

306 
rvÆ
;

309 
rvÆ

	`f˙é
 (
£rvî
->
fd
, 
F_SETFD
, 
Êags
 | 
FD_CLOEXEC
);

310 } 
rvÆ
 =-1 && (
î∫o
 =
EINTR
 
‹
Éºnÿ=
EAGAIN
));

317 i‡(
	`memˇched_is_udp
(
£rvî
->
roŸ
))

319  
åue
;

322 #ifde‡
HAVE_SNDTIMEO


323 i‡(
£rvî
->
roŸ
->
¢d_timeout
 > 0)

325 
timevÆ
 
waôtime
;

327 
waôtime
.
tv_£c

£rvî
->
roŸ
->
¢d_timeout
 / 1000000;

328 
waôtime
.
tv_u£c

£rvî
->
roŸ
->
¢d_timeout
 % 1000000;

330 
îr‹

	`£tsock›t
(
£rvî
->
fd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
,

331 (*)&
waôtime
, (
sockÀn_t
)(
timevÆ
));

332 ()
îr‹
;

333 
	`as£π
(
îr‹
 == 0);

337 #ifde‡
HAVE_RCVTIMEO


338 i‡(
£rvî
->
roŸ
->
rcv_timeout
 > 0)

340 
timevÆ
 
waôtime
;

342 
waôtime
.
tv_£c

£rvî
->
roŸ
->
rcv_timeout
 / 1000000;

343 
waôtime
.
tv_u£c

£rvî
->
roŸ
->
rcv_timeout
 % 1000000;

345 
îr‹

	`£tsock›t
(
£rvî
->
fd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
,

346 (*)&
waôtime
, (
sockÀn_t
)(
timevÆ
));

347 ()(
îr‹
);

348 
	`as£π
(
îr‹
 == 0);

353 #i‡
	`deföed
(
_WIN32
)

355 #i‡
	`deföed
(
SO_NOSIGPIPE
)

356 i‡(
SO_NOSIGPIPE
)

358 
£t
= 1;

359 
îr‹

	`£tsock›t
(
£rvî
->
fd
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*)&
£t
, ());

361 
	`as£π
(
îr‹
 == 0);

364 i‡(
îr‹
 == -1)

367 
	`≥º‹
("setsockopt(SO_NOSIGPIPE)");

374 i‡(
£rvî
->
roŸ
->
Êags
.
no_block
)

376 
lögî
Üinger;

378 
lögî
.
l_⁄off
= 1;

379 
lögî
.
l_lögî
= 0;

380 
îr‹

	`£tsock›t
(
£rvî
->
fd
, 
SOL_SOCKET
, 
SO_LINGER
,

381 (*)&
lögî
, (
sockÀn_t
)(linger));

382 ()(
îr‹
);

383 
	`as£π
(
îr‹
 == 0);

386 i‡(
TCP_NODELAY
)

388 i‡(
£rvî
->
roŸ
->
Êags
.
t˝_nodñay
)

390 
Êag
= 1;

392 
îr‹

	`£tsock›t
(
£rvî
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

393 (*)&
Êag
, (
sockÀn_t
)());

394 ()(
îr‹
);

395 
	`as£π
(
îr‹
 == 0);

399 i‡(
£rvî
->
roŸ
->
Êags
.
t˝_kì∑live
)

401 
Êag
= 1;

403 
îr‹

	`£tsock›t
(
£rvî
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

404 (*)&
Êag
, (
sockÀn_t
)());

405 ()(
îr‹
);

406 
	`as£π
(
îr‹
 == 0);

409 i‡(
TCP_KEEPIDLE
)

411 i‡(
£rvî
->
roŸ
->
t˝_kìpidÀ
 > 0)

413 
îr‹

	`£tsock›t
(
£rvî
->
fd
, 
IPPROTO_TCP
, 
TCP_KEEPIDLE
,

414 (*)&
£rvî
->
roŸ
->
t˝_kìpidÀ
, (
sockÀn_t
)());

415 ()(
îr‹
);

416 
	`as£π
(
îr‹
 == 0);

420 i‡(
£rvî
->
roŸ
->
£nd_size
 > 0)

422 
îr‹

	`£tsock›t
(
£rvî
->
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

423 (*)&
£rvî
->
roŸ
->
£nd_size
, (
sockÀn_t
)());

424 ()(
îr‹
);

425 
	`as£π
(
îr‹
 == 0);

428 i‡(
£rvî
->
roŸ
->
ªcv_size
 > 0)

430 
îr‹

	`£tsock›t
(
£rvî
->
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

431 (*)&
£rvî
->
roŸ
->
ªcv_size
, (
sockÀn_t
)());

432 ()(
îr‹
);

433 
	`as£π
(
îr‹
 == 0);

437 
	`£t_sockë_n⁄blockög
(
£rvî
);

439  
åue
;

440 
	}
}

442 
memˇched_ªtu∫_t
 
	$unix_sockë_c⁄√˘
(
memˇched_ö°™˚_°
* 
£rvî
)

444 #i‚de‡
_WIN32


445 
	`WATCHPOINT_ASSERT
(
£rvî
->
fd
 =
INVALID_SOCKET
);

448 
ty≥

SOCK_STREAM
;

449 i‡(
SOCK_CLOEXEC
)

451 
ty≥
|
SOCK_CLOEXEC
;

454 i‡(
SOCK_NONBLOCK
)

456 
ty≥
|
SOCK_NONBLOCK
;

459 i‡((
£rvî
->
fd

	`sockë
(
AF_UNIX
, 
ty≥
, 0)) == -1)

461  
	`memˇched_£t_î∫o
(*
£rvî
, 
î∫o
, 
NULL
);

464 
sockaddr_un
 
£rvAddr
;

466 
	`mem£t
(&
£rvAddr
, 0,  (
sockaddr_un
));

467 
£rvAddr
.
sun_Ámûy

AF_UNIX
;

468 
	`°∫˝y
(
£rvAddr
.
sun_∑th
, 
£rvî
->
	`ho°«me
(), (servAddr.sun_path));

470 i‡(
	`c⁄√˘
(
£rvî
->
fd
, (
sockaddr
 *)&
£rvAddr
, (servAddr)) == -1)

472 
î∫o
)

474 
EINPROGRESS
:

475 
EALREADY
:

476 
£rvî
->
	`evíts
(
POLLOUT
);

479 
EINTR
:

480 
£rvî
->
	`ª£t_sockë
();

483 
EISCONN
:

485 
	`as£π
(0);

486 
£rvî
->
	`ª£t_sockë
();

491 
	`WATCHPOINT_ERRNO
(
î∫o
);

492 
£rvî
->
	`ª£t_sockë
();

493  
	`memˇched_£t_î∫o
(*
£rvî
, 
î∫o
, 
MEMCACHED_AT
);

497 
£rvî
->
°©e

MEMCACHED_SERVER_STATE_CONNECTED
;

499 
	`WATCHPOINT_ASSERT
(
£rvî
->
fd
 !
INVALID_SOCKET
);

501  
MEMCACHED_SUCCESS
;

503 ()
£rvî
;

504  
MEMCACHED_NOT_SUPPORTED
;

506 
	}
}

508 
memˇched_ªtu∫_t
 
	$√tw‹k_c⁄√˘
(
memˇched_ö°™˚_°
* 
£rvî
)

510 
boﬁ
 
timeout_îr‹_occuªd

Ál£
;

512 
	`WATCHPOINT_ASSERT
(
£rvî
->
fd
 =
INVALID_SOCKET
);

513 
	`WATCHPOINT_ASSERT
(
£rvî
->
curs‹_a˘ive_
 == 0);

518 i‡(
£rvî
->
addªss_öfo
 =
NULL
 
‹
 sîvî->
addªss_öfo_√xt
 == NULL)

520 
	`WATCHPOINT_ASSERT
(
£rvî
->
°©e
 =
MEMCACHED_SERVER_STATE_NEW
);

521 
£rvî
->
addªss_öfo_√xt

NULL
;

522 
memˇched_ªtu∫_t
 
rc

	`£t_ho°öfo
(
£rvî
);

524 i‡(
	`memˇched_Áûed
(
rc
))

526  
rc
;

530 
	`as£π
(
£rvî
->
addªss_öfo_√xt
);

531 
	`as£π
(
£rvî
->
addªss_öfo
);

534 
£rvî
->
addªss_öfo_√xt
 
™d
 sîvî->
fd
 =
INVALID_SOCKET
)

537 i‡(
	`memˇched_is_udp
(
£rvî
->
roŸ
Ë
™d
 sîvî->
addªss_öfo_√xt
->
ai_Ámûy
 !
AF_INET
)

539 
£rvî
->
addªss_öfo_√xt
£rvî->addªss_öfo_√xt->
ai_√xt
;

543 
ty≥

£rvî
->
addªss_öfo_√xt
->
ai_sockty≥
;

544 i‡(
SOCK_CLOEXEC
)

546 
ty≥
|
SOCK_CLOEXEC
;

549 i‡(
SOCK_NONBLOCK
)

551 
ty≥
|
SOCK_NONBLOCK
;

554 
£rvî
->
fd

	`sockë
(£rvî->
addªss_öfo_√xt
->
ai_Ámûy
,

555 
ty≥
,

556 
£rvî
->
addªss_öfo_√xt
->
ai_¥Ÿocﬁ
);

558 i‡((
£rvî
->
fd
Ë=
SOCKET_ERROR
)

560  
	`memˇched_£t_î∫o
(*
£rvî
, 
	`gë_sockë_î∫o
(), 
NULL
);

563 i‡(
	`£t_sockë_›ti⁄s
(
£rvî
Ë=
Ál£
)

565 
£rvî
->
	`ª£t_sockë
();

566  
MEMCACHED_CONNECTION_FAILURE
;

570 i‡((
	`c⁄√˘
(
£rvî
->
fd
, sîvî->
addªss_öfo_√xt
->
ai_addr
, sîvî->addªss_öfo_√xt->
ai_addæí
Ë!
SOCKET_ERROR
))

572 
£rvî
->
°©e

MEMCACHED_SERVER_STATE_CONNECTED
;

573  
MEMCACHED_SUCCESS
;

577 
loˇl_îr‹

	`gë_sockë_î∫o
();

578 
loˇl_îr‹
)

580 
ETIMEDOUT
:

581 
timeout_îr‹_occuªd

åue
;

584 
EAGAIN
:

585 #i‡
EWOULDBLOCK
 !
EAGAIN


586 
EWOULDBLOCK
:

588 
EINPROGRESS
:

589 
EALREADY
:

591 
£rvî
->
	`evíts
(
POLLOUT
);

592 
£rvî
->
°©e

MEMCACHED_SERVER_STATE_IN_PROGRESS
;

593 
memˇched_ªtu∫_t
 
rc

	`c⁄√˘_pﬁl
(
£rvî
, 
loˇl_îr‹
);

595 i‡(
	`memˇched_suc˚ss
(
rc
))

597 
£rvî
->
°©e

MEMCACHED_SERVER_STATE_CONNECTED
;

598  
MEMCACHED_SUCCESS
;

602 i‡(
rc
 =
MEMCACHED_TIMEOUT
)

604 
timeout_îr‹_occuªd

åue
;

609 
EISCONN
:

610 
	`WATCHPOINT_ASSERT
(0);

613 
EINTR
:

614 
	`WATCHPOINT_ASSERT
(
£rvî
->
fd
 !
INVALID_SOCKET
);

615 
£rvî
->
	`ª£t_sockë
();

618 
ECONNREFUSED
:

625 
	`WATCHPOINT_ASSERT
(
£rvî
->
fd
 !
INVALID_SOCKET
);

626 
£rvî
->
	`ª£t_sockë
();

627 
£rvî
->
addªss_öfo_√xt
£rvî->addªss_öfo_√xt->
ai_√xt
;

630 
	`WATCHPOINT_ASSERT
(
£rvî
->
fd
 =
INVALID_SOCKET
);

632 i‡(
timeout_îr‹_occuªd
)

634 
£rvî
->
	`ª£t_sockë
();

637 
	`WATCHPOINT_STRING
("Never gotá good file descriptor");

639 i‡(
	`memˇched_has_cuºít_îr‹
(*
£rvî
))

641  
	`memˇched_ö°™˚_îr‹_ªtu∫
(
£rvî
);

644 i‡(
timeout_îr‹_occuªd
 
™d
 
£rvî
->
°©e
 < 
MEMCACHED_SERVER_STATE_IN_PROGRESS
)

646  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_TIMEOUT
, 
MEMCACHED_AT
,

647 
	`memˇched_lôîÆ_∑øm
("if (timeout_error_occuredánd server->state < MEMCACHED_SERVER_STATE_IN_PROGRESS)"));

650  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_CONNECTION_FAILURE
, 
MEMCACHED_AT
);

651 
	}
}

660 
memˇched_ªtu∫_t
 
	$backoff_h™dlög
(
memˇched_ö°™˚_°
* 
£rvî
, 
boﬁ
& 
ö_timeout
)

662 
timevÆ
 
cuº_time
;

663 
boﬁ
 
_gëtime_suc˚ss
(
	`gëtimeofday
(&
cuº_time
, 
NULL
) == 0);

671 i‡(
£rvî
->
£rvî_Áûuª_cou¡î
 >£rvî->
roŸ
->
£rvî_Áûuª_limô
)

676 i‡(
	`_is_auto_eje˘_ho°
(
£rvî
->
roŸ
))

678 
	`£t_œ°_disc⁄√˘ed_ho°
(
£rvî
);

681 i‡(
_gëtime_suc˚ss
 
™d
 
£rvî
->
roŸ
->
dód_timeout
 > 0)

683 
£rvî
->
√xt_ªåy

cuº_time
.
tv_£c
 +£rvî->
roŸ
->
dód_timeout
;

686 
£rvî
->
£rvî_Áûuª_cou¡î
£rvî->
roŸ
->
£rvî_Áûuª_limô
 -1;

689 
memˇched_ªtu∫_t
 
rc
;

690 i‡(
	`memˇched_Áûed
(
rc

	`run_di°ributi⁄
((
memˇched_°
 *)
£rvî
->
roŸ
)))

692  
	`memˇched_£t_îr‹
(*
£rvî
, 
rc
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Backoff handling failed duringÑun_distribution"));

695  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_SERVER_MARKED_DEAD
, 
MEMCACHED_AT
);

698 
£rvî
->
°©e

MEMCACHED_SERVER_STATE_IN_TIMEOUT
;

701 i‡(
£rvî
->
√xt_ªåy
 == 0)

703 
£rvî
->
√xt_ªåy
= 1;

707 i‡(
£rvî
->
°©e
 =
MEMCACHED_SERVER_STATE_IN_TIMEOUT
)

712 i‡(
_gëtime_suc˚ss
 
™d
 
£rvî
->
√xt_ªåy
 < 
cuº_time
.
tv_£c
)

714 
£rvî
->
°©e

MEMCACHED_SERVER_STATE_NEW
;

718  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_SERVER_TEMPORARILY_DISABLED
, 
MEMCACHED_AT
);

721 
ö_timeout

åue
;

724  
MEMCACHED_SUCCESS
;

725 
	}
}

727 
memˇched_ªtu∫_t
 
	$_memˇched_c⁄√˘
(
memˇched_ö°™˚_°
* 
£rvî
, c⁄° 
boﬁ
 
£t_œ°_disc⁄√˘ed
)

729 
	`as£π
(
£rvî
);

730 i‡(
£rvî
->
fd
 !
INVALID_SOCKET
)

732  
MEMCACHED_SUCCESS
;

735 
	`LIBMEMCACHED_MEMCACHED_CONNECT_START
();

737 
boﬁ
 
ö_timeout

Ál£
;

738 
memˇched_ªtu∫_t
 
rc
;

739 i‡(
	`memˇched_Áûed
(
rc

	`backoff_h™dlög
(
£rvî
, 
ö_timeout
)))

741 
	`£t_œ°_disc⁄√˘ed_ho°
(
£rvî
);

742  
rc
;

745 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 
™d
 
£rvî
->
roŸ
->
ß¶
.
ˇŒbacks
ánd 
	`memˇched_is_udp
(server->root))

747  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_INVALID_HOST_PROTOCOL
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("SASL isÇot supported for UDP connections"));

750 i‡(
£rvî
->
	`ho°«me
()[0] == '/')

752 
£rvî
->
ty≥

MEMCACHED_CONNECTION_UNIX_SOCKET
;

756 
£rvî
->
ty≥
)

758 
MEMCACHED_CONNECTION_UDP
:

759 
MEMCACHED_CONNECTION_TCP
:

760 
rc

	`√tw‹k_c⁄√˘
(
£rvî
);

762 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
)

764 i‡(
£rvî
->
fd
 !
INVALID_SOCKET
 
™d
 sîvî->
roŸ
->
ß¶
.
ˇŒbacks
)

766 
rc

	`memˇched_ß¶_authítiˇã_c⁄√˘i⁄
(
£rvî
);

767 i‡(
	`memˇched_Áûed
(
rc
Ë
™d
 
£rvî
->
fd
 !
INVALID_SOCKET
)

769 
	`WATCHPOINT_ASSERT
(
£rvî
->
fd
 !
INVALID_SOCKET
);

770 
£rvî
->
	`ª£t_sockë
();

776 
MEMCACHED_CONNECTION_UNIX_SOCKET
:

777 
rc

	`unix_sockë_c⁄√˘
(
£rvî
);

781 i‡(
	`memˇched_suc˚ss
(
rc
))

783 
£rvî
->
	`m¨k_£rvî_as_˛ón
();

784 
	`memˇched_vîsi⁄_ö°™˚
(
£rvî
);

785  
rc
;

787 i‡(
£t_œ°_disc⁄√˘ed
)

789 
	`£t_œ°_disc⁄√˘ed_ho°
(
£rvî
);

790 i‡(
	`memˇched_has_cuºít_îr‹
(*
£rvî
))

792 
	`memˇched_m¨k_£rvî_f‹_timeout
(
£rvî
);

793 
	`as£π
(
	`memˇched_Áûed
(
	`memˇched_ö°™˚_îr‹_ªtu∫
(
£rvî
)));

797 
	`memˇched_£t_îr‹
(*
£rvî
, 
rc
, 
MEMCACHED_AT
);

798 
	`memˇched_m¨k_£rvî_f‹_timeout
(
£rvî
);

801 
	`LIBMEMCACHED_MEMCACHED_CONNECT_END
();

803 i‡(
ö_timeout
)

805 
buf„r
[1024];

806 
¢¥ötf_Àngth

	`¢¥ötf
(
buf„r
, (buf„r), "%s:%d", 
£rvî
->
	`ho°«me
(), (£rvî->
	`p‹t
()));

807  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_SERVER_TEMPORARILY_DISABLED
, 
MEMCACHED_AT
, 
buf„r
, 
¢¥ötf_Àngth
);

811  
rc
;

812 
	}
}

814 
memˇched_ªtu∫_t
 
	$memˇched_c⁄√˘
(
memˇched_ö°™˚_°
* 
£rvî
)

816  
	`_memˇched_c⁄√˘
(
£rvî
, 
åue
);

817 
	}
}

	@libmemcached/connect.hpp

38 #¥agm®
⁄˚


40 
memˇched_ªtu∫_t
 
memˇched_c⁄√˘
(
memˇched_ö°™˚_°
*);

	@libmemcached/continuum.hpp

39 #¥agm®
⁄˚


42 
	smemˇched_c⁄töuum_ôem_°


44 
uöt32_t
 
	mödex
;

45 
uöt32_t
 
	mvÆue
;

	@libmemcached/csl/common.h

38 #¥agm®
⁄˚


41 #i‚de‡
YY_EXTRA_TYPE


42 
	#YY_EXTRA_TYPE
 
C⁄ãxt
*

	)

45 #i‚de‡
YY_TYPEDEF_YY_SCANNER_T


46 
	#YY_TYPEDEF_YY_SCANNER_T


	)

47 * 
	tyysˇn_t
;

50 
	~<libmemˇched/comm⁄.h
>

51 
	~<libmemˇched/c¶/£rvî.h
>

	@libmemcached/csl/context.cc

38 
	~<libmemˇched/c¶/comm⁄.h
>

39 
	~<libmemˇched/c¶/c⁄ãxt.h
>

41 
	gC⁄ãxt
::
	$ab‹t
(c⁄° *
îr‹_¨g
, 
yytokíty≥
 
œ°_tokí
, c⁄° *
œ°_tokí_°r
)

43 
rc

MEMCACHED_PARSE_ERROR
;

44 ()
œ°_tokí
;

46 i‡(
îr‹_¨g
)

48 
	`memˇched_£t_∑r£r_îr‹
(*
memc
, 
MEMCACHED_AT
, "%s", 
îr‹_¨g
);

52 i‡(
œ°_tokí_°r
)

54 
	`memˇched_£t_∑r£r_îr‹
(*
memc
, 
MEMCACHED_AT
, "%s", 
œ°_tokí_°r
);

58 
	`memˇched_£t_∑r£r_îr‹
(*
memc
, 
MEMCACHED_AT
, "unknownÖarsingÉrror");

59 
	}
}

61 
	gC⁄ãxt
::
	$îr‹
(c⁄° *
îr‹_¨g
, 
yytokíty≥
 
œ°_tokí
, c⁄° *
œ°_tokí_°r
)

63 
rc

MEMCACHED_PARSE_ERROR
;

64 i‡(
nŸ
 
îr‹_¨g
)

66 
	`memˇched_£t_∑r£r_îr‹
(*
memc
, 
MEMCACHED_AT
, "Unknow¿îr‹ occuªd durögÖ¨sög (%s)", 
œ°_tokí_°r
 ?Üast_token_str : " ");

70 i‡(
îr‹_¨g
 
™d
 
	`°rcmp
(error_arg, "memoryÉxhausted") == 0)

72 ()
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_°rög_make_‰om_c°r
(
îr‹_¨g
));

78 i‡(
îr‹_¨g
 
™d
 
	`°rcmp
(error_arg, "syntaxÉrror") == 0)

80 i‡(
îr‹_¨g
)

82 
	`memˇched_£t_∑r£r_îr‹
(*
memc
, 
MEMCACHED_AT
, "Eº‹ occuªd durögÖ¨sög (%s)", 
îr‹_¨g
);

86 i‡(
œ°_tokí
 =
UNKNOWN_OPTION
 
™d
 
begö
)

88 
	`memˇched_£t_∑r£r_îr‹
(*
memc
, 
MEMCACHED_AT
, "Unknow¿›ti⁄: %s", 
begö
);

90 i‡(
œ°_tokí
 =
UNKNOWN
)

92 
	`memˇched_£t_∑r£r_îr‹
(*
memc
, 
MEMCACHED_AT
, "Error occured durringÖarsing,án unknownÅoken was found.");

96 
	`memˇched_£t_∑r£r_îr‹
(*
memc
, 
MEMCACHED_AT
, "Eº‹ occuªd whûê∑rsög (%s)", 
œ°_tokí_°r
 ?Üast_token_str : " ");

98 
	}
}

100 
	gC⁄ãxt
::
	$ho°«me
(c⁄° *
°r
, 
size_t
 
size
, 
£rvî_t
& 
£rvî_
)

102 
size_t
 
c›y_Àngth

	`size_t
(
NI_MAXHOST
Ë> 
size
 ? size : size_t(NI_MAXHOST);

103 
	`mem˝y
(
_ho°«me
, 
°r
, 
c›y_Àngth
);

104 
_ho°«me
[
c›y_Àngth
]= 0;

106 
£rvî_
.
p‹t

MEMCACHED_DEFAULT_PORT
;

107 
£rvî_
.
weight
= 1;

108 
£rvî_
.
c_°r

_ho°«me
;

109 
£rvî_
.
size
= size;

110 
	}
}

112 
boﬁ
 
	gC⁄ãxt
::
	$°rög_buf„r
(c⁄° *
°r
, 
size_t
 
size
, 
memˇched_°rög_t
& 
°rög_
)

114 i‡(
	`memˇched_°rög_£t
(
_°rög_buf„r
, 
°r
, 
size
))

116 
°rög_
.
c_°r

	`memˇched_°rög_vÆue
(
_°rög_buf„r
);

117 
°rög_
.
size

	`memˇched_°rög_Àngth
(
_°rög_buf„r
);

119  
åue
;

122  
Ál£
;

123 
	}
}

125 
boﬁ
 
	gC⁄ãxt
::
	$£t_hash
(
memˇched_hash_t
 
hash
)

127 i‡(
_has_hash
)

129  
Ál£
;

132 i‡((
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, 
hash
)Ë!
MEMCACHED_SUCCESS
)

134  
Ál£
;

137  
_has_hash

åue
;

138 
	}
}

	@libmemcached/csl/context.h

38 #¥agm®
⁄˚


40 
	~"libmemˇched/c¶/comm⁄.h
"

41 
	~"libmemˇched/c¶/∑r£r.h
"

43 ˛as†
	cC⁄ãxt


45 
	mpublic
:

46 
	$C⁄ãxt
(c⁄° *
›ti⁄_°rög
, 
size_t
 
›ti⁄_°rög_Àngth
, 
memˇched_°
 *
memc_
,

47 
memˇched_ªtu∫_t
 &
rc_¨g
) :

48 
	`¥evious_tokí
(
END
),

49 
	`sˇ¬î
(
NULL
),

50 
	`buf
(
›ti⁄_°rög
),

51 
	`begö
(
NULL
),

52 
	`pos
(0),

53 
	`Àngth
(
›ti⁄_°rög_Àngth
),

54 
	`memc
(
memc_
),

55 
	`rc
(
rc_¨g
),

56 
	`_is_£rvî
(
Ál£
),

57 
	`_íd
(
Ál£
),

58 
	$_has_hash
(
Ál£
)

60 
_ho°«me
[0]= 0;

61 
	`öô_sˇ¬î
();

62 
rc

MEMCACHED_SUCCESS
;

64 
memc
->
°©e
.
is_∑rsög

åue
;

65 
	`memˇched_°rög_¸óã
(
memc
,

66 &
_°rög_buf„r
,

70 
boﬁ
 
	$íd
()

72  
_íd
;

73 
	}
}

75 
°¨t
();

77 
	$£t_íd
()

79 
rc

MEMCACHED_SUCCESS
;

80 
_íd

åue
;

81 
	}
}

83 
boﬁ
 
£t_hash
(
memˇched_hash_t
 
hash
);

85 
	$£t_£rvî
()

87 
_is_£rvî

åue
;

88 
	}
}

90 
	$un£t_£rvî
()

92 
_is_£rvî

Ál£
;

93 
	}
}

95 
boﬁ
 
	$is_£rvî
() const

97  
_is_£rvî
;

98 
	}
}

100 
ho°«me
(c⁄° *, 
size_t
, 
£rvî_t
&);

102 
boﬁ
 
°rög_buf„r
(c⁄° *, 
size_t
, 
memˇched_°rög_t
&);

104 c⁄° *
	$ho°«me
() const

106  
_ho°«me
;

107 
	}
}

109 
ab‹t
(c⁄° *, 
yytokíty≥
, const *);

110 
îr‹
(c⁄° *, 
yytokíty≥
, const * );

112 ~
	$C⁄ãxt
()

114 
	`memˇched_°rög_‰ì
(&
_°rög_buf„r
);

115 
	`de°roy_sˇ¬î
();

116 
memc
->
°©e
.
is_∑rsög

Ál£
;

117 
	}
}

119 
yytokíty≥
 
	g¥evious_tokí
;

120 *
	gsˇ¬î
;

121 c⁄° *
	gbuf
;

122 c⁄° *
	gbegö
;

123 
size_t
 
	gpos
;

124 
size_t
 
	gÀngth
;

125 
memˇched_°
 *
	gmemc
;

126 
	gmemˇched_ªtu∫_t
 &
	grc
;

128 
	g¥Ÿe˘ed
:

129 
öô_sˇ¬î
();

130 
de°roy_sˇ¬î
();

132 
	g¥iv©e
:

133 
boﬁ
 
_is_£rvî
;

134 
boﬁ
 
	g_íd
;

135 
	g_ho°«me
[
NI_MAXHOST
];

136 
boﬁ
 
	g_has_hash
;

137 
memˇched_°rög_°
 
	g_°rög_buf„r
;

	@libmemcached/csl/parser.cc

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "2.6.1"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 1

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

63 
	#yy∑r£
 
c⁄fig_∑r£


	)

64 
	#yyÀx
 
c⁄fig_Àx


	)

65 
	#yyîr‹
 
c⁄fig_îr‹


	)

66 
	#yylvÆ
 
c⁄fig_lvÆ


	)

67 
	#yych¨
 
c⁄fig_ch¨


	)

68 
	#yydebug
 
c⁄fig_debug


	)

69 
	#yy√ºs
 
c⁄fig_√ºs


	)

76 
	~<libmemˇched/c¶/comm⁄.h
>

78 
˛ass
 
	gC⁄ãxt
;

84 
	~<libmemˇched/›ti⁄s.hµ
>

86 
	~<libmemˇched/c¶/c⁄ãxt.h
>

87 
	~<libmemˇched/c¶/symbﬁ.h
>

88 
	~<libmemˇched/c¶/sˇ¬î.h
>

90 #i‚de‡
__INTEL_COMPILER


91 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

94 #i‚de‡
__INTEL_COMPILER


95 #i‚de‡
__˛™g__


96 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wlogical-op"

97 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunsafe-loop-optimizations"

101 
c⁄f_Àx
(
YYSTYPE
* 
lvÆp
, * 
sˇ¬î
);

103 
	#£À˘_yych¨
(
__c⁄ãxt
Ë
yych¨
 =
UNKNOWN
 ? ( (__c⁄ãxt)->
¥evious_tokí
 =
END
 ? UNKNOWN : (__c⁄ãxt)->¥evious_tokí ) : 
	)
yychar

105 
	#°ryyäame
(
__yytokíty≥
Ë((__yytokíty≥Ë< 
YYNTOKENS
 ) ? 
yyäame
[(__yytokíty≥)] : ""

	)

107 
	#∑r£r_ab‹t
(
__c⁄ãxt
, 
__îr‹_mesßge
Ëdÿ{ (__c⁄ãxt)->
	`ab‹t
((__îr‹_mesßge), 
	`yytokíty≥
(
	`£À˘_yych¨
(__c⁄ãxt)), 
	`°ryyäame
(
	`YYTRANSLATE
(£À˘_yych¨(__c⁄ãxt)))); 
YYABORT
; } 0)

	)

110 
ölöe
 
	$__c⁄fig_îr‹
(
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
, c⁄° *
îr‹
, 
œ°_tokí
, c⁄° *
œ°_tokí_°r
)

112 i‡(
nŸ
 
c⁄ãxt
->
	`íd
())

114 
c⁄ãxt
->
	`îr‹
(
îr‹
, 
	`yytokíty≥
(
œ°_tokí
), 
œ°_tokí_°r
);

118 
c⁄ãxt
->
	`îr‹
(
îr‹
, 
	`yytokíty≥
(
œ°_tokí
), 
œ°_tokí_°r
);

120 
	}
}

122 
	#c⁄fig_îr‹
(
__c⁄ãxt
, 
__sˇ¬î
, 
__îr‹_msg
Ëdÿ{ 
	`__c⁄fig_îr‹
((__c⁄ãxt), (__sˇ¬î), (__îr‹_msg), 
	`£À˘_yych¨
(__c⁄ãxt), 
	`°ryyäame
(
	`YYTRANSLATE
(£À˘_yych¨(__c⁄ãxt)))); } 0)

	)

129 #i‚de‡
YY_NULL


130 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

131 
	#YY_NULL
 
nuŒ±r


	)

133 
	#YY_NULL
 0

	)

138 #ifde‡
YYERROR_VERBOSE


139 #unde‡
YYERROR_VERBOSE


140 
	#YYERROR_VERBOSE
 1

	)

142 
	#YYERROR_VERBOSE
 1

	)

147 #i‚de‡
CONFIG_LIBMEMCACHED_CSL_PARSER_H


148 
	#CONFIG_LIBMEMCACHED_CSL_PARSER_H


	)

150 #i‚de‡
YYDEBUG


151 
	#YYDEBUG
 1

	)

153 #i‡
YYDEBUG


154 
c⁄fig_debug
;

158 #i‚de‡
YYTOKENTYPE


159 
	#YYTOKENTYPE


	)

162 
	eyytokíty≥
 {

163 
	mCOMMENT
 = 258,

164 
	mEND
 = 259,

165 
	mCSL_ERROR
 = 260,

166 
	mRESET
 = 261,

167 
	mPARSER_DEBUG
 = 262,

168 
	mINCLUDE
 = 263,

169 
	mCONFIGURE_FILE
 = 264,

170 
	mEMPTY_LINE
 = 265,

171 
	mSERVER
 = 266,

172 
	mCSL_SOCKET
 = 267,

173 
	mSERVERS
 = 268,

174 
	mSERVERS_OPTION
 = 269,

175 
	mUNKNOWN_OPTION
 = 270,

176 
	mUNKNOWN
 = 271,

177 
	mBINARY_PROTOCOL
 = 272,

178 
	mBUFFER_REQUESTS
 = 273,

179 
	mCONNECT_TIMEOUT
 = 274,

180 
	mDISTRIBUTION
 = 275,

181 
	mHASH
 = 276,

182 
	mHASH_WITH_NAMESPACE
 = 277,

183 
	mIO_BYTES_WATERMARK
 = 278,

184 
	mIO_KEY_PREFETCH
 = 279,

185 
	mIO_MSG_WATERMARK
 = 280,

186 
	mKETAMA_HASH
 = 281,

187 
	mKETAMA_WEIGHTED
 = 282,

188 
	mNOREPLY
 = 283,

189 
	mNUMBER_OF_REPLICAS
 = 284,

190 
	mPOLL_TIMEOUT
 = 285,

191 
	mRANDOMIZE_REPLICA_READ
 = 286,

192 
	mRCV_TIMEOUT
 = 287,

193 
	mREMOVE_FAILED_SERVERS
 = 288,

194 
	mRETRY_TIMEOUT
 = 289,

195 
	mSND_TIMEOUT
 = 290,

196 
	mSOCKET_RECV_SIZE
 = 291,

197 
	mSOCKET_SEND_SIZE
 = 292,

198 
	mSORT_HOSTS
 = 293,

199 
	mSUPPORT_CAS
 = 294,

200 
	mUSER_DATA
 = 295,

201 
	mUSE_UDP
 = 296,

202 
	mVERIFY_KEY
 = 297,

203 
	m_TCP_KEEPALIVE
 = 298,

204 
	m_TCP_KEEPIDLE
 = 299,

205 
	m_TCP_NODELAY
 = 300,

206 
	mFETCH_VERSION
 = 301,

207 
	mNAMESPACE
 = 302,

208 
	mPOOL_MIN
 = 303,

209 
	mPOOL_MAX
 = 304,

210 
	mMD5
 = 305,

211 
	mCRC
 = 306,

212 
	mFNV1_64
 = 307,

213 
	mFNV1A_64
 = 308,

214 
	mFNV1_32
 = 309,

215 
	mFNV1A_32
 = 310,

216 
	mHSIEH
 = 311,

217 
	mMURMUR
 = 312,

218 
	mJENKINS
 = 313,

219 
	mCONSISTENT
 = 314,

220 
	mMODULA
 = 315,

221 
	mRANDOM
 = 316,

222 
	mCSL_TRUE
 = 317,

223 
	mCSL_FALSE
 = 318,

224 
	mCSL_FLOAT
 = 319,

225 
	mNUMBER
 = 320,

226 
	mPORT
 = 321,

227 
	mWEIGHT_START
 = 322,

228 
	mIPADDRESS
 = 323,

229 
	mHOSTNAME
 = 324,

230 
	mSTRING
 = 325,

231 
	mQUOTED_STRING
 = 326,

232 
	mFILE_PATH
 = 327

237 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


239 
	#yy°y≥
 
YYSTYPE


	)

240 
	#YYSTYPE_IS_DECLARED
 1

	)

244 #ifde‡
YYPARSE_PARAM


245 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


246 
c⁄fig_∑r£
 (*
YYPARSE_PARAM
);

248 
c⁄fig_∑r£
 ();

251 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


252 
c⁄fig_∑r£
 (
˛ass
 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
);

254 
c⁄fig_∑r£
 ();

269 #ifde‡
YYTYPE_UINT8


270 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

272 
	tyyty≥_uöt8
;

275 #ifde‡
YYTYPE_INT8


276 
YYTYPE_INT8
 
	tyyty≥_öt8
;

277 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

278 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

279 sig√d 
	tyyty≥_öt8
;

281 
	tyyty≥_öt8
;

284 #ifde‡
YYTYPE_UINT16


285 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

287 
	tyyty≥_uöt16
;

290 #ifde‡
YYTYPE_INT16


291 
YYTYPE_INT16
 
	tyyty≥_öt16
;

293 
	tyyty≥_öt16
;

296 #i‚de‡
YYSIZE_T


297 #ifde‡
__SIZE_TYPE__


298 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

299 #ñi‡
deföed
 
size_t


300 
	#YYSIZE_T
 
size_t


	)

301 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

302 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

303 
	~<°ddef.h
>

304 
	#YYSIZE_T
 
size_t


	)

306 
	#YYSIZE_T
 

	)

310 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

312 #i‚de‡
YY_


313 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

314 #i‡
ENABLE_NLS


315 
	~<liböé.h
>

316 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

319 #i‚de‡
YY_


320 
	#YY_
(
msgid
Ë
	)
msgid

325 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


326 
	#YYUSE
(
e
Ë((Ë”))

	)

328 
	#YYUSE
(
e
Ë

	)

332 #i‚de‡
löt


333 
	#YYID
(
n
Ë“)

	)

335 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

336 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

338 
	$YYID
 (
yyi
)

341 
	$YYID
 (
yyi
)

342 
yyi
;

345  
yyi
;

346 
	}
}

349 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


353 #ifde‡
YYSTACK_USE_ALLOCA


354 #i‡
YYSTACK_USE_ALLOCA


355 #ifde‡
__GNUC__


356 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

357 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


358 
	~<Æloˇ.h
>

359 #ñi‡
deföed
 
_AIX


360 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

361 #ñi‡
deföed
 
_MSC_VER


362 
	~<mÆloc.h
>

363 
	#Æloˇ
 
_Æloˇ


	)

365 
	#YYSTACK_ALLOC
 
Æloˇ


	)

366 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

367 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

368 
	~<°dlib.h
>

370 #i‚de‡
EXIT_SUCCESS


371 
	#EXIT_SUCCESS
 0

	)

378 #ifde‡
YYSTACK_ALLOC


380 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

381 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


386 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

389 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

390 
	#YYSTACK_FREE
 
YYFREE


	)

391 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


392 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

394 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

395 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

396 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

397 
	~<°dlib.h
>

398 #i‚de‡
EXIT_SUCCESS


399 
	#EXIT_SUCCESS
 0

	)

402 #i‚de‡
YYMALLOC


403 
	#YYMALLOC
 
mÆloc


	)

404 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

405 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

406 *
mÆloc
 (
YYSIZE_T
);

409 #i‚de‡
YYFREE


410 
	#YYFREE
 
‰ì


	)

411 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

412 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

413 
‰ì
 (*);

420 #i‡(! 
deföed
 
yyovîÊow
 \

421 && (! 
deföed
 
	g__˝lu•lus
 \

422 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

425 
	uyyÆloc


427 
yyty≥_öt16
 
	myyss_Æloc
;

428 
YYSTYPE
 
	myyvs_Æloc
;

432 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

436 
	#YYSTACK_BYTES
(
N
) \

437 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

438 + 
YYSTACK_GAP_MAXIMUM
)

	)

440 
	#YYCOPY_NEEDED
 1

	)

447 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

450 
YYSIZE_T
 
yy√wbyãs
; \

451 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

452 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

453 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

454 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

456 
	`YYID
 (0))

	)

460 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

463 #i‚de‡
YYCOPY


464 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

465 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

466 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

468 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

471 
YYSIZE_T
 
yyi
; \

472 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

473 (
D°
)[
yyi
] = (
Src
)[yyi]; \

475 
	`YYID
 (0))

	)

481 
	#YYFINAL
 72

	)

483 
	#YYLAST
 75

	)

486 
	#YYNTOKENS
 76

	)

488 
	#YYNNTS
 12

	)

490 
	#YYNRULES
 68

	)

492 
	#YYNSTATES
 86

	)

495 
	#YYUNDEFTOK
 2

	)

496 
	#YYMAXUTOK
 327

	)

498 
	#YYTRANSLATE
(
YYX
) \

499 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

502 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

539 #i‡
YYDEBUG


542 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

554 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

575 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

587 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 1

590 c⁄° *c⁄° 
	gyyäame
[] =

609 "›ti⁄Æ_weight", "hash", "°rög", "di°ributi⁄", 
YY_NULL


613 #ifde‡
YYPRINT


616 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

630 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

642 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

656 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

670 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

678 
	#YYPACT_NINF
 -62

	)

679 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

693 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

702 
	#YYTABLE_NINF
 -1

	)

703 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

715 
	#yy∑˘_vÆue_is_deÁu…
(
yy°©e
) \

716 ((
yy°©e
Ë=(-62))

	)

718 
	#yyèbÀ_vÆue_is_îr‹
(
yyèbÀ_vÆue
) \

719 
	`YYID
 (0)

	)

721 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

735 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

748 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

749 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

750 
	#YYEMPTY
 (-2)

	)

751 
	#YYEOF
 0

	)

753 
	#YYACCEPT
 
yyac˚±œb


	)

754 
	#YYABORT
 
yyab‹éab


	)

755 
	#YYERROR
 
yyîr‹œb


	)

765 
	#YYFAIL
 
yyîæab


	)

766 #i‡
deföed
 
YYFAIL


773 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

775 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

777 i‡(
yych¨
 =
YYEMPTY
) \

779 
yych¨
 = (
Tokí
); \

780 
yylvÆ
 = (
VÆue
); \

781 
	`YYPOPSTACK
 (
yyÀn
); \

782 
yy°©e
 = *
yys•
; \

783 
yybackup
; \

787 
	`yyîr‹
 (
c⁄ãxt
, 
sˇ¬î
, 
	`YY_
("syntaxÉrror: cannot back up")); \

788 
YYERROR
; \

790 
	`YYID
 (0))

	)

793 
	#YYTERROR
 1

	)

794 
	#YYERRCODE
 256

	)

800 #i‚de‡
YYLLOC_DEFAULT


801 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

803 i‡(
	`YYID
 (
N
)) \

805 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

806 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

807 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

808 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

812 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

813 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

814 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

815 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

817 
	`YYID
 (0))

	)

820 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

826 #i‚de‡
YY_LOCATION_PRINT


827 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

833 #ifde‡
YYLEX_PARAM


834 
	#YYLEX
 
	`yyÀx
 (&
yylvÆ
, 
YYLEX_PARAM
)

	)

836 
	#YYLEX
 
	`yyÀx
 (&
yylvÆ
, 
sˇ¬î
)

	)

840 #i‡
YYDEBUG


842 #i‚de‡
YYFPRINTF


843 
	~<°dio.h
>

844 
	#YYFPRINTF
 
Ârötf


	)

847 
	#YYDPRINTF
(
Args
) \

849 i‡(
yydebug
) \

850 
YYFPRINTF
 
Args
; \

851 } 
	`YYID
 (0))

	)

853 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

855 i‡(
yydebug
) \

857 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

858 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

859 
Ty≥
, 
VÆue
, 
c⁄ãxt
, 
sˇ¬î
); \

860 
	`YYFPRINTF
 (
°dîr
, "\n"); \

862 } 
	`YYID
 (0))

	)

870 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

871 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

873 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, 
˛ass
 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

876 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
, 
c⁄ãxt
, 
sˇ¬î
)

877 
FILE
 *
yyouçut
;

878 
yyty≥
;

879 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

880 
˛ass
 
C⁄ãxt
 *
c⁄ãxt
;

881 
yysˇn_t
 *
sˇ¬î
;

884 
FILE
 *
yyo
 = 
yyouçut
;

885 
	`YYUSE
 (
yyo
);

886 i‡(!
yyvÆuï
)

888 
	`YYUSE
 (
c⁄ãxt
);

889 
	`YYUSE
 (
sˇ¬î
);

890 #ifde‡
YYPRINT


891 i‡(
yyty≥
 < 
YYNTOKENS
)

892 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

894 
	`YYUSE
 (
yyouçut
);

896 
yyty≥
)

901 
	}
}

908 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

909 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

911 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, 
˛ass
 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

914 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
, 
c⁄ãxt
, 
sˇ¬î
)

915 
FILE
 *
yyouçut
;

916 
yyty≥
;

917 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

918 
˛ass
 
C⁄ãxt
 *
c⁄ãxt
;

919 
yysˇn_t
 *
sˇ¬î
;

922 i‡(
yyty≥
 < 
YYNTOKENS
)

923 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

925 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

927 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
, 
c⁄ãxt
, 
sˇ¬î
);

928 
	`YYFPRINTF
 (
yyouçut
, ")");

929 
	}
}

936 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

937 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

939 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

942 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

943 
yyty≥_öt16
 *
yybŸtom
;

944 
yyty≥_öt16
 *
yyt›
;

947 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

948 ; 
yybŸtom
 <
yyt›
; yybottom++)

950 
yybŸ
 = *
yybŸtom
;

951 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

953 
	`YYFPRINTF
 (
°dîr
, "\n");

954 
	}
}

956 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

958 i‡(
yydebug
) \

959 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

960 } 
	`YYID
 (0))

	)

967 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

968 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

970 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
, 
˛ass
 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

973 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
, 
c⁄ãxt
, 
sˇ¬î
)

974 
YYSTYPE
 *
yyv•
;

975 
yyruÀ
;

976 
˛ass
 
C⁄ãxt
 *
c⁄ãxt
;

977 
yysˇn_t
 *
sˇ¬î
;

980 
yyƒhs
 = 
yyr2
[
yyruÀ
];

981 
yyi
;

982 
yy o
 = 
yyæöe
[
yyruÀ
];

983 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

984 
yyruÀ
 - 1, 
yy o
);

986 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

988 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

989 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

990 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

991 , 
c⁄ãxt
, 
sˇ¬î
);

992 
	`YYFPRINTF
 (
°dîr
, "\n");

994 
	}
}

996 
	#YY_REDUCE_PRINT
(
RuÀ
) \

998 i‡(
yydebug
) \

999 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
, 
c⁄ãxt
, 
sˇ¬î
); \

1000 } 
	`YYID
 (0))

	)

1004 
	gyydebug
;

1006 
	#YYDPRINTF
(
Args
)

	)

1007 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

1008 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

1009 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

1014 #i‚def 
YYINITDEPTH


1015 
	#YYINITDEPTH
 200

	)

1025 #i‚de‡
YYMAXDEPTH


1026 
	#YYMAXDEPTH
 10000

	)

1030 #i‡
YYERROR_VERBOSE


1032 #i‚de‡
yy°æí


1033 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1034 
	#yy°æí
 
°æí


	)

1037 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1038 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1039 
YYSIZE_T


1040 
	$yy°æí
 (c⁄° *
yy°r
)

1042 
YYSIZE_T


1043 
	$yy°æí
 (
yy°r
)

1044 c⁄° *
yy°r
;

1047 
YYSIZE_T
 
yyÀn
;

1048 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1050  
yyÀn
;

1051 
	}
}

1055 #i‚de‡
yy°p˝y


1056 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1057 
	#yy°p˝y
 
°p˝y


	)

1061 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1062 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1064 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1067 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

1068 *
yyde°
;

1069 c⁄° *
yy§c
;

1072 *
yyd
 = 
yyde°
;

1073 c⁄° *
yys
 = 
yy§c
;

1075 (*
yyd
++ = *
yys
++) != '\0')

1078  
yyd
 - 1;

1079 
	}
}

1083 #i‚de‡
yyäamîr


1091 
YYSIZE_T


1092 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1094 i‡(*
yy°r
 == '"')

1096 
YYSIZE_T
 
yyn
 = 0;

1097 c⁄° *
yyp
 = 
yy°r
;

1100 *++
yyp
)

1104 
do_nŸ_°rù_quŸes
;

1107 i‡(*++
yyp
 != '\\')

1108 
do_nŸ_°rù_quŸes
;

1111 i‡(
yyªs
)

1112 
yyªs
[
yyn
] = *
yyp
;

1113 
yyn
++;

1117 i‡(
yyªs
)

1118 
yyªs
[
yyn
] = '\0';

1119  
yyn
;

1121 
do_nŸ_°rù_quŸes
: ;

1124 i‡(! 
yyªs
)

1125  
	`yy°æí
 (
yy°r
);

1127  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1128 
	}
}

1140 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

1141 
yyty≥_öt16
 *
yys•
, 
yytokí
)

1143 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULL
, 
yyäame
[
yytokí
]);

1144 
YYSIZE_T
 
yysize
 = 
yysize0
;

1145 
YYSIZE_T
 
yysize1
;

1146 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1148 c⁄° *
yyf‹m©
 = 
YY_NULL
;

1150 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1153 
yycou¡
 = 0;

1182 i‡(
yytokí
 !
YYEMPTY
)

1184 
yyn
 = 
yy∑˘
[*
yys•
];

1185 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

1186 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1191 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1193 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1194 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1195 
yyx
;

1197 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1198 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


1199 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

1201 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1203 
yycou¡
 = 1;

1204 
yysize
 = 
yysize0
;

1207 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1208 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULL
, 
yyäame
[
yyx
]);

1209 i‡(! (
yysize
 <
yysize1


1210 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

1212 
yysize
 = 
yysize1
;

1217 
yycou¡
)

1219 
	#YYCASE_
(
N
, 
S
) \

1220 
N
: \

1221 
yyf‹m©
 = 
S
; \

1222 

	)

1223 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

1224 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

1225 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

1226 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

1227 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

1228 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

1229 #unde‡
YYCASE_


1232 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

1233 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

1235 
yysize
 = 
yysize1
;

1237 i‡(*
yymsg_Æloc
 < 
yysize
)

1239 *
yymsg_Æloc
 = 2 * 
yysize
;

1240 i‡(! (
yysize
 <*
yymsg_Æloc


1241 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1242 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1250 *
yyp
 = *
yymsg
;

1251 
yyi
 = 0;

1252 (*
yyp
 = *
yyf‹m©
) != '\0')

1253 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1255 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1256 
yyf‹m©
 += 2;

1260 
yyp
++;

1261 
yyf‹m©
++;

1265 
	}
}

1273 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1274 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1276 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
, 
˛ass
 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

1279 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
c⁄ãxt
, 
sˇ¬î
)

1280 c⁄° *
yymsg
;

1281 
yyty≥
;

1282 
YYSTYPE
 *
yyvÆuï
;

1283 
˛ass
 
C⁄ãxt
 *
c⁄ãxt
;

1284 
yysˇn_t
 *
sˇ¬î
;

1287 
	`YYUSE
 (
yyvÆuï
);

1288 
	`YYUSE
 (
c⁄ãxt
);

1289 
	`YYUSE
 (
sˇ¬î
);

1291 i‡(!
yymsg
)

1292 
yymsg
 = "Deleting";

1293 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1295 
yyty≥
)

1301 
	}
}

1310 #ifde‡
YYPARSE_PARAM


1311 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1312 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1314 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1317 
	$yy∑r£
 (
YYPARSE_PARAM
)

1318 *
YYPARSE_PARAM
;

1321 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1322 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1324 
	$yy∑r£
 (
˛ass
 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

1327 
	$yy∑r£
 (
c⁄ãxt
, 
sˇ¬î
)

1328 
˛ass
 
C⁄ãxt
 *
c⁄ãxt
;

1329 
yysˇn_t
 *
sˇ¬î
;

1334 
yych¨
;

1337 
YYSTYPE
 
yylvÆ
;

1340 
yy√ºs
;

1342 
yy°©e
;

1344 
yyîr°©us
;

1354 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1355 
yyty≥_öt16
 *
yyss
;

1356 
yyty≥_öt16
 *
yys•
;

1359 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1360 
YYSTYPE
 *
yyvs
;

1361 
YYSTYPE
 *
yyv•
;

1363 
YYSIZE_T
 
yy°acksize
;

1365 
yyn
;

1366 
yyªsu…
;

1368 
yytokí
;

1371 
YYSTYPE
 
yyvÆ
;

1373 #i‡
YYERROR_VERBOSE


1375 
yymsgbuf
[128];

1376 *
yymsg
 = 
yymsgbuf
;

1377 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1380 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1384 
yyÀn
 = 0;

1386 
yytokí
 = 0;

1387 
yyss
 = 
yysß
;

1388 
yyvs
 = 
yyvß
;

1389 
yy°acksize
 = 
YYINITDEPTH
;

1391 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1393 
yy°©e
 = 0;

1394 
yyîr°©us
 = 0;

1395 
yy√ºs
 = 0;

1396 
yych¨
 = 
YYEMPTY
;

1402 
yys•
 = 
yyss
;

1403 
yyv•
 = 
yyvs
;

1404 
yy£t°©e
;

1409 
yy√w°©e
:

1412 
yys•
++;

1414 
yy£t°©e
:

1415 *
yys•
 = 
yy°©e
;

1417 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1420 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1422 #ifde‡
yyovîÊow


1427 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1428 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1434 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1435 &
yyss1
, 
yysize
 *  (*
yys•
),

1436 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1437 &
yy°acksize
);

1439 
yyss
 = 
yyss1
;

1440 
yyvs
 = 
yyvs1
;

1443 #i‚de‡
YYSTACK_RELOCATE


1444 
yyexhau°edœb
;

1447 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1448 
yyexhau°edœb
;

1449 
yy°acksize
 *= 2;

1450 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1451 
yy°acksize
 = 
YYMAXDEPTH
;

1454 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1455 
yyÆloc
 *
yy±r
 =

1456 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1457 i‡(! 
yy±r
)

1458 
yyexhau°edœb
;

1459 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1460 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1461 #unde‡
YYSTACK_RELOCATE


1462 i‡(
yyss1
 !
yysß
)

1463 
	`YYSTACK_FREE
 (
yyss1
);

1468 
yys•
 = 
yyss
 + 
yysize
 - 1;

1469 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1471 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1472 (Ë
yy°acksize
));

1474 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1475 
YYABORT
;

1478 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1480 i‡(
yy°©e
 =
YYFINAL
)

1481 
YYACCEPT
;

1483 
yybackup
;

1488 
yybackup
:

1494 
yyn
 = 
yy∑˘
[
yy°©e
];

1495 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1496 
yydeÁu…
;

1501 i‡(
yych¨
 =
YYEMPTY
)

1503 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1504 
yych¨
 = 
YYLEX
;

1507 i‡(
yych¨
 <
YYEOF
)

1509 
yych¨
 = 
yytokí
 = 
YYEOF
;

1510 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1514 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1515 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1520 
yyn
 +
yytokí
;

1521 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1522 
yydeÁu…
;

1523 
yyn
 = 
yyèbÀ
[yyn];

1524 i‡(
yyn
 <= 0)

1526 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1527 
yyîæab
;

1528 
yyn
 = -yyn;

1529 
yyªdu˚
;

1534 i‡(
yyîr°©us
)

1535 
yyîr°©us
--;

1538 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1541 
yych¨
 = 
YYEMPTY
;

1543 
yy°©e
 = 
yyn
;

1544 *++
yyv•
 = 
yylvÆ
;

1546 
yy√w°©e
;

1552 
yydeÁu…
:

1553 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1554 i‡(
yyn
 == 0)

1555 
yyîæab
;

1556 
yyªdu˚
;

1562 
yyªdu˚
:

1564 
yyÀn
 = 
yyr2
[
yyn
];

1574 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1577 
	`YY_REDUCE_PRINT
 (
yyn
);

1578 
yyn
)

1602 
c⁄ãxt
->
	`£t_íd
();

1603 
YYACCEPT
;

1611 
c⁄ãxt
->
rc

MEMCACHED_PARSE_USER_ERROR
;

1612 
	`∑r£r_ab‹t
(
c⁄ãxt
, "ERROR called directly");

1620 
	`memˇched_ª£t
(
c⁄ãxt
->
memc
);

1628 
yydebug
= 1;

1636 i‡((
c⁄ãxt
->
rc

	`memˇched_∑r£_c⁄figuª_fûe
(*c⁄ãxt->
memc
, (
yyv•
[(3Ë- (3)].
°rög
).
c_°r
, (yyv•[(3Ë- (3)].°rög).
size
)Ë!
MEMCACHED_SUCCESS
)

1638 
	`∑r£r_ab‹t
(
c⁄ãxt
, "FailedÅoÖarse configuration file");

1647 i‡(
	`memˇched_Áûed
(
c⁄ãxt
->
rc

	`memˇched_£rvî_add_wôh_weight
(c⁄ãxt->
memc
, (
yyv•
[(2Ë- (4)].
£rvî
).
c_°r
, (yyv•[(3Ë- (4)].
numbî
), 
	`uöt32_t
((yyvsp[(4) - (4)].number)))))

1649 
buf„r
[1024];

1650 
	`¢¥ötf
(
buf„r
, (buf„r), "FaûedÅÿadd sîvî: %s:%u", (
yyv•
[(2Ë- (4)].
£rvî
).
c_°r
, 
	`uöt32_t
((yyv•[(3Ë- (4)].
numbî
)));

1651 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
buf„r
);

1653 
c⁄ãxt
->
	`un£t_£rvî
();

1661 i‡(
	`memˇched_Áûed
(
c⁄ãxt
->
rc

	`memˇched_£rvî_add_wôh_weight
(c⁄ãxt->
memc
, (
yyv•
[(2Ë- (4)].
£rvî
).
c_°r
, (yyv•[(3Ë- (4)].
numbî
), 
	`uöt32_t
((yyvsp[(4) - (4)].number)))))

1663 
buf„r
[1024];

1664 
	`¢¥ötf
(
buf„r
, (buf„r), "FaûedÅÿadd sîvî: %s:%u", (
yyv•
[(2Ë- (4)].
£rvî
).
c_°r
, 
	`uöt32_t
((yyv•[(3Ë- (4)].
numbî
)));

1665 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
buf„r
);

1667 
c⁄ãxt
->
	`un£t_£rvî
();

1675 i‡(
	`memˇched_Áûed
(
c⁄ãxt
->
rc

	`memˇched_£rvî_add_unix_sockë_wôh_weight
(c⁄ãxt->
memc
, (
yyv•
[(2Ë- (3)].
°rög
).
c_°r
, 
	`uöt32_t
((yyv•[(3Ë- (3)].
numbî
)))))

1677 
buf„r
[1024];

1678 
	`¢¥ötf
(
buf„r
, (buf„r), "FaûedÅÿadd sockë: %s", (
yyv•
[(2Ë- (3)].
°rög
).
c_°r
);

1679 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
buf„r
);

1688 
	`memˇched_£t_c⁄figuøti⁄_fûe
(
c⁄ãxt
->
memc
, (
yyv•
[(2Ë- (2)].
°rög
).
c_°r
, (yyv•[(2Ë- (2)].°rög).
size
);

1696 
c⁄ãxt
->
memc
->
c⁄figuª
.
öôül_poﬁ_size

	`uöt32_t
((
yyv•
[(2Ë- (2)].
numbî
));

1704 
c⁄ãxt
->
memc
->
c⁄figuª
.
max_poﬁ_size

	`uöt32_t
((
yyv•
[(2Ë- (2)].
numbî
));

1712 i‡(
	`memˇched_ˇŒback_gë
(
c⁄ãxt
->
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, 
NULL
))

1714 
	`∑r£r_ab‹t
(
c⁄ãxt
, "--NAMESPACE can only be called once");

1717 i‡((
c⁄ãxt
->
rc

	`memˇched_£t_«me•a˚
(*c⁄ãxt->
memc
, (
yyv•
[(2Ë- (2)].
°rög
).
c_°r
, (yyv•[(2Ë- (2)].°rög).
size
)Ë!
MEMCACHED_SUCCESS
)

1719 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
	`memˇched_œ°_îr‹_mesßge
(c⁄ãxt->
memc
));

1728 
	`memˇched_Êag
(*
c⁄ãxt
->
memc
, 
MEMCACHED_FLAG_IS_FETCHING_VERSION
, 
åue
);

1737 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, (
yyv•
[(2Ë- (2)].
di°ributi⁄
))Ë!
MEMCACHED_SUCCESS
)

1739 
	`∑r£r_ab‹t
(
c⁄ãxt
, "--DISTRIBUTION can only be called once");

1742 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, (
yyv•
[(2Ë- (2)].
di°ributi⁄
))Ë!
MEMCACHED_SUCCESS
)

1744 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
	`memˇched_œ°_îr‹_mesßge
(c⁄ãxt->
memc
));;

1754 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, (
yyv•
[(2Ë- (4)].
di°ributi⁄
))Ë!
MEMCACHED_SUCCESS
)

1756 
	`∑r£r_ab‹t
(
c⁄ãxt
, "--DISTRIBUTION can only be called once");

1759 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t_di°ributi⁄_hash
(c⁄ãxt->
memc
, (
yyv•
[(4Ë- (4)].
hash
))Ë!
MEMCACHED_SUCCESS
)

1761 
	`∑r£r_ab‹t
(
c⁄ãxt
, "UnableÅo setÅhe hash forÅhe DISTRIBUTIONÑequested");

1770 i‡(
c⁄ãxt
->
	`£t_hash
((
yyv•
[(2Ë- (2)].
hash
)Ë=
Ál£
)

1772 
	`∑r£r_ab‹t
(
c⁄ãxt
, "--HASH can only be set once");

1781 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, (
yyv•
[(1Ë- (2)].
behavi‹
), (yyv•[(2Ë- (2)].
numbî
))Ë!
MEMCACHED_SUCCESS
)

1783 
	`∑r£r_ab‹t
(
c⁄ãxt
, "UnableÅo set behavior");

1792 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, (
yyv•
[(1Ë- (1)].
behavi‹
), 
åue
)Ë!
MEMCACHED_SUCCESS
)

1794 
buf„r
[1024];

1795 
	`¢¥ötf
(
buf„r
, (buf„r), "CouldÇŸ së: %s", 
	`libmemˇched_°rög_behavi‹
((
yyv•
[(1Ë- (1)].
behavi‹
)));

1796 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
buf„r
);

1812 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
;

1820 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
;

1828 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
;

1836 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
;

1844 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
;

1852 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
;

1860 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
;

1868 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
;

1876 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
;

1884 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SND_TIMEOUT
;

1892 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
;

1900 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
;

1908 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
;

1916 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
;

1924 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
;

1932 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_NOREPLY
;

1940 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
;

1948 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SORT_HOSTS
;

1956 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SUPPORT_CAS
;

1964 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_TCP_NODELAY
;

1972 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
;

1980 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
;

1988 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_USE_UDP
;

1996 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_VERIFY_KEY
;

2003 { (
yyvÆ
.
numbî
)
MEMCACHED_DEFAULT_PORT
;}

2015 { (
yyvÆ
.
numbî
)= 1; }

2028 (
yyvÆ
.
hash
)
MEMCACHED_HASH_MD5
;

2036 (
yyvÆ
.
hash
)
MEMCACHED_HASH_CRC
;

2044 (
yyvÆ
.
hash
)
MEMCACHED_HASH_FNV1_64
;

2052 (
yyvÆ
.
hash
)
MEMCACHED_HASH_FNV1A_64
;

2060 (
yyvÆ
.
hash
)
MEMCACHED_HASH_FNV1_32
;

2068 (
yyvÆ
.
hash
)
MEMCACHED_HASH_FNV1A_32
;

2076 (
yyvÆ
.
hash
)
MEMCACHED_HASH_HSIEH
;

2084 (
yyvÆ
.
hash
)
MEMCACHED_HASH_MURMUR
;

2092 (
yyvÆ
.
hash
)
MEMCACHED_HASH_JENKINS
;

2100 (
yyvÆ
.
°rög
)(
yyv•
[(1) - (1)].string);

2108 (
yyvÆ
.
°rög
)(
yyv•
[(1) - (1)].string);

2116 (
yyvÆ
.
di°ributi⁄
)
MEMCACHED_DISTRIBUTION_CONSISTENT
;

2124 (
yyvÆ
.
di°ributi⁄
)
MEMCACHED_DISTRIBUTION_MODULA
;

2132 (
yyvÆ
.
di°ributi⁄
)
MEMCACHED_DISTRIBUTION_RANDOM
;

2152 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

2154 
	`YYPOPSTACK
 (
yyÀn
);

2155 
yyÀn
 = 0;

2156 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2158 *++
yyv•
 = 
yyvÆ
;

2164 
yyn
 = 
yyr1
[yyn];

2166 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

2167 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

2168 
yy°©e
 = 
yyèbÀ
[yystate];

2170 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

2172 
yy√w°©e
;

2178 
yyîæab
:

2181 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

2184 i‡(!
yyîr°©us
)

2186 ++
yy√ºs
;

2187 #i‡! 
YYERROR_VERBOSE


2188 
	`yyîr‹
 (
c⁄ãxt
, 
sˇ¬î
, 
	`YY_
("syntaxÉrror"));

2190 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

2191 
yys•
, 
yytokí
)

	)

2193 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

2194 
yysy¡ax_îr‹_°©us
;

2195 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

2196 i‡(
yysy¡ax_îr‹_°©us
 == 0)

2197 
yymsgp
 = 
yymsg
;

2198 i‡(
yysy¡ax_îr‹_°©us
 == 1)

2200 i‡(
yymsg
 !
yymsgbuf
)

2201 
	`YYSTACK_FREE
 (
yymsg
);

2202 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

2203 i‡(!
yymsg
)

2205 
yymsg
 = 
yymsgbuf
;

2206 
yymsg_Æloc
 =  
yymsgbuf
;

2207 
yysy¡ax_îr‹_°©us
 = 2;

2211 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

2212 
yymsgp
 = 
yymsg
;

2215 
	`yyîr‹
 (
c⁄ãxt
, 
sˇ¬î
, 
yymsgp
);

2216 i‡(
yysy¡ax_îr‹_°©us
 == 2)

2217 
yyexhau°edœb
;

2219 #unde‡
YYSYNTAX_ERROR


2225 i‡(
yyîr°©us
 == 3)

2230 i‡(
yych¨
 <
YYEOF
)

2233 i‡(
yych¨
 =
YYEOF
)

2234 
YYABORT
;

2238 
	`yyde°ru˘
 ("Error: discarding",

2239 
yytokí
, &
yylvÆ
, 
c⁄ãxt
, 
sˇ¬î
);

2240 
yych¨
 = 
YYEMPTY
;

2246 
yyîæab1
;

2252 
yyîr‹œb
:

2258 
yyîr‹œb
;

2262 
	`YYPOPSTACK
 (
yyÀn
);

2263 
yyÀn
 = 0;

2264 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2265 
yy°©e
 = *
yys•
;

2266 
yyîæab1
;

2272 
yyîæab1
:

2273 
yyîr°©us
 = 3;

2277 
yyn
 = 
yy∑˘
[
yy°©e
];

2278 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

2280 
yyn
 +
YYTERROR
;

2281 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

2283 
yyn
 = 
yyèbÀ
[yyn];

2284 i‡(0 < 
yyn
)

2290 i‡(
yys•
 =
yyss
)

2291 
YYABORT
;

2294 
	`yyde°ru˘
 ("Error:Öopping",

2295 
yy°os
[
yy°©e
], 
yyv•
, 
c⁄ãxt
, 
sˇ¬î
);

2296 
	`YYPOPSTACK
 (1);

2297 
yy°©e
 = *
yys•
;

2298 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2301 *++
yyv•
 = 
yylvÆ
;

2305 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

2307 
yy°©e
 = 
yyn
;

2308 
yy√w°©e
;

2314 
yyac˚±œb
:

2315 
yyªsu…
 = 0;

2316 
yyªtu∫
;

2321 
yyab‹éab
:

2322 
yyªsu…
 = 1;

2323 
yyªtu∫
;

2325 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


2329 
yyexhau°edœb
:

2330 
	`yyîr‹
 (
c⁄ãxt
, 
sˇ¬î
, 
	`YY_
("memoryÉxhausted"));

2331 
yyªsu…
 = 2;

2335 
yyªtu∫
:

2336 i‡(
yych¨
 !
YYEMPTY
)

2340 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

2341 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

2342 
yytokí
, &
yylvÆ
, 
c⁄ãxt
, 
sˇ¬î
);

2346 
	`YYPOPSTACK
 (
yyÀn
);

2347 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2348 
yys•
 !
yyss
)

2350 
	`yyde°ru˘
 ("Cleanup:Öopping",

2351 
yy°os
[*
yys•
], 
yyv•
, 
c⁄ãxt
, 
sˇ¬î
);

2352 
	`YYPOPSTACK
 (1);

2354 #i‚de‡
yyovîÊow


2355 i‡(
yyss
 !
yysß
)

2356 
	`YYSTACK_FREE
 (
yyss
);

2358 #i‡
YYERROR_VERBOSE


2359 i‡(
yymsg
 !
yymsgbuf
)

2360 
	`YYSTACK_FREE
 (
yymsg
);

2363  
	`YYID
 (
yyªsu…
);

2364 
	}
}

2371 
	gC⁄ãxt
::
	$°¨t
()

2373 
	`c⁄fig_∑r£
(
this
, (**)
sˇ¬î
);

2374 
	}
}

	@libmemcached/csl/parser.h

33 #i‚de‡
CONFIG_LIBMEMCACHED_CSL_PARSER_H


34 
	#CONFIG_LIBMEMCACHED_CSL_PARSER_H


	)

36 #i‚de‡
YYDEBUG


37 
	#YYDEBUG
 1

	)

39 #i‡
YYDEBUG


40 
c⁄fig_debug
;

44 #i‚de‡
YYTOKENTYPE


45 
	#YYTOKENTYPE


	)

48 
	eyytokíty≥
 {

49 
	mCOMMENT
 = 258,

50 
	mEND
 = 259,

51 
	mCSL_ERROR
 = 260,

52 
	mRESET
 = 261,

53 
	mPARSER_DEBUG
 = 262,

54 
	mINCLUDE
 = 263,

55 
	mCONFIGURE_FILE
 = 264,

56 
	mEMPTY_LINE
 = 265,

57 
	mSERVER
 = 266,

58 
	mCSL_SOCKET
 = 267,

59 
	mSERVERS
 = 268,

60 
	mSERVERS_OPTION
 = 269,

61 
	mUNKNOWN_OPTION
 = 270,

62 
	mUNKNOWN
 = 271,

63 
	mBINARY_PROTOCOL
 = 272,

64 
	mBUFFER_REQUESTS
 = 273,

65 
	mCONNECT_TIMEOUT
 = 274,

66 
	mDISTRIBUTION
 = 275,

67 
	mHASH
 = 276,

68 
	mHASH_WITH_NAMESPACE
 = 277,

69 
	mIO_BYTES_WATERMARK
 = 278,

70 
	mIO_KEY_PREFETCH
 = 279,

71 
	mIO_MSG_WATERMARK
 = 280,

72 
	mKETAMA_HASH
 = 281,

73 
	mKETAMA_WEIGHTED
 = 282,

74 
	mNOREPLY
 = 283,

75 
	mNUMBER_OF_REPLICAS
 = 284,

76 
	mPOLL_TIMEOUT
 = 285,

77 
	mRANDOMIZE_REPLICA_READ
 = 286,

78 
	mRCV_TIMEOUT
 = 287,

79 
	mREMOVE_FAILED_SERVERS
 = 288,

80 
	mRETRY_TIMEOUT
 = 289,

81 
	mSND_TIMEOUT
 = 290,

82 
	mSOCKET_RECV_SIZE
 = 291,

83 
	mSOCKET_SEND_SIZE
 = 292,

84 
	mSORT_HOSTS
 = 293,

85 
	mSUPPORT_CAS
 = 294,

86 
	mUSER_DATA
 = 295,

87 
	mUSE_UDP
 = 296,

88 
	mVERIFY_KEY
 = 297,

89 
	m_TCP_KEEPALIVE
 = 298,

90 
	m_TCP_KEEPIDLE
 = 299,

91 
	m_TCP_NODELAY
 = 300,

92 
	mFETCH_VERSION
 = 301,

93 
	mNAMESPACE
 = 302,

94 
	mPOOL_MIN
 = 303,

95 
	mPOOL_MAX
 = 304,

96 
	mMD5
 = 305,

97 
	mCRC
 = 306,

98 
	mFNV1_64
 = 307,

99 
	mFNV1A_64
 = 308,

100 
	mFNV1_32
 = 309,

101 
	mFNV1A_32
 = 310,

102 
	mHSIEH
 = 311,

103 
	mMURMUR
 = 312,

104 
	mJENKINS
 = 313,

105 
	mCONSISTENT
 = 314,

106 
	mMODULA
 = 315,

107 
	mRANDOM
 = 316,

108 
	mCSL_TRUE
 = 317,

109 
	mCSL_FALSE
 = 318,

110 
	mCSL_FLOAT
 = 319,

111 
	mNUMBER
 = 320,

112 
	mPORT
 = 321,

113 
	mWEIGHT_START
 = 322,

114 
	mIPADDRESS
 = 323,

115 
	mHOSTNAME
 = 324,

116 
	mSTRING
 = 325,

117 
	mQUOTED_STRING
 = 326,

118 
	mFILE_PATH
 = 327

123 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


125 
	#yy°y≥
 
YYSTYPE


	)

126 
	#YYSTYPE_IS_DECLARED
 1

	)

130 #ifde‡
YYPARSE_PARAM


131 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


132 
c⁄fig_∑r£
 (*
YYPARSE_PARAM
);

134 
c⁄fig_∑r£
 ();

137 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


138 
c⁄fig_∑r£
 (
˛ass
 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
);

140 
c⁄fig_∑r£
 ();

	@libmemcached/csl/scanner.cc

4 
	~<libmemˇched/c¶/comm⁄.h
>

5 
	~<libmemˇched/c¶/c⁄ãxt.h
>

6 
	~<libmemˇched/c¶/∑r£r.h
>

7 
	~<libmemˇched/c¶/symbﬁ.h
>

9 #i‚de‡
__INTEL_COMPILER


10 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

11 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsign-compare"

12 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

13 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wmissing-declarations"

14 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-result"

15 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wmissing-noreturn"

18 #ifde‡
__˛™g__


19 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wshorten-64-to-32"

22 #i‚de‡
__INTEL_COMPILER


23 #i‚de‡
__˛™g__


24 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wlogical-op"

33 
	#YY_INT_ALIGNED
 

	)

37 
	#FLEX_SCANNER


	)

38 
	#YY_FLEX_MAJOR_VERSION
 2

	)

39 
	#YY_FLEX_MINOR_VERSION
 5

	)

40 
	#YY_FLEX_SUBMINOR_VERSION
 36

	)

41 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

42 
	#FLEX_BETA


	)

48 
	~<°dio.h
>

49 
	~<°rög.h
>

50 
	~<î∫o.h
>

51 
	~<°dlib.h
>

57 #i‚de‡
FLEXINT_H


58 
	#FLEXINT_H


	)

62 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

67 #i‚de‡
__STDC_LIMIT_MACROS


68 
	#__STDC_LIMIT_MACROS
 1

	)

71 
	~<öây≥s.h
>

72 
öt8_t
 
	tÊex_öt8_t
;

73 
uöt8_t
 
	tÊex_uöt8_t
;

74 
öt16_t
 
	tÊex_öt16_t
;

75 
uöt16_t
 
	tÊex_uöt16_t
;

76 
öt32_t
 
	tÊex_öt32_t
;

77 
uöt32_t
 
	tÊex_uöt32_t
;

79 sig√d 
	tÊex_öt8_t
;

80 
	tÊex_öt16_t
;

81 
	tÊex_öt32_t
;

82 
	tÊex_uöt8_t
;

83 
	tÊex_uöt16_t
;

84 
	tÊex_uöt32_t
;

87 #i‚de‡
INT8_MIN


88 
	#INT8_MIN
 (-128)

	)

90 #i‚de‡
INT16_MIN


91 
	#INT16_MIN
 (-32767-1)

	)

93 #i‚de‡
INT32_MIN


94 
	#INT32_MIN
 (-2147483647-1)

	)

96 #i‚de‡
INT8_MAX


97 
	#INT8_MAX
 (127)

	)

99 #i‚de‡
INT16_MAX


100 
	#INT16_MAX
 (32767)

	)

102 #i‚de‡
INT32_MAX


103 
	#INT32_MAX
 (2147483647)

	)

105 #i‚de‡
UINT8_MAX


106 
	#UINT8_MAX
 (255U)

	)

108 #i‚de‡
UINT16_MAX


109 
	#UINT16_MAX
 (65535U)

	)

111 #i‚de‡
UINT32_MAX


112 
	#UINT32_MAX
 (4294967295U)

	)

119 #ifde‡
__˝lu•lus


122 
	#YY_USE_CONST


	)

127 #i‡
deföed
 (
__STDC__
)

129 
	#YY_USE_CONST


	)

134 #ifde‡
YY_USE_CONST


135 
	#yyc⁄°
 c⁄°

	)

137 
	#yyc⁄°


	)

141 
	#YY_NULL
 0

	)

148 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

151 #i‚de‡
YY_TYPEDEF_YY_SCANNER_T


152 
	#YY_TYPEDEF_YY_SCANNER_T


	)

153 * 
	tyysˇn_t
;

158 
	#yyö
 
yyg
->
yyö_r


	)

159 
	#yyout
 
yyg
->
yyout_r


	)

160 
	#yyexåa
 
yyg
->
yyexåa_r


	)

161 
	#yyÀng
 
yyg
->
yyÀng_r


	)

162 
	#yyãxt
 
yyg
->
yyãxt_r


	)

163 
	#yylöío
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_löío
)

	)

164 
	#yycﬁumn
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_cﬁumn
)

	)

165 
	#yy_Êex_debug
 
yyg
->
yy_Êex_debug_r


	)

171 
	#BEGIN
 
yyg
->
yy_°¨t
 = 1 + 2 *

	)

177 
	#YY_START
 ((
yyg
->
yy_°¨t
 - 1Ë/ 2)

	)

178 
	#YYSTATE
 
YY_START


	)

181 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

184 
	#YY_NEW_FILE
 
	`c⁄fig_ª°¨t
(
yyö
 ,
yysˇ¬î
 )

	)

186 
	#YY_END_OF_BUFFER_CHAR
 0

	)

189 #i‚de‡
YY_BUF_SIZE


190 
	#YY_BUF_SIZE
 16384

	)

195 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

197 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


198 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

199 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

202 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


203 
	#YY_TYPEDEF_YY_SIZE_T


	)

204 
size_t
 
	tyy_size_t
;

207 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

208 
	#EOB_ACT_END_OF_FILE
 1

	)

209 
	#EOB_ACT_LAST_MATCH
 2

	)

211 
	#YY_LESS_LINENO
(
n
)

	)

214 
	#yyÀss
(
n
) \

218 
yyÀss_ma¸o_¨g
 = (
n
); \

219 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

220 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
; \

221 
YY_RESTORE_YY_MORE_OFFSET
 \

222 
yyg
->
yy_c_buf_p
 = 
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

223 
YY_DO_BEFORE_ACTION
; \

225  0 )

	)

227 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, 
yyg
->
yyãxt_±r
 , 
yysˇ¬î
 )

	)

229 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


230 
	#YY_STRUCT_YY_BUFFER_STATE


	)

231 
	syy_buf„r_°©e


233 
FILE
 *
	myy_öput_fûe
;

235 *
	myy_ch_buf
;

236 *
	myy_buf_pos
;

241 
yy_size_t
 
	myy_buf_size
;

246 
yy_size_t
 
	myy_n_ch¨s
;

252 
	myy_is_our_buf„r
;

259 
	myy_is_öãø˘ive
;

265 
	myy_©_bﬁ
;

267 
	myy_bs_löío
;

268 
	myy_bs_cﬁumn
;

273 
	myy_fûl_buf„r
;

275 
	myy_buf„r_°©us
;

277 
	#YY_BUFFER_NEW
 0

	)

278 
	#YY_BUFFER_NORMAL
 1

	)

289 
	#YY_BUFFER_EOF_PENDING
 2

	)

300 
	#YY_CURRENT_BUFFER
 ( 
yyg
->
yy_buf„r_°ack
 \

301 ? 
yyg
->
yy_buf„r_°ack
[yyg->
yy_buf„r_°ack_t›
] \

302 : 
NULL
)

	)

307 
	#YY_CURRENT_BUFFER_LVALUE
 
yyg
->
yy_buf„r_°ack
[yyg->
yy_buf„r_°ack_t›
]

	)

309 
c⁄fig_ª°¨t
 (
FILE
 *
öput_fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

310 
c⁄fig__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

311 
YY_BUFFER_STATE
 
c⁄fig__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 ,
yysˇn_t
 
yysˇ¬î
 );

312 
c⁄fig__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

313 
c⁄fig__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

314 
c⁄fig_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

315 
c⁄fig_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

317 
c⁄fig_ísuª_buf„r_°ack
 (
yysˇn_t
 
yysˇ¬î
 );

318 
c⁄fig__lﬂd_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

319 
c⁄fig__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

321 
	#YY_FLUSH_BUFFER
 
	`c⁄fig__Êush_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
)

	)

323 
YY_BUFFER_STATE
 
c⁄fig__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 ,
yysˇn_t
 
yysˇ¬î
 );

324 
YY_BUFFER_STATE
 
c⁄fig__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

325 
YY_BUFFER_STATE
 
c⁄fig__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
yy_size_t
 
Àn
 ,
yysˇn_t
 
yysˇ¬î
 );

327 *
c⁄fig_Æloc
 (
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

328 *
c⁄fig_ªÆloc
 (*,
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

329 
c⁄fig_‰ì
 (* ,
yysˇn_t
 
yysˇ¬î
 );

331 
	#yy_√w_buf„r
 
c⁄fig__¸óã_buf„r


	)

333 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

335 i‡–! 
YY_CURRENT_BUFFER
 ){ \

336 
	`c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
); \

337 
YY_CURRENT_BUFFER_LVALUE
 = \

338 
	`c⁄fig__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
); \

340 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

341 }

	)

343 
	#yy_£t_bﬁ
(
©_bﬁ
) \

345 i‡–! 
YY_CURRENT_BUFFER
 ){\

346 
	`c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
); \

347 
YY_CURRENT_BUFFER_LVALUE
 = \

348 
	`c⁄fig__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
); \

350 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

351 }

	)

353 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

357 
	#c⁄fig_wøp
(
yysˇ¬î
Ë1

	)

358 
	#YY_SKIP_YYWRAP


	)

360 
	tYY_CHAR
;

362 
	tyy_°©e_ty≥
;

364 
	#yyãxt_±r
 
yyãxt_r


	)

366 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

367 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 ,
yysˇn_t
 
yysˇ¬î
);

368 
yy_gë_√xt_buf„r
 (
yysˇn_t
 
yysˇ¬î
 );

369 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] ,
yysˇn_t
 
yysˇ¬î
 );

374 
	#YY_DO_BEFORE_ACTION
 \

375 
yyg
->
yyãxt_±r
 = 
yy_bp
; \

376 
yyÀng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

377 
yyg
->
yy_hﬁd_ch¨
 = *
yy_˝
; \

378 *
yy_˝
 = '\0'; \

379 
yyg
->
yy_c_buf_p
 = 
yy_˝
;

	)

381 
	#YY_NUM_RULES
 66

	)

382 
	#YY_END_OF_BUFFER
 67

	)

385 
	syy_å™s_öfo


387 
Êex_öt32_t
 
	myy_vîify
;

388 
Êex_öt32_t
 
	myy_nxt
;

390 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[538] =

453 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

485 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[75] =

497 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[543] =

561 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[543] =

625 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[1838] =

831 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[1838] =

1040 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

1041 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

1042 
	#YY_MORE_ADJ
 0

	)

1043 
	#YY_RESTORE_YY_MORE_OFFSET


	)

1082 
	#PARAM
 
	`c⁄fig_gë_exåa
(
yysˇ¬î
)

	)

1084 
	#gë_Àx_ch¨s
(
buf„r
, 
ªsu…
, 
max_size
, 
c⁄ãxt
) \

1086 i‡(
c⁄ãxt
->
pos
 >c⁄ãxt->
Àngth
) \

1088 
ªsu…

YY_NULL
; \

1092 
ªsu…
()(
c⁄ãxt
->
Àngth
 - c⁄ãxt->
pos
); \

1093 (
size_t
)
ªsu…
 > (size_t)
max_size
 ?Ñesult= max_size : 0; \

1094 
	`mem˝y
(
buf„r
, 
c⁄ãxt
->
buf
 + c⁄ãxt->
pos
, 
ªsu…
); \

1095 
c⁄ãxt
->
pos
 +
ªsu…
; \

1097 }

	)

1099 
	#YY_FATAL_ERROR
(
msg
) \

1101 }

	)

1104 
	#YY_INPUT
(
buf„r
, 
ªsu…
, 
max_size
Ë
	`gë_Àx_ch¨s
(buf„r,Ñesu…, max_size, 
PARAM
)

	)

1106 
	#YY_NO_INPUT
 1

	)

1109 
	#INITIAL
 0

	)

1111 #i‚de‡
YY_NO_UNISTD_H


1116 
	~<uni°d.h
>

1119 #i‚de‡
YY_EXTRA_TYPE


1120 
	#YY_EXTRA_TYPE
 *

	)

1124 
	syyguts_t


1128 
YY_EXTRA_TYPE
 
	myyexåa_r
;

1131 
FILE
 *
	myyö_r
, *
	myyout_r
;

1132 
size_t
 
	myy_buf„r_°ack_t›
;

1133 
size_t
 
	myy_buf„r_°ack_max
;

1134 
YY_BUFFER_STATE
 * 
	myy_buf„r_°ack
;

1135 
	myy_hﬁd_ch¨
;

1136 
yy_size_t
 
	myy_n_ch¨s
;

1137 
yy_size_t
 
	myyÀng_r
;

1138 *
	myy_c_buf_p
;

1139 
	myy_öô
;

1140 
	myy_°¨t
;

1141 
	myy_did_buf„r_swôch_⁄_eof
;

1142 
	myy_°¨t_°ack_±r
;

1143 
	myy_°¨t_°ack_dïth
;

1144 *
	myy_°¨t_°ack
;

1145 
yy_°©e_ty≥
 
	myy_œ°_ac˚±ög_°©e
;

1146 * 
	myy_œ°_ac˚±ög_˝os
;

1148 
	myylöío_r
;

1149 
	myy_Êex_debug_r
;

1151 *
	myyãxt_r
;

1152 
	myy_m‹e_Êag
;

1153 
	myy_m‹e_Àn
;

1155 
YYSTYPE
 * 
	myylvÆ_r
;

1159 
yy_öô_globÆs
 (
yysˇn_t
 
yysˇ¬î
 );

1163 
	#yylvÆ
 
yyg
->
yylvÆ_r


	)

1165 
c⁄fig_Àx_öô
 (
yysˇn_t
* 
sˇ¬î
);

1167 
c⁄fig_Àx_öô_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
,
yysˇn_t
* 
sˇ¬î
);

1172 
c⁄fig_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
 );

1174 
c⁄fig_gë_debug
 (
yysˇn_t
 
yysˇ¬î
 );

1176 
c⁄fig_£t_debug
 (
debug_Êag
 ,
yysˇn_t
 
yysˇ¬î
 );

1178 
YY_EXTRA_TYPE
 
c⁄fig_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
 );

1180 
c⁄fig_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 ,
yysˇn_t
 
yysˇ¬î
 );

1182 
FILE
 *
c⁄fig_gë_ö
 (
yysˇn_t
 
yysˇ¬î
 );

1184 
c⁄fig_£t_ö
 (
FILE
 * 
ö_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

1186 
FILE
 *
c⁄fig_gë_out
 (
yysˇn_t
 
yysˇ¬î
 );

1188 
c⁄fig_£t_out
 (
FILE
 * 
out_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

1190 
yy_size_t
 
c⁄fig_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
 );

1192 *
c⁄fig_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
 );

1194 
c⁄fig_gë_löío
 (
yysˇn_t
 
yysˇ¬î
 );

1196 
c⁄fig_£t_löío
 (
löe_numbî
 ,
yysˇn_t
 
yysˇ¬î
 );

1198 
c⁄fig_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
 );

1200 
c⁄fig_£t_cﬁumn
 (
cﬁumn_no
 ,
yysˇn_t
 
yysˇ¬î
 );

1202 
YYSTYPE
 * 
c⁄fig_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
 );

1204 
c⁄fig_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

1210 #i‚de‡
YY_SKIP_YYWRAP


1211 #ifde‡
__˝lu•lus


1212 "C" 
c⁄fig_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

1214 
c⁄fig_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

1218 #i‚de‡
yyãxt_±r


1219 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,,
yysˇn_t
 
yysˇ¬î
);

1222 #ifde‡
YY_NEED_STRLEN


1223 
yy_Êex_°æí
 (
yyc⁄°
 * ,
yysˇn_t
 
yysˇ¬î
);

1226 #i‚de‡
YY_NO_INPUT


1228 #ifde‡
__˝lu•lus


1229 
yyöput
 (
yysˇn_t
 
yysˇ¬î
 );

1231 
öput
 (
yysˇn_t
 
yysˇ¬î
 );

1237 #i‚de‡
YY_READ_BUF_SIZE


1238 
	#YY_READ_BUF_SIZE
 8192

	)

1242 #i‚de‡
ECHO


1246 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

1252 #i‚de‡
YY_INPUT


1253 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

1254 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

1256 
c
 = '*'; \

1257 
size_t
 
n
; \

1258  
n
 = 0;Ç < 
max_size
 && \

1259 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

1260 
buf
[
n
] = (Ë
c
; \

1261 i‡–
c
 == '\n' ) \

1262 
buf
[
n
++] = (Ë
c
; \

1263 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

1264 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1265 
ªsu…
 = 
n
; \

1269 
î∫o
=0; \

1270  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
yyö
))==0 && 
	`„º‹
(yyin)) \

1272 if–
î∫o
 !
EINTR
) \

1274 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1277 
î∫o
=0; \

1278 
	`˛óªº
(
yyö
); \

1282 

	)

1289 #i‚de‡
yyãrmö©e


1290 
	#yyãrmö©e
(Ë 
YY_NULL


	)

1294 #i‚de‡
YY_START_STACK_INCR


1295 
	#YY_START_STACK_INCR
 25

	)

1299 #i‚de‡
YY_FATAL_ERROR


1300 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg , 
yysˇ¬î
)

	)

1308 #i‚de‡
YY_DECL


1309 
	#YY_DECL_IS_OURS
 1

	)

1311 
c⁄fig_Àx
 \

1312 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
);

1314 
	#YY_DECL
 
c⁄fig_Àx
 \

1315 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

	)

1321 #i‚de‡
YY_USER_ACTION


1322 
	#YY_USER_ACTION


	)

1326 #i‚de‡
YY_BREAK


1327 
	#YY_BREAK
 ;

	)

1330 
	#YY_RULE_SETUP
 \

1331 i‡–
yyÀng
 > 0 ) \

1332 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = \

1333 (
yyãxt
[
yyÀng
 - 1] == '\n'); \

1334 
YY_USER_ACTION


	)

1338 
	gYY_DECL


1340 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

1341 *
	gyy_˝
, *
	gyy_bp
;

1342 
	gyy_a˘
;

1343 
yyguts_t
 * 
	gyyg
 = (yyguts_t*)
yysˇ¬î
;

1351 
	gyylvÆ
 = 
yylvÆ_∑øm
;

1353 i‡–!
	gyyg
->
	gyy_öô
 )

1355 
	gyyg
->
	gyy_öô
 = 1;

1357 #ifde‡
YY_USER_INIT


1358 
	gYY_USER_INIT
;

1361 i‡–! 
	gyyg
->
	gyy_°¨t
 )

1362 
	gyyg
->
	gyy_°¨t
 = 1;

1364 i‡–! 
	gyyö
 )

1365 
	gyyö
 = 
°dö
;

1367 i‡–! 
	gyyout
 )

1368 
	gyyout
 = 
°dout
;

1370 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

1371 
c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
);

1372 
	gYY_CURRENT_BUFFER_LVALUE
 =

1373 
c⁄fig__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
);

1376 
c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1381 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1384 *
	gyy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1389 
	gyy_bp
 = 
yy_˝
;

1391 
	gyy_cuºít_°©e
 = 
yyg
->
yy_°¨t
;

1392 
	gyy_cuºít_°©e
 +
YY_AT_BOL
();

1393 
	gyy_m©ch
:

1396 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

1397 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

1399 
	gyyg
->
	gyy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

1400 
	gyyg
->
	gyy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

1402  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

1404 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1405 i‡–
	gyy_cuºít_°©e
 >= 538 )

1406 
yy_c
 = 
yy_mëa
[() yy_c];

1408 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

1409 ++
	gyy_˝
;

1411  
	gyy_cuºít_°©e
 != 537 );

1412 
	gyy_˝
 = 
yyg
->
yy_œ°_ac˚±ög_˝os
;

1413 
	gyy_cuºít_°©e
 = 
yyg
->
yy_œ°_ac˚±ög_°©e
;

1415 
	gyy_föd_a˘i⁄
:

1416 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1418 
	gYY_DO_BEFORE_ACTION
;

1420 
	gdo_a˘i⁄
:

1422  
yy_a˘
 )

1426 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1427 
	gyy_˝
 = 
yyg
->
yy_œ°_ac˚±ög_˝os
;

1428 
	gyy_cuºít_°©e
 = 
yyg
->
yy_œ°_ac˚±ög_°©e
;

1429 
	gyy_föd_a˘i⁄
;

1432 
YY_RULE_SETUP


1434 {  
yyãxt
[0];}

1435 
YY_BREAK


1437 
YY_RULE_SETUP


1439 { 
yylvÆ
->
numbî

©oi
(
yyãxt
);  (
	gNUMBER
); }

1440 
YY_BREAK


1442 
YY_RULE_SETUP


1444 { 
yylvÆ
->
numbî

©oi
(
yyãxt
 +1);  
	gPORT
; }

1445 
YY_BREAK


1447 
YY_RULE_SETUP


1449 { 
yylvÆ
->
numbî

©oi
(
yyãxt
 +2);  
	gWEIGHT_START
; }

1450 
YY_BREAK


1453 
YY_RULE_SETUP


1456 
YY_BREAK


1458 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1459 
	gyyg
->
	gyy_c_buf_p
 = 
yy_˝
 -= 1;

1460 
	gYY_DO_BEFORE_ACTION
;

1461 
	gYY_RULE_SETUP


1464  
	gCOMMENT
;

1466 
YY_BREAK


1468 
YY_RULE_SETUP


1470 { 
yyexåa
->
begö

yyãxt
; 
	gyyexåa
->
£t_£rvî
();  yyexåa->
	g¥evious_tokí

SERVER
; }

1471 
YY_BREAK


1473 
YY_RULE_SETUP


1475 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

CSL_SOCKET
; }

1476 
YY_BREAK


1478 
YY_RULE_SETUP


1480 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

BINARY_PROTOCOL
; }

1481 
YY_BREAK


1483 
YY_RULE_SETUP


1485 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

BUFFER_REQUESTS
; }

1486 
YY_BREAK


1488 
YY_RULE_SETUP


1490 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

CONFIGURE_FILE
; }

1491 
YY_BREAK


1493 
YY_RULE_SETUP


1495 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

CONNECT_TIMEOUT
; }

1496 
YY_BREAK


1498 
YY_RULE_SETUP


1500 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

DISTRIBUTION
; }

1501 
YY_BREAK


1503 
YY_RULE_SETUP


1505 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

HASH_WITH_NAMESPACE
; }

1506 
YY_BREAK


1508 
YY_RULE_SETUP


1510 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

HASH
; }

1511 
YY_BREAK


1513 
YY_RULE_SETUP


1515 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

IO_BYTES_WATERMARK
; }

1516 
YY_BREAK


1518 
YY_RULE_SETUP


1520 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

IO_KEY_PREFETCH
; }

1521 
YY_BREAK


1523 
YY_RULE_SETUP


1525 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

IO_MSG_WATERMARK
; }

1526 
YY_BREAK


1528 
YY_RULE_SETUP


1530 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

NOREPLY
; }

1531 
YY_BREAK


1533 
YY_RULE_SETUP


1535 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

NUMBER_OF_REPLICAS
; }

1536 
YY_BREAK


1538 
YY_RULE_SETUP


1540 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

POLL_TIMEOUT
; }

1541 
YY_BREAK


1543 
YY_RULE_SETUP


1545 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

RANDOMIZE_REPLICA_READ
; }

1546 
YY_BREAK


1548 
YY_RULE_SETUP


1550 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

RCV_TIMEOUT
; }

1551 
YY_BREAK


1553 
YY_RULE_SETUP


1555 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

REMOVE_FAILED_SERVERS
; }

1556 
YY_BREAK


1558 
YY_RULE_SETUP


1560 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

RETRY_TIMEOUT
; }

1561 
YY_BREAK


1563 
YY_RULE_SETUP


1565 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

SND_TIMEOUT
; }

1566 
YY_BREAK


1568 
YY_RULE_SETUP


1570 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

SOCKET_RECV_SIZE
; }

1571 
YY_BREAK


1573 
YY_RULE_SETUP


1575 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

SOCKET_SEND_SIZE
; }

1576 
YY_BREAK


1578 
YY_RULE_SETUP


1580 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

SORT_HOSTS
; }

1581 
YY_BREAK


1583 
YY_RULE_SETUP


1585 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

SUPPORT_CAS
; }

1586 
YY_BREAK


1588 
YY_RULE_SETUP


1590 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

_TCP_KEEPALIVE
; }

1591 
YY_BREAK


1593 
YY_RULE_SETUP


1595 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

_TCP_KEEPIDLE
; }

1596 
YY_BREAK


1598 
YY_RULE_SETUP


1600 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

_TCP_NODELAY
; }

1601 
YY_BREAK


1603 
YY_RULE_SETUP


1605 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

USE_UDP
; }

1606 
YY_BREAK


1608 
YY_RULE_SETUP


1610 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

USER_DATA
; }

1611 
YY_BREAK


1613 
YY_RULE_SETUP


1615 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

VERIFY_KEY
; }

1616 
YY_BREAK


1618 
YY_RULE_SETUP


1620 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

POOL_MIN
; }

1621 
YY_BREAK


1623 
YY_RULE_SETUP


1625 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

POOL_MAX
; }

1626 
YY_BREAK


1628 
YY_RULE_SETUP


1630 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

NAMESPACE
; }

1631 
YY_BREAK


1633 
YY_RULE_SETUP


1635 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

FETCH_VERSION
; }

1636 
YY_BREAK


1638 
YY_RULE_SETUP


1640 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

INCLUDE
; }

1641 
YY_BREAK


1643 
YY_RULE_SETUP


1645 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

RESET
; }

1646 
YY_BREAK


1648 
YY_RULE_SETUP


1650 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

PARSER_DEBUG
; }

1651 
YY_BREAK


1653 
YY_RULE_SETUP


1655 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

SERVERS
; }

1656 
YY_BREAK


1658 
YY_RULE_SETUP


1660 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

END
; }

1661 
YY_BREAK


1663 
YY_RULE_SETUP


1665 { 
yyexåa
->
begö

yyãxt
;  
	gyyexåa
->
	g¥evious_tokí

CSL_ERROR
; }

1666 
YY_BREAK


1668 
YY_RULE_SETUP


1670 {  
yyexåa
->
¥evious_tokí

CSL_TRUE
; }

1671 
YY_BREAK


1673 
YY_RULE_SETUP


1675 {  
yyexåa
->
¥evious_tokí

CSL_FALSE
; }

1676 
YY_BREAK


1678 
YY_RULE_SETUP


1681 
yyexåa
->
begö

yyãxt
;

1682  
	gUNKNOWN_OPTION
;

1684 
YY_BREAK


1686 
YY_RULE_SETUP


1688 {  
CONSISTENT
; }

1689 
YY_BREAK


1691 
YY_RULE_SETUP


1693 {  
MODULA
; }

1694 
YY_BREAK


1696 
YY_RULE_SETUP


1698 {  
RANDOM
; }

1699 
YY_BREAK


1701 
YY_RULE_SETUP


1703 {  
MD5
; }

1704 
YY_BREAK


1706 
YY_RULE_SETUP


1708 {  
CRC
; }

1709 
YY_BREAK


1711 
YY_RULE_SETUP


1713 {  
FNV1_64
; }

1714 
YY_BREAK


1716 
YY_RULE_SETUP


1718 {  
FNV1A_64
; }

1719 
YY_BREAK


1721 
YY_RULE_SETUP


1723 {  
FNV1_32
; }

1724 
YY_BREAK


1726 
YY_RULE_SETUP


1728 {  
FNV1A_32
; }

1729 
YY_BREAK


1731 
YY_RULE_SETUP


1733 {  
HSIEH
; }

1734 
YY_BREAK


1736 
YY_RULE_SETUP


1738 {  
MURMUR
; }

1739 
YY_BREAK


1741 
YY_RULE_SETUP


1743 {  
JENKINS
; }

1744 
YY_BREAK


1746 
YY_RULE_SETUP


1749 
yyexåa
->
ho°«me
(
yyãxt
, 
yyÀng
, 
yylvÆ
->
£rvî
);

1750  
	gIPADDRESS
;

1752 
YY_BREAK


1754 
YY_RULE_SETUP


1757 i‡(
yyexåa
->
is_£rvî
())

1759 
yyexåa
->
ho°«me
(
yyãxt
, 
yyÀng
, 
yylvÆ
->
£rvî
);

1761  
	gHOSTNAME
;

1764 
	gyyexåa
->
°rög_buf„r
(
yyãxt
, 
yyÀng
, 
yylvÆ
->
°rög
);

1766  
	gSTRING
;

1768 
YY_BREAK


1771 
YY_RULE_SETUP


1774 
c⁄fig_gë_ãxt
(
yysˇ¬î
)[
yyÀng
 -1]= 0;

1775 
	gyyexåa
->
°rög_buf„r
(
yyãxt
 +1, 
yyÀng
 -2, 
yylvÆ
->
°rög
);

1776  
	gQUOTED_STRING
;

1778 
YY_BREAK


1780 
YY_RULE_SETUP


1783 
yyexåa
->
begö

yyãxt
;

1784  
	gUNKNOWN
;

1786 
YY_BREAK


1788 
YY_RULE_SETUP


1790 
YY_FATAL_ERROR
( "flex scanner jammed" );

1791 
	gYY_BREAK


1793 
YY_STATE_EOF
(
INITIAL
):

1794 
yyãrmö©e
();

1796 
	gYY_END_OF_BUFFER
:

1799 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - 
yyg
->
yyãxt_±r
) - 1;

1802 *
	gyy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1803 
YY_RESTORE_YY_MORE_OFFSET


1805 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1816 
yyg
->
yy_n_ch¨s
 = 
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1817 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

1818 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1828 i‡–
	gyyg
->
	gyy_c_buf_p
 <&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
] )

1830 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1832 
	gyyg
->
	gyy_c_buf_p
 = 
yyg
->
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

1834 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

1845 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 , 
yysˇ¬î
);

1847 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1849 i‡–
	gyy_√xt_°©e
 )

1852 
	gyy_˝
 = ++
yyg
->
yy_c_buf_p
;

1853 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1854 
	gyy_m©ch
;

1859 
	gyy_˝
 = 
yyg
->
yy_œ°_ac˚±ög_˝os
;

1860 
	gyy_cuºít_°©e
 = 
yyg
->
yy_œ°_ac˚±ög_°©e
;

1861 
	gyy_föd_a˘i⁄
;

1865  
yy_gë_√xt_buf„r
–
yysˇ¬î
 ) )

1867 
	gEOB_ACT_END_OF_FILE
:

1869 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 0;

1871 i‡–
c⁄fig_wøp
(
yysˇ¬î
 ) )

1882 
	gyyg
->
	gyy_c_buf_p
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1884 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1885 
	gdo_a˘i⁄
;

1890 i‡–! 
	gyyg
->
	gyy_did_buf„r_swôch_⁄_eof
 )

1891 
	gYY_NEW_FILE
;

1896 
	gEOB_ACT_CONTINUE_SCAN
:

1897 
yyg
->
yy_c_buf_p
 =

1898 
yyg
->
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

1900 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

1902 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1903 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1904 
	gyy_m©ch
;

1906 
	gEOB_ACT_LAST_MATCH
:

1907 
yyg
->
yy_c_buf_p
 =

1908 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
];

1910 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

1912 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1913 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1914 
	gyy_föd_a˘i⁄
;

1920 
YY_FATAL_ERROR
(

1933 
	$yy_gë_√xt_buf„r
 (
yysˇn_t
 
yysˇ¬î
)

1935 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1936 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1937 *
sour˚
 = 
yyg
->
yyãxt_±r
;

1938 
numbî_to_move
, 
i
;

1939 
ªt_vÆ
;

1941 i‡–
yyg
->
yy_c_buf_p
 > &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[yyg->
yy_n_ch¨s
 + 1] )

1942 
	`YY_FATAL_ERROR
(

1945 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1947 i‡–
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
 - 
YY_MORE_ADJ
 == 1 )

1952  
EOB_ACT_END_OF_FILE
;

1960  
EOB_ACT_LAST_MATCH
;

1967 
numbî_to_move
 = (Ë(
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
) - 1;

1969  
i
 = 0; i < 
numbî_to_move
; ++i )

1970 *(
de°
++Ë*(
sour˚
++);

1972 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1976 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars = 0;

1980 
yy_size_t
 
num_to_ªad
 =

1981 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1983  
num_to_ªad
 <= 0 )

1987 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER_LVALUE
;

1989 
yy_c_buf_p_off£t
 =

1990 (Ë(
yyg
->
yy_c_buf_p
 - 
b
->
yy_ch_buf
);

1992 i‡–
b
->
yy_is_our_buf„r
 )

1994 
yy_size_t
 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1996 i‡–
√w_size
 <= 0 )

1997 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1999 
b
->
yy_buf_size
 *= 2;

2001 
b
->
yy_ch_buf
 = (*)

2003 
	`c⁄fig_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 ,
yysˇ¬î
 );

2007 
b
->
yy_ch_buf
 = 0;

2009 i‡–! 
b
->
yy_ch_buf
 )

2010 
	`YY_FATAL_ERROR
(

2013 
yyg
->
yy_c_buf_p
 = &
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

2015 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

2016 
numbî_to_move
 - 1;

2020 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

2021 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

2024 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

2025 
yyg
->
yy_n_ch¨s
, 
num_to_ªad
 );

2027 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

2030 i‡–
yyg
->
yy_n_ch¨s
 == 0 )

2032 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

2034 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

2035 
	`c⁄fig_ª°¨t
(
yyö
 ,
yysˇ¬î
);

2040 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

2041 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

2042 
YY_BUFFER_EOF_PENDING
;

2047 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

2049 i‡((
yy_size_t
Ë(
yyg
->
yy_n_ch¨s
 + 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

2051 
yy_size_t
 
√w_size
 = 
yyg
->
yy_n_ch¨s
 + 
numbî_to_move
 + (yyg->yy_n_chars >> 1);

2052 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`c⁄fig_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 ,
yysˇ¬î
 );

2053 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

2054 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

2057 
yyg
->
yy_n_ch¨s
 +
numbî_to_move
;

2058 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
] = 
YY_END_OF_BUFFER_CHAR
;

2059 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
 + 1] = 
YY_END_OF_BUFFER_CHAR
;

2061 
yyg
->
yyãxt_±r
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

2063  
ªt_vÆ
;

2064 
	}
}

2068 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 (
yysˇn_t
 
yysˇ¬î
)

2070 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

2071 *
yy_˝
;

2072 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2074 
yy_cuºít_°©e
 = 
yyg
->
yy_°¨t
;

2075 
yy_cuºít_°©e
 +
	`YY_AT_BOL
();

2077  
yy_˝
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
; yy_˝ < yyg->
yy_c_buf_p
; ++yy_cp )

2079 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

2080 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

2082 
yyg
->
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

2083 
yyg
->
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

2085  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

2087 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

2088 i‡–
yy_cuºít_°©e
 >= 538 )

2089 
yy_c
 = 
yy_mëa
[() yy_c];

2091 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

2094  
yy_cuºít_°©e
;

2095 
	}
}

2102 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 , 
yysˇn_t
 
yysˇ¬î
)

2104 
yy_is_jam
;

2105 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2106 *
yy_˝
 = 
yyg
->
yy_c_buf_p
;

2108 
YY_CHAR
 
yy_c
 = 1;

2109 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

2111 
yyg
->
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

2112 
yyg
->
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

2114  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

2116 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

2117 i‡–
yy_cuºít_°©e
 >= 538 )

2118 
yy_c
 = 
yy_mëa
[() yy_c];

2120 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

2121 
yy_is_jam
 = (
yy_cuºít_°©e
 == 537);

2123 ()
yyg
;

2124  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

2125 
	}
}

2127 #i‚de‡
YY_NO_INPUT


2128 #ifde‡
__˝lu•lus


2129 
	$yyöput
 (
yysˇn_t
 
yysˇ¬î
)

2131 
	$öput
 (
yysˇn_t
 
yysˇ¬î
)

2135 
c
;

2136 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2138 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

2140 i‡–*
yyg
->
yy_c_buf_p
 =
YY_END_OF_BUFFER_CHAR
 )

2146 i‡–
yyg
->
yy_c_buf_p
 < &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[yyg->
yy_n_ch¨s
] )

2148 *
yyg
->
yy_c_buf_p
 = '\0';

2152 
yy_size_t
 
off£t
 = 
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
;

2153 ++
yyg
->
yy_c_buf_p
;

2155  
	`yy_gë_√xt_buf„r
–
yysˇ¬î
 ) )

2157 
EOB_ACT_LAST_MATCH
:

2169 
	`c⁄fig_ª°¨t
(
yyö
 ,
yysˇ¬î
);

2173 
EOB_ACT_END_OF_FILE
:

2175 i‡–
	`c⁄fig_wøp
(
yysˇ¬î
 ) )

2176  
EOF
;

2178 i‡–! 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 )

2179 
YY_NEW_FILE
;

2180 #ifde‡
__˝lu•lus


2181  
	`yyöput
(
yysˇ¬î
);

2183  
	`öput
(
yysˇ¬î
);

2187 
EOB_ACT_CONTINUE_SCAN
:

2188 
yyg
->
yy_c_buf_p
 = yyg->
yyãxt_±r
 + 
off£t
;

2194 
c
 = *(*Ë
yyg
->
yy_c_buf_p
;

2195 *
yyg
->
yy_c_buf_p
 = '\0';

2196 
yyg
->
yy_hﬁd_ch¨
 = *++yyg->
yy_c_buf_p
;

2198 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = (
c
 == '\n');

2200  
c
;

2201 
	}
}

2209 
	$c⁄fig_ª°¨t
 (
FILE
 * 
öput_fûe
 , 
yysˇn_t
 
yysˇ¬î
)

2211 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2213 i‡–! 
YY_CURRENT_BUFFER
 ){

2214 
	`c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
);

2215 
YY_CURRENT_BUFFER_LVALUE
 =

2216 
	`c⁄fig__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
);

2219 
	`c⁄fig__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 ,
yysˇ¬î
);

2220 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2221 
	}
}

2227 
	$c⁄fig__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 , 
yysˇn_t
 
yysˇ¬î
)

2229 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2236 
	`c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
);

2237 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

2240 i‡–
YY_CURRENT_BUFFER
 )

2243 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

2244 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = 
yyg
->
yy_c_buf_p
;

2245 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

2248 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

2249 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2256 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

2257 
	}
}

2259 
	$c⁄fig__lﬂd_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
)

2261 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2262 
yyg
->
yy_n_ch¨s
 = 
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

2263 
yyg
->
yyãxt_±r
 = yyg->
yy_c_buf_p
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

2264 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

2265 
yyg
->
yy_hﬁd_ch¨
 = *yyg->
yy_c_buf_p
;

2266 
	}
}

2274 
YY_BUFFER_STATE
 
	$c⁄fig__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2276 
YY_BUFFER_STATE
 
b
;

2278 
b
 = (
YY_BUFFER_STATE
Ë
	`c⁄fig_Æloc
(–
yy_buf„r_°©e
 ) ,
yysˇ¬î
 );

2279 i‡–! 
b
 )

2280 
	`YY_FATAL_ERROR
( "out of dynamic memory in config__create_buffer()" );

2282 
b
->
yy_buf_size
 = 
size
;

2287 
b
->
yy_ch_buf
 = (*Ë
	`c⁄fig_Æloc
(b->
yy_buf_size
 + 2 ,
yysˇ¬î
 );

2288 i‡–! 
b
->
yy_ch_buf
 )

2289 
	`YY_FATAL_ERROR
( "out of dynamic memory in config__create_buffer()" );

2291 
b
->
yy_is_our_buf„r
 = 1;

2293 
	`c⁄fig__öô_buf„r
(
b
,
fûe
 ,
yysˇ¬î
);

2295  
b
;

2296 
	}
}

2302 
	$c⁄fig__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 , 
yysˇn_t
 
yysˇ¬î
)

2304 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2306 i‡–! 
b
 )

2309 i‡–
b
 =
YY_CURRENT_BUFFER
 )

2310 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

2312 i‡–
b
->
yy_is_our_buf„r
 )

2313 
	`c⁄fig_‰ì
((*Ë
b
->
yy_ch_buf
 ,
yysˇ¬î
 );

2315 
	`c⁄fig_‰ì
((*Ë
b
 ,
yysˇ¬î
 );

2316 
	}
}

2322 
	$c⁄fig__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 , 
yysˇn_t
 
yysˇ¬î
)

2325 
€ºno
 = 
î∫o
;

2326 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2328 
	`c⁄fig__Êush_buf„r
(
b
 ,
yysˇ¬î
);

2330 
b
->
yy_öput_fûe
 = 
fûe
;

2331 
b
->
yy_fûl_buf„r
 = 1;

2337 i‡(
b
 !
YY_CURRENT_BUFFER
){

2338 
b
->
yy_bs_löío
 = 1;

2339 
b
->
yy_bs_cﬁumn
 = 0;

2342 
b
->
yy_is_öãø˘ive
 = 0;

2344 
î∫o
 = 
€ºno
;

2345 
	}
}

2351 
	$c⁄fig__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 , 
yysˇn_t
 
yysˇ¬î
)

2353 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2354 i‡–! 
b
 )

2357 
b
->
yy_n_ch¨s
 = 0;

2363 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

2364 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

2366 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

2368 
b
->
yy_©_bﬁ
 = 1;

2369 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

2371 i‡–
b
 =
YY_CURRENT_BUFFER
 )

2372 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2373 
	}
}

2381 
	$c⁄fig_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 , 
yysˇn_t
 
yysˇ¬î
)

2383 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2384 i‡(
√w_buf„r
 =
NULL
)

2387 
	`c⁄fig_ísuª_buf„r_°ack
(
yysˇ¬î
);

2390 i‡–
YY_CURRENT_BUFFER
 )

2393 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

2394 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = 
yyg
->
yy_c_buf_p
;

2395 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

2399 i‡(
YY_CURRENT_BUFFER
)

2400 
yyg
->
yy_buf„r_°ack_t›
++;

2401 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

2404 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2405 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

2406 
	}
}

2412 
	$c⁄fig_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
)

2414 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2415 i‡(!
YY_CURRENT_BUFFER
)

2418 
	`c⁄fig__dñëe_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
);

2419 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

2420 i‡(
yyg
->
yy_buf„r_°ack_t›
 > 0)

2421 --
yyg
->
yy_buf„r_°ack_t›
;

2423 i‡(
YY_CURRENT_BUFFER
) {

2424 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2425 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

2427 
	}
}

2432 
	$c⁄fig_ísuª_buf„r_°ack
 (
yysˇn_t
 
yysˇ¬î
)

2434 
yy_size_t
 
num_to_Æloc
;

2435 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2437 i‡(!
yyg
->
yy_buf„r_°ack
) {

2443 
num_to_Æloc
 = 1;

2444 
yyg
->
yy_buf„r_°ack
 = (
yy_buf„r_°©e
**)
c⁄fig_Æloc


2445 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

2446 , 
yysˇ¬î
);

2447 i‡–! 
yyg
->
yy_buf„r_°ack
 )

2448 
	`YY_FATAL_ERROR
( "out of dynamic memory in config_ensure_buffer_stack()" );

2450 
	`mem£t
(
yyg
->
yy_buf„r_°ack
, 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

2452 
yyg
->
yy_buf„r_°ack_max
 = 
num_to_Æloc
;

2453 
yyg
->
yy_buf„r_°ack_t›
 = 0;

2457 i‡(
yyg
->
yy_buf„r_°ack_t›
 >(yyg->
yy_buf„r_°ack_max
) - 1){

2460 
grow_size
 = 8 ;

2462 
num_to_Æloc
 = 
yyg
->
yy_buf„r_°ack_max
 + 
grow_size
;

2463 
yyg
->
yy_buf„r_°ack
 = (
yy_buf„r_°©e
**)
c⁄fig_ªÆloc


2464 (
yyg
->
yy_buf„r_°ack
,

2465 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

2466 , 
yysˇ¬î
);

2467 i‡–! 
yyg
->
yy_buf„r_°ack
 )

2468 
	`YY_FATAL_ERROR
( "out of dynamic memory in config_ensure_buffer_stack()" );

2471 
	`mem£t
(
yyg
->
yy_buf„r_°ack
 + yyg->
yy_buf„r_°ack_max
, 0, 
grow_size
 * (
yy_buf„r_°©e
*));

2472 
yyg
->
yy_buf„r_°ack_max
 = 
num_to_Æloc
;

2474 
	}
}

2482 
YY_BUFFER_STATE
 
	$c⁄fig__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2484 
YY_BUFFER_STATE
 
b
;

2486 i‡–
size
 < 2 ||

2487 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

2488 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

2492 
b
 = (
YY_BUFFER_STATE
Ë
	`c⁄fig_Æloc
(–
yy_buf„r_°©e
 ) ,
yysˇ¬î
 );

2493 i‡–! 
b
 )

2494 
	`YY_FATAL_ERROR
( "out of dynamic memory in config__scan_buffer()" );

2496 
b
->
yy_buf_size
 = 
size
 - 2;

2497 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

2498 
b
->
yy_is_our_buf„r
 = 0;

2499 
b
->
yy_öput_fûe
 = 0;

2500 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

2501 
b
->
yy_is_öãø˘ive
 = 0;

2502 
b
->
yy_©_bﬁ
 = 1;

2503 
b
->
yy_fûl_buf„r
 = 0;

2504 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

2506 
	`c⁄fig__swôch_to_buf„r
(
b
 ,
yysˇ¬î
 );

2508  
b
;

2509 
	}
}

2519 
YY_BUFFER_STATE
 
	$c⁄fig__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 , 
yysˇn_t
 
yysˇ¬î
)

2522  
	`c⁄fig__sˇn_byãs
(
yy°r
,
	`°æí
(yy°rË,
yysˇ¬î
);

2523 
	}
}

2532 
YY_BUFFER_STATE
 
	$c⁄fig__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
yy_size_t
 
_yybyãs_Àn
 , 
yysˇn_t
 
yysˇ¬î
)

2534 
YY_BUFFER_STATE
 
b
;

2535 *
buf
;

2536 
yy_size_t
 
n
;

2537 
i
;

2540 
n
 = 
_yybyãs_Àn
 + 2;

2541 
buf
 = (*Ë
	`c⁄fig_Æloc
(
n
 ,
yysˇ¬î
 );

2542 i‡–! 
buf
 )

2543 
	`YY_FATAL_ERROR
( "out of dynamic memory in config__scan_bytes()" );

2545  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

2546 
buf
[
i
] = 
yybyãs
[i];

2548 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

2550 
b
 = 
	`c⁄fig__sˇn_buf„r
(
buf
,
n
 ,
yysˇ¬î
);

2551 i‡–! 
b
 )

2552 
	`YY_FATAL_ERROR
( "bad buffer in config__scan_bytes()" );

2557 
b
->
yy_is_our_buf„r
 = 1;

2559  
b
;

2560 
	}
}

2562 #i‚de‡
YY_EXIT_FAILURE


2563 
	#YY_EXIT_FAILURE
 2

	)

2566 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 , 
yysˇn_t
 
yysˇ¬î
)

2568 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

2569 
	`exô
–
YY_EXIT_FAILURE
 );

2570 
	}
}

2574 #unde‡
yyÀss


2575 
	#yyÀss
(
n
) \

2579 
yyÀss_ma¸o_¨g
 = (
n
); \

2580 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

2581 
yyãxt
[
yyÀng
] = 
yyg
->
yy_hﬁd_ch¨
; \

2582 
yyg
->
yy_c_buf_p
 = 
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

2583 
yyg
->
yy_hﬁd_ch¨
 = *yyg->
yy_c_buf_p
; \

2584 *
yyg
->
yy_c_buf_p
 = '\0'; \

2585 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

2587  0 )

	)

2594 
YY_EXTRA_TYPE
 
	$c⁄fig_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
)

2596 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2597  
yyexåa
;

2598 
	}
}

2603 
	$c⁄fig_gë_löío
 (
yysˇn_t
 
yysˇ¬î
)

2605 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2607 i‡(! 
YY_CURRENT_BUFFER
)

2610  
yylöío
;

2611 
	}
}

2616 
	$c⁄fig_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
)

2618 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2620 i‡(! 
YY_CURRENT_BUFFER
)

2623  
yycﬁumn
;

2624 
	}
}

2629 
FILE
 *
	$c⁄fig_gë_ö
 (
yysˇn_t
 
yysˇ¬î
)

2631 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2632  
yyö
;

2633 
	}
}

2638 
FILE
 *
	$c⁄fig_gë_out
 (
yysˇn_t
 
yysˇ¬î
)

2640 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2641  
yyout
;

2642 
	}
}

2647 
yy_size_t
 
	$c⁄fig_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
)

2649 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2650  
yyÀng
;

2651 
	}
}

2657 *
	$c⁄fig_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
)

2659 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2660  
yyãxt
;

2661 
	}
}

2667 
	$c⁄fig_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 , 
yysˇn_t
 
yysˇ¬î
)

2669 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2670 
yyexåa
 = 
u£r_deföed
 ;

2671 
	}
}

2677 
	$c⁄fig_£t_löío
 (
löe_numbî
 , 
yysˇn_t
 
yysˇ¬î
)

2679 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2682 i‡(! 
YY_CURRENT_BUFFER
 )

2683 
	`YY_FATAL_ERROR
( "config_set_lineno called withÇo buffer" );

2685 
yylöío
 = 
löe_numbî
;

2686 
	}
}

2692 
	$c⁄fig_£t_cﬁumn
 (
cﬁumn_no
 , 
yysˇn_t
 
yysˇ¬î
)

2694 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2697 i‡(! 
YY_CURRENT_BUFFER
 )

2698 
	`YY_FATAL_ERROR
( "config_set_column called withÇo buffer" );

2700 
yycﬁumn
 = 
cﬁumn_no
;

2701 
	}
}

2709 
	$c⁄fig_£t_ö
 (
FILE
 * 
ö_°r
 , 
yysˇn_t
 
yysˇ¬î
)

2711 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2712 
yyö
 = 
ö_°r
 ;

2713 
	}
}

2715 
	$c⁄fig_£t_out
 (
FILE
 * 
out_°r
 , 
yysˇn_t
 
yysˇ¬î
)

2717 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2718 
yyout
 = 
out_°r
 ;

2719 
	}
}

2721 
	$c⁄fig_gë_debug
 (
yysˇn_t
 
yysˇ¬î
)

2723 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2724  
yy_Êex_debug
;

2725 
	}
}

2727 
	$c⁄fig_£t_debug
 (
bdebug
 , 
yysˇn_t
 
yysˇ¬î
)

2729 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2730 
yy_Êex_debug
 = 
bdebug
 ;

2731 
	}
}

2735 
YYSTYPE
 * 
	$c⁄fig_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
)

2737 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2738  
yylvÆ
;

2739 
	}
}

2741 
	$c⁄fig_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

2743 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2744 
yylvÆ
 = 
yylvÆ_∑øm
;

2745 
	}
}

2754 
	$c⁄fig_Àx_öô
(
yysˇn_t
* 
±r_yy_globÆs
)

2757 i‡(
±r_yy_globÆs
 =
NULL
){

2758 
î∫o
 = 
EINVAL
;

2762 *
±r_yy_globÆs
 = (
yysˇn_t
Ë
	`c⁄fig_Æloc
 ( –
yyguts_t
 ), 
NULL
 );

2764 i‡(*
±r_yy_globÆs
 =
NULL
){

2765 
î∫o
 = 
ENOMEM
;

2770 
	`mem£t
(*
±r_yy_globÆs
,0x00,(
yyguts_t
));

2772  
	`yy_öô_globÆs
 ( *
±r_yy_globÆs
 );

2773 
	}
}

2783 
	$c⁄fig_Àx_öô_exåa
(
YY_EXTRA_TYPE
 
yy_u£r_deföed
,
yysˇn_t
* 
±r_yy_globÆs
 )

2786 
yyguts_t
 
dummy_yyguts
;

2788 
	`c⁄fig_£t_exåa
 (
yy_u£r_deföed
, &
dummy_yyguts
);

2790 i‡(
±r_yy_globÆs
 =
NULL
){

2791 
î∫o
 = 
EINVAL
;

2795 *
±r_yy_globÆs
 = (
yysˇn_t
Ë
	`c⁄fig_Æloc
 ( –
yyguts_t
 ), &
dummy_yyguts
 );

2797 i‡(*
±r_yy_globÆs
 =
NULL
){

2798 
î∫o
 = 
ENOMEM
;

2804 
	`mem£t
(*
±r_yy_globÆs
,0x00,(
yyguts_t
));

2806 
	`c⁄fig_£t_exåa
 (
yy_u£r_deföed
, *
±r_yy_globÆs
);

2808  
	`yy_öô_globÆs
 ( *
±r_yy_globÆs
 );

2809 
	}
}

2811 
	$yy_öô_globÆs
 (
yysˇn_t
 
yysˇ¬î
)

2813 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2818 
yyg
->
yy_buf„r_°ack
 = 0;

2819 
yyg
->
yy_buf„r_°ack_t›
 = 0;

2820 
yyg
->
yy_buf„r_°ack_max
 = 0;

2821 
yyg
->
yy_c_buf_p
 = (*) 0;

2822 
yyg
->
yy_öô
 = 0;

2823 
yyg
->
yy_°¨t
 = 0;

2825 
yyg
->
yy_°¨t_°ack_±r
 = 0;

2826 
yyg
->
yy_°¨t_°ack_dïth
 = 0;

2827 
yyg
->
yy_°¨t_°ack
 = 
NULL
;

2830 #ifde‡
YY_STDINIT


2831 
yyö
 = 
°dö
;

2832 
yyout
 = 
°dout
;

2834 
yyö
 = (
FILE
 *) 0;

2835 
yyout
 = (
FILE
 *) 0;

2842 
	}
}

2845 
	$c⁄fig_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
)

2847 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2850 
YY_CURRENT_BUFFER
){

2851 
	`c⁄fig__dñëe_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
 );

2852 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

2853 
	`c⁄fig_p›_buf„r_°©e
(
yysˇ¬î
);

2857 
	`c⁄fig_‰ì
(
yyg
->
yy_buf„r_°ack
 ,
yysˇ¬î
);

2858 
yyg
->
yy_buf„r_°ack
 = 
NULL
;

2861 
	`c⁄fig_‰ì
(
yyg
->
yy_°¨t_°ack
 ,
yysˇ¬î
 );

2862 
yyg
->
yy_°¨t_°ack
 = 
NULL
;

2866 
	`yy_öô_globÆs
–
yysˇ¬î
);

2869 
	`c⁄fig_‰ì
 ( 
yysˇ¬î
 , yyscanner );

2870 
yysˇ¬î
 = 
NULL
;

2872 
	}
}

2878 #i‚de‡
yyãxt_±r


2879 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 , 
yysˇn_t
 
yysˇ¬î
)

2881 
i
;

2882  
i
 = 0; i < 
n
; ++i )

2883 
s1
[
i
] = 
s2
[i];

2884 
	}
}

2887 #ifde‡
YY_NEED_STRLEN


2888 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 , 
yysˇn_t
 
yysˇ¬î
)

2890 
n
;

2891  
n
 = 0; 
s
[n]; ++n )

2894  
n
;

2895 
	}
}

2898 *
	$c⁄fig_Æloc
 (
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2900  (*Ë
	`mÆloc
–
size
 );

2901 
	}
}

2903 *
	$c⁄fig_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2912  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

2913 
	}
}

2915 
	$c⁄fig_‰ì
 (* 
±r
 , 
yysˇn_t
 
yysˇ¬î
)

2917 
	`‰ì
–(*Ë
±r
 );

2918 
	}
}

2920 
	#YYTABLES_NAME
 "yyèbÀs"

	)

2926 
	gC⁄ãxt
::
	$öô_sˇ¬î
()

2928 
	`c⁄fig_Àx_öô
(&
sˇ¬î
);

2929 
	`c⁄fig_£t_exåa
(
this
,
sˇ¬î
);

2930 
	}
}

2932 
	gC⁄ãxt
::
	$de°roy_sˇ¬î
()

2934 ()
yy_Áèl_îr‹
;

2935 
	`c⁄fig_Àx_de°roy
(
sˇ¬î
);

2936 
	}
}

	@libmemcached/csl/scanner.h

1 #i‚de‡
c⁄fig_HEADER_H


2 
	#c⁄fig_HEADER_H
 1

	)

3 
	#c⁄fig_IN_HEADER
 1

	)

8 
	~<libmemˇched/c¶/comm⁄.h
>

9 
	~<libmemˇched/c¶/c⁄ãxt.h
>

10 
	~<libmemˇched/c¶/∑r£r.h
>

11 
	~<libmemˇched/c¶/symbﬁ.h
>

13 #i‚de‡
__INTEL_COMPILER


14 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

15 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsign-compare"

16 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

17 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wmissing-declarations"

18 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-result"

19 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wmissing-noreturn"

22 #ifde‡
__˛™g__


23 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wshorten-64-to-32"

26 #i‚de‡
__INTEL_COMPILER


27 #i‚de‡
__˛™g__


28 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wlogical-op"

37 
	#YY_INT_ALIGNED
 

	)

41 
	#FLEX_SCANNER


	)

42 
	#YY_FLEX_MAJOR_VERSION
 2

	)

43 
	#YY_FLEX_MINOR_VERSION
 5

	)

44 
	#YY_FLEX_SUBMINOR_VERSION
 36

	)

45 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

46 
	#FLEX_BETA


	)

52 
	~<°dio.h
>

53 
	~<°rög.h
>

54 
	~<î∫o.h
>

55 
	~<°dlib.h
>

61 #i‚de‡
FLEXINT_H


62 
	#FLEXINT_H


	)

66 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

71 #i‚de‡
__STDC_LIMIT_MACROS


72 
	#__STDC_LIMIT_MACROS
 1

	)

75 
	~<öây≥s.h
>

76 
öt8_t
 
	tÊex_öt8_t
;

77 
uöt8_t
 
	tÊex_uöt8_t
;

78 
öt16_t
 
	tÊex_öt16_t
;

79 
uöt16_t
 
	tÊex_uöt16_t
;

80 
öt32_t
 
	tÊex_öt32_t
;

81 
uöt32_t
 
	tÊex_uöt32_t
;

83 sig√d 
	tÊex_öt8_t
;

84 
	tÊex_öt16_t
;

85 
	tÊex_öt32_t
;

86 
	tÊex_uöt8_t
;

87 
	tÊex_uöt16_t
;

88 
	tÊex_uöt32_t
;

91 #i‚de‡
INT8_MIN


92 
	#INT8_MIN
 (-128)

	)

94 #i‚de‡
INT16_MIN


95 
	#INT16_MIN
 (-32767-1)

	)

97 #i‚de‡
INT32_MIN


98 
	#INT32_MIN
 (-2147483647-1)

	)

100 #i‚de‡
INT8_MAX


101 
	#INT8_MAX
 (127)

	)

103 #i‚de‡
INT16_MAX


104 
	#INT16_MAX
 (32767)

	)

106 #i‚de‡
INT32_MAX


107 
	#INT32_MAX
 (2147483647)

	)

109 #i‚de‡
UINT8_MAX


110 
	#UINT8_MAX
 (255U)

	)

112 #i‚de‡
UINT16_MAX


113 
	#UINT16_MAX
 (65535U)

	)

115 #i‚de‡
UINT32_MAX


116 
	#UINT32_MAX
 (4294967295U)

	)

123 #ifde‡
__˝lu•lus


126 
	#YY_USE_CONST


	)

131 #i‡
deföed
 (
__STDC__
)

133 
	#YY_USE_CONST


	)

138 #ifde‡
YY_USE_CONST


139 
	#yyc⁄°
 c⁄°

	)

141 
	#yyc⁄°


	)

145 #i‚de‡
YY_TYPEDEF_YY_SCANNER_T


146 
	#YY_TYPEDEF_YY_SCANNER_T


	)

147 * 
	tyysˇn_t
;

152 
	#yyö
 
yyg
->
yyö_r


	)

153 
	#yyout
 
yyg
->
yyout_r


	)

154 
	#yyexåa
 
yyg
->
yyexåa_r


	)

155 
	#yyÀng
 
yyg
->
yyÀng_r


	)

156 
	#yyãxt
 
yyg
->
yyãxt_r


	)

157 
	#yylöío
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_löío
)

	)

158 
	#yycﬁumn
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_cﬁumn
)

	)

159 
	#yy_Êex_debug
 
yyg
->
yy_Êex_debug_r


	)

162 #i‚de‡
YY_BUF_SIZE


163 
	#YY_BUF_SIZE
 16384

	)

166 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


167 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

168 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

171 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


172 
	#YY_TYPEDEF_YY_SIZE_T


	)

173 
size_t
 
	tyy_size_t
;

176 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


177 
	#YY_STRUCT_YY_BUFFER_STATE


	)

178 
	syy_buf„r_°©e


180 
FILE
 *
	myy_öput_fûe
;

182 *
	myy_ch_buf
;

183 *
	myy_buf_pos
;

188 
yy_size_t
 
	myy_buf_size
;

193 
yy_size_t
 
	myy_n_ch¨s
;

199 
	myy_is_our_buf„r
;

206 
	myy_is_öãø˘ive
;

212 
	myy_©_bﬁ
;

214 
	myy_bs_löío
;

215 
	myy_bs_cﬁumn
;

220 
	myy_fûl_buf„r
;

222 
	myy_buf„r_°©us
;

227 
c⁄fig_ª°¨t
 (
FILE
 *
öput_fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

228 
c⁄fig__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

229 
YY_BUFFER_STATE
 
c⁄fig__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 ,
yysˇn_t
 
yysˇ¬î
 );

230 
c⁄fig__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

231 
c⁄fig__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

232 
c⁄fig_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

233 
c⁄fig_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

235 
YY_BUFFER_STATE
 
c⁄fig__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 ,
yysˇn_t
 
yysˇ¬î
 );

236 
YY_BUFFER_STATE
 
c⁄fig__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

237 
YY_BUFFER_STATE
 
c⁄fig__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
yy_size_t
 
Àn
 ,
yysˇn_t
 
yysˇ¬î
 );

239 *
c⁄fig_Æloc
 (
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

240 *
c⁄fig_ªÆloc
 (*,
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

241 
c⁄fig_‰ì
 (* ,
yysˇn_t
 
yysˇ¬î
 );

245 
	#c⁄fig_wøp
(
yysˇ¬î
Ë1

	)

246 
	#YY_SKIP_YYWRAP


	)

248 
	#yyãxt_±r
 
yyãxt_r


	)

250 #ifde‡
YY_HEADER_EXPORT_START_CONDITIONS


251 
	#INITIAL
 0

	)

255 #i‚de‡
YY_NO_UNISTD_H


260 
	~<uni°d.h
>

263 #i‚de‡
YY_EXTRA_TYPE


264 
	#YY_EXTRA_TYPE
 *

	)

267 
c⁄fig_Àx_öô
 (
yysˇn_t
* 
sˇ¬î
);

269 
c⁄fig_Àx_öô_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
,
yysˇn_t
* 
sˇ¬î
);

274 
c⁄fig_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
 );

276 
c⁄fig_gë_debug
 (
yysˇn_t
 
yysˇ¬î
 );

278 
c⁄fig_£t_debug
 (
debug_Êag
 ,
yysˇn_t
 
yysˇ¬î
 );

280 
YY_EXTRA_TYPE
 
c⁄fig_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
 );

282 
c⁄fig_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 ,
yysˇn_t
 
yysˇ¬î
 );

284 
FILE
 *
c⁄fig_gë_ö
 (
yysˇn_t
 
yysˇ¬î
 );

286 
c⁄fig_£t_ö
 (
FILE
 * 
ö_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

288 
FILE
 *
c⁄fig_gë_out
 (
yysˇn_t
 
yysˇ¬î
 );

290 
c⁄fig_£t_out
 (
FILE
 * 
out_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

292 
yy_size_t
 
c⁄fig_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
 );

294 *
c⁄fig_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
 );

296 
c⁄fig_gë_löío
 (
yysˇn_t
 
yysˇ¬î
 );

298 
c⁄fig_£t_löío
 (
löe_numbî
 ,
yysˇn_t
 
yysˇ¬î
 );

300 
c⁄fig_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
 );

302 
c⁄fig_£t_cﬁumn
 (
cﬁumn_no
 ,
yysˇn_t
 
yysˇ¬î
 );

304 
YYSTYPE
 * 
c⁄fig_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
 );

306 
c⁄fig_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

312 #i‚de‡
YY_SKIP_YYWRAP


313 #ifde‡
__˝lu•lus


314 "C" 
c⁄fig_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

316 
c⁄fig_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

320 #i‚de‡
yyãxt_±r


321 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,,
yysˇn_t
 
yysˇ¬î
);

324 #ifde‡
YY_NEED_STRLEN


325 
yy_Êex_°æí
 (
yyc⁄°
 * ,
yysˇn_t
 
yysˇ¬î
);

328 #i‚de‡
YY_NO_INPUT


333 #i‚de‡
YY_READ_BUF_SIZE


334 
	#YY_READ_BUF_SIZE
 8192

	)

338 #i‚de‡
YY_START_STACK_INCR


339 
	#YY_START_STACK_INCR
 25

	)

345 #i‚de‡
YY_DECL


346 
	#YY_DECL_IS_OURS
 1

	)

348 
c⁄fig_Àx
 \

349 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
);

351 
	#YY_DECL
 
c⁄fig_Àx
 \

352 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

	)

357 #unde‡
YY_NEW_FILE


358 #unde‡
YY_FLUSH_BUFFER


359 #unde‡
yy_£t_bﬁ


360 #unde‡
yy_√w_buf„r


361 #unde‡
yy_£t_öãø˘ive


362 #unde‡
YY_DO_BEFORE_ACTION


364 #ifde‡
YY_DECL_IS_OURS


365 #unde‡
YY_DECL_IS_OURS


366 #unde‡
YY_DECL


373 #unde‡
c⁄fig_IN_HEADER


	@libmemcached/csl/scanner.l

38 %
t›
{

40 
	~<libmemˇched/c¶/comm⁄.h
>

41 
	~<libmemˇched/c¶/c⁄ãxt.h
>

42 
	~<libmemˇched/c¶/∑r£r.h
>

43 
	~<libmemˇched/c¶/symbﬁ.h
>

45 #i‚de‡
__INTEL_COMPILER


46 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

47 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsign-compare"

48 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

49 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wmissing-declarations"

50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-result"

51 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wmissing-noreturn"

54 #ifde‡
__˛™g__


55 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wshorten-64-to-32"

58 #i‚de‡
__INTEL_COMPILER


59 #i‚de‡
__˛™g__


60 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wlogical-op"

68 
	#PARAM
 
	`yygë_exåa
(
yysˇ¬î
)

	)

70 
	#gë_Àx_ch¨s
(
buf„r
, 
ªsu…
, 
max_size
, 
c⁄ãxt
) \

72 i‡(
c⁄ãxt
->
pos
 >c⁄ãxt->
Àngth
) \

74 
ªsu…

YY_NULL
; \

78 
ªsu…
()(
c⁄ãxt
->
Àngth
 - c⁄ãxt->
pos
); \

79 (
size_t
)
ªsu…
 > (size_t)
max_size
 ?Ñesult= max_size : 0; \

80 
	`mem˝y
(
buf„r
, 
c⁄ãxt
->
buf
 + c⁄ãxt->
pos
, 
ªsu…
); \

81 
c⁄ãxt
->
pos
 +
ªsu…
; \

83 }

	)

85 
	#YY_FATAL_ERROR
(
msg
) \

87 }

	)

90 
	#YY_INPUT
(
buf„r
, 
ªsu…
, 
max_size
Ë
	`gë_Àx_ch¨s
(buf„r,Ñesu…, max_size, 
PARAM
)

	)

94 %
›ti⁄
 
no°döô


95 %
›ti⁄
 8b
ô


96 %
›ti⁄
 
w¨n


97 %
›ti⁄
 
bis⁄
-
bridge


98 %
›ti⁄
 
√vî
-
öãø˘ive


99 %
›ti⁄
 -
ö£nsôive


100 %
›ti⁄
 
nodeÁu…


101 %
›ti⁄
 
noöput


102 %
›ti⁄
 
nou≈ut


103 %
›ti⁄
 
noyywøp


104 %
›ti⁄
 
outfûe
="libmemˇched/c¶/sˇ¬î.cc" 
hódî
-
fûe
="libmemcached/csl/scanner.h"

105 %
›ti⁄
 
≥rf
-
ªp‹t


106 %
›ti⁄
 
¥efix
="config_"

107 %
›ti⁄
 
ªíå™t


109 %% /* 
	$yyÀx
 */

112 =|,|[ ] {  
yyãxt
[0];}

114 [[:
digô
:]]+ { 
yylvÆ
->
numbî

	`©oi
(
yyãxt
);  (
NUMBER
); }

116 :[[:
digô
:]]{1,5} { 
yylvÆ
->
numbî

	`©oi
(
yyãxt
 +1);  
PORT
; }

118 "/?"[[:
digô
:]]{1,5} { 
yylvÆ
->
numbî

	`©oi
(
yyãxt
 +2);  
WEIGHT_START
; }

120 [\
t
\
r
\
n
] ;

123 ^#.*
$
 {

124  
COMMENT
;

127 "--SERVER=" { 
yyexåa
->
begö

yyãxt
; yyexåa->
	`£t_£rvî
();  yyexåa->
¥evious_tokí

SERVER
; }

129 "--SOCKET=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

CSL_SOCKET
; }

131 "--BINARY-PROTOCOL" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

BINARY_PROTOCOL
; }

132 "--BUFFER-REQUESTS" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

BUFFER_REQUESTS
; }

133 "--CONFIGURE-FILE=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

CONFIGURE_FILE
; }

134 "--CONNECT-TIMEOUT=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

CONNECT_TIMEOUT
; }

135 "--DISTRIBUTION=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

DISTRIBUTION
; }

136 "--HASH-WITH-NAMESPACE" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

HASH_WITH_NAMESPACE
; }

137 "--HASH=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

HASH
; }

138 "--IO-BYTES-WATERMARK=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

IO_BYTES_WATERMARK
; }

139 "--IO-KEY-PREFETCH=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

IO_KEY_PREFETCH
; }

140 "--IO-MSG-WATERMARK=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

IO_MSG_WATERMARK
; }

141 "--NOREPLY" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

NOREPLY
; }

142 "--NUMBER-OF-REPLICAS=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

NUMBER_OF_REPLICAS
; }

143 "--POLL-TIMEOUT=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

POLL_TIMEOUT
; }

144 "--RANDOMIZE-REPLICA-READ" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

RANDOMIZE_REPLICA_READ
; }

145 "--RCV-TIMEOUT=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

RCV_TIMEOUT
; }

146 "--REMOVE-FAILED-SERVERS=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

REMOVE_FAILED_SERVERS
; }

147 "--RETRY-TIMEOUT=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

RETRY_TIMEOUT
; }

148 "--SND-TIMEOUT=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

SND_TIMEOUT
; }

149 "--SOCKET-RECV-SIZE=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

SOCKET_RECV_SIZE
; }

150 "--SOCKET-SEND-SIZE=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

SOCKET_SEND_SIZE
; }

151 "--SORT-HOSTS" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

SORT_HOSTS
; }

152 "--SUPPORT-CAS" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

SUPPORT_CAS
; }

153 "--TCP-KEEPALIVE" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

_TCP_KEEPALIVE
; }

154 "--TCP-KEEPIDLE" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

_TCP_KEEPIDLE
; }

155 "--TCP-NODELAY" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

_TCP_NODELAY
; }

156 "--USE-UDP" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

USE_UDP
; }

157 "--USER-DATA" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

USER_DATA
; }

158 "--VERIFY-KEY" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

VERIFY_KEY
; }

160 "--POOL-MIN=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

POOL_MIN
; }

161 "--POOL-MAX=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

POOL_MAX
; }

163 "--NAMESPACE=" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

NAMESPACE
; }

165 "--FETCH-VERSION" { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

FETCH_VERSION
; }

167 
INCLUDE
 { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí
= INCLUDE; }

168 
RESET
 { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí
= RESET; }

169 
DEBUG
 { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí

PARSER_DEBUG
; }

170 
SERVERS
 { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí
= SERVERS; }

171 
END
 { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí
= END; }

172 
CSL_ERROR
 { 
yyexåa
->
begö

yyãxt
;  yyexåa->
¥evious_tokí
= CSL_ERROR; }

174 
TRUE
 {  
yyexåa
->
¥evious_tokí

CSL_TRUE
; }

175 
FALSE
 {  
yyexåa
->
¥evious_tokí

CSL_FALSE
; }

178 "--"[[:
Ænum
:]]* {

179 
yyexåa
->
begö

yyãxt
;

180  
UNKNOWN_OPTION
;

183 
CONSISTENT
 {  CONSISTENT; }

184 
MODULA
 {  MODULA; }

185 
RANDOM
 {  RANDOM; }

187 
MD5
 {  MD5; }

188 
CRC
 {  CRC; }

189 
FNV1_64
 {  FNV1_64; }

190 
FNV1A_64
 {  FNV1A_64; }

191 
FNV1_32
 {  FNV1_32; }

192 
FNV1A_32
 {  FNV1A_32; }

193 
HSIEH
 {  HSIEH; }

194 
MURMUR
 {  MURMUR; }

195 
JENKINS
 {  JENKINS; }

197 (([[:
digô
:]]{1,3}"."){3}([[:digit:]]{1,3})) {

198 
yyexåa
->
	`ho°«me
(
yyãxt
, 
yyÀng
, 
yylvÆ
->
£rvî
);

199  
IPADDRESS
;

202 [[:
Ænum
:]]["."[:Ænum:]
_
-]+[[:alnum:]] {

203 i‡(
yyexåa
->
	`is_£rvî
())

205 
yyexåa
->
	`ho°«me
(
yyãxt
, 
yyÀng
, 
yylvÆ
->
£rvî
);

207  
HOSTNAME
;

210 
yyexåa
->
	`°rög_buf„r
(
yyãxt
, 
yyÀng
, 
yylvÆ
->
°rög
);

212  
STRING
;

215 
L
?\"(\\.|[^\\"])*\" {

216 
	`yygë_ãxt
(
yysˇ¬î
)[
yyÀng
 -1]= 0;

217 
yyexåa
->
	`°rög_buf„r
(
yyãxt
 +1, 
yyÀng
 -2, 
yylvÆ
->
°rög
);

218  
QUOTED_STRING
;

222 
yyexåa
->
begö

yyãxt
;

223  
UNKNOWN
;

226 
	}
%%

228 
	gC⁄ãxt
::
	$öô_sˇ¬î
()

230 
	`yyÀx_öô
(&
sˇ¬î
);

231 
	`yy£t_exåa
(
this
, 
sˇ¬î
);

232 
	}
}

234 
	gC⁄ãxt
::
	$de°roy_sˇ¬î
()

236 ()
yy_Áèl_îr‹
;

237 
	`yyÀx_de°roy
(
sˇ¬î
);

238 
	}
}

	@libmemcached/csl/server.h

38 #¥agm®
⁄˚


40 
	~<c°dlib
>

42 #ifde‡
HAVE_ARPA_INET_H


43 
	~<¨∑/öë.h
>

46 
	s£rvî_t


48 c⁄° *
	mc_°r
;

49 
size_t
 
	msize
;

50 
ö_p‹t_t
 
	mp‹t
;

51 
uöt32_t
 
	mweight
;

	@libmemcached/csl/symbol.h

38 #¥agm®
⁄˚


40 
	~<libmemˇched/c¶/comm⁄.h
>

42 
	uYYSTYPE


44 
	mnumbî
;

45 
memˇched_°rög_t
 
	m°rög
;

46 
memˇched_°rög_t
 
	m›ti⁄
;

47 
	mdoubÀ_numbî
;

48 
memˇched_£rvî_di°ributi⁄_t
 
	mdi°ributi⁄
;

49 
memˇched_hash_t
 
	mhash
;

50 
memˇched_behavi‹_t
 
	mbehavi‹
;

51 
boﬁ
 
	mboﬁón
;

52 
£rvî_t
 
	m£rvî
;

55 
YYSTYPE
 
	tYYSTYPE
;

	@libmemcached/delete.cc

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
>

41 
memˇched_ªtu∫_t
 
	$memˇched_dñëe
(
memˇched_°
 *
shñl
, c⁄° *
key
, 
size_t
 
key_Àngth
,

42 
time_t
 
expú©i⁄
)

44  
	`memˇched_dñëe_by_key
(
shñl
, 
key
, 
key_Àngth
, key, key_Àngth, 
expú©i⁄
);

45 
	}
}

47 
ölöe
 
memˇched_ªtu∫_t
 
	$ascii_dñëe
(
memˇched_ö°™˚_°
* 
ö°™˚
,

48 
uöt32_t
 ,

49 c⁄° *
key
,

50 c⁄° 
size_t
 
key_Àngth
,

51 c⁄° 
boﬁ
 
ª∂y
,

52 c⁄° 
boﬁ
 
is_buf„rög
)

54 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

56 { 
NULL
, 0 },

57 { 
	`memˇched_lôîÆ_∑øm
("delete ") },

58 { 
	`memˇched_¨øy_°rög
(
ö°™˚
->
roŸ
->
_«me•a˚
), 
	`memˇched_¨øy_size
(instance->root->_namespace) },

59 { 
key
, 
key_Àngth
 },

60 { "Ç‹ïly", 
ª∂y
 ? 0 : 
	`memˇched_lôîÆ_∑øm_size
("Çoreply") },

61 { 
	`memˇched_lôîÆ_∑øm
("\r\n") }

65  
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 6, 
is_buf„rög
 ? 
Ál£
 : 
åue
);

66 
	}
}

68 
ölöe
 
memˇched_ªtu∫_t
 
	$bö¨y_dñëe
(
memˇched_ö°™˚_°
* 
ö°™˚
,

69 
uöt32_t
 
£rvî_key
,

70 c⁄° *
key
,

71 c⁄° 
size_t
 
key_Àngth
,

72 c⁄° 
boﬁ
 
ª∂y
,

73 c⁄° 
boﬁ
 
is_buf„rög
)

75 
¥Ÿocﬁ_bö¨y_ªque°_dñëe
 
ªque°
= {};

77 
boﬁ
 
should_Êush

is_buf„rög
 ? 
Ál£
 : 
åue
;

79 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

81 i‡(
ª∂y
)

83 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_DELETE
;

87 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_DELETEQ
;

89 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
(
	`uöt16_t
(
key_Àngth
 + 
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
)));

90 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

91 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
(
	`uöt32_t
(
key_Àngth
 + 
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
)));

93 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

95 { 
NULL
, 0 },

96 { 
ªque°
.
byãs
, (request.bytes) },

97 { 
	`memˇched_¨øy_°rög
(
ö°™˚
->
roŸ
->
_«me•a˚
), 
	`memˇched_¨øy_size
(instance->root->_namespace) },

98 { 
key
, 
key_Àngth
 }

101 
memˇched_ªtu∫_t
 
rc
;

102 i‡(
	`memˇched_Áèl
(
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 4, 
should_Êush
)))

104 
	`as£π
(
	`memˇched_œ°_îr‹
(
ö°™˚
->
roŸ
Ë!
MEMCACHED_SUCCESS
);

105 
	`memˇched_io_ª£t
(
ö°™˚
);

108 i‡(
	`memˇched_has_ª∂iˇs
(
ö°™˚
))

110 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_DELETEQ
;

112 
uöt32_t
 
x
0; x < 
	`memˇched_has_ª∂iˇs
(
ö°™˚
); ++x)

114 ++
£rvî_key
;

116 i‡(
£rvî_key
 =
	`memˇched_£rvî_cou¡
(
ö°™˚
->
roŸ
))

118 
£rvî_key
= 0;

121 
memˇched_ö°™˚_°
* 
ª∂iˇ

	`memˇched_ö°™˚_„tch
(
ö°™˚
->
roŸ
, 
£rvî_key
);

123 i‡(
	`memˇched_Áèl
(
	`memˇched_vdo
(
ª∂iˇ
, 
ve˘‹
, 4, 
should_Êush
)))

125 
	`as£π
(
	`memˇched_œ°_îr‹
(
ö°™˚
->
roŸ
Ë!
MEMCACHED_SUCCESS
);

126 
	`memˇched_io_ª£t
(
ª∂iˇ
);

130 
	`memˇched_£rvî_ª•⁄£_de¸emít
(
ª∂iˇ
);

135  
rc
;

136 
	}
}

138 
memˇched_ªtu∫_t
 
	$memˇched_dñëe_by_key
(
memˇched_°
 *
shñl
,

139 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

140 c⁄° *
key
, 
size_t
 
key_Àngth
,

141 
time_t
 
expú©i⁄
)

143 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

144 
	`LIBMEMCACHED_MEMCACHED_DELETE_START
();

146 
memˇched_ªtu∫_t
 
rc
;

147 i‡(
	`memˇched_Áèl
(
rc

	`öôülize_quîy
(
memc
, 
åue
)))

149  
rc
;

152 i‡(
	`memˇched_Áèl
(
rc

	`memˇched_key_ã°
(*
memc
, (c⁄° **)&
key
, &
key_Àngth
, 1)))

154  
	`memˇched_œ°_îr‹
(
memc
);

157 i‡(
expú©i⁄
)

159  
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

160 
	`memˇched_lôîÆ_∑øm
("Memcached server version doesÇotállowÉxpiration of deleted items"));

163 
uöt32_t
 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
memc
, 
group_key
, 
group_key_Àngth
);

164 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
£rvî_key
);

166 
boﬁ
 
is_buf„rög

	`memˇched_is_buf„rög
(
ö°™˚
->
roŸ
);

167 
boﬁ
 
is_ª∂yög

	`memˇched_is_ª∂yög
(
ö°™˚
->
roŸ
);

170 i‡(
memc
->
dñëe_åiggî
)

172 i‡(
is_buf„rög
)

174  
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

175 
	`memˇched_lôîÆ_∑øm
("DeleteÅriggers cannot be used if buffering isÉnabled"));

178 i‡(
is_ª∂yög
 =
Ál£
)

180  
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

181 
	`memˇched_lôîÆ_∑øm
("DeleteÅriggers cannot be used if MEMCACHED_BEHAVIOR_NOREPLY is set"));

185 i‡(
	`memˇched_is_bö¨y
(
memc
))

187 
rc

	`bö¨y_dñëe
(
ö°™˚
, 
£rvî_key
, 
key
, 
key_Àngth
, 
is_ª∂yög
, 
is_buf„rög
);

191 
rc

	`ascii_dñëe
(
ö°™˚
, 
£rvî_key
, 
key
, 
key_Àngth
, 
is_ª∂yög
, 
is_buf„rög
);

194 i‡(
rc
 =
MEMCACHED_SUCCESS
)

196 i‡(
is_buf„rög
 =
åue
)

198 
rc

MEMCACHED_BUFFERED
;

200 i‡(
is_ª∂yög
 =
Ál£
)

202 
rc

MEMCACHED_SUCCESS
;

206 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

207 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

208 i‡(
rc
 =
MEMCACHED_DELETED
)

210 
rc

MEMCACHED_SUCCESS
;

211 i‡(
memc
->
dñëe_åiggî
)

213 
memc
->
	`dñëe_åiggî
(memc, 
key
, 
key_Àngth
);

219 
	`LIBMEMCACHED_MEMCACHED_DELETE_END
();

220  
rc
;

221 
	}
}

	@libmemcached/do.cc

12 
	~<libmemˇched/comm⁄.h
>

14 
memˇched_ªtu∫_t
 
	$_vdo_udp
(
memˇched_ö°™˚_°
* 
ö°™˚
,

15 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[],

16 c⁄° 
size_t
 
cou¡
)

18 #i‚de‡
__MINGW32__


19 i‡(
ve˘‹
[0].
buf„r
 
‹
 ve˘‹[0].
Àngth
)

21  
	`memˇched_£t_îr‹
(*
ö°™˚
->
roŸ
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
,

22 
	`memˇched_lôîÆ_∑øm
("UDP messages wasáttempted, but vector wasÇot setup for it"));

25 
msghdr
 
msg
;

26 
	`mem£t
(&
msg
, 0, (msg));

28 
	`ö¸emít_udp_mesßge_id
(
ö°™˚
);

29 
ve˘‹
[0].
buf„r

ö°™˚
->
wrôe_buf„r
;

30 
ve˘‹
[0].
Àngth

UDP_DATAGRAM_HEADER_LENGTH
;

32 
msg
.
msg_iov
(
iovec
*)
ve˘‹
;

33 #ifde‡
__APPLE__


34 
msg
.
msg_iovÀn
(
cou¡
);

36 
msg
.
msg_iovÀn

cou¡
;

39 
uöt32_t
 
ªåy
= 5;

40 --
ªåy
)

42 
ssize_t
 
£ndmsg_Àngth
::
	`£ndmsg
(
ö°™˚
->
fd
, &
msg
, 0);

43 i‡(
£ndmsg_Àngth
 > 0)

47 i‡(
£ndmsg_Àngth
 < 0)

49 i‡(
î∫o
 =
EMSGSIZE
)

51  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_WRITE_FAILURE
, 
MEMCACHED_AT
);

54  
	`memˇched_£t_î∫o
(*
ö°™˚
, 
î∫o
, 
MEMCACHED_AT
);

58  
MEMCACHED_SUCCESS
;

60 ()
ö°™˚
;

61 ()
ve˘‹
;

62 ()
cou¡
;

63  
MEMCACHED_FAILURE
;

65 
	}
}

67 
memˇched_ªtu∫_t
 
	$memˇched_vdo
(
memˇched_ö°™˚_°
* 
ö°™˚
,

68 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[],

69 c⁄° 
size_t
 
cou¡
,

70 c⁄° 
boﬁ
 
wôh_Êush
)

72 
memˇched_ªtu∫_t
 
rc
;

74 
	`as£π_msg
(
ve˘‹
, "Invalid vectorÖassed");

76 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_c⁄√˘
(
ö°™˚
)))

78 
	`WATCHPOINT_ERROR
(
rc
);

79 
	`as£π_msg
(
ö°™˚
->
îr‹_mesßges
, "memcached_connect()ÑeturnedánÉrror butÅhe Instance showedÇone.");

80  
rc
;

88 i‡(
	`memˇched_is_udp
(
ö°™˚
->
roŸ
))

90  
	`_vdo_udp
(
ö°™˚
, 
ve˘‹
, 
cou¡
);

93 
boﬁ
 
£¡_suc˚ss

	`memˇched_io_wrôev
(
ö°™˚
, 
ve˘‹
, 
cou¡
, 
wôh_Êush
);

94 i‡(
£¡_suc˚ss
 =
Ál£
)

96 
	`as£π
(
	`memˇched_œ°_îr‹
(
ö°™˚
->
roŸ
Ë=
MEMCACHED_SUCCESS
);

97 i‡(
	`memˇched_œ°_îr‹
(
ö°™˚
->
roŸ
Ë=
MEMCACHED_SUCCESS
)

99 
	`as£π
(
	`memˇched_œ°_îr‹
(
ö°™˚
->
roŸ
Ë!
MEMCACHED_SUCCESS
);

100  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_WRITE_FAILURE
, 
MEMCACHED_AT
);

104 
rc

	`memˇched_œ°_îr‹
(
ö°™˚
->
roŸ
);

107 i‡(
	`memˇched_is_ª∂yög
(
ö°™˚
->
roŸ
))

109 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

112  
rc
;

113 
	}
}

	@libmemcached/do.hpp

38 #¥agm®
⁄˚


40 
memˇched_ªtu∫_t
 
memˇched_vdo
(
memˇched_ö°™˚_°
*,

41 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[],

42 c⁄° 
size_t
 
cou¡
,

43 c⁄° 
boﬁ
 
wôh_Êush
);

	@libmemcached/dump.cc

45 
	~<libmemˇched/comm⁄.h
>

47 
memˇched_ªtu∫_t
 
	$ascii_dump
(
Memˇched
 *
memc
, 
memˇched_dump_‚
 *
ˇŒback
, *
c⁄ãxt
, 
uöt32_t
 
numbî_of_ˇŒbacks
)

50 
uöt32_t
 
x
= 0; x < 200; x++)

52 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

53 
buf„r_Àngth

	`¢¥ötf
(
buf„r
, (buf„r), "%u", 
x
);

54 i‡(
	`size_t
(
buf„r_Àngth
Ë>(
buf„r
Ë
‹
 buffer_length < 0)

56  
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

57 
	`memˇched_lôîÆ_∑øm
("snprintf(MEMCACHED_DEFAULT_COMMAND_SIZE)"));

61 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

63 { 
	`memˇched_lôîÆ_∑øm
("stats cachedump ") },

64 { 
buf„r
, 
	`size_t
(
buf„r_Àngth
) },

65 { 
	`memˇched_lôîÆ_∑øm
(" 0\r\n") }

69 
uöt32_t
 
£rvî_key
0; sîvî_key < 
	`memˇched_£rvî_cou¡
(
memc
); server_key++)

71 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
£rvî_key
);

73 
memˇched_ªtu∫_t
 
vdo_rc
;

74 i‡(
	`memˇched_suc˚ss
((
vdo_rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 3, 
åue
))))

80  
vdo_rc
;

85 
memˇched_ö°™˚_°
* 
ö°™˚
;

86 
memˇched_ªtu∫_t
 
ªad_ªt

MEMCACHED_SUCCESS
;

87 (
ö°™˚

	`memˇched_io_gë_ªadabÀ_£rvî
(
memc
, 
ªad_ªt
)))

89 
memˇched_ªtu∫_t
 
ª•⁄£_rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

90 i‡(
ª•⁄£_rc
 =
MEMCACHED_ITEM
)

92 *
°rög_±r
, *
íd_±r
;

94 
°rög_±r

buf„r
;

95 
°rög_±r
+= 5;

97 
íd_±r

°rög_±r
; 
	`isgøph
(*end_ptr);Énd_ptr++) {} ;

99 *
key

°rög_±r
;

100 
key
[(
size_t
)(
íd_±r
-
°rög_±r
)]= 0;

102 
uöt32_t
 
ˇŒback_cou¡î
0; cÆlback_cou¡î < 
numbî_of_ˇŒbacks
; callback_counter++)

104 
memˇched_ªtu∫_t
 
ˇŒback_rc
(*
ˇŒback
[
ˇŒback_cou¡î
])(
memc
, 
key
, (
size_t
)(
íd_±r
-
°rög_±r
), 
c⁄ãxt
);

105 i‡(
ˇŒback_rc
 !
MEMCACHED_SUCCESS
)

108 
	`memˇched_£t_îr‹
(*
ö°™˚
, 
ˇŒback_rc
, 
MEMCACHED_AT
);

113 i‡(
ª•⁄£_rc
 =
MEMCACHED_END
)

117 i‡(
ª•⁄£_rc
 =
MEMCACHED_SERVER_ERROR
 
‹
Ñe•⁄£_r¯=
MEMCACHED_CLIENT_ERROR
 o∏ª•⁄£_r¯=
MEMCACHED_ERROR
)

126 
	`as£π
(
ª•⁄£_rc
 =
MEMCACHED_SUCCESS
);

127  
ª•⁄£_rc
;

132  
ª•⁄£_rc
;

137  
	`memˇched_has_cuºít_îr‹
(*
memc
Ë? 
MEMCACHED_SOME_ERRORS
 : 
MEMCACHED_SUCCESS
;

138 
	}
}

140 
memˇched_ªtu∫_t
 
	$memˇched_dump
(
memˇched_°
 *
shñl
, 
memˇched_dump_‚
 *
ˇŒback
, *
c⁄ãxt
, 
uöt32_t
 
numbî_of_ˇŒbacks
)

142 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

143 
memˇched_ªtu∫_t
 
rc
;

144 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
±r
, 
åue
)))

146  
rc
;

153 i‡(
	`memˇched_is_bö¨y
(
±r
))

155  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("BinaryÖrotocol isÇot supported for memcached_dump()"));

158  
	`ascii_dump
(
±r
, 
ˇŒback
, 
c⁄ãxt
, 
numbî_of_ˇŒbacks
);

159 
	}
}

	@libmemcached/encoding_key.cc

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<libmemˇched/as£π.hµ
>

41 
	$_£t_ícodög_key
(
Memˇched
& 
memc
, c⁄° *
key
, 
size_t
 
key_Àngth
)

43 
	`hashkô_key
(&
memc
.
hashkô
, 
key
, 
key_Àngth
);

44 
	}
}

46 
memˇched_ªtu∫_t
 
	$memˇched_£t_ícodög_key
(
memˇched_°
* 
shñl
, c⁄° *
key
, 
size_t
 
key_Àngth
)

48 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

49 i‡(
memc
)

51 
	`_£t_ícodög_key
(*
memc
, 
key
, 
key_Àngth
);

52  
MEMCACHED_SUCCESS
;

55  
MEMCACHED_INVALID_ARGUMENTS
;

56 
	}
}

	@libmemcached/encoding_key.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
memˇched_°rög_t
 
memˇched_ícodög_key
(
Memˇched
&);

46 #ifde‡
__˝lu•lus


	@libmemcached/error.cc

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<˚ºno
>

40 
	~<c°d¨g
>

41 
	~<c°dio
>

43 
	#MAX_ERROR_LENGTH
 2048

	)

44 
	smemˇched_îr‹_t


46 
Memˇched
 *
	mroŸ
;

47 
uöt64_t
 
	mquîy_id
;

48 
memˇched_îr‹_t
 *
	m√xt
;

49 
memˇched_ªtu∫_t
 
	mrc
;

50 
	mloˇl_î∫o
;

51 
size_t
 
	msize
;

52 
	mmesßge
[
MAX_ERROR_LENGTH
];

55 
	$_£t
(
memˇched_ö°™˚_°
& 
£rvî
, 
Memˇched
& 
memc
)

57 i‡(
£rvî
.
îr‹_mesßges
 
™d
 sîvî.îr‹_mesßges->
quîy_id
 !£rvî.
roŸ
->query_id)

59 
	`memˇched_îr‹_‰ì
(
£rvî
);

62 i‡(
memc
.
îr‹_mesßges
)

64 i‡(
memc
.
îr‹_mesßges
->
rc
 =
MEMCACHED_TIMEOUT
)

66 
£rvî
.
io_waô_cou¡
.
timeouts
++;

69 
memˇched_îr‹_t
 *
îr‹

	`libmemˇched_xmÆloc
(&
memc
, memcached_error_t);

70 i‡(
îr‹
)

72 
	`mem˝y
(
îr‹
, 
memc
.
îr‹_mesßges
, (
memˇched_îr‹_t
));

73 
îr‹
->
√xt

£rvî
.
îr‹_mesßges
;

74 
£rvî
.
îr‹_mesßges

îr‹
;

77 
	}
}

80 
	gîr‹_log_fd
= -1;

83 
	$_£t
(
Memˇched
& 
memc
, 
memˇched_°rög_t
 *
°r
, 
memˇched_ªtu∫_t
 &
rc
, c⁄° *
©
, 
loˇl_î∫o
= 0)

85 i‡(
memc
.
îr‹_mesßges
 && memc.îr‹_mesßges->
quîy_id
 != memc.query_id)

87 
	`memˇched_îr‹_‰ì
(
memc
);

91 i‡(
loˇl_î∫o
 =
ENOMEM
 
™d
 
rc
 =
MEMCACHED_ERRNO
)

93 
rc

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

96 i‡(
rc
 =
MEMCACHED_MEMORY_ALLOCATION_FAILURE
)

98 
loˇl_î∫o

ENOMEM
;

101 i‡(
rc
 =
MEMCACHED_ERRNO
 
™d
 
nŸ
 
loˇl_î∫o
)

103 
loˇl_î∫o

î∫o
;

104 
rc

MEMCACHED_ERRNO
;

107 i‡(
rc
 =
MEMCACHED_ERRNO
 
™d
 
loˇl_î∫o
 =
ENOTCONN
)

109 
rc

MEMCACHED_CONNECTION_FAILURE
;

112 i‡(
rc
 =
MEMCACHED_ERRNO
 
™d
 
loˇl_î∫o
 =
ECONNRESET
)

114 
rc

MEMCACHED_CONNECTION_FAILURE
;

117 i‡(
loˇl_î∫o
 =
EINVAL
)

119 
rc

MEMCACHED_INVALID_ARGUMENTS
;

122 i‡(
loˇl_î∫o
 =
ECONNREFUSED
)

124 
rc

MEMCACHED_CONNECTION_FAILURE
;

127 
memˇched_îr‹_t
 *
îr‹

	`libmemˇched_xmÆloc
(&
memc
, memcached_error_t);

128 i‡(
îr‹
 =
NULL
)

133 
îr‹
->
roŸ
&
memc
;

134 
îr‹
->
quîy_id

memc
.query_id;

135 
îr‹
->
rc
=Ñc;

136 
îr‹
->
loˇl_î∫o
=Üocal_errno;

138 c⁄° *
îrmsg_±r
;

139 
îrmsg
[
MAX_ERROR_LENGTH
];

140 
îrmsg
[0]= 0;

141 
îrmsg_±r

îrmsg
;

143 i‡(
loˇl_î∫o
)

145 #i‡
	`deföed
(
STRERROR_R_CHAR_P
) && STRERROR_R_CHAR_P

146 
îrmsg_±r

	`°ªº‹_r
(
loˇl_î∫o
, 
îrmsg
, (errmsg));

147 #ñi‡
	`deföed
(
HAVE_STRERROR_R
) && HAVE_STRERROR_R

148 
	`°ªº‹_r
(
loˇl_î∫o
, 
îrmsg
, (errmsg));

149 
îrmsg_±r

îrmsg
;

150 #ñi‡
	`deföed
(
HAVE_STRERROR
) && HAVE_STRERROR

151 
	`¢¥ötf
(
îrmsg
, ”ºmsg), "%s", 
	`°ªº‹
(
loˇl_î∫o
));

152 
îrmsg_±r

îrmsg
;

157 i‡(
°r
 
™d
 så->
size
ánd 
loˇl_î∫o
)

159 
îr‹
->
size
()
	`¢¥ötf
”º‹->
mesßge
, 
MAX_ERROR_LENGTH
, "(%p) %s(%s), %.*s -> %s",

160 
îr‹
->
roŸ
,

161 
	`memˇched_°ªº‹
(&
memc
, 
rc
),

162 
îrmsg_±r
,

163 
	`memˇched_°rög_¥ötf
(*
°r
), 
©
);

165 i‡(
loˇl_î∫o
)

167 
îr‹
->
size
()
	`¢¥ötf
”º‹->
mesßge
, 
MAX_ERROR_LENGTH
, "(%p) %s(%s) -> %s",

168 
îr‹
->
roŸ
,

169 
	`memˇched_°ªº‹
(&
memc
, 
rc
),

170 
îrmsg_±r
,

171 
©
);

173 i‡(
rc
 =
MEMCACHED_PARSE_ERROR
 
™d
 
°r
ánd så->
size
)

175 
îr‹
->
size
()
	`¢¥ötf
”º‹->
mesßge
, 
MAX_ERROR_LENGTH
, "(%p) %.*s -> %s",

176 
îr‹
->
roŸ
,

177 (
°r
->
size
), så->
c_°r
, 
©
);

179 i‡(
°r
 
™d
 så->
size
)

181 
îr‹
->
size
()
	`¢¥ötf
”º‹->
mesßge
, 
MAX_ERROR_LENGTH
, "(%p) %s, %.*s -> %s",

182 
îr‹
->
roŸ
,

183 
	`memˇched_°ªº‹
(&
memc
, 
rc
),

184 (
°r
->
size
), så->
c_°r
, 
©
);

188 
îr‹
->
size
()
	`¢¥ötf
”º‹->
mesßge
, 
MAX_ERROR_LENGTH
, "(%p) %s -> %s",

189 
îr‹
->
roŸ
,

190 
	`memˇched_°ªº‹
(&
memc
, 
rc
), 
©
);

193 
îr‹
->
√xt

memc
.
îr‹_mesßges
;

194 
memc
.
îr‹_mesßges

îr‹
;

197 i‡(
îr‹_log_fd
 == -1)

200 i‡((
îr‹_log_fd

	`›í
("/tmp/libmemˇchd.log", 
O_CREAT
 | 
O_WRONLY
 | 
O_APPEND
, 0644)) < 0)

202 
	`≥º‹
("open");

203 
îr‹_log_fd
= -1;

206 ::
	`wrôe
(
îr‹_log_fd
, 
îr‹
->
mesßge
,Éº‹->
size
);

207 ::
	`wrôe
(
îr‹_log_fd
, "\n", 1);

209 
	}
}

211 
memˇched_ªtu∫_t
 
	$memˇched_£t_îr‹
(
Memˇched
& 
memc
, 
memˇched_ªtu∫_t
 
rc
, c⁄° *
©
, c⁄° *
°r
, 
size_t
 
Àngth
)

213 
	`as£π_msg
(
rc
 !
MEMCACHED_ERRNO
, "ProgrammerÉrror, MEMCACHED_ERRNO was setÅo beÑeturnedÅo client");

214 
memˇched_°rög_t
 
tmp
{ 
°r
, 
Àngth
 };

215  
	`memˇched_£t_îr‹
(
memc
, 
rc
, 
©
, 
tmp
);

216 
	}
}

218 
memˇched_ªtu∫_t
 
	$memˇched_£t_îr‹
(
memˇched_ö°™˚_°
& 
£lf
, 
memˇched_ªtu∫_t
 
rc
, c⁄° *
©
, c⁄° *
°r
, 
size_t
 
Àngth
)

220 
	`as£π_msg
(
rc
 !
MEMCACHED_ERRNO
, "ProgrammerÉrror, MEMCACHED_ERRNO was setÅo beÑeturnedÅo client");

221 
	`as£π_msg
(
rc
 !
MEMCACHED_SOME_ERRORS
, "ProgrammerÉrror, MEMCACHED_SOME_ERRORS wasáboutÅo be set oná Instance");

223 
memˇched_°rög_t
 
tmp
{ 
°r
, 
Àngth
 };

224  
	`memˇched_£t_îr‹
(
£lf
, 
rc
, 
©
, 
tmp
);

225 
	}
}

227 #i‚de‡
__INTEL_COMPILER


228 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wformat-nonliteral"

231 
memˇched_ªtu∫_t
 
	$memˇched_£t_îr‹
(
Memˇched
& 
memc
, 
memˇched_ªtu∫_t
 
rc
, c⁄° *
©
, 
memˇched_°rög_t
& 
°r
)

233 
	`as£π_msg
(
rc
 !
MEMCACHED_ERRNO
, "ProgrammerÉrror, MEMCACHED_ERRNO was setÅo beÑeturnedÅo client");

234 i‡(
	`memˇched_Áèl
(
rc
Ë=
Ál£
)

236  
rc
;

239 
	`_£t
(
memc
, &
°r
, 
rc
, 
©
);

241  
rc
;

242 
	}
}

244 
memˇched_ªtu∫_t
 
	$memˇched_£t_∑r£r_îr‹
(
Memˇched
& 
memc
,

245 c⁄° *
©
,

246 c⁄° *
f‹m©
, ...)

248 
va_li°
 
¨gs
;

250 
buf„r
[
BUFSIZ
];

251 
	`va_°¨t
(
¨gs
, 
f‹m©
);

252 
Àngth

	`v¢¥ötf
(
buf„r
, (buf„r), 
f‹m©
, 
¨gs
);

253 
	`va_íd
(
¨gs
);

255  
	`memˇched_£t_îr‹
(
memc
, 
MEMCACHED_PARSE_ERROR
, 
©
, 
buf„r
, 
Àngth
);

256 
	}
}

258 
ölöe
 
size_t
 
	$≠≥nd_ho°_to_°rög
(
memˇched_ö°™˚_°
& 
£lf
, * 
buf„r
, c⁄° 
size_t
 
buf„r_Àngth
)

260 
size_t
 
size
= 0;

261 
£lf
.
ty≥
)

263 
MEMCACHED_CONNECTION_TCP
:

264 
MEMCACHED_CONNECTION_UDP
:

265 
size
+
	`¢¥ötf
(
buf„r
, 
buf„r_Àngth
, " host: %s:%d",

266 
£lf
.
	`ho°«me
(), (£lf.
	`p‹t
()));

269 
MEMCACHED_CONNECTION_UNIX_SOCKET
:

270 
size
+
	`¢¥ötf
(
buf„r
, 
buf„r_Àngth
, " socket: %s",

271 
£lf
.
	`ho°«me
());

275  
size
;

276 
	}
}

278 
memˇched_ªtu∫_t
 
	$memˇched_£t_îr‹
(
memˇched_ö°™˚_°
& 
£lf
, 
memˇched_ªtu∫_t
 
rc
, c⁄° *
©
, 
memˇched_°rög_t
& 
°r
)

280 
	`as£π_msg
(
rc
 !
MEMCACHED_ERRNO
, "ProgrammerÉrror, MEMCACHED_ERRNO was setÅo beÑeturnedÅo client");

281 
	`as£π_msg
(
rc
 !
MEMCACHED_SOME_ERRORS
, "ProgrammerÉrror, MEMCACHED_SOME_ERRORS wasáboutÅo be set oná memcached_instance_st");

282 i‡(
	`memˇched_Áèl
(
rc
Ë=
Ál£
 
™d
Ñ¯!
MEMCACHED_CLIENT_ERROR
)

284  
rc
;

287 
ho°«me_p‹t_mesßge
[
MAX_ERROR_LENGTH
];

288 * 
ho°«me_p‹t_mesßge_±r

ho°«me_p‹t_mesßge
;

289 
size
= 0;

290 i‡(
°r
.
size
)

292 
size

	`¢¥ötf
(
ho°«me_p‹t_mesßge_±r
, (
ho°«me_p‹t_mesßge
), "%.*s, ",

293 
	`memˇched_°rög_¥ötf
(
°r
));

294 
ho°«me_p‹t_mesßge_±r
+
size
;

297 
size
+
	`≠≥nd_ho°_to_°rög
(
£lf
, 
ho°«me_p‹t_mesßge_±r
, (
ho°«me_p‹t_mesßge
) -size);

299 
memˇched_°rög_t
 
îr‹_ho°
{ 
ho°«me_p‹t_mesßge
, 
	`size_t
(
size
) };

301 
	`as£π_msg
(
£lf
.
roŸ
, "ProgrammerÉrror,Ñoot wasÇot set on instance");

302 i‡(
£lf
.
roŸ
 =
NULL
)

304  
rc
;

307 
	`_£t
(*
£lf
.
roŸ
, &
îr‹_ho°
, 
rc
, 
©
);

308 
	`_£t
(
£lf
, (*£lf.
roŸ
));

309 
	`as£π
(
£lf
.
roŸ
->
îr‹_mesßges
);

310 
	`as£π
(
£lf
.
îr‹_mesßges
);

311 
	`as£π
(
£lf
.
îr‹_mesßges
->
rc
 =£lf.
roŸ
->error_messages->rc);

313  
rc
;

314 
	}
}

316 
memˇched_ªtu∫_t
 
	$memˇched_£t_îr‹
(
memˇched_ö°™˚_°
& 
£lf
, 
memˇched_ªtu∫_t
 
rc
, c⁄° *
©
)

318 
	`as£π_msg
(
rc
 !
MEMCACHED_SOME_ERRORS
, "ProgrammerÉrror, MEMCACHED_SOME_ERRORS wasáboutÅo be set oná memcached_instance_st");

319 i‡(
	`memˇched_Áèl
(
rc
Ë=
Ál£
)

321  
rc
;

324 
ho°«me_p‹t
[
MEMCACHED_NI_MAXHOST
 +
MEMCACHED_NI_MAXSERV
 + ("host : ")];

325 
size_t
 
size

	`≠≥nd_ho°_to_°rög
(
£lf
, 
ho°«me_p‹t
, (hostname_port));

327 
memˇched_°rög_t
 
îr‹_ho°
{ 
ho°«me_p‹t
, 
size
};

329 i‡(
£lf
.
roŸ
 =
NULL
)

331  
rc
;

334 
	`_£t
(*
£lf
.
roŸ
, &
îr‹_ho°
, 
rc
, 
©
);

335 
	`_£t
(
£lf
, *£lf.
roŸ
);

337  
rc
;

338 
	}
}

340 
memˇched_ªtu∫_t
 
	$memˇched_£t_îr‹
(
Memˇched
& 
£lf
, 
memˇched_ªtu∫_t
 
rc
, c⁄° *
©
)

342 
	`as£π_msg
(
rc
 !
MEMCACHED_ERRNO
, "ProgrammerÉrror, MEMCACHED_ERRNO was setÅo beÑeturnedÅo client");

343 i‡(
	`memˇched_Áèl
(
rc
Ë=
Ál£
)

345  
rc
;

348 
	`_£t
(
£lf
, 
NULL
, 
rc
, 
©
);

350  
rc
;

351 
	}
}

353 
memˇched_ªtu∫_t
 
	$memˇched_£t_î∫o
(
Memˇched
& 
£lf
, 
loˇl_î∫o
, c⁄° *
©
, c⁄° *
°r
, 
size_t
 
Àngth
)

355 
memˇched_°rög_t
 
tmp
{ 
°r
, 
Àngth
 };

356  
	`memˇched_£t_î∫o
(
£lf
, 
loˇl_î∫o
, 
©
, 
tmp
);

357 
	}
}

359 
memˇched_ªtu∫_t
 
	$memˇched_£t_î∫o
(
memˇched_ö°™˚_°
& 
£lf
, 
loˇl_î∫o
, c⁄° *
©
, c⁄° *
°r
, 
size_t
 
Àngth
)

361 
memˇched_°rög_t
 
tmp
{ 
°r
, 
Àngth
 };

362  
	`memˇched_£t_î∫o
(
£lf
, 
loˇl_î∫o
, 
©
, 
tmp
);

363 
	}
}

365 
memˇched_ªtu∫_t
 
	$memˇched_£t_î∫o
(
Memˇched
& 
£lf
, 
loˇl_î∫o
, c⁄° *
©
)

367 i‡(
loˇl_î∫o
 == 0)

369  
MEMCACHED_SUCCESS
;

372 
memˇched_ªtu∫_t
 
rc

MEMCACHED_ERRNO
;

373 
	`_£t
(
£lf
, 
NULL
, 
rc
, 
©
, 
loˇl_î∫o
);

375  
rc
;

376 
	}
}

378 
memˇched_ªtu∫_t
 
	$memˇched_£t_î∫o
(
Memˇched
& 
memc
, 
loˇl_î∫o
, c⁄° *
©
, 
memˇched_°rög_t
& 
°r
)

380 i‡(
loˇl_î∫o
 == 0)

382  
MEMCACHED_SUCCESS
;

385 
memˇched_ªtu∫_t
 
rc

MEMCACHED_ERRNO
;

386 
	`_£t
(
memc
, &
°r
, 
rc
, 
©
, 
loˇl_î∫o
);

388  
rc
;

389 
	}
}

391 
memˇched_ªtu∫_t
 
	$memˇched_£t_î∫o
(
memˇched_ö°™˚_°
& 
£lf
, 
loˇl_î∫o
, c⁄° *
©
, 
memˇched_°rög_t
& 
°r
)

393 i‡(
loˇl_î∫o
 == 0)

395  
MEMCACHED_SUCCESS
;

398 
ho°«me_p‹t_mesßge
[
MAX_ERROR_LENGTH
];

399 * 
ho°«me_p‹t_mesßge_±r

ho°«me_p‹t_mesßge
;

400 
size_t
 
size
= 0;

401 i‡(
°r
.
size
)

403 
size

	`¢¥ötf
(
ho°«me_p‹t_mesßge_±r
, (
ho°«me_p‹t_mesßge
), "%.*s, ", 
	`memˇched_°rög_¥ötf
(
°r
));

405 
size
+
	`≠≥nd_ho°_to_°rög
(
£lf
, 
ho°«me_p‹t_mesßge_±r
, (
ho°«me_p‹t_mesßge
) -size);

407 
memˇched_°rög_t
 
îr‹_ho°
{ 
ho°«me_p‹t_mesßge
, 
size
 };

409 
memˇched_ªtu∫_t
 
rc

MEMCACHED_ERRNO
;

410 i‡(
£lf
.
roŸ
 =
NULL
)

412  
rc
;

415 
	`_£t
(*
£lf
.
roŸ
, &
îr‹_ho°
, 
rc
, 
©
, 
loˇl_î∫o
);

416 
	`_£t
(
£lf
, (*£lf.
roŸ
));

419 i‡(
£lf
.
roŸ
->
îr‹_mesßges
->
rc
 != self.error_messages->rc)

421 
	`Ârötf
(
°dîr
, "%s:%d %†!%s\n", 
__FILE__
, 
__LINE__
,

422 
	`memˇched_°ªº‹
(
NULL
, 
£lf
.
roŸ
->
îr‹_mesßges
->
rc
),

423 
	`memˇched_°ªº‹
(
NULL
, 
£lf
.
îr‹_mesßges
->
rc
));

427  
rc
;

428 
	}
}

430 
memˇched_ªtu∫_t
 
	$memˇched_£t_î∫o
(
memˇched_ö°™˚_°
& 
£lf
, 
loˇl_î∫o
, c⁄° *
©
)

432 i‡(
loˇl_î∫o
 == 0)

434  
MEMCACHED_SUCCESS
;

437 
ho°«me_p‹t_mesßge
[
MAX_ERROR_LENGTH
];

438 
size_t
 
size

	`≠≥nd_ho°_to_°rög
(
£lf
, 
ho°«me_p‹t_mesßge
, (hostname_port_message));

440 
memˇched_°rög_t
 
îr‹_ho°
{ 
ho°«me_p‹t_mesßge
, 
size
 };

442 
memˇched_ªtu∫_t
 
rc

MEMCACHED_ERRNO
;

443 i‡(
£lf
.
roŸ
 =
NULL
)

445  
rc
;

448 
	`_£t
(*
£lf
.
roŸ
, &
îr‹_ho°
, 
rc
, 
©
, 
loˇl_î∫o
);

449 
	`_£t
(
£lf
, (*£lf.
roŸ
));

451  
rc
;

452 
	}
}

454 
	$_îr‹_¥öt
(c⁄° 
memˇched_îr‹_t
 *
îr‹
)

456 i‡(
îr‹
 =
NULL
)

461 i‡(
îr‹
->
size
 == 0)

463 
	`Ârötf
(
°dîr
, "\t%s\n", 
	`memˇched_°ªº‹
(
NULL
, 
îr‹
->
rc
) );

467 
	`Ârötf
(
°dîr
, "\t%†%s\n", 
	`memˇched_°ªº‹
(
NULL
, 
îr‹
->
rc
),Éº‹->
mesßge
);

470 
	`_îr‹_¥öt
(
îr‹
->
√xt
);

471 
	}
}

473 
	$memˇched_îr‹_¥öt
(c⁄° 
Memˇched
 *
shñl
)

475 c⁄° 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

476 i‡(
£lf
 =
NULL
)

481 
	`_îr‹_¥öt
(
£lf
->
îr‹_mesßges
);

483 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
£lf
); x++)

485 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_by_posôi⁄
(
£lf
, 
x
);

487 
	`_îr‹_¥öt
(
ö°™˚
->
îr‹_mesßges
);

489 
	}
}

491 
	$_îr‹_‰ì
(
memˇched_îr‹_t
 *
îr‹
)

493 i‡(
îr‹
)

495 
	`_îr‹_‰ì
(
îr‹
->
√xt
);

497 
	`libmemˇched_‰ì
(
îr‹
->
roŸ
,Érror);

499 
	}
}

501 
	$memˇched_îr‹_‰ì
(
Memˇched
& 
£lf
)

503 
	`_îr‹_‰ì
(
£lf
.
îr‹_mesßges
);

504 
£lf
.
îr‹_mesßges

NULL
;

505 
	}
}

507 
	$memˇched_îr‹_‰ì
(
memˇched_ö°™˚_°
& 
£lf
)

509 
	`_îr‹_‰ì
(
£lf
.
îr‹_mesßges
);

510 
£lf
.
îr‹_mesßges

NULL
;

511 
	}
}

513 
	$memˇched_îr‹_‰ì
(
memˇched_£rvî_°
& 
£lf
)

515 
	`_îr‹_‰ì
(
£lf
.
îr‹_mesßges
);

516 
£lf
.
îr‹_mesßges

NULL
;

517 
	}
}

519 c⁄° *
	$memˇched_îr‹
(c⁄° 
memˇched_°
 *
memc
)

521  
	`memˇched_œ°_îr‹_mesßge
(
memc
);

522 
	}
}

524 c⁄° *
	$memˇched_œ°_îr‹_mesßge
(c⁄° 
memˇched_°
 *
shñl
)

526 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

527 i‡(
memc
)

529 i‡(
memc
->
îr‹_mesßges
)

531 i‡(
memc
->
îr‹_mesßges
->
size
 == 0)

533  
memc
->
îr‹_mesßges
->
mesßge
;

536  
	`memˇched_°ªº‹
(
memc
, memc->
îr‹_mesßges
->
rc
);

539  
	`memˇched_°ªº‹
(
memc
, 
MEMCACHED_SUCCESS
);

542  
	`memˇched_°ªº‹
(
memc
, 
MEMCACHED_INVALID_ARGUMENTS
);

543 
	}
}

545 
boﬁ
 
	$memˇched_has_cuºít_îr‹
(
Memˇched
 &
memc
)

547 i‡(
memc
.
îr‹_mesßges


548 
™d
 
memc
.
îr‹_mesßges
->
quîy_id
 == memc.query_id

549 
™d
 
	`memˇched_Áûed
(
memc
.
îr‹_mesßges
->
rc
))

551  
åue
;

554  
Ál£
;

555 
	}
}

557 
boﬁ
 
	$memˇched_has_cuºít_îr‹
(
memˇched_ö°™˚_°
& 
£rvî
)

559  
	`memˇched_has_cuºít_îr‹
(*(
£rvî
.
roŸ
));

560 
	}
}

562 
memˇched_ªtu∫_t
 
	$memˇched_œ°_îr‹
(c⁄° 
memˇched_°
 *
shñl
)

564 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

565 i‡(
memc
)

567 i‡(
memc
->
îr‹_mesßges
)

569  
memc
->
îr‹_mesßges
->
rc
;

572  
MEMCACHED_SUCCESS
;

575  
MEMCACHED_INVALID_ARGUMENTS
;

576 
	}
}

578 
	$memˇched_œ°_îr‹_î∫o
(c⁄° 
memˇched_°
 *
shñl
)

580 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

581 i‡(
memc
 =
NULL
)

586 i‡(
memc
->
îr‹_mesßges
 =
NULL
)

591  
memc
->
îr‹_mesßges
->
loˇl_î∫o
;

592 
	}
}

594 c⁄° *
	$memˇched_£rvî_îr‹
(c⁄° 
memˇched_ö°™˚_°
 * 
£rvî
)

596 i‡(
£rvî
 =
NULL
)

598  
NULL
;

601 i‡(
£rvî
->
îr‹_mesßges
 =
NULL
)

603  
	`memˇched_°ªº‹
(
£rvî
->
roŸ
, 
MEMCACHED_SUCCESS
);

606 i‡(
£rvî
->
îr‹_mesßges
->
size
 == 0)

608  
	`memˇched_°ªº‹
(
£rvî
->
roŸ
, sîvî->
îr‹_mesßges
->
rc
);

611  
£rvî
->
îr‹_mesßges
->
mesßge
;

612 
	}
}

615 
memˇched_îr‹_t
 *
	$memˇched_îr‹_c›y
(c⁄° 
memˇched_ö°™˚_°
& 
£rvî
)

617 i‡(
£rvî
.
îr‹_mesßges
 =
NULL
)

619  
NULL
;

622 
memˇched_îr‹_t
 *
îr‹

	`libmemˇched_xmÆloc
(
£rvî
.
roŸ
, memcached_error_t);

623 
	`mem˝y
(
îr‹
, 
£rvî
.
îr‹_mesßges
, (
memˇched_îr‹_t
));

624 
îr‹
->
√xt

NULL
;

626  
îr‹
;

627 
	}
}

629 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_îr‹_ªtu∫
(c⁄° 
memˇched_ö°™˚_°
 * 
±r
)

631 i‡(
±r
 =
NULL
)

633  
MEMCACHED_INVALID_ARGUMENTS
;

636 i‡(
±r
 
™d
Öå->
îr‹_mesßges
)

638  
±r
->
îr‹_mesßges
->
rc
;

641  
MEMCACHED_SUCCESS
;

642 
	}
}

644 
memˇched_ªtu∫_t
 
	$memˇched_ö°™˚_îr‹_ªtu∫
(
memˇched_ö°™˚_°
* 
ö°™˚
)

646 i‡(
ö°™˚
 =
NULL
)

648  
MEMCACHED_INVALID_ARGUMENTS
;

651 i‡(
ö°™˚
 
™d
 in°™˚->
îr‹_mesßges
)

653  
ö°™˚
->
îr‹_mesßges
->
rc
;

656  
MEMCACHED_SUCCESS
;

657 
	}
}

	@libmemcached/error.hpp

38 
	~"libmemˇched/comm⁄.h
"

40 #¥agm®
⁄˚


42 #ifde‡
__˝lu•lus


44 
	#STRINGIFY
(
x
Ë#x

	)

45 
	#TOSTRING
(
x
Ë
	`STRINGIFY
(x)

	)

46 
	#MEMCACHED_AT
 
__FILE__
 ":" 
	`TOSTRING
(
__LINE__
)

	)

48 
memˇched_ªtu∫_t
 
memˇched_£t_∑r£r_îr‹
(
Memˇched
& 
memc
,

49 c⁄° *
©
,

50 c⁄° *
f‹m©
, ...);

52 
memˇched_ªtu∫_t
 
memˇched_£t_îr‹
(
Memˇched
&, memˇched_ªtu∫_à
rc
, c⁄° *
©
);

54 
memˇched_ªtu∫_t
 
memˇched_£t_îr‹
(
memˇched_ö°™˚_°
&, memˇched_ªtu∫_à
rc
, c⁄° *
©
);

56 
memˇched_ªtu∫_t
 
memˇched_£t_îr‹
(
Memˇched
&, memˇched_ªtu∫_à
rc
, c⁄° *
©
, c⁄° *
°r
, 
size_t
 
Àngth
);

58 
memˇched_ªtu∫_t
 
memˇched_£t_îr‹
(
memˇched_ö°™˚_°
&, memˇched_ªtu∫_à
rc
, c⁄° *
©
, c⁄° *
°r
, 
size_t
 
Àngth
);

60 
memˇched_ªtu∫_t
 
memˇched_£t_îr‹
(
Memˇched
& 
memc
, memˇched_ªtu∫_à
rc
, c⁄° *
©
, 
memˇched_°rög_t
& 
°r
);

62 
memˇched_ªtu∫_t
 
memˇched_£t_îr‹
(
memˇched_ö°™˚_°
&, memˇched_ªtu∫_à
rc
, c⁄° *
©
, 
memˇched_°rög_t
& 
°r
);

64 
memˇched_ªtu∫_t
 
memˇched_£t_î∫o
(
Memˇched
& 
memc
, 
loˇl_î∫o
, c⁄° *
©
, 
memˇched_°rög_t
& 
°r
);

66 
memˇched_ªtu∫_t
 
memˇched_£t_î∫o
(
memˇched_ö°™˚_°
&, 
loˇl_î∫o
, c⁄° *
©
, 
memˇched_°rög_t
& 
°r
);

68 
memˇched_ªtu∫_t
 
memˇched_£t_î∫o
(
Memˇched
& 
memc
, 
loˇl_î∫o
, c⁄° *
©
, c⁄° *
°r
, 
size_t
 
Àngth
);

70 
memˇched_ªtu∫_t
 
memˇched_£t_î∫o
(
memˇched_ö°™˚_°
&, 
loˇl_î∫o
, c⁄° *
©
, c⁄° *
°r
, 
size_t
 
Àngth
);

72 
memˇched_ªtu∫_t
 
memˇched_£t_î∫o
(
Memˇched
& 
memc
, 
loˇl_î∫o
, c⁄° *
©
);

74 
memˇched_ªtu∫_t
 
memˇched_£t_î∫o
(
memˇched_ö°™˚_°
&, 
loˇl_î∫o
, c⁄° *
©
);

76 
boﬁ
 
memˇched_has_cuºít_îr‹
(
Memˇched
&);

78 
boﬁ
 
memˇched_has_cuºít_îr‹
(
memˇched_ö°™˚_°
&);

80 
memˇched_îr‹_‰ì
(
Memˇched
&);

82 
memˇched_îr‹_‰ì
(
memˇched_£rvî_°
&);

84 
memˇched_îr‹_‰ì
(
memˇched_ö°™˚_°
& 
£lf
);

86 
memˇched_îr‹_t
 *
memˇched_îr‹_c›y
(c⁄° 
memˇched_ö°™˚_°
&);

88 
memˇched_ªtu∫_t
 
memˇched_ö°™˚_îr‹_ªtu∫
(
memˇched_ö°™˚_°
*);

	@libmemcached/exist.cc

37 
	~<libmemˇched/comm⁄.h
>

39 
memˇched_ªtu∫_t
 
	$ascii_exi°
(
Memˇched
 *
memc
, 
memˇched_ö°™˚_°
* 
ö°™˚
, c⁄° *
key
, 
size_t
 
key_Àngth
)

41 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

43 { 
NULL
, 0 },

44 { 
	`memˇched_lôîÆ_∑øm
("add ") },

45 { 
	`memˇched_¨øy_°rög
(
memc
->
_«me•a˚
), 
	`memˇched_¨øy_size
(memc->_namespace) },

46 { 
key
, 
key_Àngth
 },

47 { 
	`memˇched_lôîÆ_∑øm
(" 0") },

48 { 
	`memˇched_lôîÆ_∑øm
(" 2678400") },

49 { 
	`memˇched_lôîÆ_∑øm
(" 0") },

50 { 
	`memˇched_lôîÆ_∑øm
("\r\n") },

51 { 
	`memˇched_lôîÆ_∑øm
("\r\n") }

55 
memˇched_ªtu∫_t
 
rc
;

56 i‡(
	`memˇched_Áèl
(
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 9, 
åue
)))

58  
rc
;

61 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

62 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

64 i‡(
rc
 =
MEMCACHED_NOTSTORED
)

66 
rc

MEMCACHED_SUCCESS
;

69 i‡(
rc
 =
MEMCACHED_STORED
)

71 
rc

MEMCACHED_NOTFOUND
;

74  
rc
;

75 
	}
}

77 
memˇched_ªtu∫_t
 
	$bö¨y_exi°
(
Memˇched
 *
memc
, 
memˇched_ö°™˚_°
* 
ö°™˚
, c⁄° *
key
, 
size_t
 
key_Àngth
)

79 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
ªque°
= {};

80 
size_t
 
£nd_Àngth
(
ªque°
.
byãs
);

82 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

84 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_ADD
;

85 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
 + 
	`memˇched_¨øy_size
(
memc
->
_«me•a˚
)));

86 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

87 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
= 8;

88 
ªque°
.
mesßge
.
body
.
Êags
= 0;

89 
ªque°
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
(2678400);

91 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
Ë(
key_Àngth


92 +
	`memˇched_¨øy_size
(
memc
->
_«me•a˚
)

93 +
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
));

95 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

97 { 
NULL
, 0 },

98 { 
ªque°
.
byãs
, 
£nd_Àngth
 },

99 { 
	`memˇched_¨øy_°rög
(
memc
->
_«me•a˚
), 
	`memˇched_¨øy_size
(memc->_namespace) },

100 { 
key
, 
key_Àngth
 }

104 
memˇched_ªtu∫_t
 
rc
;

105 i‡(
	`memˇched_Áèl
(
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 4, 
åue
)))

107  
rc
;

110 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
NULL
, 0, NULL);

112 i‡(
rc
 =
MEMCACHED_SUCCESS
)

114 
rc

MEMCACHED_NOTFOUND
;

117 i‡(
rc
 =
MEMCACHED_DATA_EXISTS
)

119 
rc

MEMCACHED_SUCCESS
;

122  
rc
;

123 
	}
}

125 
memˇched_ªtu∫_t
 
	$memˇched_exi°
(
memˇched_°
 *
memc
, c⁄° *
key
, 
size_t
 
key_Àngth
)

127  
	`memˇched_exi°_by_key
(
memc
, 
key
, 
key_Àngth
, key, key_length);

128 
	}
}

130 
memˇched_ªtu∫_t
 
	$memˇched_exi°_by_key
(
memˇched_°
 *
shñl
,

131 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

132 c⁄° *
key
, 
size_t
 
key_Àngth
)

134 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

135 
memˇched_ªtu∫_t
 
rc
;

136 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
memc
, 
åue
)))

138  
rc
;

141 i‡(
	`memˇched_is_udp
(
memc
))

143  
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
);

146 
uöt32_t
 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
memc
, 
group_key
, 
group_key_Àngth
);

147 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
£rvî_key
);

149 i‡(
	`memˇched_is_bö¨y
(
memc
))

151 
rc

	`bö¨y_exi°
(
memc
, 
ö°™˚
, 
key
, 
key_Àngth
);

155 
rc

	`ascii_exi°
(
memc
, 
ö°™˚
, 
key
, 
key_Àngth
);

158 i‡(
	`memˇched_Áèl
(
rc
))

160 
	`memˇched_io_ª£t
(
ö°™˚
);

163  
rc
;

164 
	}
}

	@libmemcached/fetch.cc

38 
	~<libmemˇched/comm⁄.h
>

40 *
	$memˇched_„tch
(
memˇched_°
 *
shñl
, *
key
, 
size_t
 *
key_Àngth
,

41 
size_t
 *
vÆue_Àngth
,

42 
uöt32_t
 *
Êags
,

43 
memˇched_ªtu∫_t
 *
îr‹
)

45 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

46 
memˇched_ªtu∫_t
 
unu£d
;

47 i‡(
îr‹
 =
NULL
)

49 
îr‹
&
unu£d
;

52 i‡(
	`memˇched_is_udp
(
±r
))

54 i‡(
vÆue_Àngth
)

56 *
vÆue_Àngth
= 0;

59 i‡(
key_Àngth
)

61 *
key_Àngth
= 0;

64 i‡(
Êags
)

66 *
Êags
= 0;

69 i‡(
key
)

71 *
key
= 0;

74 *
îr‹

MEMCACHED_NOT_SUPPORTED
;

75  
NULL
;

78 
memˇched_ªsu…_°
 *
ªsu…_buf„r
&
±r
->
ªsu…
;

79 
ªsu…_buf„r

	`memˇched_„tch_ªsu…
(
±r
,Ñesu…_buf„r, 
îr‹
);

80 i‡(
ªsu…_buf„r
 =
NULL
 
‹
 
	`memˇched_Áûed
(*
îr‹
))

82 
	`WATCHPOINT_ASSERT
(
ªsu…_buf„r
 =
NULL
);

83 i‡(
vÆue_Àngth
)

85 *
vÆue_Àngth
= 0;

88 i‡(
key_Àngth
)

90 *
key_Àngth
= 0;

93 i‡(
Êags
)

95 *
Êags
= 0;

98 i‡(
key
)

100 *
key
= 0;

103  
NULL
;

106 i‡(
vÆue_Àngth
)

108 *
vÆue_Àngth

	`memˇched_°rög_Àngth
(&
ªsu…_buf„r
->
vÆue
);

111 i‡(
key
)

113 i‡(
ªsu…_buf„r
->
key_Àngth
 > 
MEMCACHED_MAX_KEY
)

115 *
îr‹

MEMCACHED_KEY_TOO_BIG
;

116 i‡(
vÆue_Àngth
)

118 *
vÆue_Àngth
= 0;

121 i‡(
key_Àngth
)

123 *
key_Àngth
= 0;

126 i‡(
Êags
)

128 *
Êags
= 0;

131 i‡(
key
)

133 *
key
= 0;

136  
NULL
;

139 
	`°∫˝y
(
key
, 
ªsu…_buf„r
->
ôem_key
,Ñesu…_buf„r->
key_Àngth
);

140 i‡(
key_Àngth
)

142 *
key_Àngth

ªsu…_buf„r
->key_length;

146 i‡(
Êags
)

148 *
Êags

ªsu…_buf„r
->
ôem_Êags
;

151  
	`memˇched_°rög_èke_vÆue
(&
ªsu…_buf„r
->
vÆue
);

152 
	}
}

154 
memˇched_ªsu…_°
 *
	$memˇched_„tch_ªsu…
(
memˇched_°
 *
±r
,

155 
memˇched_ªsu…_°
 *
ªsu…
,

156 
memˇched_ªtu∫_t
 *
îr‹
)

158 
memˇched_ªtu∫_t
 
unu£d
;

159 i‡(
îr‹
 =
NULL
)

161 
îr‹
&
unu£d
;

164 i‡(
±r
 =
NULL
)

166 *
îr‹

MEMCACHED_INVALID_ARGUMENTS
;

167  
NULL
;

170 i‡(
	`memˇched_is_udp
(
±r
))

172 *
îr‹

MEMCACHED_NOT_SUPPORTED
;

173  
NULL
;

176 i‡(
ªsu…
 =
NULL
)

180 i‡(
	`memˇched_is_öôülized
(&
±r
->
ªsu…
))

182 i‡((
ªsu…

	`memˇched_ªsu…_¸óã
(
±r
, 
NULL
)) == NULL)

184 *
îr‹

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

185  
NULL
;

190 
ªsu…

	`memˇched_ªsu…_¸óã
(
±r
, &ptr->result);

194 *
îr‹

MEMCACHED_MAXIMUM_RETURN
;

195 
memˇched_ö°™˚_°
 *
£rvî
;

196 
memˇched_ªtu∫_t
 
ªad_ªt

MEMCACHED_SUCCESS
;

197 (
£rvî

	`memˇched_io_gë_ªadabÀ_£rvî
(
±r
, 
ªad_ªt
)))

199 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

200 *
îr‹

	`memˇched_ª•⁄£
(
£rvî
, 
buf„r
, (buf„r), 
ªsu…
);

202 i‡(*
îr‹
 =
MEMCACHED_IN_PROGRESS
)

206 i‡(*
îr‹
 =
MEMCACHED_SUCCESS
)

208 
ªsu…
->
cou¡
++;

209  
ªsu…
;

211 i‡(*
îr‹
 =
MEMCACHED_END
)

213 
	`memˇched_£rvî_ª•⁄£_ª£t
(
£rvî
);

215 i‡(*
îr‹
 !
MEMCACHED_NOTFOUND
)

221 i‡(*
îr‹
 =
MEMCACHED_NOTFOUND
 
™d
 
ªsu…
->
cou¡
)

223 *
îr‹

MEMCACHED_END
;

225 i‡(*
îr‹
 =
MEMCACHED_MAXIMUM_RETURN
 
™d
 
ªsu…
->
cou¡
)

227 *
îr‹

MEMCACHED_END
;

229 i‡(*
îr‹
 =
MEMCACHED_MAXIMUM_RETURN
)

231 *
îr‹

MEMCACHED_NOTFOUND
;

233 i‡(*
îr‹
 =
MEMCACHED_SUCCESS
)

235 *
îr‹

MEMCACHED_END
;

237 i‡(
ªsu…
->
cou¡
 == 0)

239 *
îr‹

MEMCACHED_NOTFOUND
;

243 i‡(
	`memˇched_is_Æloˇãd
(
ªsu…
))

245 
	`memˇched_ªsu…_‰ì
(
ªsu…
);

249 
ªsu…
->
cou¡
= 0;

250 
	`memˇched_°rög_ª£t
(&
ªsu…
->
vÆue
);

253  
NULL
;

254 
	}
}

256 
memˇched_ªtu∫_t
 
	$memˇched_„tch_execuã
(
memˇched_°
 *
shñl
,

257 
memˇched_execuã_‚
 *
ˇŒback
,

258 *
c⁄ãxt
,

259 
uöt32_t
 
numbî_of_ˇŒbacks
)

261 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

262 
memˇched_ªsu…_°
 *
ªsu…
&
±r
->result;

263 
memˇched_ªtu∫_t
 
rc
;

264 
boﬁ
 
some_îr‹s

Ál£
;

266 (
ªsu…

	`memˇched_„tch_ªsu…
(
±r
,Ñesu…, &
rc
)))

268 i‡(
	`memˇched_Áûed
(
rc
Ë
™d
Ñ¯=
MEMCACHED_NOTFOUND
)

272 i‡(
	`memˇched_Áûed
(
rc
))

274 
	`memˇched_£t_îr‹
(*
±r
, 
rc
, 
MEMCACHED_AT
);

275 
some_îr‹s

åue
;

279 
uöt32_t
 
x
0; x < 
numbî_of_ˇŒbacks
; x++)

281 
memˇched_ªtu∫_t
 
ªt
(*
ˇŒback
[
x
])(
±r
, 
ªsu…
, 
c⁄ãxt
);

282 i‡(
	`memˇched_Áûed
(
ªt
))

284 
some_îr‹s

åue
;

285 
	`memˇched_£t_îr‹
(*
±r
, 
ªt
, 
MEMCACHED_AT
);

291 i‡(
some_îr‹s
)

293  
MEMCACHED_SOME_ERRORS
;

298 i‡(
	`memˇched_suc˚ss
(
rc
))

300  
MEMCACHED_SUCCESS
;

303  
rc
;

304 
	}
}

	@libmemcached/flag.cc

37 
	~<libmemˇched/comm⁄.h
>

39 
boﬁ
 
	$memˇched_Êag
(c⁄° 
memˇched_°
& 
memc
, c⁄° 
memˇched_Êag_t
 
Êag
)

41 
Êag
)

43 
MEMCACHED_FLAG_AUTO_EJECT_HOSTS
:

44  
	`memˇched_is_auto_eje˘_ho°s
(&
memc
);

46 
MEMCACHED_FLAG_BINARY_PROTOCOL
:

47  
	`memˇched_is_bö¨y
(&
memc
);

49 
MEMCACHED_FLAG_BUFFER_REQUESTS
:

50  
	`memˇched_is_buf„rög
(&
memc
);

52 
MEMCACHED_FLAG_HASH_WITH_NAMESPACE
:

53  
	`memˇched_is_hash_wôh_«me•a˚
(&
memc
);

55 
MEMCACHED_FLAG_NO_BLOCK
:

56  
	`memˇched_is_no_block
(&
memc
);

58 
MEMCACHED_FLAG_REPLY
:

59  
	`memˇched_is_ª∂yög
(&
memc
);

61 
MEMCACHED_FLAG_RANDOMIZE_REPLICA_READ
:

62  
	`memˇched_is_øndomize_ª∂iˇ_ªad
(&
memc
);

64 
MEMCACHED_FLAG_SUPPORT_CAS
:

65  
	`memˇched_is_ˇs
(&
memc
);

67 
MEMCACHED_FLAG_TCP_NODELAY
:

68  
	`memˇched_is_t˝_nodñay
(&
memc
);

70 
MEMCACHED_FLAG_USE_SORT_HOSTS
:

71  
	`memˇched_is_u£_s‹t_ho°s
(&
memc
);

73 
MEMCACHED_FLAG_USE_UDP
:

74  
	`memˇched_is_udp
(&
memc
);

76 
MEMCACHED_FLAG_VERIFY_KEY
:

77  
	`memˇched_is_vîify_key
(&
memc
);

79 
MEMCACHED_FLAG_TCP_KEEPALIVE
:

80  
	`memˇched_is_u£_s‹t_ho°s
(&
memc
);

82 
MEMCACHED_FLAG_IS_AES
:

83  
	`memˇched_is_´s
(&
memc
);

85 
MEMCACHED_FLAG_IS_FETCHING_VERSION
:

86  
	`memˇched_is_„tchög_vîsi⁄
(&
memc
);

89 
	`ab‹t
();

90 
	}
}

92 
	$memˇched_Êag
(
memˇched_°
& 
memc
, c⁄° 
memˇched_Êag_t
 
Êag
, c⁄° 
boﬁ
 
¨g
)

94 
Êag
)

96 
MEMCACHED_FLAG_AUTO_EJECT_HOSTS
:

97 
	`memˇched_£t_auto_eje˘_ho°s
(
memc
, 
¨g
);

100 
MEMCACHED_FLAG_BINARY_PROTOCOL
:

101 
	`memˇched_£t_bö¨y
(
memc
, 
¨g
);

104 
MEMCACHED_FLAG_BUFFER_REQUESTS
:

105 
	`memˇched_£t_buf„rög
(
memc
, 
¨g
);

108 
MEMCACHED_FLAG_HASH_WITH_NAMESPACE
:

109 
	`memˇched_£t_hash_wôh_«me•a˚
(
memc
, 
¨g
);

112 
MEMCACHED_FLAG_NO_BLOCK
:

113 
	`memˇched_£t_no_block
(
memc
, 
¨g
);

116 
MEMCACHED_FLAG_REPLY
:

117 
	`memˇched_£t_ª∂yög
(
memc
, 
¨g
);

120 
MEMCACHED_FLAG_RANDOMIZE_REPLICA_READ
:

121 
	`memˇched_£t_øndomize_ª∂iˇ_ªad
(
memc
, 
¨g
);

124 
MEMCACHED_FLAG_SUPPORT_CAS
:

125 
	`memˇched_£t_ˇs
(
memc
, 
¨g
);

128 
MEMCACHED_FLAG_TCP_NODELAY
:

129 
	`memˇched_£t_t˝_nodñay
(
memc
, 
¨g
);

132 
MEMCACHED_FLAG_USE_SORT_HOSTS
:

133 
	`memˇched_£t_u£_s‹t_ho°s
(
memc
, 
¨g
);

136 
MEMCACHED_FLAG_USE_UDP
:

137 
	`memˇched_£t_udp
(
memc
, 
¨g
);

140 
MEMCACHED_FLAG_VERIFY_KEY
:

141 
	`memˇched_£t_vîify_key
(
memc
, 
¨g
);

144 
MEMCACHED_FLAG_TCP_KEEPALIVE
:

145 
	`memˇched_£t_u£_s‹t_ho°s
(
memc
, 
¨g
);

148 
MEMCACHED_FLAG_IS_AES
:

149 
	`memˇched_£t_´s
(
memc
, 
¨g
);

152 
MEMCACHED_FLAG_IS_FETCHING_VERSION
:

153 
	`memˇched_£t_„tchög_vîsi⁄
(
memc
, 
¨g
);

156 
	}
}

	@libmemcached/flag.hpp

37 #¥agm®
⁄˚


39 
	ememˇched_Êag_t


41 
	mMEMCACHED_FLAG_AUTO_EJECT_HOSTS
,

42 
	mMEMCACHED_FLAG_BINARY_PROTOCOL
,

43 
	mMEMCACHED_FLAG_BUFFER_REQUESTS
,

44 
	mMEMCACHED_FLAG_HASH_WITH_NAMESPACE
,

45 
	mMEMCACHED_FLAG_NO_BLOCK
,

46 
	mMEMCACHED_FLAG_REPLY
,

47 
	mMEMCACHED_FLAG_RANDOMIZE_REPLICA_READ
,

48 
	mMEMCACHED_FLAG_SUPPORT_CAS
,

49 
	mMEMCACHED_FLAG_TCP_NODELAY
,

50 
	mMEMCACHED_FLAG_USE_SORT_HOSTS
,

51 
	mMEMCACHED_FLAG_USE_UDP
,

52 
	mMEMCACHED_FLAG_VERIFY_KEY
,

53 
	mMEMCACHED_FLAG_TCP_KEEPALIVE
,

54 
	mMEMCACHED_FLAG_IS_AES
,

55 
	mMEMCACHED_FLAG_IS_FETCHING_VERSION


58 
boﬁ
 
memˇched_Êag
(c⁄° 
memˇched_°
&, c⁄° 
memˇched_Êag_t
);

59 
memˇched_Êag
(
memˇched_°
&, c⁄° 
memˇched_Êag_t
, c⁄° 
boﬁ
);

	@libmemcached/flush.cc

37 
	~<libmemˇched/comm⁄.h
>

39 
memˇched_ªtu∫_t
 
	$memˇched_Êush_bö¨y
(
Memˇched
 *
±r
,

40 
time_t
 
expú©i⁄
,

41 c⁄° 
boﬁ
 
ª∂y
)

43 
¥Ÿocﬁ_bö¨y_ªque°_Êush
 
ªque°
= {};

45 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_FLUSH
;

46 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
= 4;

47 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

48 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
‘eque°.mesßge.hódî.ªque°.
exéí
);

49 
ªque°
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
((
uöt32_t
)Éxpiration);

51 
memˇched_ªtu∫_t
 
rc

MEMCACHED_SUCCESS
;

53 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

55 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
x
);

56 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

58 i‡(
ª∂y
)

60 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_FLUSH
;

64 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_FLUSHQ
;

67 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

69 { 
NULL
, 0 },

70 { 
ªque°
.
byãs
, (request.bytes) }

73 
memˇched_ªtu∫_t
 
ºc
;

74 i‡(
	`memˇched_Áûed
(
ºc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 2, 
åue
)))

76 i‡(
ö°™˚
->
îr‹_mesßges
 =
NULL
 
‹
 in°™˚->
roŸ
->error_messages == NULL)

78 
	`memˇched_£t_îr‹
(*
ö°™˚
, 
ºc
, 
MEMCACHED_AT
);

80 
	`memˇched_io_ª£t
(
ö°™˚
);

81 
rc

MEMCACHED_SOME_ERRORS
;

85 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

87 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
x
);

89 i‡(
ö°™˚
->
	`ª•⁄£_cou¡
() > 0)

91 ()
	`memˇched_ª•⁄£
(
ö°™˚
, 
NULL
, 0, NULL);

95  
rc
;

96 
	}
}

98 
memˇched_ªtu∫_t
 
	$memˇched_Êush_ãxtuÆ
(
Memˇched
 *
±r
,

99 
time_t
 
expú©i⁄
,

100 c⁄° 
boﬁ
 
ª∂y
)

102 
buf„r
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

103 
£nd_Àngth
= 0;

104 i‡(
expú©i⁄
)

106 
£nd_Àngth

	`¢¥ötf
(
buf„r
, (buf„r), "%Œu", ()
expú©i⁄
);

109 i‡(
	`size_t
(
£nd_Àngth
Ë>(
buf„r
Ë
‹
 send_length < 0)

111  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

112 
	`memˇched_lôîÆ_∑øm
("snprintf(MEMCACHED_DEFAULT_COMMAND_SIZE)"));

115 
memˇched_ªtu∫_t
 
rc

MEMCACHED_SUCCESS
;

116 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

118 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
x
);

120 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

122 { 
NULL
, 0 },

123 { 
	`memˇched_lôîÆ_∑øm
("flush_all ") },

124 { 
buf„r
, 
	`size_t
(
£nd_Àngth
) },

125 { "Ç‹ïly", 
ª∂y
 ? 0 : 
	`memˇched_lôîÆ_∑øm_size
("Çoreply") },

126 { 
	`memˇched_lôîÆ_∑øm
("\r\n") }

129 
memˇched_ªtu∫_t
 
ºc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 5, 
åue
);

130 i‡(
	`memˇched_suc˚ss
(
ºc
Ë
™d
 
ª∂y
 =
åue
)

132 
ª•⁄£_buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

133 
ºc

	`memˇched_ª•⁄£
(
ö°™˚
, 
ª•⁄£_buf„r
, ‘e•⁄£_buf„r), 
NULL
);

136 i‡(
	`memˇched_Áûed
(
ºc
))

139 i‡(
ö°™˚
->
îr‹_mesßges
 =
NULL
 
‹
 in°™˚->
roŸ
->error_messages == NULL)

141 
	`memˇched_£t_îr‹
(*
ö°™˚
, 
ºc
, 
MEMCACHED_AT
);

143 
rc

MEMCACHED_SOME_ERRORS
;

147  
rc
;

148 
	}
}

150 
memˇched_ªtu∫_t
 
	$memˇched_Êush
(
memˇched_°
 *
shñl
, 
time_t
 
expú©i⁄
)

152 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

153 
memˇched_ªtu∫_t
 
rc
;

154 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
±r
, 
åue
)))

156  
rc
;

159 
boﬁ
 
ª∂y

	`memˇched_is_ª∂yög
(
±r
);

161 
	`LIBMEMCACHED_MEMCACHED_FLUSH_START
();

162 i‡(
	`memˇched_is_bö¨y
(
±r
))

164 
rc

	`memˇched_Êush_bö¨y
(
±r
, 
expú©i⁄
, 
ª∂y
);

168 
rc

	`memˇched_Êush_ãxtuÆ
(
±r
, 
expú©i⁄
, 
ª∂y
);

170 
	`LIBMEMCACHED_MEMCACHED_FLUSH_END
();

172  
rc
;

173 
	}
}

	@libmemcached/flush_buffers.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
memˇched_ªtu∫_t
 
	$memˇched_Êush_buf„rs
(
memˇched_°
 *
shñl
)

42 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

43 i‡(
memc
)

45 
memˇched_ªtu∫_t
 
ªt

MEMCACHED_SUCCESS
;

47 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); ++x)

49 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
x
);

51 i‡(
ö°™˚
->
wrôe_buf„r_off£t
 != 0)

53 i‡(
ö°™˚
->
fd
 =
INVALID_SOCKET
 
™d


54 (
ªt

	`memˇched_c⁄√˘
(
ö°™˚
)Ë!
MEMCACHED_SUCCESS
)

56 
	`WATCHPOINT_ERROR
(
ªt
);

57  
ªt
;

60 i‡(
	`memˇched_io_wrôe
(
ö°™˚
Ë=
Ál£
)

62 
ªt

MEMCACHED_SOME_ERRORS
;

67  
ªt
;

70  
MEMCACHED_INVALID_ARGUMENTS
;

71 
	}
}

	@libmemcached/get.cc

38 
	~<libmemˇched/comm⁄.h
>

43 *
	$memˇched_gë
(
memˇched_°
 *
±r
, c⁄° *
key
,

44 
size_t
 
key_Àngth
,

45 
size_t
 *
vÆue_Àngth
,

46 
uöt32_t
 *
Êags
,

47 
memˇched_ªtu∫_t
 *
îr‹
)

49  
	`memˇched_gë_by_key
(
±r
, 
NULL
, 0, 
key
, 
key_Àngth
, 
vÆue_Àngth
,

50 
Êags
, 
îr‹
);

51 
	}
}

53 
memˇched_ªtu∫_t
 
__mgë_by_key_ªÆ
(
memˇched_°
 *
±r
,

54 c⁄° *
group_key
,

55 
size_t
 
group_key_Àngth
,

56 c⁄° * c⁄° *
keys
,

57 c⁄° 
size_t
 *
key_Àngth
,

58 
size_t
 
numbî_of_keys
,

59 c⁄° 
boﬁ
 
mgë_mode
);

60 *
	$memˇched_gë_by_key
(
memˇched_°
 *
shñl
,

61 c⁄° *
group_key
,

62 
size_t
 
group_key_Àngth
,

63 c⁄° *
key
, 
size_t
 
key_Àngth
,

64 
size_t
 *
vÆue_Àngth
,

65 
uöt32_t
 *
Êags
,

66 
memˇched_ªtu∫_t
 *
îr‹
)

68 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

69 
memˇched_ªtu∫_t
 
unu£d
;

70 i‡(
îr‹
 =
NULL
)

72 
îr‹
&
unu£d
;

75 
uöt64_t
 
quîy_id
= 0;

76 i‡(
±r
)

78 
quîy_id

±r
->query_id;

82 *
îr‹

	`__mgë_by_key_ªÆ
(
±r
, 
group_key
, 
group_key_Àngth
,

83 (c⁄° * c⁄° *)&
key
, &
key_Àngth
,

84 1, 
Ál£
);

85 i‡(
±r
)

87 
	`as£π_msg
(
±r
->
quîy_id
 == query_id +1, "ProgrammerÉrror,Åhe query_id wasÇot incremented.");

90 i‡(
	`memˇched_Áûed
(*
îr‹
))

92 i‡(
±r
)

94 i‡(
	`memˇched_has_cuºít_îr‹
(*
±r
))

96 *
îr‹

	`memˇched_œ°_îr‹
(
±r
);

100 i‡(
vÆue_Àngth
)

102 *
vÆue_Àngth
= 0;

105  
NULL
;

108 *
vÆue

	`memˇched_„tch
(
±r
, 
NULL
, NULL,

109 
vÆue_Àngth
, 
Êags
, 
îr‹
);

110 
	`as£π_msg
(
±r
->
quîy_id
 == query_id +1, "ProgrammerÉrror,Åhe query_id wasÇot incremented.");

113 i‡(*
îr‹
 =
MEMCACHED_END
)

115 *
îr‹

MEMCACHED_NOTFOUND
;

118 i‡(
vÆue
 =
NULL
)

120 i‡(
±r
->
gë_key_Áûuª
 
™d
 *
îr‹
 =
MEMCACHED_NOTFOUND
)

122 
memˇched_ªsu…_°
 
key_Áûuª_ªsu…
;

123 
memˇched_ªsu…_°
* 
ªsu…_±r

	`memˇched_ªsu…_¸óã
(
±r
, &
key_Áûuª_ªsu…
);

124 
memˇched_ªtu∫_t
 
rc

±r
->
	`gë_key_Áûuª
’å, 
key
, 
key_Àngth
, 
ªsu…_±r
);

127 i‡(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
)

129 i‡(
rc
 =
MEMCACHED_BUFFERED
)

131 
uöt64_t
 
œtch
;

132 
œtch

	`memˇched_behavi‹_gë
(
±r
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
);

133 i‡(
œtch
 == 0)

135 
	`memˇched_behavi‹_£t
(
±r
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 1);

138 
rc

	`memˇched_£t
(
±r
, 
key
, 
key_Àngth
,

139 (
	`memˇched_ªsu…_vÆue
(
ªsu…_±r
)),

140 (
	`memˇched_ªsu…_Àngth
(
ªsu…_±r
)),

142 (
	`memˇched_ªsu…_Êags
(
ªsu…_±r
)));

144 i‡(
rc
 =
MEMCACHED_BUFFERED
 
™d
 
œtch
 == 0)

146 
	`memˇched_behavi‹_£t
(
±r
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 0);

151 
rc

	`memˇched_£t
(
±r
, 
key
, 
key_Àngth
,

152 (
	`memˇched_ªsu…_vÆue
(
ªsu…_±r
)),

153 (
	`memˇched_ªsu…_Àngth
(
ªsu…_±r
)),

155 (
	`memˇched_ªsu…_Êags
(
ªsu…_±r
)));

158 i‡(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
)

160 *
îr‹

rc
;

161 *
vÆue_Àngth

	`memˇched_ªsu…_Àngth
(
ªsu…_±r
);

162 *
Êags

	`memˇched_ªsu…_Êags
(
ªsu…_±r
);

163 *
ªsu…_vÆue

	`memˇched_°rög_èke_vÆue
(&
ªsu…_±r
->
vÆue
);

164 
	`memˇched_ªsu…_‰ì
(
ªsu…_±r
);

166  
ªsu…_vÆue
;

170 
	`memˇched_ªsu…_‰ì
(
ªsu…_±r
);

172 
	`as£π_msg
(
±r
->
quîy_id
 == query_id +1, "ProgrammerÉrror,Åhe query_id wasÇot incremented.");

174  
NULL
;

177  
vÆue
;

178 
	}
}

180 
memˇched_ªtu∫_t
 
	$memˇched_mgë
(
memˇched_°
 *
±r
,

181 c⁄° * c⁄° *
keys
,

182 c⁄° 
size_t
 *
key_Àngth
,

183 
size_t
 
numbî_of_keys
)

185  
	`memˇched_mgë_by_key
(
±r
, 
NULL
, 0, 
keys
, 
key_Àngth
, 
numbî_of_keys
);

186 
	}
}

188 
memˇched_ªtu∫_t
 
bö¨y_mgë_by_key
(
memˇched_°
 *
±r
,

189 c⁄° 
uöt32_t
 
ma°î_£rvî_key
,

190 c⁄° 
boﬁ
 
is_group_key_£t
,

191 c⁄° * c⁄° *
keys
,

192 c⁄° 
size_t
 *
key_Àngth
,

193 c⁄° 
size_t
 
numbî_of_keys
,

194 c⁄° 
boﬁ
 
mgë_mode
);

196 
memˇched_ªtu∫_t
 
	$__mgë_by_key_ªÆ
(
memˇched_°
 *
±r
,

197 c⁄° *
group_key
,

198 c⁄° 
size_t
 
group_key_Àngth
,

199 c⁄° * c⁄° *
keys
,

200 c⁄° 
size_t
 *
key_Àngth
,

201 
size_t
 
numbî_of_keys
,

202 c⁄° 
boﬁ
 
mgë_mode
)

204 
boﬁ
 
Áûuªs_occuªd_ö_£ndög

Ál£
;

205 c⁄° *
gë_comm™d
= "get";

206 
uöt8_t
 
gë_comm™d_Àngth
= 3;

207 
ma°î_£rvî_key
= ()-1;

209 
memˇched_ªtu∫_t
 
rc
;

210 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
±r
, 
åue
)))

212  
rc
;

215 i‡(
	`memˇched_is_udp
(
±r
))

217  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
);

220 
	`LIBMEMCACHED_MEMCACHED_MGET_START
();

222 i‡(
numbî_of_keys
 == 0)

224  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_NOTFOUND
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("number_of_keys was zero"));

227 i‡(
	`memˇched_Áûed
(
	`memˇched_key_ã°
(*
±r
, 
keys
, 
key_Àngth
, 
numbî_of_keys
)))

229  
	`memˇched_œ°_îr‹
(
±r
);

232 
boﬁ
 
is_group_key_£t

Ál£
;

233 i‡(
group_key
 
™d
 
group_key_Àngth
)

235 
ma°î_£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
group_key
, 
group_key_Àngth
);

236 
is_group_key_£t

åue
;

245 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

247 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
x
);

249 i‡(
ö°™˚
->
	`ª•⁄£_cou¡
())

251 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

253 i‡(
±r
->
Êags
.
no_block
)

255 
	`memˇched_io_wrôe
(
ö°™˚
);

258 
ö°™˚
->
	`ª•⁄£_cou¡
())

260 ()
	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, &
±r
->
ªsu…
);

265 i‡(
	`memˇched_is_bö¨y
(
±r
))

267  
	`bö¨y_mgë_by_key
(
±r
, 
ma°î_£rvî_key
, 
is_group_key_£t
, 
keys
,

268 
key_Àngth
, 
numbî_of_keys
, 
mgë_mode
);

271 i‡(
±r
->
Êags
.
suµ‹t_ˇs
)

273 
gë_comm™d
= "gets";

274 
gë_comm™d_Àngth
= 4;

281 
	`WATCHPOINT_ASSERT
(
rc
 =
MEMCACHED_SUCCESS
);

282 
size_t
 
ho°s_c⁄√˘ed
= 0;

283 
uöt32_t
 
x
0; x < 
numbî_of_keys
; x++)

285 
uöt32_t
 
£rvî_key
;

287 i‡(
is_group_key_£t
)

289 
£rvî_key

ma°î_£rvî_key
;

293 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
keys
[
x
], 
key_Àngth
[x]);

296 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
£rvî_key
);

298 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

300 { 
gë_comm™d
, 
gë_comm™d_Àngth
 },

301 { 
	`memˇched_lôîÆ_∑øm
(" ") },

302 { 
	`memˇched_¨øy_°rög
(
±r
->
_«me•a˚
), 
	`memˇched_¨øy_size
(ptr->_namespace) },

303 { 
keys
[
x
], 
key_Àngth
[x] }

307 i‡(
ö°™˚
->
	`ª•⁄£_cou¡
() == 0)

309 
rc

	`memˇched_c⁄√˘
(
ö°™˚
);

311 i‡(
	`memˇched_Áûed
(
rc
))

313 
	`memˇched_£t_îr‹
(*
ö°™˚
, 
rc
, 
MEMCACHED_AT
);

316 
ho°s_c⁄√˘ed
++;

318 i‡((
	`memˇched_io_wrôev
(
ö°™˚
, 
ve˘‹
, 1, 
Ál£
)) == false)

320 
Áûuªs_occuªd_ö_£ndög

åue
;

323 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
curs‹_a˘ive_
 == 0);

324 
	`memˇched_ö°™˚_ª•⁄£_ö¸emít
(
ö°™˚
);

325 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
curs‹_a˘ive_
 == 1);

329 i‡((
	`memˇched_io_wrôev
(
ö°™˚
, (
ve˘‹
 + 1), 3, 
Ál£
)) == false)

331 
	`memˇched_ö°™˚_ª•⁄£_ª£t
(
ö°™˚
);

332 
Áûuªs_occuªd_ö_£ndög

åue
;

338 i‡(
ho°s_c⁄√˘ed
 == 0)

340 
	`LIBMEMCACHED_MEMCACHED_MGET_END
();

342 i‡(
	`memˇched_Áûed
(
rc
))

344  
rc
;

347  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_NO_SERVERS
, 
MEMCACHED_AT
);

354 
boﬁ
 
suc˚ss_h≠≥√d

Ál£
;

355 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

357 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
x
);

359 i‡(
ö°™˚
->
	`ª•⁄£_cou¡
())

362 i‡((
	`memˇched_io_wrôe
(
ö°™˚
, "\r\n", 2, 
åue
)) == -1)

364 
Áûuªs_occuªd_ö_£ndög

åue
;

368 
suc˚ss_h≠≥√d

åue
;

373 
	`LIBMEMCACHED_MEMCACHED_MGET_END
();

375 i‡(
Áûuªs_occuªd_ö_£ndög
 
™d
 
suc˚ss_h≠≥√d
)

377  
MEMCACHED_SOME_ERRORS
;

380 i‡(
suc˚ss_h≠≥√d
)

382  
MEMCACHED_SUCCESS
;

385  
MEMCACHED_FAILURE
;

386 
	}
}

388 
memˇched_ªtu∫_t
 
	$memˇched_mgë_by_key
(
memˇched_°
 *
shñl
,

389 c⁄° *
group_key
,

390 
size_t
 
group_key_Àngth
,

391 c⁄° * c⁄° *
keys
,

392 c⁄° 
size_t
 *
key_Àngth
,

393 
size_t
 
numbî_of_keys
)

395 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

396  
	`__mgë_by_key_ªÆ
(
±r
, 
group_key
, 
group_key_Àngth
, 
keys
, 
key_Àngth
, 
numbî_of_keys
, 
åue
);

397 
	}
}

399 
memˇched_ªtu∫_t
 
	$memˇched_mgë_execuã
(
memˇched_°
 *
±r
,

400 c⁄° * c⁄° *
keys
,

401 c⁄° 
size_t
 *
key_Àngth
,

402 
size_t
 
numbî_of_keys
,

403 
memˇched_execuã_‚
 *
ˇŒback
,

404 *
c⁄ãxt
,

405 
numbî_of_ˇŒbacks
)

407  
	`memˇched_mgë_execuã_by_key
(
±r
, 
NULL
, 0, 
keys
, 
key_Àngth
,

408 
numbî_of_keys
, 
ˇŒback
,

409 
c⁄ãxt
, 
numbî_of_ˇŒbacks
);

410 
	}
}

412 
memˇched_ªtu∫_t
 
	$memˇched_mgë_execuã_by_key
(
memˇched_°
 *
shñl
,

413 c⁄° *
group_key
,

414 
size_t
 
group_key_Àngth
,

415 c⁄° * c⁄° *
keys
,

416 c⁄° 
size_t
 *
key_Àngth
,

417 
size_t
 
numbî_of_keys
,

418 
memˇched_execuã_‚
 *
ˇŒback
,

419 *
c⁄ãxt
,

420 
numbî_of_ˇŒbacks
)

422 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

423 
memˇched_ªtu∫_t
 
rc
;

424 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
±r
, 
Ál£
)))

426  
rc
;

429 i‡(
	`memˇched_is_udp
(
±r
))

431  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
);

434 i‡(
	`memˇched_is_bö¨y
(
±r
Ë=
Ál£
)

436  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
,

437 
	`memˇched_lôîÆ_∑øm
("ASCIIÖrotocol isÇot supported for memcached_mget_execute_by_key()"));

440 
memˇched_ˇŒback_°
 *
‹igöÆ_ˇŒbacks

±r
->
ˇŒbacks
;

441 
memˇched_ˇŒback_°
 
cb
= {

442 
ˇŒback
,

443 
c⁄ãxt
,

444 
numbî_of_ˇŒbacks


447 
±r
->
ˇŒbacks
&
cb
;

448 
rc

	`memˇched_mgë_by_key
(
±r
, 
group_key
, 
group_key_Àngth
, 
keys
,

449 
key_Àngth
, 
numbî_of_keys
);

450 
±r
->
ˇŒbacks

‹igöÆ_ˇŒbacks
;

452  
rc
;

453 
	}
}

455 
memˇched_ªtu∫_t
 
	$sim∂e_bö¨y_mgë
(
memˇched_°
 *
±r
,

456 c⁄° 
uöt32_t
 
ma°î_£rvî_key
,

457 
boﬁ
 
is_group_key_£t
,

458 c⁄° * c⁄° *
keys
,

459 c⁄° 
size_t
 *
key_Àngth
,

460 c⁄° 
size_t
 
numbî_of_keys
, c⁄° 
boﬁ
 
mgë_mode
)

462 
memˇched_ªtu∫_t
 
rc

MEMCACHED_NOTFOUND
;

464 
boﬁ
 
Êush
(
numbî_of_keys
 == 1);

470 
uöt32_t
 
x
0; x < 
numbî_of_keys
; ++x)

472 
uöt32_t
 
£rvî_key
;

474 i‡(
is_group_key_£t
)

476 
£rvî_key

ma°î_£rvî_key
;

480 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
keys
[
x
], 
key_Àngth
[x]);

483 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
£rvî_key
);

485 i‡(
ö°™˚
->
	`ª•⁄£_cou¡
() == 0)

487 
rc

	`memˇched_c⁄√˘
(
ö°™˚
);

488 i‡(
	`memˇched_Áûed
(
rc
))

494 
¥Ÿocﬁ_bö¨y_ªque°_gëk
 
ªque°
= { };

495 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

496 i‡(
mgë_mode
)

498 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_GETKQ
;

502 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_GETK
;

506 
memˇched_ªtu∫_t
 
vk

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
[
x
], 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
);

507 i‡(
vk
 !
MEMCACHED_SUCCESS
)

509 i‡(
x
 > 0)

511 
	`memˇched_io_ª£t
(
ö°™˚
);

514  
vk
;

518 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
[
x
] + 
	`memˇched_¨øy_size
(
±r
->
_«me•a˚
)));

519 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

520 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
)–
key_Àngth
[
x
] + 
	`memˇched_¨øy_size
(
±r
->
_«me•a˚
)));

522 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

524 { 
ªque°
.
byãs
, (request.bytes) },

525 { 
	`memˇched_¨øy_°rög
(
±r
->
_«me•a˚
), 
	`memˇched_¨øy_size
(ptr->_namespace) },

526 { 
keys
[
x
], 
key_Àngth
[x] }

529 i‡(
	`memˇched_io_wrôev
(
ö°™˚
, 
ve˘‹
, 3, 
Êush
Ë=
Ál£
)

531 
	`memˇched_£rvî_ª•⁄£_ª£t
(
ö°™˚
);

532 
rc

MEMCACHED_SOME_ERRORS
;

537 
	`memˇched_£rvî_ª•⁄£_ª£t
(
ö°™˚
);

538 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

539 i‡((
x
 > 0 
™d
 x =
±r
->
io_key_¥e„tch
Ë™d 
	`memˇched_Êush_buf„rs
’åË!
MEMCACHED_SUCCESS
)

541 
rc

MEMCACHED_SOME_ERRORS
;

545 i‡(
mgë_mode
)

550 
¥Ÿocﬁ_bö¨y_ªque°_no›
 
ªque°
= {};

551 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_NOOP
;

552 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

554 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); ++x)

556 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
x
);

558 i‡(
ö°™˚
->
	`ª•⁄£_cou¡
())

560 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

561 i‡((
	`memˇched_io_wrôe
(
ö°™˚
Ë=
Ál£
Ë
‹


562 (
	`memˇched_io_wrôe
(
ö°™˚
, 
ªque°
.
byãs
, ‘eque°.byãs), 
åue
) == -1))

564 
	`memˇched_ö°™˚_ª•⁄£_ª£t
(
ö°™˚
);

565 
	`memˇched_io_ª£t
(
ö°™˚
);

566 
rc

MEMCACHED_SOME_ERRORS
;

572  
rc
;

573 
	}
}

575 
memˇched_ªtu∫_t
 
	$ª∂iˇti⁄_bö¨y_mgë
(
memˇched_°
 *
±r
,

576 
uöt32_t
* 
hash
,

577 
boﬁ
* 
dód_£rvîs
,

578 c⁄° *c⁄° *
keys
,

579 c⁄° 
size_t
 *
key_Àngth
,

580 c⁄° 
size_t
 
numbî_of_keys
)

582 
memˇched_ªtu∫_t
 
rc

MEMCACHED_NOTFOUND
;

583 
uöt32_t
 
°¨t
= 0;

584 
uöt64_t
 
øndomize_ªad

	`memˇched_behavi‹_gë
(
±r
, 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
);

586 i‡(
øndomize_ªad
)

588 
°¨t
(
uöt32_t
)
	`øndom
(Ë% (uöt32_t)(
±r
->
numbî_of_ª∂iˇs
 + 1);

592 
uöt32_t
 
ª∂iˇ
0;Ñïliˇ <
±r
->
numbî_of_ª∂iˇs
; ++replica)

594 
boﬁ
 
suc˚ss

åue
;

596 
uöt32_t
 
x
0; x < 
numbî_of_keys
; ++x)

598 i‡(
hash
[
x
] =
	`memˇched_£rvî_cou¡
(
±r
))

603 
uöt32_t
 
£rvî

hash
[
x
] +
ª∂iˇ
;

606 i‡(
øndomize_ªad
 
	`™d
 ((
£rvî
 + 
°¨t
Ë<(
hash
[
x
] + 
±r
->
numbî_of_ª∂iˇs
)))

608 
£rvî
+
°¨t
;

611 
£rvî
 >
	`memˇched_£rvî_cou¡
(
±r
))

613 
£rvî
 -
	`memˇched_£rvî_cou¡
(
±r
);

616 i‡(
dód_£rvîs
[
£rvî
])

621 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
£rvî
);

623 i‡(
ö°™˚
->
	`ª•⁄£_cou¡
() == 0)

625 
rc

	`memˇched_c⁄√˘
(
ö°™˚
);

627 i‡(
	`memˇched_Áûed
(
rc
))

629 
	`memˇched_io_ª£t
(
ö°™˚
);

630 
dód_£rvîs
[
£rvî
]
åue
;

631 
suc˚ss

Ál£
;

636 
¥Ÿocﬁ_bö¨y_ªque°_gëk
 
ªque°
= {};

637 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

638 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_GETK
;

639 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
[
x
] + 
	`memˇched_¨øy_size
(
±r
->
_«me•a˚
)));

640 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

641 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
)(
key_Àngth
[
x
] + 
	`memˇched_¨øy_size
(
±r
->
_«me•a˚
)));

653 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

655 { 
ªque°
.
byãs
, (request.bytes) },

656 { 
	`memˇched_¨øy_°rög
(
±r
->
_«me•a˚
), 
	`memˇched_¨øy_size
(ptr->_namespace) },

657 { 
keys
[
x
], 
key_Àngth
[x] }

660 i‡(
	`memˇched_io_wrôev
(
ö°™˚
, 
ve˘‹
, 3, 
åue
Ë=
Ál£
)

662 
	`memˇched_io_ª£t
(
ö°™˚
);

663 
dód_£rvîs
[
£rvî
]
åue
;

664 
suc˚ss

Ál£
;

668 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

669 
hash
[
x
]
	`memˇched_£rvî_cou¡
(
±r
);

672 i‡(
suc˚ss
)

678  
rc
;

679 
	}
}

681 
memˇched_ªtu∫_t
 
	$bö¨y_mgë_by_key
(
memˇched_°
 *
±r
,

682 c⁄° 
uöt32_t
 
ma°î_£rvî_key
,

683 
boﬁ
 
is_group_key_£t
,

684 c⁄° * c⁄° *
keys
,

685 c⁄° 
size_t
 *
key_Àngth
,

686 c⁄° 
size_t
 
numbî_of_keys
,

687 c⁄° 
boﬁ
 
mgë_mode
)

689 i‡(
±r
->
numbî_of_ª∂iˇs
 == 0)

691  
	`sim∂e_bö¨y_mgë
(
±r
, 
ma°î_£rvî_key
, 
is_group_key_£t
,

692 
keys
, 
key_Àngth
, 
numbî_of_keys
, 
mgë_mode
);

695 
uöt32_t
* 
hash

	`libmemˇched_xvÆloc
(
±r
, 
numbî_of_keys
, uint32_t);

696 
boﬁ
* 
dód_£rvîs

	`libmemˇched_xˇŒoc
(
±r
, 
	`memˇched_£rvî_cou¡
(ptr), bool);

698 i‡(
hash
 =
NULL
 
‹
 
dód_£rvîs
 == NULL)

700 
	`libmemˇched_‰ì
(
±r
, 
hash
);

701 
	`libmemˇched_‰ì
(
±r
, 
dód_£rvîs
);

702  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

705 i‡(
is_group_key_£t
)

707 
size_t
 
x
0; x < 
numbî_of_keys
; x++)

709 
hash
[
x
]
ma°î_£rvî_key
;

714 
size_t
 
x
0; x < 
numbî_of_keys
; x++)

716 
hash
[
x
]
	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
keys
[x], 
key_Àngth
[x]);

720 
memˇched_ªtu∫_t
 
rc

	`ª∂iˇti⁄_bö¨y_mgë
(
±r
, 
hash
, 
dód_£rvîs
, 
keys
,

721 
key_Àngth
, 
numbî_of_keys
);

723 
	`WATCHPOINT_IFERROR
(
rc
);

724 
	`libmemˇched_‰ì
(
±r
, 
hash
);

725 
	`libmemˇched_‰ì
(
±r
, 
dód_£rvîs
);

727  
MEMCACHED_SUCCESS
;

728 
	}
}

	@libmemcached/hash.cc

39 
	~<libmemˇched/comm⁄.h
>

41 
	~<sys/time.h
>

43 
	~<libmemˇched/vútuÆ_buckë.h
>

45 
uöt32_t
 
	$memˇched_gíî©e_hash_vÆue
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
memˇched_hash_t
 
hash_Æg‹ôhm
)

47  
	`libhashkô_dige°
(
key
, 
key_Àngth
, (
hashkô_hash_Æg‹ôhm_t
)
hash_Æg‹ôhm
);

48 
	}
}

50 
ölöe
 
uöt32_t
 
	$gíî©e_hash
(c⁄° 
Memˇched
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
)

52  
	`hashkô_dige°
(&
±r
->
hashkô
, 
key
, 
key_Àngth
);

53 
	}
}

55 
uöt32_t
 
	$di•©ch_ho°
(c⁄° 
Memˇched
 *
±r
, 
uöt32_t
 
hash
)

57 
±r
->
di°ributi⁄
)

59 
MEMCACHED_DISTRIBUTION_CONSISTENT
:

60 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
:

61 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
:

62 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
:

64 
uöt32_t
 
num

±r
->
këama
.
c⁄töuum_poöts_cou¡î
;

65 
	`WATCHPOINT_ASSERT
(
±r
->
këama
.
c⁄töuum
);

67 
memˇched_c⁄töuum_ôem_°
 *
begö
, *
íd
, *
À·
, *
right
, *
middÀ
;

68 
begö

À·

±r
->
këama
.
c⁄töuum
;

69 
íd

right

±r
->
këama
.
c⁄töuum
 + 
num
;

71 
À·
 < 
right
)

73 
middÀ

À·
 + (
right
 -Üeft) / 2;

74 i‡(
middÀ
->
vÆue
 < 
hash
)

75 
À·

middÀ
 + 1;

77 
right

middÀ
;

79 i‡(
right
 =
íd
)

80 
right

begö
;

81  
right
->
ödex
;

83 
MEMCACHED_DISTRIBUTION_MODULA
:

84  
hash
 % 
	`memˇched_£rvî_cou¡
(
±r
);

85 
MEMCACHED_DISTRIBUTION_RANDOM
:

86  (
uöt32_t
Ë
	`øndom
(Ë% 
	`memˇched_£rvî_cou¡
(
±r
);

87 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
:

89  
	`memˇched_vútuÆ_buckë_gë
(
±r
, 
hash
);

92 
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
:

93 
	`WATCHPOINT_ASSERT
(0);

94  
hash
 % 
	`memˇched_£rvî_cou¡
(
±r
);

97 
	}
}

102 
ölöe
 
uöt32_t
 
	$_gíî©e_hash_wøµî
(c⁄° 
Memˇched
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
)

104 
	`WATCHPOINT_ASSERT
(
	`memˇched_£rvî_cou¡
(
±r
));

106 i‡(
	`memˇched_£rvî_cou¡
(
±r
) == 1)

109 i‡(
±r
->
Êags
.
hash_wôh_«me•a˚
)

111 
size_t
 
ãmp_Àngth

	`memˇched_¨øy_size
(
±r
->
_«me•a˚
Ë+ 
key_Àngth
;

112 
ãmp
[
MEMCACHED_MAX_KEY
];

114 i‡(
ãmp_Àngth
 > 
MEMCACHED_MAX_KEY
 -1)

117 
	`°∫˝y
(
ãmp
, 
	`memˇched_¨øy_°rög
(
±r
->
_«me•a˚
), 
	`memˇched_¨øy_size
(ptr->_namespace));

118 
	`°∫˝y
(
ãmp
 + 
	`memˇched_¨øy_size
(
±r
->
_«me•a˚
), 
key
, 
key_Àngth
);

120  
	`gíî©e_hash
(
±r
, 
ãmp
, 
ãmp_Àngth
);

124  
	`gíî©e_hash
(
±r
, 
key
, 
key_Àngth
);

126 
	}
}

128 
ölöe
 
	$_ªgí_f‹_auto_eje˘
(
Memˇched
 *
±r
)

130 i‡(
	`_is_auto_eje˘_ho°
(
±r
Ë&&Öå->
këama
.
√xt_di°ributi⁄_ªbuûd
)

132 
timevÆ
 
now
;

134 i‡(
	`gëtimeofday
(&
now
, 
NULL
Ë=0 
™d


135 
now
.
tv_£c
 > 
±r
->
këama
.
√xt_di°ributi⁄_ªbuûd
)

137 
	`run_di°ributi⁄
(
±r
);

140 
	}
}

142 
	$memˇched_aut€je˘
(
memˇched_°
 *
±r
)

144 
	`_ªgí_f‹_auto_eje˘
(
±r
);

145 
	}
}

147 
uöt32_t
 
	$memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
)

149 
uöt32_t
 
hash

	`_gíî©e_hash_wøµî
(
±r
, 
key
, 
key_Àngth
);

151 
	`_ªgí_f‹_auto_eje˘
(
±r
);

153  
	`di•©ch_ho°
(
±r
, 
hash
);

154 
	}
}

156 
uöt32_t
 
	$memˇched_gíî©e_hash
(c⁄° 
memˇched_°
 *
shñl
, c⁄° *
key
, 
size_t
 
key_Àngth
)

158 c⁄° 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

159 i‡(
±r
)

161  
	`di•©ch_ho°
(
±r
, 
	`_gíî©e_hash_wøµî
’å, 
key
, 
key_Àngth
));

164  
UINT32_MAX
;

165 
	}
}

167 c⁄° 
hashkô_°
 *
	$memˇched_gë_hashkô
(c⁄° 
memˇched_°
 *
shñl
)

169 c⁄° 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

170 i‡(
±r
)

172  &
±r
->
hashkô
;

175  
NULL
;

176 
	}
}

178 
memˇched_ªtu∫_t
 
	$memˇched_£t_hashkô
(
memˇched_°
 *
shñl
, 
hashkô_°
 *
hashk
)

180 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

181 i‡(
£lf
)

183 
	`hashkô_‰ì
(&
£lf
->
hashkô
);

184 
	`hashkô_˛⁄e
(&
£lf
->
hashkô
, 
hashk
);

186  
MEMCACHED_SUCCESS
;

189  
MEMCACHED_INVALID_ARGUMENTS
;

190 
	}
}

192 c⁄° * 
	$libmemˇched_°rög_hash
(
memˇched_hash_t
 
ty≥
)

194  
	`libhashkô_°rög_hash
((
hashkô_hash_Æg‹ôhm_t
)
ty≥
);

195 
	}
}

	@libmemcached/hash.hpp

38 #¥agm®
⁄˚


40 
uöt32_t
 
memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
);

	@libmemcached/hosts.cc

38 
	~<libmemˇched/comm⁄.h
>

39 
	~"libmemˇched/as£π.hµ
"

41 
	~<cm©h
>

42 
	~<sys/time.h
>

45 
memˇched_ªtu∫_t
 
upd©e_c⁄töuum
(
Memˇched
 *
±r
);

47 
	$com∑ª_£rvîs
(c⁄° *
p1
, c⁄° *
p2
)

49 c⁄° 
memˇched_ö°™˚_°
 * 
a
(c⁄° memˇched_ö°™˚_° *)
p1
;

50 c⁄° 
memˇched_ö°™˚_°
 * 
b
(c⁄° memˇched_ö°™˚_° *)
p2
;

52 
ªtu∫_vÆue

	`°rcmp
(
a
->
_ho°«me
, 
b
->_hostname);

54 i‡(
ªtu∫_vÆue
 == 0)

56 
ªtu∫_vÆue
(
a
->
	`p‹t
(Ë- 
b
->port());

59  
ªtu∫_vÆue
;

60 
	}
}

62 
	$s‹t_ho°s
(
Memˇched
 *
±r
)

64 i‡(
	`memˇched_£rvî_cou¡
(
±r
))

66 
	`qs‹t
(
	`memˇched_ö°™˚_li°
(
±r
), 
	`memˇched_£rvî_cou¡
’å), (
memˇched_ö°™˚_°
), 
com∑ª_£rvîs
);

68 
	}
}

71 
memˇched_ªtu∫_t
 
	$run_di°ributi⁄
(
Memˇched
 *
±r
)

73 i‡(
±r
->
Êags
.
u£_s‹t_ho°s
)

75 
	`s‹t_ho°s
(
±r
);

78 
±r
->
di°ributi⁄
)

80 
MEMCACHED_DISTRIBUTION_CONSISTENT
:

81 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
:

82 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
:

83 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
:

84  
	`upd©e_c⁄töuum
(
±r
);

86 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
:

87 
MEMCACHED_DISTRIBUTION_MODULA
:

90 
MEMCACHED_DISTRIBUTION_RANDOM
:

91 
	`§™dom
((
uöt32_t
Ë
	`time
(
NULL
));

94 
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
:

96 
	`as£π_msg
(0, "Invalid distributionÅypeÖassedÅoÑun_distribution()");

99  
MEMCACHED_SUCCESS
;

100 
	}
}

102 
uöt32_t
 
	$këama_£rvî_hash
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
uöt32_t
 
Æignmít
)

104 
ªsu…s
[16];

106 
	`libhashkô_md5_sig«tuª
((*)
key
, 
key_Àngth
, 
ªsu…s
);

108  ((
uöt32_t
Ë(
ªsu…s
[3 + 
Æignmít
 * 4] & 0xFF) << 24)

109 | ((
uöt32_t
Ë(
ªsu…s
[2 + 
Æignmít
 * 4] & 0xFF) << 16)

110 | ((
uöt32_t
Ë(
ªsu…s
[1 + 
Æignmít
 * 4] & 0xFF) << 8)

111 | (
ªsu…s
[0 + 
Æignmít
 * 4] & 0xFF);

112 
	}
}

114 
	$c⁄töuum_ôem_cmp
(c⁄° *
t1
, c⁄° *
t2
)

116 
memˇched_c⁄töuum_ôem_°
 *
˘1
(memˇched_c⁄töuum_ôem_° *)
t1
;

117 
memˇched_c⁄töuum_ôem_°
 *
˘2
(memˇched_c⁄töuum_ôem_° *)
t2
;

120 
	`WATCHPOINT_ASSERT
(
˘1
->
vÆue
 != 153);

121 i‡(
˘1
->
vÆue
 =
˘2
->value)

125 i‡(
˘1
->
vÆue
 > 
˘2
->value)

133 
	}
}

135 
memˇched_ªtu∫_t
 
	$upd©e_c⁄töuum
(
Memˇched
 *
±r
)

137 
uöt32_t
 
c⁄töuum_ödex
= 0;

138 
uöt32_t
 
poöãr_cou¡î
= 0;

139 
uöt32_t
 
poöãr_≥r_£rvî

MEMCACHED_POINTS_PER_SERVER
;

140 
uöt32_t
 
poöãr_≥r_hash
= 1;

141 
uöt32_t
 
live_£rvîs
= 0;

142 
timevÆ
 
now
;

144 i‡(
	`gëtimeofday
(&
now
, 
NULL
))

146  
	`memˇched_£t_î∫o
(*
±r
, 
î∫o
, 
MEMCACHED_AT
);

149 
memˇched_ö°™˚_°
* 
li°

	`memˇched_ö°™˚_li°
(
±r
);

152 
boﬁ
 
is_auto_eje˘ög

	`_is_auto_eje˘_ho°
(
±r
);

153 i‡(
is_auto_eje˘ög
)

155 
live_£rvîs
= 0;

156 
±r
->
këama
.
√xt_di°ributi⁄_ªbuûd
= 0;

157 
uöt32_t
 
ho°_ödex
0; ho°_ödex < 
	`memˇched_£rvî_cou¡
(
±r
); ++host_index)

159 i‡(
li°
[
ho°_ödex
].
√xt_ªåy
 <
now
.
tv_£c
)

161 
live_£rvîs
++;

165 i‡(
±r
->
këama
.
√xt_di°ributi⁄_ªbuûd
 =0 
‹
 
li°
[
ho°_ödex
].
√xt_ªåy
 <Ötr->ketama.next_distribution_rebuild)

167 
±r
->
këama
.
√xt_di°ributi⁄_ªbuûd

li°
[
ho°_ödex
].
√xt_ªåy
;

174 
live_£rvîs

	`memˇched_£rvî_cou¡
(
±r
);

177 
uöt32_t
 
poöts_≥r_£rvî
(uöt32_tË(
	`memˇched_is_weighãd_këama
(
±r
Ë? 
MEMCACHED_POINTS_PER_SERVER_KETAMA
 : 
MEMCACHED_POINTS_PER_SERVER
);

179 i‡(
live_£rvîs
 == 0)

181  
MEMCACHED_SUCCESS
;

184 i‡(
live_£rvîs
 > 
±r
->
këama
.
c⁄töuum_cou¡
)

186 
memˇched_c⁄töuum_ôem_°
 *
√w_±r
;

188 
√w_±r

	`libmemˇched_xªÆloc
(
±r
,Öå->
këama
.
c⁄töuum
, (
live_£rvîs
 + 
MEMCACHED_CONTINUUM_ADDITION
Ë* 
poöts_≥r_£rvî
, 
memˇched_c⁄töuum_ôem_°
);

190 i‡(
√w_±r
 == 0)

192  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

195 
±r
->
këama
.
c⁄töuum

√w_±r
;

196 
±r
->
këama
.
c⁄töuum_cou¡

live_£rvîs
 + 
MEMCACHED_CONTINUUM_ADDITION
;

198 
	`as£π_msg
(
±r
->
këama
.
c⁄töuum
, "Programmer Error,Émpty ketama continuum");

200 
uöt64_t
 
tŸÆ_weight
= 0;

201 i‡(
	`memˇched_is_weighãd_këama
(
±r
))

203 
uöt32_t
 
ho°_ödex
 = 0; ho°_ödex < 
	`memˇched_£rvî_cou¡
(
±r
); ++host_index)

205 i‡(
is_auto_eje˘ög
 =
Ál£
 
‹
 
li°
[
ho°_ödex
].
√xt_ªåy
 <
now
.
tv_£c
)

207 
tŸÆ_weight
 +
li°
[
ho°_ödex
].
weight
;

212 
uöt32_t
 
ho°_ödex
0; ho°_ödex < 
	`memˇched_£rvî_cou¡
(
±r
); ++host_index)

214 i‡(
is_auto_eje˘ög
 
™d
 
li°
[
ho°_ödex
].
√xt_ªåy
 > 
now
.
tv_£c
)

219 i‡(
	`memˇched_is_weighãd_këama
(
±r
))

221 
p˘
()
li°
[
ho°_ödex
].
weight
 / ()
tŸÆ_weight
;

222 
poöãr_≥r_£rvî
(
uöt32_t
Ë((::
	`Êo‹
((Ë(
p˘
 * 
MEMCACHED_POINTS_PER_SERVER_KETAMA
 / 4 * ()
live_£rvîs
 + 0.0000000001))) * 4);

223 
poöãr_≥r_hash
= 4;

224 i‡(
DEBUG
)

226 
	`¥ötf
("ketama_weighted:%s|%d|%llu|%u\n",

227 
li°
[
ho°_ödex
].
_ho°«me
,

228 
li°
[
ho°_ödex
].
	`p‹t
(),

229 ()
li°
[
ho°_ödex
].
weight
,

230 
poöãr_≥r_£rvî
);

235 i‡(
±r
->
di°ributi⁄
 =
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
)

237 
uöt32_t
 
poöãr_ödex
= 0;

238 
poöãr_ödex
 < 
poöãr_≥r_£rvî
 / 
poöãr_≥r_hash
;

239 
poöãr_ödex
++)

241 
s‹t_ho°
[1 +
MEMCACHED_NI_MAXHOST
 +1 +
MEMCACHED_NI_MAXSERV
 +1 + MEMCACHED_NI_MAXSERV ]= "";

242 
s‹t_ho°_Àngth
;

246 
s‹t_ho°_Àngth

	`¢¥ötf
(
s‹t_ho°
, (sort_host),

248 
li°
[
ho°_ödex
].
_ho°«me
,

249 (
uöt32_t
)
li°
[
ho°_ödex
].
	`p‹t
(),

250 
poöãr_ödex
);

252 i‡(
	`size_t
(
s‹t_ho°_Àngth
Ë>(
s‹t_ho°
Ë
‹
 sort_host_length < 0)

254  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

255 
	`memˇched_lôîÆ_∑øm
("snprintf(sizeof(sort_host))"));

258 i‡(
DEBUG
)

260 
	`Ârötf
(
°dout
, "upd©e_c⁄töuum: key i†%s\n", 
s‹t_ho°
);

263 i‡(
	`memˇched_is_weighãd_këama
(
±r
))

265 
uöt32_t
 
x
0; x < 
poöãr_≥r_hash
; x++)

267 
uöt32_t
 
vÆue

	`këama_£rvî_hash
(
s‹t_ho°
, (
size_t
)
s‹t_ho°_Àngth
, 
x
);

268 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
].
ödex

ho°_ödex
;

269 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

274 
uöt32_t
 
vÆue

	`hashkô_dige°
(&
±r
->
hashkô
, 
s‹t_ho°
, (
size_t
)
s‹t_ho°_Àngth
);

275 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
].
ödex

ho°_ödex
;

276 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

282 
uöt32_t
 
poöãr_ödex
= 1;

283 
poöãr_ödex
 <
poöãr_≥r_£rvî
 / 
poöãr_≥r_hash
;

284 
poöãr_ödex
++)

286 
s‹t_ho°
[
MEMCACHED_NI_MAXHOST
 +1 +
MEMCACHED_NI_MAXSERV
 +1 +MEMCACHED_NI_MAXSERV]= "";

287 
s‹t_ho°_Àngth
;

289 i‡(
li°
[
ho°_ödex
].
	`p‹t
(Ë=
MEMCACHED_DEFAULT_PORT
)

291 
s‹t_ho°_Àngth

	`¢¥ötf
(
s‹t_ho°
, (sort_host),

293 
li°
[
ho°_ödex
].
_ho°«me
,

294 
poöãr_ödex
 - 1);

298 
s‹t_ho°_Àngth

	`¢¥ötf
(
s‹t_ho°
, (sort_host),

300 
li°
[
ho°_ödex
].
_ho°«me
,

301 (
uöt32_t
)
li°
[
ho°_ödex
].
	`p‹t
(),

302 
poöãr_ödex
 - 1);

305 i‡(
	`size_t
(
s‹t_ho°_Àngth
Ë>(
s‹t_ho°
Ë
‹
 sort_host_length < 0)

307  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

308 
	`memˇched_lôîÆ_∑øm
("snprintf(sizeof(sort_host)))"));

311 i‡(
	`memˇched_is_weighãd_këama
(
±r
))

313 
uöt32_t
 
x
 = 0; x < 
poöãr_≥r_hash
; x++)

315 
uöt32_t
 
vÆue

	`këama_£rvî_hash
(
s‹t_ho°
, (
size_t
)
s‹t_ho°_Àngth
, 
x
);

316 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
].
ödex

ho°_ödex
;

317 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

322 
uöt32_t
 
vÆue

	`hashkô_dige°
(&
±r
->
hashkô
, 
s‹t_ho°
, (
size_t
)
s‹t_ho°_Àngth
);

323 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
].
ödex

ho°_ödex
;

324 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

329 
poöãr_cou¡î
+
poöãr_≥r_£rvî
;

332 
	`as£π_msg
(
±r
, "Programmer Error,Ço validÖtr");

333 
	`as£π_msg
(
±r
->
këama
.
c⁄töuum
, "Programmer Error,Émpty ketama continuum");

334 
	`as£π_msg
(
	`memˇched_£rvî_cou¡
(
±r
Ë* 
MEMCACHED_POINTS_PER_SERVER
 <
MEMCACHED_CONTINUUM_SIZE
, "invalid size information being givenÅo qsort()");

335 
±r
->
këama
.
c⁄töuum_poöts_cou¡î

poöãr_cou¡î
;

336 
	`qs‹t
(
±r
->
këama
.
c⁄töuum
,Öå->këama.
c⁄töuum_poöts_cou¡î
, (
memˇched_c⁄töuum_ôem_°
), 
c⁄töuum_ôem_cmp
);

338 i‡(
DEBUG
)

340 
uöt32_t
 
poöãr_ödex
0; 
	`memˇched_£rvî_cou¡
(
±r
Ë&&Öoöãr_ödex < ((
live_£rvîs
 * 
MEMCACHED_POINTS_PER_SERVER
) - 1);Öointer_index++)

342 
	`WATCHPOINT_ASSERT
(
±r
->
këama
.
c⁄töuum
[
poöãr_ödex
].
vÆue
 <=Ötr->ketama.continuum[pointer_index + 1].value);

346  
MEMCACHED_SUCCESS
;

347 
	}
}

349 
memˇched_ªtu∫_t
 
	$£rvî_add
(
Memˇched
 *
memc
,

350 c⁄° 
memˇched_°rög_t
& 
ho°«me
,

351 
ö_p‹t_t
 
p‹t
,

352 
uöt32_t
 
weight
,

353 
memˇched_c⁄√˘i⁄_t
 
ty≥
)

355 
	`as£π_msg
(
memc
, "Programmer mistake, somehow server_add() wasÖassedá NULL memcached_st");

357 i‡(
memc
->
numbî_of_ho°s
)

359 
	`as£π
(
	`memˇched_ö°™˚_li°
(
memc
));

362 i‡(
	`memˇched_ö°™˚_li°
(
memc
))

364 
	`as£π
(
memc
->
numbî_of_ho°s
);

367 
uöt32_t
 
ho°_li°_size

memc
->
numbî_of_ho°s
 +1;

368 
memˇched_ö°™˚_°
* 
√w_ho°_li°

	`libmemˇched_xªÆloc
(
memc
, 
	`memˇched_ö°™˚_li°
(memc), 
ho°_li°_size
, memcached_instance_st);

370 i‡(
√w_ho°_li°
 =
NULL
)

372  
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

375 
	`memˇched_ö°™˚_£t
(
memc
, 
√w_ho°_li°
, 
ho°_li°_size
);

376 
	`as£π
(
memc
->
numbî_of_ho°s
 =
ho°_li°_size
);

379 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
	`memˇched_£rvî_cou¡
(memc) -1);

381 i‡(
	`__ö°™˚_¸óã_wôh
(
memc
, 
ö°™˚
, 
ho°«me
, 
p‹t
, 
weight
, 
ty≥
Ë=
NULL
)

383  
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

386 i‡(
weight
 > 1)

388 i‡(
	`memˇched_is_c⁄si°ít_di°ributi⁄
(
memc
))

390 
	`memˇched_£t_weighãd_këama
(
memc
, 
åue
);

394  
	`run_di°ributi⁄
(
memc
);

395 
	}
}

398 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_push
(
memˇched_°
 *
shñl
, c⁄° 
memˇched_£rvî_li°_°
 
li°
)

400 i‡(
li°
 =
NULL
)

402  
MEMCACHED_SUCCESS
;

405 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

406 i‡(
±r
)

408 
uöt32_t
 
‹igöÆ_ho°_size

	`memˇched_£rvî_cou¡
(
±r
);

409 
uöt32_t
 
cou¡

	`memˇched_£rvî_li°_cou¡
(
li°
);

410 
uöt32_t
 
ho°_li°_size

cou¡
 +
‹igöÆ_ho°_size
;

412 
memˇched_ö°™˚_°
* 
√w_ho°_li°

	`libmemˇched_xªÆloc
(
±r
, 
	`memˇched_ö°™˚_li°
’å), 
ho°_li°_size
, memcached_instance_st);

414 i‡(
√w_ho°_li°
 =
NULL
)

416  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

419 
	`memˇched_ö°™˚_£t
(
±r
, 
√w_ho°_li°
, 
ho°_li°_size
);

421 
±r
->
°©e
.
is_∑rsög

åue
;

422 
uöt32_t
 
x
0; x < 
cou¡
; ++x, ++
‹igöÆ_ho°_size
)

424 
	`WATCHPOINT_ASSERT
(
li°
[
x
].
ho°«me
[0] != 0);

427 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
‹igöÆ_ho°_size
);

428 
	`WATCHPOINT_ASSERT
(
ö°™˚
);

430 
memˇched_°rög_t
 
ho°«me
{ 
	`memˇched_°rög_make_‰om_c°r
(
li°
[
x
].hostname) };

431 i‡(
	`__ö°™˚_¸óã_wôh
(
±r
, 
ö°™˚
,

432 
ho°«me
,

433 
li°
[
x
].
p‹t
,Üi°[x].
weight
,Üi°[x].
ty≥
Ë=
NULL
)

435 
±r
->
°©e
.
is_∑rsög

Ál£
;

436  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

439 i‡(
li°
[
x
].
weight
 > 1)

441 
	`memˇched_£t_weighãd_këama
(
±r
, 
åue
);

444 
±r
->
°©e
.
is_∑rsög

Ál£
;

446  
	`run_di°ributi⁄
(
±r
);

449  
MEMCACHED_INVALID_ARGUMENTS
;

450 
	}
}

452 
memˇched_ªtu∫_t
 
	$memˇched_ö°™˚_push
(
memˇched_°
 *
±r
, c⁄° 
memˇched_ö°™˚_°
* 
li°
, 
uöt32_t
 
numbî_of_ho°s
)

454 i‡(
li°
 =
NULL
)

456  
MEMCACHED_SUCCESS
;

459 
uöt32_t
 
‹igöÆ_ho°_size

	`memˇched_£rvî_cou¡
(
±r
);

460 
uöt32_t
 
ho°_li°_size

numbî_of_ho°s
 +
‹igöÆ_ho°_size
;

461 
memˇched_ö°™˚_°
* 
√w_ho°_li°

	`libmemˇched_xªÆloc
(
±r
, 
	`memˇched_ö°™˚_li°
’å), 
ho°_li°_size
, memcached_instance_st);

463 i‡(
√w_ho°_li°
 =
NULL
)

465  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

468 
	`memˇched_ö°™˚_£t
(
±r
, 
√w_ho°_li°
, 
ho°_li°_size
);

471 
±r
->
°©e
.
is_∑rsög

åue
;

475 
uöt32_t
 
x
0; x < 
numbî_of_ho°s
; ++x, ++
‹igöÆ_ho°_size
)

477 
	`WATCHPOINT_ASSERT
(
li°
[
x
].
_ho°«me
[0] != 0);

480 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
‹igöÆ_ho°_size
);

481 
	`WATCHPOINT_ASSERT
(
ö°™˚
);

483 
memˇched_°rög_t
 
ho°«me
{ 
	`memˇched_°rög_make_‰om_c°r
(
li°
[
x
].
_ho°«me
) };

484 i‡(
	`__ö°™˚_¸óã_wôh
(
±r
, 
ö°™˚
,

485 
ho°«me
,

486 
li°
[
x
].
	`p‹t
(),Üi°[x].
weight
,Üi°[x].
ty≥
Ë=
NULL
)

488 
±r
->
°©e
.
is_∑rsög

Ál£
;

489  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

492 i‡(
li°
[
x
].
weight
 > 1)

494 
	`memˇched_£t_weighãd_këama
(
±r
, 
åue
);

497 
±r
->
°©e
.
is_∑rsög

Ál£
;

499  
	`run_di°ributi⁄
(
±r
);

500 
	}
}

502 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_unix_sockë
(
memˇched_°
 *
±r
,

503 c⁄° *
fûíame
)

505  
	`memˇched_£rvî_add_unix_sockë_wôh_weight
(
±r
, 
fûíame
, 0);

506 
	}
}

508 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_unix_sockë_wôh_weight
(
memˇched_°
 *
shñl
,

509 c⁄° *
fûíame
,

510 
uöt32_t
 
weight
)

512 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

513 i‡(
±r
)

515 
memˇched_°rög_t
 
_fûíame
{ 
	`memˇched_°rög_make_‰om_c°r
(
fûíame
) };

516 i‡(
	`memˇched_is_vÆid_fûíame
(
_fûíame
Ë=
Ál£
)

518  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Invalid filename for socketÖrovided"));

521  
	`£rvî_add
(
±r
, 
_fûíame
, 0, 
weight
, 
MEMCACHED_CONNECTION_UNIX_SOCKET
);

524  
MEMCACHED_FAILURE
;

525 
	}
}

527 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_udp
(
memˇched_°
 *
±r
,

528 c⁄° *
ho°«me
,

529 
ö_p‹t_t
 
p‹t
)

531  
	`memˇched_£rvî_add_udp_wôh_weight
(
±r
, 
ho°«me
, 
p‹t
, 0);

532 
	}
}

534 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_udp_wôh_weight
(
memˇched_°
 *
shñl
,

536 
ö_p‹t_t
,

537 
uöt32_t
)

539 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

540 i‡(
£lf
)

542  
	`memˇched_£t_îr‹
(*
£lf
, 
MEMCACHED_DEPRECATED
, 
MEMCACHED_AT
);

545  
MEMCACHED_INVALID_ARGUMENTS
;

546 
	}
}

548 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add
(
memˇched_°
 *
shñl
,

549 c⁄° *
ho°«me
,

550 
ö_p‹t_t
 
p‹t
)

552  
	`memˇched_£rvî_add_wôh_weight
(
shñl
, 
ho°«me
, 
p‹t
, 0);

553 
	}
}

555 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_wôh_weight
(
memˇched_°
 *
shñl
,

556 c⁄° *
ho°«me
,

557 
ö_p‹t_t
 
p‹t
,

558 
uöt32_t
 
weight
)

560 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

561 i‡(
±r
 =
NULL
)

563  
MEMCACHED_INVALID_ARGUMENTS
;

566 i‡(
p‹t
 == 0)

568 
p‹t

MEMCACHED_DEFAULT_PORT
;

571 
size_t
 
ho°«me_Àngth

ho°«me
 ? 
	`°æí
(hostname) : 0;

572 i‡(
ho°«me_Àngth
 == 0)

574 
ho°«me
= "localhost";

575 
ho°«me_Àngth

	`memˇched_lôîÆ_∑øm_size
("localhost");

578 
memˇched_°rög_t
 
_ho°«me
{ 
ho°«me
, 
ho°«me_Àngth
 };

580 i‡(
	`memˇched_is_vÆid_£rvî«me
(
_ho°«me
Ë=
Ál£
)

582  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Invalid hostnameÖrovided"));

585  
	`£rvî_add
(
±r
, 
_ho°«me
, 
p‹t
, 
weight
, _ho°«me.
c_°r
[0] ='/' ? 
MEMCACHED_CONNECTION_UNIX_SOCKET
 : 
MEMCACHED_CONNECTION_TCP
);

586 
	}
}

588 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_∑r£d
(
memˇched_°
 *
±r
,

589 c⁄° *
ho°«me
,

590 
size_t
 
ho°«me_Àngth
,

591 
ö_p‹t_t
 
p‹t
,

592 
uöt32_t
 
weight
)

594 
buf„r
[
MEMCACHED_NI_MAXHOST
];

596 
	`mem˝y
(
buf„r
, 
ho°«me
, 
ho°«me_Àngth
);

597 
buf„r
[
ho°«me_Àngth
]= 0;

599 
memˇched_°rög_t
 
_ho°«me
{ 
buf„r
, 
ho°«me_Àngth
 };

601  
	`£rvî_add
(
±r
, 
_ho°«me
,

602 
p‹t
,

603 
weight
,

604 
MEMCACHED_CONNECTION_TCP
);

605 
	}
}

	@libmemcached/initialize_query.cc

37 
	~<libmemˇched/comm⁄.h
>

39 
memˇched_ªtu∫_t
 
	$öôülize_quîy
(
Memˇched
 *
£lf
, 
boﬁ
 
ö¸emít_quîy_id
)

41 i‡(
£lf
 =
NULL
)

43  
MEMCACHED_INVALID_ARGUMENTS
;

46 i‡(
ö¸emít_quîy_id
)

48 
£lf
->
quîy_id
++;

51 i‡(
£lf
->
°©e
.
is_time_f‹_ªbuûd
)

53 
	`memˇched_ª£t
(
£lf
);

56 i‡(
	`memˇched_£rvî_cou¡
(
£lf
) == 0)

58  
	`memˇched_£t_îr‹
(*
£lf
, 
MEMCACHED_NO_SERVERS
, 
MEMCACHED_AT
);

61 
	`memˇched_îr‹_‰ì
(*
£lf
);

62 
	`memˇched_ªsu…_ª£t
(&
£lf
->
ªsu…
);

64  
MEMCACHED_SUCCESS
;

65 
	}
}

67 
memˇched_ªtu∫_t
 
	$öôülize_c⁄°_quîy
(c⁄° 
Memˇched
 *
£lf
)

69 i‡(
£lf
 =
NULL
)

71  
MEMCACHED_INVALID_ARGUMENTS
;

74 i‡(
	`memˇched_£rvî_cou¡
(
£lf
) == 0)

76  
MEMCACHED_NO_SERVERS
;

79  
MEMCACHED_SUCCESS
;

80 
	}
}

	@libmemcached/initialize_query.h

37 #¥agm®
⁄˚


39 
memˇched_ªtu∫_t
 
öôülize_quîy
(
Memˇched
 *
£lf
, 
boﬁ
 
ö¸emít_quîy_id
);

41 
memˇched_ªtu∫_t
 
öôülize_c⁄°_quîy
(c⁄° 
Memˇched
 *
£lf
);

	@libmemcached/instance.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
ölöe
 
	$_£rvî_öô
(
memˇched_ö°™˚_°
* 
£lf
, 
Memˇched
 *
roŸ
,

41 c⁄° 
memˇched_°rög_t
& 
ho°«me
,

42 
ö_p‹t_t
 
p‹t
,

43 
uöt32_t
 
weight
, 
memˇched_c⁄√˘i⁄_t
 
ty≥
)

45 
£lf
->
›ti⁄s
.
is_shuâög_down

Ál£
;

46 
£lf
->
›ti⁄s
.
is_dód

Ál£
;

47 
£lf
->
›ti⁄s
.
ªady

Ál£
;

48 
£lf
->
_evíts
= 0;

49 
£lf
->
_ªvíts
= 0;

50 
£lf
->
curs‹_a˘ive_
= 0;

51 
£lf
->
p‹t_

p‹t
;

52 
£lf
->
fd

INVALID_SOCKET
;

53 
£lf
->
io_byãs_£¡
= 0;

54 
£lf
->
ªque°_id
= 0;

55 
£lf
->
£rvî_Áûuª_cou¡î
= 0;

56 
£lf
->
£rvî_Áûuª_cou¡î_quîy_id
= 0;

57 
£lf
->
weight
= weight ? weight : 1;

58 
£lf
->
io_waô_cou¡
.
ªad
= 0;

59 
£lf
->
io_waô_cou¡
.
wrôe
= 0;

60 
£lf
->
io_waô_cou¡
.
timeouts
= 0;

61 
£lf
->
io_waô_cou¡
.
_byãs_ªad
= 0;

62 
£lf
->
maj‹_vîsi⁄

UINT8_MAX
;

63 
£lf
->
mi¸o_vîsi⁄

UINT8_MAX
;

64 
£lf
->
mö‹_vîsi⁄

UINT8_MAX
;

65 
£lf
->
ty≥
=Åype;

66 
£lf
->
îr‹_mesßges

NULL
;

67 
£lf
->
ªad_±r
£lf->
ªad_buf„r
;

68 
£lf
->
ªad_buf„r_Àngth
= 0;

69 
£lf
->
ªad_d©a_Àngth
= 0;

70 
£lf
->
wrôe_buf„r_off£t
= 0;

71 
£lf
->
addªss_öfo

NULL
;

72 
£lf
->
addªss_öfo_√xt

NULL
;

74 
£lf
->
°©e

MEMCACHED_SERVER_STATE_NEW
;

75 
£lf
->
√xt_ªåy
= 0;

77 
£lf
->
roŸ
=Ñoot;

78 i‡(
roŸ
)

80 
£lf
->
vîsi⁄
++
roŸ
->
£rvî_öfo
.version;

84 
£lf
->
vîsi⁄

UINT_MAX
;

86 
£lf
->
limô_maxbyãs
= 0;

87 
£lf
->
	`ho°«me
(
ho°«me
);

88 
	}
}

90 
memˇched_ö°™˚_°
* 
	$_£rvî_¸óã
(
memˇched_ö°™˚_°
* 
£lf
, c⁄° 
memˇched_°
 *
memc
)

92 i‡(
£lf
 =
NULL
)

94 
£lf

	`libmemˇched_xmÆloc
(
memc
, 
memˇched_ö°™˚_°
);

96 i‡(
£lf
 =
NULL
)

98  
NULL
;

101 
£lf
->
›ti⁄s
.
is_Æloˇãd

åue
;

105 
£lf
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

108 
£lf
->
›ti⁄s
.
is_öôülized

åue
;

110  
£lf
;

111 
	}
}

113 
	gmemˇched_ö°™˚_°
::
	$evíts
(
¨g
)

115 i‡((
_evíts
 | 
¨g
) == _events)

120 
_evíts
|
¨g
;

121 
	}
}

123 
	gmemˇched_ö°™˚_°
::
	$ªvíts
(
¨g
)

125 i‡(
¨g
)

127 
›ti⁄s
.
ªady

åue
;

130 
_ªvíts

¨g
;

131 
_evíts
&(~
¨g
);

132 
	}
}

134 
memˇched_ö°™˚_°
* 
	$__ö°™˚_¸óã_wôh
(
memˇched_°
 *
memc
,

135 
memˇched_ö°™˚_°
* 
£lf
,

136 c⁄° 
memˇched_°rög_t
& 
ho°«me
,

137 c⁄° 
ö_p‹t_t
 
p‹t
,

138 
uöt32_t
 
weight
,

139 c⁄° 
memˇched_c⁄√˘i⁄_t
 
ty≥
)

141 i‡(
	`memˇched_is_vÆid_£rvî«me
(
ho°«me
Ë=
Ál£
)

143 
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Invalid hostnameÖrovided"));

144  
NULL
;

147 
£lf

	`_£rvî_¸óã
(£lf, 
memc
);

149 i‡(
£lf
 =
NULL
)

151  
NULL
;

154 
	`_£rvî_öô
(
£lf
, 
c⁄°_ˇ°
<
memˇched_°
 *>(
memc
), 
ho°«me
, 
p‹t
, 
weight
, 
ty≥
);

156 i‡(
memc
 
™d
 
	`memˇched_is_udp
(memc))

158 
£lf
->
wrôe_buf„r_off£t

UDP_DATAGRAM_HEADER_LENGTH
;

159 
	`memˇched_io_öô_udp_hódî
(
£lf
, 0);

162  
£lf
;

163 
	}
}

165 
	$__ö°™˚_‰ì
(
memˇched_ö°™˚_°
* 
£lf
)

167 
	`memˇched_quô_£rvî
(
£lf
, 
Ál£
);

169 
£lf
->
	`˛ór_addröfo
();

170 
	`as£π
(
£lf
->
addªss_öfo_√xt
 =
NULL
);

172 
	`memˇched_îr‹_‰ì
(*
£lf
);

174 i‡(
	`memˇched_is_Æloˇãd
(
£lf
))

176 
	`libmemˇched_‰ì
(
£lf
->
roŸ
, self);

180 
£lf
->
›ti⁄s
.
is_öôülized

Ál£
;

182 
	}
}

184 
	$memˇched_ö°™˚_‰ì
(
memˇched_ö°™˚_°
* 
£lf
)

186 i‡(
£lf
)

188 
	`__ö°™˚_‰ì
(
£lf
);

190 
	}
}

192 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_curs‹
(c⁄° 
memˇched_°
* 
shñl
,

193 c⁄° 
memˇched_£rvî_‚
 *
ˇŒback
,

194 *
c⁄ãxt
,

195 
uöt32_t
 
numbî_of_ˇŒbacks
)

197 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

198 
memˇched_ªtu∫_t
 
rc
;

199 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_c⁄°_quîy
(
memc
)))

201  
rc
;

204 
size_t
 
îr‹s
= 0;

205 
uöt32_t
 
x
0; x < 
	`memˇched_ö°™˚_li°_cou¡
(
memc
); x++)

207 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_by_posôi⁄
(
memc
, 
x
);

209 
uöt32_t
 
y
0; y < 
numbî_of_ˇŒbacks
; y++)

211 
memˇched_ªtu∫_t
 
ªt
(*
ˇŒback
[
y
])(
memc
, 
ö°™˚
, 
c⁄ãxt
);

213 i‡(
	`memˇched_Áûed
(
ªt
))

215 
îr‹s
++;

221  
îr‹s
 ? 
MEMCACHED_SOME_ERRORS
 : 
MEMCACHED_SUCCESS
;

222 
	}
}

224 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_execuã
(
memˇched_°
 *
memc
,

225 
memˇched_£rvî_execuã_‚
 
ˇŒback
,

226 *
c⁄ãxt
)

228 i‡(
ˇŒback
 =
NULL
)

230  
MEMCACHED_INVALID_ARGUMENTS
;

233 
boﬁ
 
some_îr‹s

Ál£
;;

234 
uöt32_t
 
x
0; x < 
	`memˇched_ö°™˚_li°_cou¡
(
memc
); x++)

236 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
x
);

238 
memˇched_ªtu∫_t
 
rc
(*
ˇŒback
)(
memc
, 
ö°™˚
, 
c⁄ãxt
);

239 i‡(
rc
 =
MEMCACHED_INVALID_ARGUMENTS
)

241  
rc
;

243 i‡(
	`memˇched_Áèl
(
rc
))

245 
some_îr‹s

åue
;

249 ()
some_îr‹s
;

250  
MEMCACHED_SUCCESS
;

251 
	}
}

253 c⁄° 
memˇched_ö°™˚_°
 * 
	$memˇched_£rvî_by_key
(
memˇched_°
 *
shñl
,

254 c⁄° *
key
,

255 
size_t
 
key_Àngth
,

256 
memˇched_ªtu∫_t
 *
îr‹
)

258 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

259 
memˇched_ªtu∫_t
 
unu£d
;

260 i‡(
îr‹
 =
NULL
)

262 
îr‹
&
unu£d
;

266 
memˇched_ªtu∫_t
 
rc
;

267 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_c⁄°_quîy
(
memc
)))

269 *
îr‹

rc
;

270  
NULL
;

273 i‡(
	`memˇched_Áûed
((
	`memˇched_key_ã°
(*
memc
, (c⁄° **)&
key
, &
key_Àngth
, 1))))

275 *
îr‹

	`memˇched_œ°_îr‹
(
memc
);

276  
NULL
;

279 
uöt32_t
 
£rvî_key

	`memˇched_gíî©e_hash
(
memc
, 
key
, 
key_Àngth
);

280  
	`memˇched_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_key
);

281 
	}
}

286 
memˇched_ö°™˚_°
* 
	$memˇched_ö°™˚_˛⁄e
(
memˇched_ö°™˚_°
* 
sour˚
)

289 i‡(
sour˚
 =
NULL
)

291  
NULL
;

294 
memˇched_°rög_t
 
ho°«me_
{ 
	`memˇched_°rög_make_‰om_c°r
(
sour˚
->
	`ho°«me
()) };

295  
	`__ö°™˚_¸óã_wôh
(
sour˚
->
roŸ
,

296 
NULL
,

297 
ho°«me_
,

298 
sour˚
->
	`p‹t
(), sour˚->
weight
,

299 
sour˚
->
ty≥
);

300 
	}
}

302 
	$£t_œ°_disc⁄√˘ed_ho°
(
memˇched_ö°™˚_°
* 
£lf
)

304 
	`as£π
(
£lf
->
roŸ
);

305 i‡(
£lf
->
roŸ
)

307 i‡(
	`memˇched_£rvî_gë_œ°_disc⁄√˘
(
£lf
->
roŸ
Ë
™d


308 
	`memˇched_£rvî_gë_œ°_disc⁄√˘
(
£lf
->
roŸ
)->
vîsi⁄
 == self->version)

314 
memˇched_°
 *
roŸ
(memˇched_° *)
£lf
->root;

316 
	`memˇched_ö°™˚_‰ì
((
memˇched_ö°™˚_°
*)(
roŸ
->
œ°_disc⁄√˘ed_£rvî
));

319 
roŸ
->
°©e
.
is_∑rsög

åue
;

320 
roŸ
->
œ°_disc⁄√˘ed_£rvî

	`memˇched_ö°™˚_˛⁄e
(
£lf
);

321 
roŸ
->
°©e
.
is_∑rsög

Ál£
;

323 ((
memˇched_ö°™˚_°
*)
	`memˇched_£rvî_gë_œ°_disc⁄√˘
(
roŸ
))->
vîsi⁄

£lf
->version;

325 
	}
}

327 c⁄° 
memˇched_ö°™˚_°
 * 
	$memˇched_£rvî_gë_œ°_disc⁄√˘
(c⁄° 
memˇched_°
 *
shñl
)

329 c⁄° 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

330 i‡(
£lf
)

332  (c⁄° 
memˇched_ö°™˚_°
 *)
£lf
->
œ°_disc⁄√˘ed_£rvî
;

336 
	}
}

338 
	$memˇched_ö°™˚_√xt_ªåy
(c⁄° 
memˇched_ö°™˚_°
 * 
£lf
, c⁄° 
time_t
 
absﬁuã_time
)

340 
	`WATCHPOINT_ASSERT
(
£lf
);

341 i‡(
£lf
)

343 ((
memˇched_ö°™˚_°
*)
£lf
)->
√xt_ªåy

absﬁuã_time
;

345 
	}
}

347 
boﬁ
 
	gmemˇched_ö°™˚_°
::
	$vÆid
() const

349 i‡(
fd
 =
INVALID_SOCKET
)

351  
Ál£
;

354  
åue
;

355 
	}
}

357 
boﬁ
 
	gmemˇched_ö°™˚_°
::
	$is_shuâög_down
() const

359  
›ti⁄s
.
is_shuâög_down
;

360 
	}
}

	@libmemcached/instance.hpp

39 #¥agm®
⁄˚


41 #i‚de‡
WIN32


42 #ifde‡
HAVE_NETDB_H


43 
	~<√tdb.h
>

47 #ifde‡
NI_MAXHOST


48 
	#MEMCACHED_NI_MAXHOST
 
NI_MAXHOST


	)

50 
	#MEMCACHED_NI_MAXHOST
 1025

	)

53 #ifde‡
NI_MAXSERV


54 
	#MEMCACHED_NI_MAXSERV
 
NI_MAXSERV


	)

56 
	#MEMCACHED_NI_MAXSERV
 32

	)

59 
	~"libmemˇched/°rög.hµ
"

62 
	smemˇched_ö°™˚_°
 {

63 
ö_p‹t_t
 
p‹t
() const

65  
	mp‹t_
;

68 
p‹t
(
ö_p‹t_t
 
¨g
)

70 
	mp‹t_

¨g
;

73 
m¨k_£rvî_as_˛ón
()

75 
	m£rvî_Áûuª_cou¡î
= 0;

76 
	m√xt_ªåy
= 0;

79 
dißbÀ
()

83 
íabÀ
()

87 
boﬁ
 
vÆid
() const;

89 
boﬁ
 
is_shuâög_down
() const;

91 
°¨t_˛o£_sockë
();

92 
˛o£_sockë
();

93 
ª£t_sockë
();

95 
uöt32_t
 
ª•⁄£_cou¡
() const

97  
	mcurs‹_a˘ive_
;

101 
boﬁ
 
	mis_Æloˇãd
;

102 
boﬁ
 
	mis_öôülized
;

103 
boﬁ
 
	mis_shuâög_down
;

104 
boﬁ
 
	mis_dód
;

105 
boﬁ
 
	mªady
;

106 } 
	m›ti⁄s
;

108 
	m_evíts
;

109 
	m_ªvíts
;

111 
evíts
()

113  
	m_evíts
;

116 
ªvíts
()

118  
	m_ªvíts
;

121 c⁄° * 
ho°«me
()

123  
	m_ho°«me
;

126 
ho°«me
(c⁄° 
memˇched_°rög_t
& 
ho°«me_
)

128 i‡(
	mho°«me_
.
	msize
)

130 
mem˝y
(
_ho°«me
, 
ho°«me_
.
c_°r
, ho°«me_.
size
);

131 
	m_ho°«me
[
ho°«me_
.
size
]= 0;

135 
mem˝y
(
_ho°«me
, 
memˇched_lôîÆ_∑øm
("localhost"));

136 
	m_ho°«me
[
memˇched_lôîÆ_∑øm_size
("localhost")]= 0;

140 
evíts
();

141 
ªvíts
();

143 
uöt32_t
 
	mcurs‹_a˘ive_
;

144 
ö_p‹t_t
 
	mp‹t_
;

145 
memˇched_sockë_t
 
	mfd
;

146 
uöt32_t
 
	mio_byãs_£¡
;

147 
uöt32_t
 
	mªque°_id
;

148 
uöt32_t
 
	m£rvî_Áûuª_cou¡î
;

149 
uöt64_t
 
	m£rvî_Áûuª_cou¡î_quîy_id
;

150 
uöt32_t
 
	mweight
;

151 
uöt32_t
 
	mvîsi⁄
;

152 
memˇched_£rvî_°©e_t
 
	m°©e
;

154 
uöt32_t
 
	mªad
;

155 
uöt32_t
 
	mwrôe
;

156 
uöt32_t
 
	mtimeouts
;

157 
size_t
 
	m_byãs_ªad
;

158 } 
	mio_waô_cou¡
;

159 
uöt8_t
 
	mmaj‹_vîsi⁄
;

160 
uöt8_t
 
	mmi¸o_vîsi⁄
;

161 
uöt8_t
 
	mmö‹_vîsi⁄
;

162 
memˇched_c⁄√˘i⁄_t
 
	mty≥
;

163 *
	mªad_±r
;

164 
size_t
 
	mªad_buf„r_Àngth
;

165 
size_t
 
	mªad_d©a_Àngth
;

166 
size_t
 
	mwrôe_buf„r_off£t
;

167 
addröfo
 *
	maddªss_öfo
;

168 
addröfo
 *
	maddªss_öfo_√xt
;

169 
time_t
 
	m√xt_ªåy
;

170 
memˇched_°
 *
	mroŸ
;

171 
uöt64_t
 
	mlimô_maxbyãs
;

172 
memˇched_îr‹_t
 *
	mîr‹_mesßges
;

173 
	mªad_buf„r
[
MEMCACHED_MAX_BUFFER
];

174 
	mwrôe_buf„r
[
MEMCACHED_MAX_BUFFER
];

175 
	m_ho°«me
[
MEMCACHED_NI_MAXHOST
];

177 
˛ór_addröfo
()

179 i‡(
	maddªss_öfo
)

181 
‰ìaddröfo
(
addªss_öfo
);

182 
	maddªss_öfo

NULL
;

183 
	maddªss_öfo_√xt

NULL
;

188 
memˇched_ö°™˚_°
* 
__ö°™˚_¸óã_wôh
(
memˇched_°
 *
memc
,

189 
memˇched_ö°™˚_°
* 
£lf
,

190 c⁄° 
memˇched_°rög_t
& 
_ho°«me
,

191 c⁄° 
ö_p‹t_t
 
p‹t
,

192 
uöt32_t
 
weight
,

193 c⁄° 
memˇched_c⁄√˘i⁄_t
 
ty≥
);

195 
memˇched_ªtu∫_t
 
memˇched_ö°™˚_push
(
memˇched_°
 *
±r
, c⁄° 
memˇched_ö°™˚_°
*, 
uöt32_t
);

197 
__ö°™˚_‰ì
(
memˇched_ö°™˚_°
 *);

	@libmemcached/internal.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 #ifde‡
__˝lu•lus


	@libmemcached/io.cc

40 
	~<libmemˇched/comm⁄.h
>

42 #ifde‡
HAVE_SYS_SOCKET_H


43 
	~<sys/sockë.h
>

46 
	$öôülize_bö¨y_ªque°
(
memˇched_ö°™˚_°
* 
£rvî
, 
¥Ÿocﬁ_bö¨y_ªque°_hódî
& 
hódî
)

48 
£rvî
->
ªque°_id
++;

49 
hódî
.
ªque°
.
magic

PROTOCOL_BINARY_REQ
;

50 
hódî
.
ªque°
.
›aque

	`ht⁄s
(
£rvî
->
ªque°_id
);

51 
	}
}

53 
	ememc_ªad_‹_wrôe
 {

54 
	mMEM_READ
,

55 
	mMEM_WRITE


64 
boﬁ
 
	$ª∑ck_öput_buf„r
(
memˇched_ö°™˚_°
* 
ö°™˚
)

66 i‡(
ö°™˚
->
ªad_±r
 !ö°™˚->
ªad_buf„r
)

71 
	`memmove
(
ö°™˚
->
ªad_buf„r
, in°™˚->
ªad_±r
, in°™˚->
ªad_buf„r_Àngth
);

72 
ö°™˚
->
ªad_±r
ö°™˚->
ªad_buf„r
;

73 
ö°™˚
->
ªad_d©a_Àngth
ö°™˚->
ªad_buf„r_Àngth
;

77 i‡(
ö°™˚
->
ªad_buf„r_Àngth
 !
MEMCACHED_MAX_BUFFER
)

81 
ssize_t
 
ƒ
;

82 i‡((
ƒ
::
	`ªcv
(
ö°™˚
->
fd
,

83 
ö°™˚
->
ªad_±r
 + in°™˚->
ªad_d©a_Àngth
,

84 
MEMCACHED_MAX_BUFFER
 - 
ö°™˚
->
ªad_d©a_Àngth
,

85 
MSG_NOSIGNAL
)) <= 0)

87 i‡(
ƒ
 == 0)

89 
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_CONNECTION_FAILURE
, 
MEMCACHED_AT
);

93 
	`gë_sockë_î∫o
())

95 
EINTR
:

98 #i‡
EWOULDBLOCK
 !
EAGAIN


99 
EWOULDBLOCK
:

101 
EAGAIN
:

102 #ifde‡
TARGET_OS_LINUX


103 
ERESTART
:

108 
	`memˇched_£t_î∫o
(*
ö°™˚
, 
	`gë_sockë_î∫o
(), 
MEMCACHED_AT
);

116 
ö°™˚
->
ªad_d©a_Àngth
+
	`size_t
(
ƒ
);

117 
ö°™˚
->
ªad_buf„r_Àngth
+
	`size_t
(
ƒ
);

119  
åue
;

121 } 
Ál£
);

124  
Ál£
;

125 
	}
}

137 
boﬁ
 
	$¥o˚ss_öput_buf„r
(
memˇched_ö°™˚_°
* 
ö°™˚
)

143 i‡(
ö°™˚
->
roŸ
->
ˇŒbacks
 !
NULL
)

149 
memˇched_ˇŒback_°
 
cb
*
ö°™˚
->
roŸ
->
ˇŒbacks
;

151 
	`memˇched_£t_¥o˚ssög_öput
((
Memˇched
 *)
ö°™˚
->
roŸ
, 
åue
);

153 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

154 
Memˇched
 *
roŸ
(Memˇched *)
ö°™˚
->root;

155 
memˇched_ªtu∫_t
 
îr‹

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), &
roŸ
->
ªsu…
);

157 
	`memˇched_£t_¥o˚ssög_öput
(
roŸ
, 
Ál£
);

159 i‡(
îr‹
 =
MEMCACHED_SUCCESS
)

161 
x
0; x < 
cb
.
numbî_of_ˇŒback
; x++)

163 
îr‹
(*
cb
.
ˇŒback
[
x
])(
ö°™˚
->
roŸ
, &roŸ->
ªsu…
, cb.
c⁄ãxt
);

164 i‡(
îr‹
 !
MEMCACHED_SUCCESS
)

173  
åue
;

176  
Ál£
;

177 
	}
}

179 
memˇched_ªtu∫_t
 
	$io_waô
(
memˇched_ö°™˚_°
* 
ö°™˚
,

180 c⁄° 
memc_ªad_‹_wrôe
 
ªad_‹_wrôe
)

190 i‡(
ªad_‹_wrôe
 =
MEM_WRITE
)

192 i‡(
	`memˇched_purge
(
ö°™˚
Ë=
Ál£
)

194  
MEMCACHED_FAILURE
;

198 
pﬁlfd
 
fds
;

199 
fds
.
fd

ö°™˚
->fd;

200 
fds
.
evíts

POLLIN
;

201 
fds
.
ªvíts
= 0;

203 i‡(
ªad_‹_wrôe
 =
MEM_WRITE
)

205 
fds
.
evíts

POLLOUT
;

206 
ö°™˚
->
io_waô_cou¡
.
wrôe
++;

210 
ö°™˚
->
io_waô_cou¡
.
ªad
++;

213 i‡(
ö°™˚
->
roŸ
->
pﬁl_timeout
 == 0)

215  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_TIMEOUT
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("poll_timeout() was setÅo zero"));

218 
size_t
 
lo›_max
= 5;

219 --
lo›_max
)

221 
a˘ive_fd

	`pﬁl
(&
fds
, 1, 
ö°™˚
->
roŸ
->
pﬁl_timeout
);

223 i‡(
a˘ive_fd
 >= 1)

225 
	`as£π_msg
(
a˘ive_fd
 == 1 , "poll()Ñeturnedán unexpectedÇumber ofáctive file descriptors");

226 i‡(
fds
.
ªvíts
 & 
POLLIN
 
‹
 fds.ªvít†& 
POLLOUT
)

228  
MEMCACHED_SUCCESS
;

231 i‡(
fds
.
ªvíts
 & 
POLLHUP
)

233  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_CONNECTION_FAILURE
, 
MEMCACHED_AT
,

234 
	`memˇched_lôîÆ_∑øm
("poll() detected hang up"));

237 i‡(
fds
.
ªvíts
 & 
POLLERR
)

239 
loˇl_î∫o

EINVAL
;

240 
îr
;

241 
sockÀn_t
 
Àn
 (
îr
);

242 i‡(
	`gësock›t
(
ö°™˚
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr
, &
Àn
) == 0)

244 i‡(
îr
 == 0)

248 
loˇl_î∫o

îr
;

250 
	`memˇched_quô_£rvî
(
ö°™˚
, 
åue
);

251  
	`memˇched_£t_î∫o
(*
ö°™˚
, 
loˇl_î∫o
, 
MEMCACHED_AT
,

252 
	`memˇched_lôîÆ_∑øm
("poll()Ñeturned POLLHUP"));

255  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("poll()Ñeturnedá valueÅhat wasÇot dealt with"));

258 i‡(
a˘ive_fd
 == 0)

260  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_TIMEOUT
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Noáctive_fd were found"));

264 
loˇl_î∫o

	`gë_sockë_î∫o
();

265 
	`as£π_msg
(
a˘ive_fd
 == -1 , "poll()Ñeturnedán unexpected value");

266 
loˇl_î∫o
)

268 #ifde‡
TARGET_OS_LINUX


269 
ERESTART
:

271 
EINTR
:

274 
EFAULT
:

275 
ENOMEM
:

276 
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

278 
EINVAL
:

279 
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("RLIMIT_NOFILEÉxceeded, or if OSXÅheÅimeout value was invalid"));

282 
	`memˇched_£t_î∫o
(*
ö°™˚
, 
loˇl_î∫o
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("poll"));

288 
	`memˇched_quô_£rvî
(
ö°™˚
, 
åue
);

290 i‡(
	`memˇched_has_îr‹
(
ö°™˚
))

292  
	`memˇched_ö°™˚_îr‹_ªtu∫
(
ö°™˚
);

295  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_CONNECTION_FAILURE
, 
MEMCACHED_AT
,

296 
	`memˇched_lôîÆ_∑øm
("number ofáttemptsÅo call io_wait() failed"));

297 
	}
}

299 
boﬁ
 
	$io_Êush
(
memˇched_ö°™˚_°
* 
ö°™˚
,

300 c⁄° 
boﬁ
 
wôh_Êush
,

301 
memˇched_ªtu∫_t
& 
îr‹
)

309 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
fd
 !
INVALID_SOCKET
);

311 i‡(
	`memˇched_purge
(
ö°™˚
Ë=
Ál£
)

313  
Ál£
;

316 *
loˇl_wrôe_±r

ö°™˚
->
wrôe_buf„r
;

317 
size_t
 
wrôe_Àngth

ö°™˚
->
wrôe_buf„r_off£t
;

319 
îr‹

MEMCACHED_SUCCESS
;

321 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
fd
 !
INVALID_SOCKET
);

324 #i‡
	`deföed
(
DEBUG
)

325 i‡(
wrôe_Àngth
 =
MEMCACHED_MAX_BUFFER
)

326 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
wrôe_buf„r
 =
loˇl_wrôe_±r
);

327 
	`WATCHPOINT_ASSERT
((
ö°™˚
->
wrôe_buf„r
 + 
MEMCACHED_MAX_BUFFER
Ë>(
loˇl_wrôe_±r
 + 
wrôe_Àngth
));

330 
wrôe_Àngth
)

332 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
fd
 !
INVALID_SOCKET
);

333 
	`WATCHPOINT_ASSERT
(
wrôe_Àngth
 > 0);

335 
Êags
;

336 i‡(
wôh_Êush
)

338 
Êags

MSG_NOSIGNAL
;

342 
Êags

MSG_NOSIGNAL
|
MSG_MORE
;

345 
ssize_t
 
£¡_Àngth
::
	`£nd
(
ö°™˚
->
fd
, 
loˇl_wrôe_±r
, 
wrôe_Àngth
, 
Êags
);

347 i‡(
£¡_Àngth
 =
SOCKET_ERROR
)

350 
	`WATCHPOINT_ERRNO
(
	`gë_sockë_î∫o
());

351 
	`WATCHPOINT_NUMBER
(
	`gë_sockë_î∫o
());

353 
	`gë_sockë_î∫o
())

355 
ENOBUFS
:

358 #i‡
EWOULDBLOCK
 !
EAGAIN


359 
EWOULDBLOCK
:

361 
EAGAIN
:

369 i‡(
	`ª∑ck_öput_buf„r
(
ö°™˚
Ë
‹
 
	`¥o˚ss_öput_buf„r
(instance))

374 
memˇched_ªtu∫_t
 
rc

	`io_waô
(
ö°™˚
, 
MEM_WRITE
);

375 i‡(
	`memˇched_suc˚ss
(
rc
))

379 i‡(
rc
 =
MEMCACHED_TIMEOUT
)

381  
Ál£
;

384 
	`memˇched_quô_£rvî
(
ö°™˚
, 
åue
);

385 
îr‹

	`memˇched_£t_î∫o
(*
ö°™˚
, 
	`gë_sockë_î∫o
(), 
MEMCACHED_AT
);

386  
Ál£
;

388 
ENOTCONN
:

389 
EPIPE
:

391 
	`memˇched_quô_£rvî
(
ö°™˚
, 
åue
);

392 
îr‹

	`memˇched_£t_î∫o
(*
ö°™˚
, 
	`gë_sockë_î∫o
(), 
MEMCACHED_AT
);

393 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
fd
 =
INVALID_SOCKET
);

394  
Ál£
;

398 
ö°™˚
->
io_byãs_£¡
+
	`uöt32_t
(
£¡_Àngth
);

400 
loˇl_wrôe_±r
+
£¡_Àngth
;

401 
wrôe_Àngth
-
	`uöt32_t
(
£¡_Àngth
);

404 
	`WATCHPOINT_ASSERT
(
wrôe_Àngth
 == 0);

405 
ö°™˚
->
wrôe_buf„r_off£t
= 0;

407  
åue
;

408 
	}
}

410 
memˇched_ªtu∫_t
 
	$memˇched_io_waô_f‹_wrôe
(
memˇched_ö°™˚_°
* 
ö°™˚
)

412  
	`io_waô
(
ö°™˚
, 
MEM_WRITE
);

413 
	}
}

415 
memˇched_ªtu∫_t
 
	$_io_fûl
(
memˇched_ö°™˚_°
* 
ö°™˚
)

417 
ssize_t
 
d©a_ªad
;

420 
d©a_ªad
::
	`ªcv
(
ö°™˚
->
fd
, in°™˚->
ªad_buf„r
, 
MEMCACHED_MAX_BUFFER
, 
MSG_NOSIGNAL
);

421 i‡(
d©a_ªad
 =
SOCKET_ERROR
)

423 
	`gë_sockë_î∫o
())

425 
EINTR
:

428 
ETIMEDOUT
:

429 #i‡
EWOULDBLOCK
 !
EAGAIN


430 
EWOULDBLOCK
:

432 
EAGAIN
:

433 #ifde‡
TARGET_OS_LINUX


434 
ERESTART
:

437 
memˇched_ªtu∫_t
 
io_waô_ªt
;

438 i‡(
	`memˇched_suc˚ss
(
io_waô_ªt

	`io_waô
(
ö°™˚
, 
MEM_READ
)))

443  
io_waô_ªt
;

448 
ENOTCONN
:

449 
	`WATCHPOINT_ASSERT
(0);

450 
ENOTSOCK
:

451 
	`WATCHPOINT_ASSERT
(0);

452 
EBADF
:

453 
	`as£π_msg
(
ö°™˚
->
fd
 !
INVALID_SOCKET
, "ProgrammerÉrror, invalid socket");

454 
EINVAL
:

455 
EFAULT
:

456 
ECONNREFUSED
:

458 
	`memˇched_quô_£rvî
(
ö°™˚
, 
åue
);

459 
	`memˇched_£t_î∫o
(*
ö°™˚
, 
	`gë_sockë_î∫o
(), 
MEMCACHED_AT
);

463  
	`memˇched_ö°™˚_îr‹_ªtu∫
(
ö°™˚
);

465 i‡(
d©a_ªad
 == 0)

476 
	`memˇched_quô_£rvî
(
ö°™˚
, 
åue
);

477  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_CONNECTION_FAILURE
, 
MEMCACHED_AT
,

478 
	`memˇched_lôîÆ_∑øm
("::rec()Ñeturned zero, server has disconnected"));

480 
ö°™˚
->
io_waô_cou¡
.
_byãs_ªad
+
d©a_ªad
;

481 } 
d©a_ªad
 <= 0);

483 
ö°™˚
->
io_byãs_£¡
= 0;

484 
ö°™˚
->
ªad_d©a_Àngth
(
size_t
Ë
d©a_ªad
;

485 
ö°™˚
->
ªad_buf„r_Àngth
(
size_t
Ë
d©a_ªad
;

486 
ö°™˚
->
ªad_±r
ö°™˚->
ªad_buf„r
;

488  
MEMCACHED_SUCCESS
;

489 
	}
}

491 
memˇched_ªtu∫_t
 
	$memˇched_io_ªad
(
memˇched_ö°™˚_°
* 
ö°™˚
,

492 *
buf„r
, 
size_t
 
Àngth
, 
ssize_t
& 
ƒód
)

494 
	`as£π
(
	`memˇched_is_udp
(
ö°™˚
->
roŸ
Ë=
Ál£
);

495 
	`as£π_msg
(
ö°™˚
, "ProgrammerÉrror, memcached_io_read()Ñecievedán invalid Instance");

496 *
buf„r_±r

°©ic_ˇ°
<*>(
buf„r
);

498 i‡(
ö°™˚
->
fd
 =
INVALID_SOCKET
)

501 
	`as£π_msg
((
ö°™˚
->
°©e
Ë<(
MEMCACHED_SERVER_STATE_ADDRINFO
), "ProgrammerÉrror, invalid socket state");

503  
MEMCACHED_CONNECTION_FAILURE
;

506 
Àngth
)

508 i‡(
ö°™˚
->
ªad_buf„r_Àngth
 == 0)

510 
memˇched_ªtu∫_t
 
io_fûl_ªt
;

511 i‡(
	`memˇched_Áèl
(
io_fûl_ªt

	`_io_fûl
(
ö°™˚
)))

513 
ƒód
= -1;

514  
io_fûl_ªt
;

518 i‡(
Àngth
 > 1)

520 
size_t
 
dif„ªn˚
(
Àngth
 > 
ö°™˚
->
ªad_buf„r_Àngth
) ? instance->read_buffer_length :Üength;

522 
	`mem˝y
(
buf„r_±r
, 
ö°™˚
->
ªad_±r
, 
dif„ªn˚
);

523 
Àngth
 -
dif„ªn˚
;

524 
ö°™˚
->
ªad_±r
+
dif„ªn˚
;

525 
ö°™˚
->
ªad_buf„r_Àngth
-
dif„ªn˚
;

526 
buf„r_±r
+
dif„ªn˚
;

530 *
buf„r_±r
*
ö°™˚
->
ªad_±r
;

531 
ö°™˚
->
ªad_±r
++;

532 
ö°™˚
->
ªad_buf„r_Àngth
--;

533 
buf„r_±r
++;

538 
ƒód

	`ssize_t
(
buf„r_±r
 - (*)
buf„r
);

540  
MEMCACHED_SUCCESS
;

541 
	}
}

543 
memˇched_ªtu∫_t
 
	$memˇched_io_¶uΩ
(
memˇched_ö°™˚_°
* 
ö°™˚
)

545 
	`as£π_msg
(
ö°™˚
, "ProgrammerÉrror, invalid Instance");

546 
	`as£π
(
	`memˇched_is_udp
(
ö°™˚
->
roŸ
Ë=
Ál£
);

548 i‡(
ö°™˚
->
fd
 =
INVALID_SOCKET
)

550 
	`as£π_msg
((
ö°™˚
->
°©e
Ë<(
MEMCACHED_SERVER_STATE_ADDRINFO
), "Invalid socket state");

551  
MEMCACHED_CONNECTION_FAILURE
;

554 
ssize_t
 
d©a_ªad
;

555 
buf„r
[
MEMCACHED_MAX_BUFFER
];

558 
d©a_ªad
::
	`ªcv
(
ö°™˚
->
fd
, in°™˚->
ªad_buf„r
, (
buf„r
), 
MSG_NOSIGNAL
);

559 i‡(
d©a_ªad
 =
SOCKET_ERROR
)

561 
	`gë_sockë_î∫o
())

563 
EINTR
:

566 
ETIMEDOUT
:

567 #i‡
EWOULDBLOCK
 !
EAGAIN


568 
EWOULDBLOCK
:

570 
EAGAIN
:

571 #ifde‡
TARGET_OS_LINUX


572 
ERESTART
:

574 i‡(
	`memˇched_suc˚ss
(
	`io_waô
(
ö°™˚
, 
MEM_READ
)))

578  
MEMCACHED_IN_PROGRESS
;

582 
ENOTCONN
:

583 
	`as£π
(0);

584 
ENOTSOCK
:

585 
	`as£π
(0);

586 
EBADF
:

587 
	`as£π_msg
(
ö°™˚
->
fd
 !
INVALID_SOCKET
, "Invalid socket state");

588 
EINVAL
:

589 
EFAULT
:

590 
ECONNREFUSED
:

592  
MEMCACHED_CONNECTION_FAILURE
;

595 } 
d©a_ªad
 > 0);

597  
MEMCACHED_CONNECTION_FAILURE
;

598 
	}
}

600 
boﬁ
 
	$_io_wrôe
(
memˇched_ö°™˚_°
* 
ö°™˚
,

601 c⁄° *
buf„r
, 
size_t
 
Àngth
, 
boﬁ
 
wôh_Êush
,

602 
size_t
& 
wrôãn
)

604 
	`as£π
(
ö°™˚
->
fd
 !
INVALID_SOCKET
);

605 
	`as£π
(
	`memˇched_is_udp
(
ö°™˚
->
roŸ
Ë=
Ál£
);

607 c⁄° *
buf„r_±r

°©ic_ˇ°
<c⁄° *>(
buf„r
);

609 c⁄° 
size_t
 
‹igöÆ_Àngth

Àngth
;

611 
Àngth
)

613 *
wrôe_±r
;

614 
size_t
 
buf„r_íd

MEMCACHED_MAX_BUFFER
;

615 
size_t
 
should_wrôe

buf„r_íd
 -
ö°™˚
->
wrôe_buf„r_off£t
;

616 
should_wrôe
(should_wrôê< 
Àngth
) ? should_write :Üength;

618 
wrôe_±r

ö°™˚
->
wrôe_buf„r
 + in°™˚->
wrôe_buf„r_off£t
;

619 
	`mem˝y
(
wrôe_±r
, 
buf„r_±r
, 
should_wrôe
);

620 
ö°™˚
->
wrôe_buf„r_off£t
+
should_wrôe
;

621 
buf„r_±r
+
should_wrôe
;

622 
Àngth
-
should_wrôe
;

624 i‡(
ö°™˚
->
wrôe_buf„r_off£t
 =
buf„r_íd
)

626 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
fd
 !
INVALID_SOCKET
);

628 
memˇched_ªtu∫_t
 
rc
;

629 i‡(
	`io_Êush
(
ö°™˚
, 
wôh_Êush
, 
rc
Ë=
Ál£
)

631 
wrôãn

‹igöÆ_Àngth
 -
Àngth
;

632  
Ál£
;

637 i‡(
wôh_Êush
)

639 
memˇched_ªtu∫_t
 
rc
;

640 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
fd
 !
INVALID_SOCKET
);

641 i‡(
	`io_Êush
(
ö°™˚
, 
wôh_Êush
, 
rc
Ë=
Ál£
)

643 
wrôãn

‹igöÆ_Àngth
 -
Àngth
;

644  
Ál£
;

648 
wrôãn

‹igöÆ_Àngth
 -
Àngth
;

650  
åue
;

651 
	}
}

653 
boﬁ
 
	$memˇched_io_wrôe
(
memˇched_ö°™˚_°
* 
ö°™˚
)

655 
size_t
 
wrôãn
;

656  
	`_io_wrôe
(
ö°™˚
, 
NULL
, 0, 
åue
, 
wrôãn
);

657 
	}
}

659 
ssize_t
 
	$memˇched_io_wrôe
(
memˇched_ö°™˚_°
* 
ö°™˚
,

660 c⁄° *
buf„r
, c⁄° 
size_t
 
Àngth
, c⁄° 
boﬁ
 
wôh_Êush
)

662 
size_t
 
wrôãn
;

664 i‡(
	`_io_wrôe
(
ö°™˚
, 
buf„r
, 
Àngth
, 
wôh_Êush
, 
wrôãn
Ë=
Ál£
)

669  
	`ssize_t
(
wrôãn
);

670 
	}
}

672 
boﬁ
 
	$memˇched_io_wrôev
(
memˇched_ö°™˚_°
* 
ö°™˚
,

673 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[],

674 c⁄° 
size_t
 
numbî_of
, c⁄° 
boﬁ
 
wôh_Êush
)

676 
ssize_t
 
com∂ëe_tŸÆ
= 0;

677 
ssize_t
 
tŸÆ
= 0;

679 
size_t
 
x
0; x < 
numbî_of
; x++, 
ve˘‹
++)

681 
com∂ëe_tŸÆ
+
ve˘‹
->
Àngth
;

682 i‡(
ve˘‹
->
Àngth
)

684 
size_t
 
wrôãn
;

685 i‡((
	`_io_wrôe
(
ö°™˚
, 
ve˘‹
->
buf„r
, ve˘‹->
Àngth
, 
Ál£
, 
wrôãn
)) == false)

687  
Ál£
;

689 
tŸÆ
+
wrôãn
;

693 i‡(
wôh_Êush
)

695 i‡(
	`memˇched_io_wrôe
(
ö°™˚
Ë=
Ál£
)

697  
Ál£
;

701  (
com∂ëe_tŸÆ
 =
tŸÆ
);

702 
	}
}

704 
	gmemˇched_ö°™˚_°
::
	$°¨t_˛o£_sockë
()

706 i‡(
fd
 !
INVALID_SOCKET
)

708 
	`shutdown
(
fd
, 
SHUT_WR
);

709 
›ti⁄s
.
is_shuâög_down

åue
;

711 
	}
}

713 
	gmemˇched_ö°™˚_°
::
	$ª£t_sockë
()

715 i‡(
fd
 !
INVALID_SOCKET
)

717 ()
	`˛o£sockë
(
fd
);

718 
fd

INVALID_SOCKET
;

720 
	}
}

722 
	gmemˇched_ö°™˚_°
::
	$˛o£_sockë
()

724 i‡(
fd
 !
INVALID_SOCKET
)

726 
shutdown_›ti⁄s

SHUT_RD
;

727 i‡(
›ti⁄s
.
is_shuâög_down
 =
Ál£
)

729 
shutdown_›ti⁄s

SHUT_RDWR
;

733 i‡(
	`shutdown
(
fd
, 
shutdown_›ti⁄s
Ë=
SOCKET_ERROR
 
™d
 
	`gë_sockë_î∫o
(Ë!
ENOTCONN
)

735 
	`WATCHPOINT_NUMBER
(
fd
);

736 
	`WATCHPOINT_ERRNO
(
	`gë_sockë_î∫o
());

737 
	`WATCHPOINT_ASSERT
(
	`gë_sockë_î∫o
());

740 
	`ª£t_sockë
();

741 
°©e

MEMCACHED_SERVER_STATE_NEW
;

744 
°©e

MEMCACHED_SERVER_STATE_NEW
;

745 
curs‹_a˘ive_
= 0;

746 
io_byãs_£¡
= 0;

747 
wrôe_buf„r_off£t

	`size_t
(
roŸ
 
™d
 
	`memˇched_is_udp
‘oŸË? 
UDP_DATAGRAM_HEADER_LENGTH
 : 0);

748 
ªad_buf„r_Àngth
= 0;

749 
ªad_±r

ªad_buf„r
;

750 
›ti⁄s
.
is_shuâög_down

Ál£
;

751 
	`memˇched_£rvî_ª•⁄£_ª£t
(
this
);

755 
maj‹_vîsi⁄

mö‹_vîsi⁄

mi¸o_vîsi⁄

UINT8_MAX
;

756 
	}
}

758 
memˇched_ö°™˚_°
* 
	$memˇched_io_gë_ªadabÀ_£rvî
(
Memˇched
 *
memc
, 
memˇched_ªtu∫_t
&)

760 
	#MAX_SERVERS_TO_POLL
 100

	)

761 
pﬁlfd
 
fds
[
MAX_SERVERS_TO_POLL
];

762 
nfds_t
 
ho°_ödex
= 0;

764 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
Ë
™d
 
ho°_ödex
 < 
MAX_SERVERS_TO_POLL
; ++x)

766 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
x
);

768 i‡(
ö°™˚
->
ªad_buf„r_Àngth
 > 0)

770  
ö°™˚
;

773 i‡(
ö°™˚
->
	`ª•⁄£_cou¡
() > 0)

775 
fds
[
ho°_ödex
].
evíts

POLLIN
;

776 
fds
[
ho°_ödex
].
ªvíts
= 0;

777 
fds
[
ho°_ödex
].
fd

ö°™˚
->fd;

778 ++
ho°_ödex
;

782 i‡(
ho°_ödex
 < 2)

785 
uöt32_t
 
x
0; x< 
	`memˇched_£rvî_cou¡
(
memc
); ++x)

787 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
x
);

789 i‡(
ö°™˚
->
	`ª•⁄£_cou¡
() > 0)

791  
ö°™˚
;

795  
NULL
;

798 
îr‹

	`pﬁl
(
fds
, 
ho°_ödex
, 
memc
->
pﬁl_timeout
);

799 
îr‹
)

802 
	`memˇched_£t_î∫o
(*
memc
, 
	`gë_sockë_î∫o
(), 
MEMCACHED_AT
);

808 
nfds_t
 
x
0; x < 
ho°_ödex
; ++x)

810 i‡(
fds
[
x
].
ªvíts
 & 
POLLIN
)

812 
uöt32_t
 
y
0; y < 
	`memˇched_£rvî_cou¡
(
memc
); ++y)

814 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
y
);

816 i‡(
ö°™˚
->
fd
 =
fds
[
x
].fd)

818  
ö°™˚
;

825  
NULL
;

826 
	}
}

831 
	$memˇched_io_ª£t
(
memˇched_ö°™˚_°
* 
ö°™˚
)

833 
	`memˇched_quô_£rvî
(
ö°™˚
, 
åue
);

834 
	}
}

840 
memˇched_ªtu∫_t
 
	$memˇched_ß„_ªad
(
memˇched_ö°™˚_°
* 
ö°™˚
,

841 *
dè
,

842 c⁄° 
size_t
 
size
)

844 
size_t
 
off£t
= 0;

845 *
d©a

°©ic_ˇ°
<*>(
dè
);

847 
off£t
 < 
size
)

849 
ssize_t
 
ƒód
;

850 
memˇched_ªtu∫_t
 
rc
;

852 
	`memˇched_c⁄töue
(
rc

	`memˇched_io_ªad
(
ö°™˚
, 
d©a
 + 
off£t
, 
size
 - off£t, 
ƒód
))) { };

854 i‡(
	`memˇched_Áûed
(
rc
))

856  
rc
;

859 
off£t
+
	`size_t
(
ƒód
);

862  
MEMCACHED_SUCCESS
;

863 
	}
}

865 
memˇched_ªtu∫_t
 
	$memˇched_io_ªadlöe
(
memˇched_ö°™˚_°
* 
ö°™˚
,

866 *
buf„r_±r
,

867 
size_t
 
size
,

868 
size_t
& 
tŸÆ_ƒ
)

870 
	`¥ötf
("%†%†%d\n", 
__FILE__
, 
__func__
, 
__LINE__
);

871 
tŸÆ_ƒ
= 0;

872 
boﬁ
 
löe_com∂ëe

Ál£
;

874 
löe_com∂ëe
 =
Ál£
)

876 i‡(
ö°™˚
->
ªad_buf„r_Àngth
 == 0)

883 
ssize_t
 
ƒód
;

884 
memˇched_ªtu∫_t
 
rc

	`memˇched_io_ªad
(
ö°™˚
, 
buf„r_±r
, 1, 
ƒód
);

885 i‡(
	`memˇched_Áûed
(
rc
Ë
™d
Ñ¯=
MEMCACHED_IN_PROGRESS
)

887 
	`memˇched_quô_£rvî
(
ö°™˚
, 
åue
);

888 
	`¥ötf
("Éº‹ %†%†%d\n", 
__FILE__
, 
__func__
, 
__LINE__
);

889  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
rc
, 
MEMCACHED_AT
);

891 i‡(
	`memˇched_Áûed
(
rc
))

893 
	`¥ötf
(" faûed %†%†%d\n", 
__FILE__
, 
__func__
, 
__LINE__
);

894  
rc
;

897 i‡(*
buf„r_±r
 == '\n')

899 
löe_com∂ëe

åue
;

902 ++
buf„r_±r
;

903 ++
tŸÆ_ƒ
;

907 
ö°™˚
->
ªad_buf„r_Àngth
 
™d
 
tŸÆ_ƒ
 < 
size
ánd 
löe_com∂ëe
 =
Ál£
)

909 *
buf„r_±r
 = *
ö°™˚
->
ªad_±r
;

910 i‡(*
buf„r_±r
 == '\n')

912 
löe_com∂ëe
 = 
åue
;

914 --
ö°™˚
->
ªad_buf„r_Àngth
;

915 ++
ö°™˚
->
ªad_±r
;

916 ++
tŸÆ_ƒ
;

917 ++
buf„r_±r
;

920 i‡(
tŸÆ_ƒ
 =
size
)

922 
	`¥ötf
("Éº‹ %†%†%d\n", 
__FILE__
, 
__func__
, 
__LINE__
);

923  
MEMCACHED_PROTOCOL_ERROR
;

927 
	`¥ötf
(" suc˚ss%†%†%d\n", 
__FILE__
, 
__func__
, 
__LINE__
);

928  
MEMCACHED_SUCCESS
;

929 
	}
}

	@libmemcached/io.h

39 #¥agm®
⁄˚


41 
	slibmemˇched_io_ve˘‹_°


43 c⁄° *
	mbuf„r
;

44 
size_t
 
	mÀngth
;

	@libmemcached/io.hpp

39 #¥agm®
⁄˚


41 
öôülize_bö¨y_ªque°
(
memˇched_ö°™˚_°
* 
£rvî
, 
¥Ÿocﬁ_bö¨y_ªque°_hódî
&);

43 
boﬁ
 
memˇched_io_wrôe
(
memˇched_ö°™˚_°
* 
±r
);

45 
ssize_t
 
memˇched_io_wrôe
(
memˇched_ö°™˚_°
* 
±r
,

46 c⁄° *
buf„r
, 
size_t
 
Àngth
, 
boﬁ
 
wôh_Êush
);

48 
boﬁ
 
memˇched_io_wrôev
(
memˇched_ö°™˚_°
* 
±r
,

49 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[],

50 c⁄° 
size_t
 
numbî_of
, c⁄° 
boﬁ
 
wôh_Êush
);

52 
memˇched_ªtu∫_t
 
memˇched_io_waô_f‹_wrôe
(
memˇched_ö°™˚_°
* 
±r
);

54 
memˇched_io_ª£t
(
memˇched_ö°™˚_°
* 
±r
);

56 
memˇched_ªtu∫_t
 
memˇched_io_ªad
(
memˇched_ö°™˚_°
* 
±r
,

57 *
buf„r
, 
size_t
 
Àngth
, 
ssize_t
& 
ƒód
);

60 
memˇched_ªtu∫_t
 
memˇched_io_ªadlöe
(
memˇched_ö°™˚_°
* 
±r
,

61 *
buf„r_±r
,

62 
size_t
 
size
,

63 
size_t
& 
tŸÆ
);

66 
memˇched_ªtu∫_t
 
memˇched_ß„_ªad
(
memˇched_ö°™˚_°
* 
±r
,

67 *
dè
,

68 c⁄° 
size_t
 
size
);

70 
memˇched_ö°™˚_°
* 
memˇched_io_gë_ªadabÀ_£rvî
(
memˇched_°
 *
memc
, 
memˇched_ªtu∫_t
&);

72 
memˇched_ªtu∫_t
 
memˇched_io_¶uΩ
(
memˇched_ö°™˚_°
* 
±r
);

	@libmemcached/is.h

38 #¥agm®
⁄˚


41 
	#memˇched_is_Æloˇãd
(
__obje˘
Ë((__obje˘)->
›ti⁄s
.
is_Æloˇãd
)

	)

42 
	#memˇched_is_í¸y±ed
(
__obje˘
Ë((__obje˘)->
hashkô
.
_key
)

	)

43 
	#memˇched_is_öôülized
(
__obje˘
Ë((__obje˘)->
›ti⁄s
.
is_öôülized
)

	)

44 
	#memˇched_is_purgög
(
__obje˘
Ë((__obje˘)->
°©e
.
is_purgög
)

	)

45 
	#memˇched_is_¥o˚ssög_öput
(
__obje˘
Ë((__obje˘)->
°©e
.
is_¥o˚ssög_öput
)

	)

47 
	#memˇched_is_´s
(
__obje˘
Ë((__obje˘)->
Êags
.
is_´s
)

	)

48 
	#memˇched_is_udp
(
__obje˘
Ë((__obje˘)->
Êags
.
u£_udp
)

	)

49 
	#memˇched_is_vîify_key
(
__obje˘
Ë((__obje˘)->
Êags
.
vîify_key
)

	)

50 
	#memˇched_is_bö¨y
(
__obje˘
Ë((__obje˘)->
Êags
.
bö¨y_¥Ÿocﬁ
)

	)

51 
	#memˇched_is_„tchög_vîsi⁄
(
__obje˘
Ë((__obje˘)->
Êags
.
is_„tchög_vîsi⁄
)

	)

52 
	#memˇched_is_buf„rög
(
__obje˘
Ë((__obje˘)->
Êags
.
buf„r_ªque°s
)

	)

53 
	#memˇched_is_ª∂yög
(
__obje˘
Ë((__obje˘)->
Êags
.
ª∂y
)

	)

54 
	#memˇched_is_ˇs
(
__obje˘
Ë((__obje˘)->
Êags
.
ª∂y
)

	)

55 
	#memˇched_is_øndomize_ª∂iˇ_ªad
(
__obje˘
Ë((__obje˘)->
Êags
.
øndomize_ª∂iˇ_ªad
)

	)

56 
	#memˇched_is_no_block
(
__obje˘
Ë((__obje˘)->
Êags
.
no_block
)

	)

57 
	#memˇched_is_hash_wôh_«me•a˚
(
__obje˘
Ë((__obje˘)->
Êags
.
hash_wôh_«me•a˚
)

	)

58 
	#memˇched_is_t˝_nodñay
(
__obje˘
Ë((__obje˘)->
Êags
.
t˝_nodñay
)

	)

59 
	#memˇched_is_auto_eje˘_ho°s
(
__obje˘
Ë((__obje˘)->
Êags
.
auto_eje˘_ho°s
)

	)

60 
	#memˇched_is_u£_s‹t_ho°s
(
__obje˘
Ë((__obje˘)->
Êags
.
u£_s‹t_ho°s
)

	)

62 
	#memˇched_is_ªady
(
__obje˘
Ë((__obje˘)->
›ti⁄s
.
ªady
)

	)

64 
	#memˇched_is_weighãd_këama
(
__obje˘
Ë((__obje˘)->
këama
.
weighãd_
)

	)

66 
	#memˇched_£t_ªady
(
__obje˘
, 
__Êag
Ë((__obje˘)->
›ti⁄s
.
ªady
(__Êag))

	)

68 
	#memˇched_£t_´s
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
is_´s
__Êag)

	)

69 
	#memˇched_£t_udp
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
u£_udp
__Êag)

	)

70 
	#memˇched_£t_vîify_key
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
vîify_key
__Êag)

	)

71 
	#memˇched_£t_bö¨y
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
bö¨y_¥Ÿocﬁ
__Êag)

	)

72 
	#memˇched_£t_„tchög_vîsi⁄
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
is_„tchög_vîsi⁄
__Êag)

	)

73 
	#memˇched_£t_buf„rög
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
buf„r_ªque°s
__Êag)

	)

74 
	#memˇched_£t_ª∂yög
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
ª∂y
__Êag)

	)

75 
	#memˇched_£t_ˇs
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
ª∂y
__Êag)

	)

76 
	#memˇched_£t_øndomize_ª∂iˇ_ªad
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
øndomize_ª∂iˇ_ªad
__Êag)

	)

77 
	#memˇched_£t_no_block
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
no_block
__Êag)

	)

78 
	#memˇched_£t_hash_wôh_«me•a˚
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
hash_wôh_«me•a˚
__Êag)

	)

79 
	#memˇched_£t_t˝_nodñay
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
t˝_nodñay
__Êag)

	)

80 
	#memˇched_£t_auto_eje˘_ho°s
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
auto_eje˘_ho°s
__Êag)

	)

81 
	#memˇched_£t_u£_s‹t_ho°s
(
__obje˘
, 
__Êag
Ë((__obje˘).
Êags
.
u£_s‹t_ho°s
__Êag)

	)

83 
	#memˇched_has_roŸ
(
__obje˘
Ë((__obje˘)->
roŸ
)

	)

85 
	#memˇched_has_îr‹
(
__obje˘
Ë((__obje˘)->
îr‹_mesßges
)

	)

87 
	#memˇched_has_ª∂iˇs
(
__obje˘
Ë((__obje˘)->
roŸ
->
numbî_of_ª∂iˇs
)

	)

89 
	#memˇched_£t_¥o˚ssög_öput
(
__obje˘
, 
__vÆue
Ë((__obje˘)->
°©e
.
is_¥o˚ssög_öput
(__vÆue))

	)

90 
	#memˇched_£t_öôülized
(
__obje˘
, 
__vÆue
Ë((__obje˘)->
›ti⁄s
.
is_öôülized
(__vÆue))

	)

91 
	#memˇched_£t_Æloˇãd
(
__obje˘
, 
__vÆue
Ë((__obje˘)->
›ti⁄s
.
is_Æloˇãd
(__vÆue))

	)

93 
	#memˇched_£t_weighãd_këama
(
__obje˘
, 
__vÆue
Ë((__obje˘)->
këama
.
weighãd_
(__vÆue))

	)

95 
	#memˇched2Memˇched
(
__obj
Ë(__obj)

	)

	@libmemcached/key.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
memˇched_ªtu∫_t
 
	$memˇched_key_ã°
(
memˇched_°
 &
memc
,

41 c⁄° * c⁄° *
keys
,

42 c⁄° 
size_t
 *
key_Àngth
,

43 
size_t
 
numbî_of_keys
)

45 i‡(
keys
 =
NULL
 
‹
 
key_Àngth
 == NULL)

47  
	`memˇched_£t_îr‹
(
memc
, 
MEMCACHED_BAD_KEY_PROVIDED
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Key was NULL orÜength of key was zero."));

52 i‡(
memc
.
Êags
.
vîify_key
 =
Ál£
 
‹
 memc.Êags.
bö¨y_¥Ÿocﬁ
 =
åue
)

54 
size_t
 
x
0; x < 
numbî_of_keys
; x++)

58 
memˇched_ªtu∫_t
 
rc

	`memˇched_vÆid©e_key_Àngth
(*(
key_Àngth
 +
x
), 
Ál£
 );

59 i‡(
	`memˇched_Áûed
(
rc
))

61  
	`memˇched_£t_îr‹
(
memc
, 
rc
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("KeyÖrovided wasÅooÜong."));

65  
MEMCACHED_SUCCESS
;

68 
size_t
 
x
0; x < 
numbî_of_keys
; x++)

70 
memˇched_ªtu∫_t
 
rc

	`memˇched_vÆid©e_key_Àngth
(*(
key_Àngth
 + 
x
), 
Ál£
);

71 i‡(
	`memˇched_Áûed
(
rc
))

73  
	`memˇched_£t_îr‹
(
memc
, 
rc
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("KeyÖrovided wasÅooÜong."));

76 
size_t
 
y
0; y < *(
key_Àngth
 + 
x
); y++)

78 i‡((
	`isgøph
(
keys
[
x
][
y
])) == 0)

80  
	`memˇched_£t_îr‹
(
memc
, 
MEMCACHED_BAD_KEY_PROVIDED
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("KeyÖrovided had invalid character."));

85  
MEMCACHED_SUCCESS
;

86 
	}
}

	@libmemcached/key.hpp

37 #¥agm®
⁄˚


39 
memˇched_ªtu∫_t
 
memˇched_key_ã°
(
memˇched_°
& 
memc
,

40 c⁄° * c⁄° *
keys
,

41 c⁄° 
size_t
 *
key_Àngth
,

42 
size_t
 
numbî_of_keys
);

44 
ölöe
 
memˇched_ªtu∫_t
 
	$memˇched_vÆid©e_key_Àngth
(
size_t
 
key_Àngth
, 
boﬁ
 
bö¨y
)

46 i‡(
key_Àngth
 == 0)

48  
MEMCACHED_BAD_KEY_PROVIDED
;

51 i‡(
bö¨y
)

53 i‡(
key_Àngth
 > 0xffff)

55  
MEMCACHED_BAD_KEY_PROVIDED
;

60 i‡(
key_Àngth
 >
MEMCACHED_MAX_KEY
)

62  
MEMCACHED_BAD_KEY_PROVIDED
;

66  
MEMCACHED_SUCCESS
;

67 
	}
}

	@libmemcached/libmemcached_probes.h

38 #¥agm®
⁄˚


48 #ifde‡
HAVE_DTRACE


53 
	~"libmemˇched/dåa˚_¥obes.h
"

61 
	#LIBMEMCACHED_MEMCACHED_ADD_END
()

	)

62 
	#LIBMEMCACHED_MEMCACHED_ADD_END_ENABLED
(Ë(0)

	)

63 
	#LIBMEMCACHED_MEMCACHED_ADD_START
()

	)

64 
	#LIBMEMCACHED_MEMCACHED_ADD_START_ENABLED
(Ë(0)

	)

65 
	#LIBMEMCACHED_MEMCACHED_CONNECT_END
()

	)

66 
	#LIBMEMCACHED_MEMCACHED_CONNECT_END_ENABLED
(Ë(0)

	)

67 
	#LIBMEMCACHED_MEMCACHED_CONNECT_START
()

	)

68 
	#LIBMEMCACHED_MEMCACHED_CONNECT_START_ENABLED
(Ë(0)

	)

69 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_END
()

	)

70 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_END_ENABLED
(Ë(0)

	)

71 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_START
()

	)

72 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_START_ENABLED
(Ë(0)

	)

73 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_WITH_INITIAL_END
()

	)

74 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_WITH_INITIAL_END_ENABLED
(Ë(0)

	)

75 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_WITH_INITIAL_START
()

	)

76 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_WITH_INITIAL_START_ENABLED
(Ë(0)

	)

77 
	#LIBMEMCACHED_MEMCACHED_DELETE_END
()

	)

78 
	#LIBMEMCACHED_MEMCACHED_DELETE_END_ENABLED
(Ë(0)

	)

79 
	#LIBMEMCACHED_MEMCACHED_DELETE_START
()

	)

80 
	#LIBMEMCACHED_MEMCACHED_DELETE_START_ENABLED
(Ë(0)

	)

81 
	#LIBMEMCACHED_MEMCACHED_FLUSH_END
()

	)

82 
	#LIBMEMCACHED_MEMCACHED_FLUSH_END_ENABLED
(Ë(0)

	)

83 
	#LIBMEMCACHED_MEMCACHED_FLUSH_START
()

	)

84 
	#LIBMEMCACHED_MEMCACHED_FLUSH_START_ENABLED
(Ë(0)

	)

85 
	#LIBMEMCACHED_MEMCACHED_GET_END
()

	)

86 
	#LIBMEMCACHED_MEMCACHED_GET_END_ENABLED
(Ë(0)

	)

87 
	#LIBMEMCACHED_MEMCACHED_GET_START
()

	)

88 
	#LIBMEMCACHED_MEMCACHED_GET_START_ENABLED
(Ë(0)

	)

89 
	#LIBMEMCACHED_MEMCACHED_TOUCH_END
()

	)

90 
	#LIBMEMCACHED_MEMCACHED_TOUCH_END_ENABLED
(Ë(0)

	)

91 
	#LIBMEMCACHED_MEMCACHED_TOUCH_START
()

	)

92 
	#LIBMEMCACHED_MEMCACHED_TOUCH_START_ENABLED
(Ë(0)

	)

93 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_END
()

	)

94 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_END_ENABLED
(Ë(0)

	)

95 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_START
()

	)

96 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_START_ENABLED
(Ë(0)

	)

97 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_END
()

	)

98 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_END_ENABLED
(Ë(0)

	)

99 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_START
()

	)

100 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_START_ENABLED
(Ë(0)

	)

101 
	#LIBMEMCACHED_MEMCACHED_MGET_END
()

	)

102 
	#LIBMEMCACHED_MEMCACHED_MGET_END_ENABLED
(Ë(0)

	)

103 
	#LIBMEMCACHED_MEMCACHED_MGET_START
()

	)

104 
	#LIBMEMCACHED_MEMCACHED_MGET_START_ENABLED
(Ë(0)

	)

105 
	#LIBMEMCACHED_MEMCACHED_REPLACE_END
()

	)

106 
	#LIBMEMCACHED_MEMCACHED_REPLACE_END_ENABLED
(Ë(0)

	)

107 
	#LIBMEMCACHED_MEMCACHED_REPLACE_START
()

	)

108 
	#LIBMEMCACHED_MEMCACHED_REPLACE_START_ENABLED
(Ë(0)

	)

109 
	#LIBMEMCACHED_MEMCACHED_SERVER_ADD_END
()

	)

110 
	#LIBMEMCACHED_MEMCACHED_SERVER_ADD_END_ENABLED
(Ë(0)

	)

111 
	#LIBMEMCACHED_MEMCACHED_SERVER_ADD_START
()

	)

112 
	#LIBMEMCACHED_MEMCACHED_SERVER_ADD_START_ENABLED
(Ë(0)

	)

113 
	#LIBMEMCACHED_MEMCACHED_SET_END
()

	)

114 
	#LIBMEMCACHED_MEMCACHED_SET_END_ENABLED
(Ë(0)

	)

115 
	#LIBMEMCACHED_MEMCACHED_SET_START
()

	)

116 
	#LIBMEMCACHED_MEMCACHED_SET_START_ENABLED
(Ë(0)

	)

	@libmemcached/memcached.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
	~<libmemˇched/›ti⁄s.hµ
>

41 
	~<libmemˇched/vútuÆ_buckë.h
>

43 
ölöe
 
boﬁ
 
	$_memˇched_öô
(
Memˇched
 *
£lf
)

45 
£lf
->
°©e
.
is_purgög

Ál£
;

46 
£lf
->
°©e
.
is_¥o˚ssög_öput

Ál£
;

47 
£lf
->
°©e
.
is_time_f‹_ªbuûd

Ál£
;

48 
£lf
->
°©e
.
is_∑rsög

Ál£
;

50 
£lf
->
Êags
.
auto_eje˘_ho°s

Ál£
;

51 
£lf
->
Êags
.
bö¨y_¥Ÿocﬁ

Ál£
;

52 
£lf
->
Êags
.
buf„r_ªque°s

Ál£
;

53 
£lf
->
Êags
.
hash_wôh_«me•a˚

Ál£
;

54 
£lf
->
Êags
.
no_block

Ál£
;

55 
£lf
->
Êags
.
ª∂y

åue
;

56 
£lf
->
Êags
.
øndomize_ª∂iˇ_ªad

Ál£
;

57 
£lf
->
Êags
.
suµ‹t_ˇs

Ál£
;

58 
£lf
->
Êags
.
t˝_nodñay

Ál£
;

59 
£lf
->
Êags
.
u£_s‹t_ho°s

Ál£
;

60 
£lf
->
Êags
.
u£_udp

Ál£
;

61 
£lf
->
Êags
.
vîify_key

Ál£
;

62 
£lf
->
Êags
.
t˝_kì∑live

Ál£
;

63 
£lf
->
Êags
.
is_´s

Ál£
;

64 
£lf
->
Êags
.
is_„tchög_vîsi⁄

Ál£
;

66 
£lf
->
vútuÆ_buckë

NULL
;

68 
£lf
->
di°ributi⁄

MEMCACHED_DISTRIBUTION_MODULA
;

70 i‡(
	`hashkô_¸óã
(&
£lf
->
hashkô
Ë=
NULL
)

72  
Ál£
;

75 
£lf
->
£rvî_öfo
.
vîsi⁄
= 0;

77 
£lf
->
këama
.
c⁄töuum

NULL
;

78 
£lf
->
këama
.
c⁄töuum_cou¡
= 0;

79 
£lf
->
këama
.
c⁄töuum_poöts_cou¡î
= 0;

80 
£lf
->
këama
.
√xt_di°ributi⁄_ªbuûd
= 0;

81 
£lf
->
këama
.
weighãd_

Ál£
;

83 
£lf
->
numbî_of_ho°s
= 0;

84 
£lf
->
£rvîs

NULL
;

85 
£lf
->
œ°_disc⁄√˘ed_£rvî

NULL
;

87 
£lf
->
¢d_timeout
= 0;

88 
£lf
->
rcv_timeout
= 0;

89 
£lf
->
£rvî_Áûuª_limô

MEMCACHED_SERVER_FAILURE_LIMIT
;

90 
£lf
->
quîy_id
= 1;

93 
£lf
->
io_msg_w©îm¨k
= 500;

94 
£lf
->
io_byãs_w©îm¨k
= 65 * 1024;

96 
£lf
->
t˝_kìpidÀ
= 0;

98 
£lf
->
io_key_¥e„tch
= 0;

99 
£lf
->
pﬁl_timeout

MEMCACHED_DEFAULT_TIMEOUT
;

100 
£lf
->
c⁄√˘_timeout

MEMCACHED_DEFAULT_CONNECT_TIMEOUT
;

101 
£lf
->
ªåy_timeout

MEMCACHED_SERVER_FAILURE_RETRY_TIMEOUT
;

102 
£lf
->
dód_timeout

MEMCACHED_SERVER_FAILURE_DEAD_TIMEOUT
;

104 
£lf
->
£nd_size
= -1;

105 
£lf
->
ªcv_size
= -1;

107 
£lf
->
u£r_d©a

NULL
;

108 
£lf
->
numbî_of_ª∂iˇs
= 0;

110 
£lf
->
Æloˇt‹s

	`memˇched_Æloˇt‹s_ªtu∫_deÁu…
();

112 
£lf
->
⁄_˛⁄e

NULL
;

113 
£lf
->
⁄_˛ónup

NULL
;

114 
£lf
->
gë_key_Áûuª

NULL
;

115 
£lf
->
dñëe_åiggî

NULL
;

116 
£lf
->
ˇŒbacks

NULL
;

117 
£lf
->
ß¶
.
ˇŒbacks

NULL
;

118 
£lf
->
ß¶
.
is_Æloˇãd

Ál£
;

120 
£lf
->
îr‹_mesßges

NULL
;

121 
£lf
->
_«me•a˚

NULL
;

122 
£lf
->
c⁄figuª
.
öôül_poﬁ_size
= 1;

123 
£lf
->
c⁄figuª
.
max_poﬁ_size
= 1;

124 
£lf
->
c⁄figuª
.
vîsi⁄
= -1;

125 
£lf
->
c⁄figuª
.
fûíame

NULL
;

127  
åue
;

128 
	}
}

130 
	$__memˇched_‰ì
(
Memˇched
 *
±r
, 
boﬁ
 
ªÀa£_°
)

133 
	`£nd_quô
(
±r
);

134 
	`memˇched_ö°™˚_li°_‰ì
(
	`memˇched_ö°™˚_li°
(
±r
), 
	`memˇched_ö°™˚_li°_cou¡
(ptr));

135 
	`memˇched_ªsu…_‰ì
(&
±r
->
ªsu…
);

137 
	`memˇched_vútuÆ_buckë_‰ì
(
±r
);

139 
	`memˇched_ö°™˚_‰ì
((
memˇched_ö°™˚_°
*)
±r
->
œ°_disc⁄√˘ed_£rvî
);

141 i‡(
±r
->
⁄_˛ónup
)

143 
±r
->
	`⁄_˛ónup
(ptr);

146 
	`libmemˇched_‰ì
(
±r
,Öå->
këama
.
c⁄töuum
);

147 
±r
->
këama
.
c⁄töuum

NULL
;

149 
	`memˇched_¨øy_‰ì
(
±r
->
_«me•a˚
);

150 
±r
->
_«me•a˚

NULL
;

152 
	`memˇched_îr‹_‰ì
(*
±r
);

154 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 
™d
 
±r
->
ß¶
.
ˇŒbacks
)

156 
	`memˇched_de°roy_ß¶_auth_d©a
(
±r
);

159 i‡(
ªÀa£_°
)

161 
	`memˇched_¨øy_‰ì
(
±r
->
c⁄figuª
.
fûíame
);

162 
±r
->
c⁄figuª
.
fûíame

NULL
;

165 
	`hashkô_‰ì
(&
±r
->
hashkô
);

167 i‡(
	`memˇched_is_Æloˇãd
(
±r
Ë
™d
 
ªÀa£_°
)

169 
	`libmemˇched_‰ì
(
±r
,Ötr);

171 
	}
}

173 
memˇched_°
 *
	$memˇched_¸óã
(
memˇched_°
 *
shñl
)

175 i‡(
shñl
)

177 
shñl
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

181 
shñl
(
memˇched_°
 *)
	`libmemˇched_xmÆloc
(
NULL
, memcached_st);

183 i‡(
shñl
 =
NULL
)

185  
NULL
;

188 
shñl
->
›ti⁄s
.
is_Æloˇãd

åue
;

191 i‡(
	`_memˇched_öô
(
shñl
Ë=
Ál£
)

193 
	`memˇched_‰ì
(
shñl
);

194  
NULL
;

197 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

198 i‡(
	`memˇched_ªsu…_¸óã
(
shñl
, &
memc
->
ªsu…
Ë=
NULL
)

200 
	`memˇched_‰ì
(
shñl
);

201  
NULL
;

204 
	`WATCHPOINT_ASSERT_INITIALIZED
(&
memc
->
ªsu…
);

206  
shñl
;

207 
	}
}

209 
memˇched_°
 *
	$memˇched
(c⁄° *
°rög
, 
size_t
 
Àngth
)

211 i‡(
Àngth
 =0 
™d
 
°rög
)

213  
NULL
;

216 i‡(
Àngth
 
™d
 
°rög
 =
NULL
)

218  
NULL
;

221 i‡(
Àngth
 == 0)

223 i‡(
	`boﬁ
(
	`gëív
("LIBMEMCACHED")))

225 
°rög

	`gëív
("LIBMEMCACHED");

226 
Àngth

°rög
 ? 
	`°æí
(string) : 0;

230 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

231 i‡(
memc
 =
NULL
)

233  
NULL
;

236 i‡(
Àngth
 =0 
‹
 
°rög
 =
NULL
)

238  
memc
;

241 
memˇched_ªtu∫_t
 
rc

	`memˇched_∑r£_c⁄figuøti⁄
(
memc
, 
°rög
, 
Àngth
);

242 i‡(
	`memˇched_suc˚ss
(
rc
Ë
™d
 
	`memˇched_∑r£_fûíame
(
memc
))

244 
rc

	`memˇched_∑r£_c⁄figuª_fûe
(*
memc
, 
	`memˇched_∑r£_fûíame
(memc), 
	`memˇched_∑r£_fûíame_Àngth
(memc));

247 i‡(
	`memˇched_Áûed
(
rc
))

249 
	`memˇched_‰ì
(
memc
);

250  
NULL
;

253  
memc
;

254 
	}
}

256 
memˇched_ªtu∫_t
 
	$memˇched_ª£t
(
memˇched_°
 *
shñl
)

258 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

259 
	`WATCHPOINT_ASSERT
(
±r
);

260 i‡(
±r
 =
NULL
)

262  
MEMCACHED_INVALID_ARGUMENTS
;

265 
boﬁ
 
°‹ed_is_Æloˇãd

	`memˇched_is_Æloˇãd
(
±r
);

266 
uöt64_t
 
quîy_id

±r
->query_id;

267 
	`__memˇched_‰ì
(
±r
, 
Ál£
);

268 
	`memˇched_¸óã
(
±r
);

269 
	`memˇched_£t_Æloˇãd
(
±r
, 
°‹ed_is_Æloˇãd
);

270 
±r
->
quîy_id
= query_id;

272 i‡(
±r
->
c⁄figuª
.
fûíame
)

274  
	`memˇched_∑r£_c⁄figuª_fûe
(*
±r
, 
	`memˇched_∑øm_¨øy
’å->
c⁄figuª
.
fûíame
));

277  
MEMCACHED_SUCCESS
;

278 
	}
}

280 
	$memˇched_£rvîs_ª£t
(
memˇched_°
 *
shñl
)

282 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

283 i‡(
£lf
)

285 
	`libmemˇched_‰ì
(
£lf
, sñf->
këama
.
c⁄töuum
);

286 
£lf
->
këama
.
c⁄töuum

NULL
;

288 
	`memˇched_ö°™˚_li°_‰ì
(
	`memˇched_ö°™˚_li°
(
£lf
), sñf->
numbî_of_ho°s
);

289 
	`memˇched_ö°™˚_£t
(
£lf
, 
NULL
, 0);

291 
	`memˇched_ª£t_œ°_disc⁄√˘ed_£rvî
(
£lf
);

293 
	}
}

295 
	$memˇched_ª£t_œ°_disc⁄√˘ed_£rvî
(
memˇched_°
 *
shñl
)

297 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

298 i‡(
£lf
)

300 
	`memˇched_ö°™˚_‰ì
((
memˇched_ö°™˚_°
*)
£lf
->
œ°_disc⁄√˘ed_£rvî
);

301 
£lf
->
œ°_disc⁄√˘ed_£rvî

NULL
;

303 
	}
}

305 
	$memˇched_‰ì
(
memˇched_°
 *
±r
)

307 i‡(
±r
)

309 
	`__memˇched_‰ì
(
±r
, 
åue
);

311 
	}
}

318 
memˇched_°
 *
	$memˇched_˛⁄e
(
memˇched_°
 *
˛⁄e
, c⁄° memˇched_° *
sour˚
)

320 i‡(
sour˚
 =
NULL
)

322  
	`memˇched_¸óã
(
˛⁄e
);

325 i‡(
˛⁄e
 
™d
 
	`memˇched_is_Æloˇãd
(clone))

327  
NULL
;

330 
memˇched_°
 *
√w_˛⁄e

	`memˇched_¸óã
(
˛⁄e
);

332 i‡(
√w_˛⁄e
 =
NULL
)

334  
NULL
;

337 
√w_˛⁄e
->
Êags

sour˚
->flags;

338 
√w_˛⁄e
->
£nd_size

sour˚
->send_size;

339 
√w_˛⁄e
->
ªcv_size

sour˚
->recv_size;

340 
√w_˛⁄e
->
pﬁl_timeout

sour˚
->poll_timeout;

341 
√w_˛⁄e
->
c⁄√˘_timeout

sour˚
->connect_timeout;

342 
√w_˛⁄e
->
ªåy_timeout

sour˚
->retry_timeout;

343 
√w_˛⁄e
->
dód_timeout

sour˚
->dead_timeout;

344 
√w_˛⁄e
->
di°ributi⁄

sour˚
->distribution;

346 i‡(
	`hashkô_˛⁄e
(&
√w_˛⁄e
->
hashkô
, &
sour˚
->hashkôË=
NULL
)

348 
	`memˇched_‰ì
(
√w_˛⁄e
);

349  
NULL
;

352 
√w_˛⁄e
->
u£r_d©a

sour˚
->user_data;

354 
√w_˛⁄e
->
¢d_timeout

sour˚
->snd_timeout;

355 
√w_˛⁄e
->
rcv_timeout

sour˚
->rcv_timeout;

357 
√w_˛⁄e
->
⁄_˛⁄e

sour˚
->on_clone;

358 
√w_˛⁄e
->
⁄_˛ónup

sour˚
->on_cleanup;

360 
√w_˛⁄e
->
Æloˇt‹s

sour˚
->allocators;

362 
√w_˛⁄e
->
gë_key_Áûuª

sour˚
->get_key_failure;

363 
√w_˛⁄e
->
dñëe_åiggî

sour˚
->delete_trigger;

364 
√w_˛⁄e
->
£rvî_Áûuª_limô

sour˚
->server_failure_limit;

365 
√w_˛⁄e
->
io_msg_w©îm¨k

sour˚
->io_msg_watermark;

366 
√w_˛⁄e
->
io_byãs_w©îm¨k

sour˚
->io_bytes_watermark;

367 
√w_˛⁄e
->
io_key_¥e„tch

sour˚
->io_key_prefetch;

368 
√w_˛⁄e
->
numbî_of_ª∂iˇs

sour˚
->number_of_replicas;

369 
√w_˛⁄e
->
t˝_kìpidÀ

sour˚
->tcp_keepidle;

371 i‡(
	`memˇched_£rvî_cou¡
(
sour˚
))

373 i‡(
	`memˇched_Áûed
(
	`memˇched_push
(
√w_˛⁄e
, 
sour˚
)))

375  
NULL
;

380 
√w_˛⁄e
->
_«me•a˚

	`memˇched_¨øy_˛⁄e
“ew_˛⁄e, 
sour˚
->_namespace);

381 
√w_˛⁄e
->
c⁄figuª
.
fûíame

	`memˇched_¨øy_˛⁄e
“ew_˛⁄e, 
sour˚
->
_«me•a˚
);

382 
√w_˛⁄e
->
c⁄figuª
.
vîsi⁄

sour˚
->configure.version;

384 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 
™d
 
sour˚
->
ß¶
.
ˇŒbacks
)

386 i‡(
	`memˇched_Áûed
(
	`memˇched_˛⁄e_ß¶
(
√w_˛⁄e
, 
sour˚
)))

388 
	`memˇched_‰ì
(
√w_˛⁄e
);

389  
NULL
;

393 i‡(
	`memˇched_Áûed
(
	`run_di°ributi⁄
(
√w_˛⁄e
)))

395 
	`memˇched_‰ì
(
√w_˛⁄e
);

397  
NULL
;

400 i‡(
sour˚
->
⁄_˛⁄e
)

402 
sour˚
->
	`⁄_˛⁄e
(
√w_˛⁄e
, source);

405  
√w_˛⁄e
;

406 
	}
}

408 *
	$memˇched_gë_u£r_d©a
(c⁄° 
memˇched_°
 *
shñl
)

410 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

411 i‡(
memc
)

413  
memc
->
u£r_d©a
;

416  
NULL
;

417 
	}
}

419 *
	$memˇched_£t_u£r_d©a
(
memˇched_°
 *
shñl
, *
d©a
)

421 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

422 i‡(
memc
)

424 *
ªt

memc
->
u£r_d©a
;

425 
memc
->
u£r_d©a

d©a
;

427  
ªt
;

430  
NULL
;

431 
	}
}

433 
memˇched_ªtu∫_t
 
	$memˇched_push
(
memˇched_°
 *
de°ö©i⁄
, c⁄° memˇched_° *
sour˚
)

435  
	`memˇched_ö°™˚_push
(
de°ö©i⁄
, (
memˇched_ö°™˚_°
*)
sour˚
->
£rvîs
, sour˚->
numbî_of_ho°s
);

436 
	}
}

438 
memˇched_ö°™˚_°
* 
	$memˇched_ö°™˚_„tch
(
Memˇched
 *
±r
, 
uöt32_t
 
£rvî_key
)

440 i‡(
±r
 =
NULL
)

442  
NULL
;

445  &
±r
->
£rvîs
[
£rvî_key
];

446 
	}
}

448 c⁄° 
memˇched_ö°™˚_°
 * 
	$memˇched_£rvî_ö°™˚_by_posôi⁄
(c⁄° 
memˇched_°
 *
shñl
, 
uöt32_t
 
£rvî_key
)

450 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

451 i‡(
memc
)

453  &
memc
->
£rvîs
[
£rvî_key
];

456  
NULL
;

457 
	}
}

459 
memˇched_ö°™˚_°
* 
	$memˇched_ö°™˚_by_posôi⁄
(c⁄° 
memˇched_°
 *
shñl
, 
uöt32_t
 
£rvî_key
)

461 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

462 i‡(
memc
)

464  &
memc
->
£rvîs
[
£rvî_key
];

467  
NULL
;

468 
	}
}

470 
uöt64_t
 
	$memˇched_quîy_id
(c⁄° 
memˇched_°
 *
shñl
)

472 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

473 i‡(
memc
)

475  
memc
->
quîy_id
;

479 
	}
}

481 
memˇched_ö°™˚_°
* 
	$memˇched_ö°™˚_li°
(c⁄° 
memˇched_°
 *
shñl
)

483 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

484 i‡(
memc
)

486  (
memˇched_ö°™˚_°
*)
memc
->
£rvîs
;

489  
NULL
;

490 
	}
}

	@libmemcached/memcached.h

37 #¥agm®
⁄˚


39 
	~<libmemˇched-1.0/memˇched.h
>

	@libmemcached/memcached.hpp

37 #¥agm®
⁄˚


39 
	~<libmemˇched-1.0/memˇched.hµ
>

	@libmemcached/memcached/protocol_binary.h

36 #i‚de‡
PROTOCOL_BINARY_H


37 
	#PROTOCOL_BINARY_H


	)

39 
	~<libmemˇched¥Ÿocﬁ-0.0/vbuckë.h
>

52 #ifde‡
__˝lu•lus


62 
PROTOCOL_BINARY_REQ
 = 0x80,

63 
PROTOCOL_BINARY_RES
 = 0x81

64 } 
	t¥Ÿocﬁ_bö¨y_magic
;

71 
PROTOCOL_BINARY_RESPONSE_SUCCESS
 = 0x00,

72 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
 = 0x01,

73 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
 = 0x02,

74 
PROTOCOL_BINARY_RESPONSE_E2BIG
 = 0x03,

75 
PROTOCOL_BINARY_RESPONSE_EINVAL
 = 0x04,

76 
PROTOCOL_BINARY_RESPONSE_NOT_STORED
 = 0x05,

77 
PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL
 = 0x06,

78 
PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET
 = 0x07,

79 
PROTOCOL_BINARY_RESPONSE_AUTH_ERROR
 = 0x20,

80 
PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE
 = 0x21,

81 
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
 = 0x81,

82 
PROTOCOL_BINARY_RESPONSE_ENOMEM
 = 0x82,

83 
PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED
 = 0x83,

84 
PROTOCOL_BINARY_RESPONSE_EINTERNAL
 = 0x84,

85 
PROTOCOL_BINARY_RESPONSE_EBUSY
 = 0x85,

86 
PROTOCOL_BINARY_RESPONSE_ETMPFAIL
 = 0x86

87 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
;

94 
PROTOCOL_BINARY_CMD_GET
 = 0x00,

95 
PROTOCOL_BINARY_CMD_SET
 = 0x01,

96 
PROTOCOL_BINARY_CMD_ADD
 = 0x02,

97 
PROTOCOL_BINARY_CMD_REPLACE
 = 0x03,

98 
PROTOCOL_BINARY_CMD_DELETE
 = 0x04,

99 
PROTOCOL_BINARY_CMD_INCREMENT
 = 0x05,

100 
PROTOCOL_BINARY_CMD_DECREMENT
 = 0x06,

101 
PROTOCOL_BINARY_CMD_QUIT
 = 0x07,

102 
PROTOCOL_BINARY_CMD_FLUSH
 = 0x08,

103 
PROTOCOL_BINARY_CMD_GETQ
 = 0x09,

104 
PROTOCOL_BINARY_CMD_NOOP
 = 0x0a,

105 
PROTOCOL_BINARY_CMD_VERSION
 = 0x0b,

106 
PROTOCOL_BINARY_CMD_GETK
 = 0x0c,

107 
PROTOCOL_BINARY_CMD_GETKQ
 = 0x0d,

108 
PROTOCOL_BINARY_CMD_APPEND
 = 0x0e,

109 
PROTOCOL_BINARY_CMD_PREPEND
 = 0x0f,

110 
PROTOCOL_BINARY_CMD_STAT
 = 0x10,

111 
PROTOCOL_BINARY_CMD_SETQ
 = 0x11,

112 
PROTOCOL_BINARY_CMD_ADDQ
 = 0x12,

113 
PROTOCOL_BINARY_CMD_REPLACEQ
 = 0x13,

114 
PROTOCOL_BINARY_CMD_DELETEQ
 = 0x14,

115 
PROTOCOL_BINARY_CMD_INCREMENTQ
 = 0x15,

116 
PROTOCOL_BINARY_CMD_DECREMENTQ
 = 0x16,

117 
PROTOCOL_BINARY_CMD_QUITQ
 = 0x17,

118 
PROTOCOL_BINARY_CMD_FLUSHQ
 = 0x18,

119 
PROTOCOL_BINARY_CMD_APPENDQ
 = 0x19,

120 
PROTOCOL_BINARY_CMD_PREPENDQ
 = 0x1a,

121 
PROTOCOL_BINARY_CMD_VERBOSITY
 = 0x1b,

122 
PROTOCOL_BINARY_CMD_TOUCH
 = 0x1c,

123 
PROTOCOL_BINARY_CMD_GAT
 = 0x1d,

124 
PROTOCOL_BINARY_CMD_GATQ
 = 0x1e,

125 
PROTOCOL_BINARY_CMD_GATK
 = 0x23,

126 
PROTOCOL_BINARY_CMD_GATKQ
 = 0x24,

128 
PROTOCOL_BINARY_CMD_SASL_LIST_MECHS
 = 0x20,

129 
PROTOCOL_BINARY_CMD_SASL_AUTH
 = 0x21,

130 
PROTOCOL_BINARY_CMD_SASL_STEP
 = 0x22,

136 
PROTOCOL_BINARY_CMD_RGET
 = 0x30,

137 
PROTOCOL_BINARY_CMD_RSET
 = 0x31,

138 
PROTOCOL_BINARY_CMD_RSETQ
 = 0x32,

139 
PROTOCOL_BINARY_CMD_RAPPEND
 = 0x33,

140 
PROTOCOL_BINARY_CMD_RAPPENDQ
 = 0x34,

141 
PROTOCOL_BINARY_CMD_RPREPEND
 = 0x35,

142 
PROTOCOL_BINARY_CMD_RPREPENDQ
 = 0x36,

143 
PROTOCOL_BINARY_CMD_RDELETE
 = 0x37,

144 
PROTOCOL_BINARY_CMD_RDELETEQ
 = 0x38,

145 
PROTOCOL_BINARY_CMD_RINCR
 = 0x39,

146 
PROTOCOL_BINARY_CMD_RINCRQ
 = 0x3a,

147 
PROTOCOL_BINARY_CMD_RDECR
 = 0x3b,

148 
PROTOCOL_BINARY_CMD_RDECRQ
 = 0x3c,

152 
PROTOCOL_BINARY_CMD_SET_VBUCKET
 = 0x3d,

153 
PROTOCOL_BINARY_CMD_GET_VBUCKET
 = 0x3e,

154 
PROTOCOL_BINARY_CMD_DEL_VBUCKET
 = 0x3f,

158 
PROTOCOL_BINARY_CMD_TAP_CONNECT
 = 0x40,

159 
PROTOCOL_BINARY_CMD_TAP_MUTATION
 = 0x41,

160 
PROTOCOL_BINARY_CMD_TAP_DELETE
 = 0x42,

161 
PROTOCOL_BINARY_CMD_TAP_FLUSH
 = 0x43,

162 
PROTOCOL_BINARY_CMD_TAP_OPAQUE
 = 0x44,

163 
PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET
 = 0x45,

164 
PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START
 = 0x46,

165 
PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END
 = 0x47,

168 
PROTOCOL_BINARY_CMD_LAST_RESERVED
 = 0xef,

171 
PROTOCOL_BINARY_CMD_SCRUB
 = 0xf0

172 } 
	t¥Ÿocﬁ_bö¨y_comm™d
;

179 
PROTOCOL_BINARY_RAW_BYTES
 = 0x00

180 } 
	t¥Ÿocﬁ_bö¨y_d©©y≥s
;

188 
uöt8_t
 
magic
;

189 
uöt8_t
 
›code
;

190 
uöt16_t
 
keyÀn
;

191 
uöt8_t
 
exéí
;

192 
uöt8_t
 
d©©y≥
;

193 
uöt16_t
 
vbuckë
;

194 
uöt32_t
 
bodyÀn
;

195 
uöt32_t
 
›aque
;

196 
uöt64_t
 
ˇs
;

197 } 
ªque°
;

198 
uöt8_t
 
byãs
[24];

199 } 
	t¥Ÿocﬁ_bö¨y_ªque°_hódî
;

207 
uöt8_t
 
magic
;

208 
uöt8_t
 
›code
;

209 
uöt16_t
 
keyÀn
;

210 
uöt8_t
 
exéí
;

211 
uöt8_t
 
d©©y≥
;

212 
uöt16_t
 
°©us
;

213 
uöt32_t
 
bodyÀn
;

214 
uöt32_t
 
›aque
;

215 
uöt64_t
 
ˇs
;

216 } 
ª•⁄£
;

217 
uöt8_t
 
byãs
[24];

218 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
;

223 
	u¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 {

225 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

226 } 
mesßge
;

227 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
)];

229 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_no_exåas
;

236 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

237 } 
mesßge
;

238 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
)];

239 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
;

245 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gë
;

246 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gëq
;

247 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gëk
;

248 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gëkq
;

257 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

259 
uöt32_t
 
Êags
;

260 } 
body
;

261 } 
mesßge
;

262 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
) + 4];

263 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gë
;

265 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gëq
;

266 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gëk
;

267 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gëkq
;

273 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_dñëe
;

279 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_dñëe
;

289 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

291 
uöt32_t
 
expú©i⁄
;

292 } 
body
;

293 } 
mesßge
;

294 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

295 } 
	t¥Ÿocﬁ_bö¨y_ªque°_Êush
;

301 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_Êush
;

309 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

311 
uöt32_t
 
Êags
;

312 
uöt32_t
 
expú©i⁄
;

313 } 
body
;

314 } 
mesßge
;

315 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 8];

316 } 
	t¥Ÿocﬁ_bö¨y_ªque°_£t
;

317 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
	t¥Ÿocﬁ_bö¨y_ªque°_add
;

318 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
	t¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
;

324 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_£t
;

325 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_add
;

326 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_ª∂a˚
;

332 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_no›
;

338 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_no›
;

347 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

349 
uöt64_t
 
dñè
;

350 
uöt64_t
 
öôül
;

351 
uöt32_t
 
expú©i⁄
;

352 } 
body
;

353 } 
mesßge
;

354 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 20];

355 } 
	t¥Ÿocﬁ_bö¨y_ªque°_ö¸
;

356 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 
	t¥Ÿocﬁ_bö¨y_ªque°_de¸
;

365 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

367 
uöt64_t
 
vÆue
;

368 } 
body
;

369 } 
mesßge
;

370 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
) + 8];

371 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
;

372 
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_de¸
;

378 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_quô
;

384 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_quô
;

390 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_≠≥nd
;

391 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_¥ïíd
;

397 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_≠≥nd
;

398 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_¥ïíd
;

404 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_vîsi⁄
;

410 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_vîsi⁄
;

417 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_°©s
;

423 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_°©s
;

430 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

432 
uöt32_t
 
Àvñ
;

433 } 
body
;

434 } 
mesßge
;

435 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

436 } 
	t¥Ÿocﬁ_bö¨y_ªque°_vîbosôy
;

441 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_vîbosôy
;

448 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

450 
uöt32_t
 
expú©i⁄
;

451 } 
body
;

452 } 
mesßge
;

453 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

454 } 
	t¥Ÿocﬁ_bö¨y_ªque°_touch
;

459 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_touch
;

466 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

468 
uöt32_t
 
expú©i⁄
;

469 } 
body
;

470 } 
mesßge
;

471 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

472 } 
	t¥Ÿocﬁ_bö¨y_ªque°_g©
;

474 
¥Ÿocﬁ_bö¨y_ªque°_g©
 
	t¥Ÿocﬁ_bö¨y_ªque°_g©q
;

479 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_g©
;

480 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_g©q
;

493 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

495 
uöt16_t
 
size
;

496 
uöt8_t
 
ª£rved
;

497 
uöt8_t
 
Êags
;

498 
uöt32_t
 
max_ªsu…s
;

499 } 
body
;

500 } 
mesßge
;

501 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

502 } 
	t¥Ÿocﬁ_bö¨y_ªque°_ønge›
;

504 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rgë
;

505 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_r£t
;

506 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_r£tq
;

507 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_øµíd
;

508 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_øµídq
;

509 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_Ωª≥nd
;

510 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_Ωª≥ndq
;

511 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rdñëe
;

512 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rdñëeq
;

513 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rö¸
;

514 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rö¸q
;

515 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rde¸
;

516 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rde¸q
;

527 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

542 
uöt32_t
 
Êags
;

557 
	#TAP_CONNECT_FLAG_BACKFILL
 0x01

	)

563 
	#TAP_CONNECT_FLAG_DUMP
 0x02

	)

570 
	#TAP_CONNECT_FLAG_LIST_VBUCKETS
 0x04

	)

575 
	#TAP_CONNECT_FLAG_TAKEOVER_VBUCKETS
 0x08

	)

579 
	#TAP_CONNECT_SUPPORT_ACK
 0x10

	)

586 
	#TAP_CONNECT_REQUEST_KEYS_ONLY
 0x20

	)

593 
	#TAP_CONNECT_CHECKPOINT
 0x40

	)

598 
	#TAP_CONNECT_REGISTERED_CLIENT
 0x80

	)

599 } 
body
;

600 } 
mesßge
;

601 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

602 } 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_c⁄√˘
;

606 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

609 
uöt16_t
 
ígöe•ecific_Àngth
;

618 
	#TAP_FLAG_ACK
 0x01

	)

622 
	#TAP_FLAG_NO_VALUE
 0x02

	)

623 
uöt16_t
 
Êags
;

624 
uöt8_t
 
âl
;

625 
uöt8_t
 
ªs1
;

626 
uöt8_t
 
ªs2
;

627 
uöt8_t
 
ªs3
;

628 } 
èp
;

630 
uöt32_t
 
Êags
;

631 
uöt32_t
 
expú©i⁄
;

632 } 
ôem
;

633 } 
body
;

634 } 
mesßge
;

635 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 16];

636 } 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_muèti⁄
;

640 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

643 
uöt16_t
 
ígöe•ecific_Àngth
;

649 
uöt16_t
 
Êags
;

650 
uöt8_t
 
âl
;

651 
uöt8_t
 
ªs1
;

652 
uöt8_t
 
ªs2
;

653 
uöt8_t
 
ªs3
;

654 } 
èp
;

655 } 
body
;

656 } 
mesßge
;

657 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 8];

658 } 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
;

660 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_dñëe
;

661 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_Êush
;

662 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_›aque
;

663 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_vbuckë_£t
;

669 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_s¸ub
;

674 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_s¸ub
;

682 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

684 
vbuckë_°©e_t
 
°©e
;

685 } 
body
;

686 } 
mesßge
;

687 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
Ë+ (
vbuckë_°©e_t
)];

688 } 
	t¥Ÿocﬁ_bö¨y_ªque°_£t_vbuckë
;

692 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_£t_vbuckë
;

696 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_dñ_vbuckë
;

700 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_dñ_vbuckë
;

705 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gë_vbuckë
;

712 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

714 
vbuckë_°©e_t
 
°©e
;

715 } 
body
;

716 } 
mesßge
;

717 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
Ë+ (
vbuckë_°©e_t
)];

718 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gë_vbuckë
;

725 #ifde‡
__˝lu•lus


	@libmemcached/memcached/vbucket.h

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


45 
vbuckë_°©e_a˘ive
 = 1,

46 
vbuckë_°©e_ª∂iˇ
,

47 
vbuckë_°©e_≥ndög
,

48 
vbuckë_°©e_dód


49 } 
	tvbuckë_°©e_t
;

51 
	#is_vÆid_vbuckë_°©e_t
(
°©e
) \

52 (
°©e
 =
vbuckë_°©e_a˘ive
 || \

53 
°©e
 =
vbuckë_°©e_ª∂iˇ
 || \

54 
°©e
 =
vbuckë_°©e_≥ndög
 || \

55 
°©e
 =
vbuckë_°©e_dód
)

	)

57 #ifde‡
__˝lu•lus


	@libmemcached/memory.h

37 #¥agm®
⁄˚


39 
	~<mem_c⁄fig.h
>

41 
	~<libmemˇched/comm⁄.h
>

43 #ifde‡
__˝lu•lus


44 
	~<c°ddef
>

45 
	~<c°dlib
>

47 
	~<°ddef.h
>

48 
	~<°dlib.h
>

51 
ölöe
 
	$libmemˇched_‰ì
(c⁄° 
memˇched_°
 *
£lf
, *
mem
)

53 i‡(
£lf
)

55 
£lf
->
Æloˇt‹s
.
	`‰ì
(£lf, 
mem
, sñf->Æloˇt‹s.
c⁄ãxt
);

57 i‡(
mem
)

59 #ifde‡
__˝lu•lus


60 
°d
::
	`‰ì
(
mem
);

62 
	`‰ì
(
mem
);

65 
	}
}

67 
ölöe
 *
	$libmemˇched_mÆloc
(c⁄° 
memˇched_°
 *
£lf
, c⁄° 
size_t
 
size
)

69 i‡(
£lf
)

71  
£lf
->
Æloˇt‹s
.
	`mÆloc
(£lf, 
size
, sñf->Æloˇt‹s.
c⁄ãxt
);

74 #ifde‡
__˝lu•lus


75  
°d
::
	`mÆloc
(
size
);

77  
	`mÆloc
(
size
);

79 
	}
}

80 
	#libmemˇched_xmÆloc
(
__memˇchd_°
, 
__ty≥
Ë((__ty≥ *)
	`libmemˇched_mÆloc
((__memˇchd_°), (__ty≥)))

	)

82 
ölöe
 *
	$libmemˇched_ªÆloc
(c⁄° 
memˇched_°
 *
£lf
, *
mem
, 
size_t
 
nmemb
, c⁄° size_à
size
)

84 i‡(
£lf
)

86  
£lf
->
Æloˇt‹s
.
	`ªÆloc
(£lf, 
mem
, 
nmemb
 * 
size
, sñf->Æloˇt‹s.
c⁄ãxt
);

89 #ifde‡
__˝lu•lus


90  
°d
::
	`ªÆloc
(
mem
, 
size
);

92  
	`ªÆloc
(
mem
, 
size
);

94 
	}
}

95 
	#libmemˇched_xªÆloc
(
__memˇchd_°
, 
__mem
, 
__√Àm
, 
__ty≥
Ë((__ty≥ *)
	`libmemˇched_ªÆloc
((__memˇchd_°), (__mem), (__√Àm), (__ty≥)))

	)

96 
	#libmemˇched_xvÆloc
(
__memˇchd_°
, 
__√Àm
, 
__ty≥
Ë((__ty≥ *)
	`libmemˇched_ªÆloc
((__memˇchd_°), 
NULL
, (__√Àm), (__ty≥)))

	)

98 
ölöe
 *
	$libmemˇched_ˇŒoc
(c⁄° 
memˇched_°
 *
£lf
, 
size_t
 
√Àm
, size_à
size
)

100 i‡(
£lf
)

102  
£lf
->
Æloˇt‹s
.
	`ˇŒoc
(£lf, 
√Àm
, 
size
, sñf->Æloˇt‹s.
c⁄ãxt
);

105 #ifde‡
__˝lu•lus


106  
°d
::
	`ˇŒoc
(
√Àm
, 
size
);

108  
	`ˇŒoc
(
√Àm
, 
size
);

110 
	}
}

111 
	#libmemˇched_xˇŒoc
(
__memˇchd_°
, 
__√Àm
, 
__ty≥
Ë((__ty≥ *)
	`libmemˇched_ˇŒoc
((__memˇchd_°), (__√Àm), (__ty≥)))

	)

	@libmemcached/namespace.cc

38 
	~"libmemˇched/comm⁄.h
"

39 
	~"libmemˇched/as£π.hµ
"

41 
memˇched_ªtu∫_t
 
	$memˇched_£t_«me•a˚
(
Memˇched
& 
memc
, c⁄° *
key
, 
size_t
 
key_Àngth
)

43 i‡(
key
 
™d
 
key_Àngth
 == 0)

45 
	`WATCHPOINT_ASSERT
(
key_Àngth
);

46  
	`memˇched_£t_îr‹
(
memc
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("InvalidÇamespace,Çamespace string had value butÜength was 0"));

48 i‡(
key_Àngth
 
™d
 
key
 =
NULL
)

50 
	`WATCHPOINT_ASSERT
(
key
);

51  
	`memˇched_£t_îr‹
(
memc
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("InvalidÇamespace,Çamespace stringÜength was > 1 butÇamespace string wasÇull "));

53 i‡(
key
 
™d
 
key_Àngth
)

55 
boﬁ
 
‹ig

memc
.
Êags
.
vîify_key
;

56 
memc
.
Êags
.
vîify_key

åue
;

57 i‡(
	`memˇched_Áûed
(
	`memˇched_key_ã°
(
memc
, (c⁄° **)&
key
, &
key_Àngth
, 1)))

59 
memc
.
Êags
.
vîify_key

‹ig
;

60  
	`memˇched_œ°_îr‹
(&
memc
);

62 
memc
.
Êags
.
vîify_key

‹ig
;

64 i‡((
key_Àngth
 > 
MEMCACHED_PREFIX_KEY_MAX_SIZE
 -1))

66  
	`memˇched_£t_îr‹
(
memc
, 
MEMCACHED_KEY_TOO_BIG
, 
MEMCACHED_AT
);

69 
	`memˇched_¨øy_‰ì
(
memc
.
_«me•a˚
);

70 
memc
.
_«me•a˚

	`memˇched_°r˝y
(&memc, 
key
, 
key_Àngth
);

72 i‡(
memc
.
_«me•a˚
 =
NULL
)

74  
	`memˇched_£t_îr‹
(
memc
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

79 
	`memˇched_¨øy_‰ì
(
memc
.
_«me•a˚
);

80 
memc
.
_«me•a˚

NULL
;

83  
MEMCACHED_SUCCESS
;

84 
	}
}

86 c⁄° * 
	$memˇched_gë_«me•a˚
(
Memˇched
& 
memc
)

88 i‡(
memc
.
_«me•a˚
 =
NULL
)

90  
NULL
;

93  
	`memˇched_¨øy_°rög
(
memc
.
_«me•a˚
);

94 
	}
}

	@libmemcached/namespace.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


42 
memˇched_ªtu∫_t
 
memˇched_£t_«me•a˚
(
Memˇched
&, c⁄° *
°r
, 
size_t
 
Àngth
);

44 c⁄° * 
memˇched_gë_«me•a˚
(
Memˇched
&);

	@libmemcached/options.cc

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<libmemˇched/›ti⁄s.hµ
>

41 
	~<libmemˇched/c¶/c⁄ãxt.h
>

43 c⁄° *
	$memˇched_∑r£_fûíame
(
memˇched_°
 *
memc
)

45 
	`as£π_msg
(
memc
, "Invalid memcached_st");

46  
	`memˇched_¨øy_°rög
(
memc
->
c⁄figuª
.
fûíame
);

47 
	}
}

49 
size_t
 
	$memˇched_∑r£_fûíame_Àngth
(
memˇched_°
 *
memc
)

51  
	`memˇched_¨øy_size
(
memc
->
c⁄figuª
.
fûíame
);

52 
	}
}

54 
memˇched_ªtu∫_t
 
	$_∑r£_fûe_›ti⁄s
(
memˇched_°
& 
£lf
, 
memˇched_¨øy_°
 *
ªÆ_«me
)

56 
FILE
 *
Â

	`f›í
(
	`memˇched_¨øy_°rög
(
ªÆ_«me
), "r");

57 i‡(
nŸ
 
Â
)

59 
memˇched_°rög_t
 
îr‹_mesßge

	`memˇched_¨øy_to_°rög
(
ªÆ_«me
);

60 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t_î∫o
(
£lf
, 
î∫o
, 
MEMCACHED_AT
, 
îr‹_mesßge
);

61  
rc
;

64 
buf„r
[
BUFSIZ
];

65 
memˇched_ªtu∫_t
 
rc

MEMCACHED_INVALID_ARGUMENTS
;

66 
	`fgës
(
buf„r
, (buf„r), 
Â
))

68 
size_t
 
Àngth

	`°æí
(
buf„r
);

70 i‡(
Àngth
 =1 
™d
 
buf„r
[0] == '\n')

73 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_∑r£_c⁄figuøti⁄
(&
£lf
, 
buf„r
, 
Àngth
)))

76 
	`f˛o£
(
Â
);

78  
rc
;

79 
	}
}

81 
memˇched_ªtu∫_t
 
	$libmemˇched_check_c⁄figuøti⁄
(c⁄° *
›ti⁄_°rög
, 
size_t
 
Àngth
, *
îr‹_buf„r
, size_à
îr‹_buf„r_size
)

83 
memˇched_°
 
memc
, *
memc_±r
;

85 i‡(
›ti⁄_°rög
 =
NULL
 
‹
 
Àngth
 == 0)

87  
MEMCACHED_INVALID_ARGUMENTS
;

90 i‡(
îr‹_buf„r
 
™d
 
îr‹_buf„r_size
)

92 
îr‹_buf„r
[0]= 0;

95 i‡(
	`nŸ
 (
memc_±r

	`memˇched_¸óã
(&
memc
)))

97  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

100 
memˇched_ªtu∫_t
 
rc

	`memˇched_∑r£_c⁄figuøti⁄
(
memc_±r
, 
›ti⁄_°rög
, 
Àngth
);

101 i‡(
	`memˇched_Áûed
(
rc
Ë
™d
 
îr‹_buf„r
ánd 
îr‹_buf„r_size
)

103 
	`°∫˝y
(
îr‹_buf„r
, 
	`memˇched_œ°_îr‹_mesßge
(
memc_±r
), 
îr‹_buf„r_size
);

104 
îr‹_buf„r
[
îr‹_buf„r_size
 -1]= 0;

107 
boﬁ
 
has_fûíame

	`memˇched_behavi‹_gë
(
memc_±r
, 
MEMCACHED_BEHAVIOR_LOAD_FROM_FILE
);

108 i‡(
	`memˇched_suc˚ss
(
rc
Ë
™d
 
has_fûíame
)

110 
	`as£π_msg
(
	`memˇched_∑r£_fûíame
(
memc_±r
), "Invalid configuration file");

111 
	`as£π_msg
(
	`memˇched_∑r£_fûíame_Àngth
(
memc_±r
), "Invalid configuration file");

112 
rc

	`_∑r£_fûe_›ti⁄s
(*
memc_±r
, memc_±r->
c⁄figuª
.
fûíame
);

114 i‡(
	`memˇched_Áûed
(
rc
Ë
™d
 
îr‹_buf„r
ánd 
îr‹_buf„r_size
)

116 
	`°∫˝y
(
îr‹_buf„r
, 
	`memˇched_œ°_îr‹_mesßge
(
memc_±r
), 
îr‹_buf„r_size
);

117 
îr‹_buf„r
[
îr‹_buf„r_size
 -1]= 0;

121 
	`memˇched_‰ì
(
memc_±r
);

123  
rc
;

124 
	}
}

126 
memˇched_ªtu∫_t
 
	$memˇched_∑r£_c⁄figuøti⁄
(
memˇched_°
 *
£lf
, c⁄° *
›ti⁄_°rög
, 
size_t
 
Àngth
)

128 
	`WATCHPOINT_ASSERT
(
£lf
);

129 i‡(
nŸ
 
£lf
)

131  
MEMCACHED_INVALID_ARGUMENTS
;

134 
memˇched_ªtu∫_t
 
rc
;

135 
C⁄ãxt
 
	`c⁄ãxt
(
›ti⁄_°rög
, 
Àngth
, 
£lf
, 
rc
);

137 
c⁄ãxt
.
	`°¨t
();

139  
rc
;

140 
	}
}

142 
	$memˇched_£t_c⁄figuøti⁄_fûe
(
memˇched_°
 *
£lf
, c⁄° *
fûíame
, 
size_t
 
fûíame_Àngth
)

144 
	`as£π_msg
(
fûíame
, "Invalid filename");

145 
	`as£π_msg
(
fûíame_Àngth
, "Invalid filename_length");

146 
	`memˇched_¨øy_‰ì
(
£lf
->
c⁄figuª
.
fûíame
);

147 
£lf
->
c⁄figuª
.
fûíame

	`memˇched_°r˝y
(£lf, fûíame, 
fûíame_Àngth
);

148 
	}
}

150 
memˇched_ªtu∫_t
 
	$memˇched_∑r£_c⁄figuª_fûe
(
memˇched_°
& 
£lf
, c⁄° *
fûíame
, 
size_t
 
Àngth
)

152 i‡(
nŸ
 
fûíame
)

154  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
);

157 
	`WATCHPOINT_ASSERT
(
£lf
);

158 i‡(
nŸ
 
Àngth
)

160  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
);

163 
memˇched_¨øy_°
 *
tmp_¨øy

	`memˇched_°r˝y
(&
£lf
, 
fûíame
, 
Àngth
);

165 i‡(
nŸ
 
tmp_¨øy
)

167  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

170 
memˇched_ªtu∫_t
 
rc

	`memˇched_∑r£_c⁄figuª_fûe
(
£lf
, *
tmp_¨øy
);

171 
	`memˇched_¨øy_‰ì
(
tmp_¨øy
);

173  
rc
;

174 
	}
}

176 
memˇched_ªtu∫_t
 
	$memˇched_∑r£_c⁄figuª_fûe
(
memˇched_°
& 
£lf
, 
memˇched_¨øy_°
& 
fûíame
)

178 
	`WATCHPOINT_ASSERT
(
	`memˇched_¨øy_size
(&
fûíame
));

179 i‡(
nŸ
 
	`memˇched_¨øy_size
(&
fûíame
))

181  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
);

184  
	`_∑r£_fûe_›ti⁄s
(
£lf
, &
fûíame
);

185 
	}
}

	@libmemcached/options.hpp

38 #¥agm®
⁄˚


40 
LIBMEMCACHED_LOCAL


41 
memˇched_£t_c⁄figuøti⁄_fûe
(
memˇched_°
 *
£lf
, c⁄° *
fûíame
, 
size_t
 
fûíame_Àngth
);

43 
LIBMEMCACHED_LOCAL


44 c⁄° *
memˇched_∑r£_fûíame
(
memˇched_°
 *
memc
);

46 
LIBMEMCACHED_LOCAL


47 
memˇched_ªtu∫_t
 
memˇched_∑r£_c⁄figuøti⁄
(
memˇched_°
 *
±r
, c⁄° *
›ti⁄_°rög
, 
size_t
 
Àngth
);

49 
LIBMEMCACHED_LOCAL


50 
size_t
 
memˇched_∑r£_fûíame_Àngth
(
memˇched_°
 *
memc
);

52 
LIBMEMCACHED_LOCAL


53 
memˇched_ªtu∫_t
 
memˇched_∑r£_c⁄figuª_fûe
(
memˇched_°
&, c⁄° *
fûíame
, 
size_t
 
Àngth
);

55 
LIBMEMCACHED_LOCAL


56 
memˇched_ªtu∫_t
 
memˇched_∑r£_c⁄figuª_fûe
(
memˇched_°
&, 
memˇched_¨øy_°
& 
fûíame
);

	@libmemcached/parse.cc

45 
	~<libmemˇched/comm⁄.h
>

47 
memˇched_£rvî_li°_°
 
	$memˇched_£rvîs_∑r£
(c⁄° *
£rvî_°rögs
)

49 *
°rög
;

50 c⁄° *
begö_±r
;

51 c⁄° *
íd_±r
;

52 
memˇched_£rvî_°
 *
£rvîs

NULL
;

53 
memˇched_ªtu∫_t
 
rc
;

55 
	`WATCHPOINT_ASSERT
(
£rvî_°rögs
);

57 
íd_±r

£rvî_°rögs
 + 
	`°æí
(server_strings);

59 
begö_±r

£rvî_°rögs
, 
°rög
(*)
	`ödex
(server_strings, ',');

60 
begö_±r
 !
íd_±r
;

61 
°rög
(*)
	`ödex
(
begö_±r
, ','))

63 
buf„r
[
HUGE_STRING_LEN
];

64 *
±r
, *
±r2
;

65 
uöt32_t
 
weight
= 0;

67 i‡(
°rög
)

69 
	`mem˝y
(
buf„r
, 
begö_±r
, (
size_t
Ë(
°rög
 - begin_ptr));

70 
buf„r
[()(
°rög
 - 
begö_±r
)]= 0;

71 
begö_±r

°rög
+1;

75 
size_t
 
Àngth

	`°æí
(
begö_±r
);

76 
	`mem˝y
(
buf„r
, 
begö_±r
, 
Àngth
);

77 
buf„r
[
Àngth
]= 0;

78 
begö_±r

íd_±r
;

81 
±r

	`ödex
(
buf„r
, ':');

83 
ö_p‹t_t
 
p‹t
= 0;

84 i‡(
±r
)

86 
±r
[0]= 0;

88 
±r
++;

90 
î∫o
= 0;

91 
p‹t
(
ö_p‹t_t
Ë
	`°πoul
(
±r
, (**)
NULL
, 10);

92 i‡(
î∫o
 != 0)

94 
	`memˇched_£rvî_‰ì
(
£rvîs
);

95  
NULL
;

98 
±r2

	`ödex
(
±r
, ' ');

99 i‡(! 
±r2
)

100 
±r2

	`ödex
(
±r
, ':');

102 i‡(
±r2
)

104 
±r2
++;

105 
î∫o
= 0;

106 
weight

	`uöt32_t
(
	`°πoul
(
±r2
, (**)
NULL
, 10));

107 i‡(
î∫o
 != 0)

109 
	`memˇched_£rvî_‰ì
(
£rvîs
);

110  
NULL
;

115 
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(£rvîs, 
buf„r
, 
p‹t
, 
weight
, &
rc
);

117 i‡(
	`is•a˚
(*
begö_±r
))

119 
begö_±r
++;

123  
£rvîs
;

124 
	}
}

	@libmemcached/poll.cc

13 
	~"libmemˇched/comm⁄.h
"

15 #i‡
deföed
(
_WIN32
)

16 
	~"libmemˇched/pﬁl.h
"

18 
	~<sys/time.h
>

19 
	~<°rögs.h
>

21 
	$pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
tmo
)

23 
fd_£t
 
ªadfds
, 
wrôefds
, 
îr‹fds
;

24 
	`FD_ZERO
(&
ªadfds
);

25 
	`FD_ZERO
(&
wrôefds
);

26 
	`FD_ZERO
(&
îr‹fds
);

28 
maxfd
= 0;

30 
nfds_t
 
x
0; x < 
nfds
; ++x)

32 i‡(
fds
[
x
].
evíts
 & (
POLLIN
 | 
POLLOUT
))

34 #i‚de‡
_WIN32


35 i‡(
fds
[
x
].
fd
 > 
maxfd
)

37 
maxfd

fds
[
x
].
fd
;

40 i‡(
fds
[
x
].
evíts
 & 
POLLIN
)

42 
	`FD_SET
(
fds
[
x
].
fd
, &
ªadfds
);

44 i‡(
fds
[
x
].
evíts
 & 
POLLOUT
)

46 
	`FD_SET
(
fds
[
x
].
fd
, &
wrôefds
);

51 
timevÆ
 
timeout
{ .
tv_£c
 = 
tmo
 / 1000,

52 .
tv_u£c
(
tmo
 % 1000) * 1000 };

53 
timevÆ
 *
ç
&
timeout
;

54 i‡(
tmo
 == -1)

56 
ç

NULL
;

58 
ªt

	`£À˘
(
maxfd
 + 1, &
ªadfds
, &
wrôefds
, &
îr‹fds
, 
ç
);

59 i‡(
ªt
 <= 0)

61  
ªt
;

65 
nfds_t
 
x
0; x < 
nfds
; ++x)

67 
fds
[
x
].
ªvíts
= 0;

68 i‡(
	`FD_ISSET
(
fds
[
x
].
fd
, &
ªadfds
))

70 
fds
[
x
].
ªvíts
 |
POLLIN
;

72 i‡(
	`FD_ISSET
(
fds
[
x
].
fd
, &
wrôefds
))

74 
fds
[
x
].
ªvíts
 |
POLLOUT
;

76 i‡(
	`FD_ISSET
(
fds
[
x
].
fd
, &
îr‹fds
))

78 
fds
[
x
].
ªvíts
 |
POLLERR
;

82  
ªt
;

83 
	}
}

	@libmemcached/poll.h

13 #¥agm®
⁄˚


15 #i‡
deföed
(
_WIN32
)

17 
	~<wösock2.h
>

19 #ifde‡
__˝lu•lus


23 
	spﬁlfd


25 #i‡
deföed
(
_WIN32
)

26 
SOCKET
 
fd
;

28 
fd
;

30 
evíts
;

31 
ªvíts
;

32 } 
	tpﬁlfd_t
;

34 
	tnfds_t
;

36 
	#POLLIN
 0x0001

	)

37 
	#POLLOUT
 0x0004

	)

38 
	#POLLERR
 0x0008

	)

39 
	#POLLHUP
 0x010

	)

40 
	#POLLNVAL
 0x020

	)

42 
pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
tmo
);

44 #ifde‡
__˝lu•lus


	@libmemcached/purge.cc

40 
	~<libmemˇched/comm⁄.h
>

42 
	#memˇched_£t_purgög
(
__obje˘
, 
__vÆue
Ë((__obje˘)->
°©e
.
is_purgög
(__vÆue))

	)

44 ˛as†
	cPurge


46 
	mpublic
:

47 
	$Purge
(
Memˇched
* 
¨g
) :

48 
	$_memc
(
¨g
)

50 
	`memˇched_£t_purgög
(
_memc
, 
åue
);

53 ~
	$Purge
()

55 
	`memˇched_£t_purgög
(
_memc
, 
Ál£
);

56 
	}
}

58 
	g¥iv©e
:

59 
Memˇched
* 
_memc
;

62 ˛as†
	cPﬁlTimeout


64 
	mpublic
:

65 
	$PﬁlTimeout
(
Memˇched
* 
¨g
) :

66 
	`_timeout
(
¨g
->
pﬁl_timeout
),

67 
	`_‹igö
(
¨g
->
pﬁl_timeout
)

69 
_‹igö
 = 2000;

72 ~
	$PﬁlTimeout
()

74 
_‹igö

_timeout
;

75 
	}
}

77 
	g¥iv©e
:

78 
öt32_t
 
_timeout
;

79 
	göt32_t
& 
	g_‹igö
;

82 
boﬁ
 
	$memˇched_purge
(
memˇched_ö°™˚_°
* 
±r
)

84 
Memˇched
 *
roŸ
(Memˇched *)
±r
->root;

86 i‡(
	`memˇched_is_purgög
(
±r
->
roŸ
) ||

87 (
	`memˇched_£rvî_ª•⁄£_cou¡
(
±r
Ë<Öå->
roŸ
->
io_msg_w©îm¨k
 &&

88 
±r
->
io_byãs_£¡
 <Öå->
roŸ
->
io_byãs_w©îm¨k
) ||

89 (
±r
->
io_byãs_£¡
 >±r->
roŸ
->
io_byãs_w©îm¨k
 &&

90 
	`memˇched_£rvî_ª•⁄£_cou¡
(
±r
) < 2))

92  
åue
;

99 
Purge
 
	`£t_purge
(
roŸ
);

101 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 !
INVALID_SOCKET
);

106 i‡(
	`memˇched_io_wrôe
(
±r
Ë=
Ál£
)

108 
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_WRITE_FAILURE
, 
MEMCACHED_AT
);

109  
Ál£
;

111 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 !
INVALID_SOCKET
);

113 
boﬁ
 
is_suc˚ssful

åue
;

114 
uöt32_t
 
no_msg

	`memˇched_£rvî_ª•⁄£_cou¡
(
±r
) - 1;

115 i‡(
no_msg
 > 0)

117 
memˇched_ªsu…_°
 
ªsu…
;

124 
PﬁlTimeout
 
	`pﬁl_timeout
(
±r
->
roŸ
);

126 
memˇched_ªsu…_°
* 
ªsu…_±r

	`memˇched_ªsu…_¸óã
(
roŸ
, &
ªsu…
);

127 
	`as£π
(
ªsu…_±r
);

129 
uöt32_t
 
x
0; x < 
no_msg
; x++)

131 
	`memˇched_ªsu…_ª£t
(
ªsu…_±r
);

132 
memˇched_ªtu∫_t
 
rc

	`memˇched_ªad_⁄e_ª•⁄£
(
±r
, 
ªsu…_±r
);

138 i‡(
rc
=
MEMCACHED_PROTOCOL_ERROR
 
‹
Ñ¯=
MEMCACHED_UNKNOWN_READ_FAILURE
 o∏r¯=
MEMCACHED_READ_FAILURE
)

140 
	`WATCHPOINT_ERROR
(
rc
);

141 
	`memˇched_io_ª£t
(
±r
);

142 
is_suc˚ssful

Ál£
;

145 i‡(
±r
->
roŸ
->
ˇŒbacks
 !
NULL
)

147 
memˇched_ˇŒback_°
 
cb
 = *
±r
->
roŸ
->
ˇŒbacks
;

148 i‡(
	`memˇched_suc˚ss
(
rc
))

150 
uöt32_t
 
y
0; y < 
cb
.
numbî_of_ˇŒback
; y++)

152 i‡(
	`memˇched_Áèl
((*
cb
.
ˇŒback
[
y
])(
±r
->
roŸ
, 
ªsu…_±r
, cb.
c⁄ãxt
)))

161 
	`memˇched_ªsu…_‰ì
(
ªsu…_±r
);

164  
is_suc˚ssful
;

165 
	}
}

	@libmemcached/quit.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
	g«me•a˚
 {

41 
memˇched_ªtu∫_t
 
£nd_quô_mesßge
(
memˇched_ö°™˚_°
* 
ö°™˚
)

43 
memˇched_ªtu∫_t
 
	grc
;

44 i‡(
	gö°™˚
->
	groŸ
->
	gÊags
.
	gbö¨y_¥Ÿocﬁ
)

46 
¥Ÿocﬁ_bö¨y_ªque°_quô
 
	gªque°
= {};

48 
öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

50 
	gªque°
.
	gmesßge
.
	ghódî
.ªque°.
	g›code
 = 
PROTOCOL_BINARY_CMD_QUIT
;

51 
	gªque°
.
	gmesßge
.
	ghódî
.ªque°.
	gd©©y≥
 = 
PROTOCOL_BINARY_RAW_BYTES
;

53 
libmemˇched_io_ve˘‹_°
 
	gve˘‹
[]=

55 { 
ªque°
.
byãs
, (request.bytes) }

58 
	grc

memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 1, 
åue
);

62 
libmemˇched_io_ve˘‹_°
 
	gve˘‹
[]=

64 { 
memˇched_lôîÆ_∑øm
("quit\r\n") }

67 
	grc

memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 1, 
åue
);

70  
	grc
;

73 
døö_ö°™˚
(
memˇched_ö°™˚_°
* 
ö°™˚
)

83 i‡(
	gö°™˚
->
	groŸ
->
	gÊags
.
buf„r_ªque°s
 
‹
 in°™˚->roŸ->
	gnumbî_of_ª∂iˇs
)

85 
memˇched_io_¶uΩ
(
ö°™˚
);

95 
	gö°™˚
->
	g£rvî_Áûuª_cou¡î
= 0;

108 
	$memˇched_quô_£rvî
(
memˇched_ö°™˚_°
* 
ö°™˚
, 
boﬁ
 
io_dóth
)

110 i‡(
ö°™˚
->
	`vÆid
())

112 i‡(
io_dóth
 =
Ál£
 
™d
 
	`memˇched_is_udp
(
ö°™˚
->
roŸ
Ë=Ál£ánd in°™˚->
	`is_shuâög_down
() == false)

114 
	`£nd_quô_mesßge
(
ö°™˚
);

116 
ö°™˚
->
	`°¨t_˛o£_sockë
();

117 
	`døö_ö°™˚
(
ö°™˚
);

121 
ö°™˚
->
	`˛o£_sockë
();

123 i‡(
io_dóth
)

125 
	`memˇched_m¨k_£rvî_f‹_timeout
(
ö°™˚
);

127 
	}
}

129 
	$£nd_quô
(
Memˇched
 *
memc
)

131 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

133 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
x
);

135 
	`memˇched_quô_£rvî
(
ö°™˚
, 
Ál£
);

137 
	}
}

139 
	$memˇched_quô
(
memˇched_°
 *
shñl
)

141 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

142 
memˇched_ªtu∫_t
 
rc
;

143 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
memc
, 
åue
)))

148 
	`£nd_quô
(
memc
);

149 
	}
}

	@libmemcached/quit.hpp

37 #¥agm®
⁄˚


39 
memˇched_quô_£rvî
(
memˇched_ö°™˚_°
* 
±r
, 
boﬁ
 
io_dóth
);

41 
£nd_quô
(
memˇched_°
 *
±r
);

	@libmemcached/response.cc

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<libmemˇched/°rög.hµ
>

41 
memˇched_ªtu∫_t
 
	$ãxtuÆ_vÆue_„tch
(
memˇched_ö°™˚_°
* 
ö°™˚
,

42 *
buf„r
,

43 
memˇched_ªsu…_°
 *
ªsu…
)

45 *
√xt_±r
;

46 
ssize_t
 
ªad_Àngth
= 0;

47 
size_t
 
vÆue_Àngth
;

49 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
roŸ
);

50 *
íd_±r

buf„r
 + 
MEMCACHED_DEFAULT_COMMAND_SIZE
;

52 
	`memˇched_ªsu…_ª£t
(
ªsu…
);

54 *
°rög_±r

buf„r
;

55 
°rög_±r
+= 6;

59 
memˇched_ªtu∫_t
 
rc

MEMCACHED_SUCCESS
;

63 *
key

ªsu…
->
ôem_key
;

64 
ªsu…
->
key_Àngth
= 0;

66 
±rdiff_t
 
¥efix_Àngth

	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
); !(
	`is˙ål
(*
°rög_±r
Ë|| 
	`is•a˚
(*string_ptr)) ; string_ptr++)

68 i‡(
¥efix_Àngth
 == 0)

70 *
key
*
°rög_±r
;

71 
key
++;

72 
ªsu…
->
key_Àngth
++;

75 
¥efix_Àngth
--;

77 
ªsu…
->
ôem_key
[ªsu…->
key_Àngth
]= 0;

80 i‡(
íd_±r
 =
°rög_±r
)

82 
ªad_îr‹
;

86 
°rög_±r
++;

87 i‡(
íd_±r
 =
°rög_±r
)

89 
ªad_îr‹
;

92 
√xt_±r

°rög_±r
; 
	`isdigô
(*string_ptr); string_ptr++) {};

93 
î∫o
= 0;

94 
ªsu…
->
ôem_Êags
(
uöt32_t
Ë
	`°πoul
(
√xt_±r
, &
°rög_±r
, 10);

96 i‡(
î∫o
 !0 
‹
 
íd_±r
 =
°rög_±r
)

98 
ªad_îr‹
;

102 
°rög_±r
++;

103 i‡(
íd_±r
 =
°rög_±r
)

105 
ªad_îr‹
;

108 
√xt_±r

°rög_±r
; 
	`isdigô
(*string_ptr); string_ptr++) {};

109 
î∫o
= 0;

110 
vÆue_Àngth
(
size_t
)
	`°πouŒ
(
√xt_±r
, &
°rög_±r
, 10);

112 i‡(
î∫o
 !0 
‹
 
íd_±r
 =
°rög_±r
)

114 
ªad_îr‹
;

118 i‡(*
°rög_±r
 == '\r')

121 
°rög_±r
+= 2;

125 
°rög_±r
++;

126 
√xt_±r

°rög_±r
; 
	`isdigô
(*string_ptr); string_ptr++) {};

127 
î∫o
= 0;

128 
ªsu…
->
ôem_ˇs

	`°πouŒ
(
√xt_±r
, &
°rög_±r
, 10);

131 i‡(
î∫o
 !0 
‹
 
íd_±r
 < 
°rög_±r
)

133 
ªad_îr‹
;

137 i‡(
	`memˇched_Áûed
(
	`memˇched_°rög_check
(&
ªsu…
->
vÆue
, 
vÆue_Àngth
 +2)))

139  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

143 *
vÆue_±r

	`memˇched_°rög_vÆue_muèbÀ
(&
ªsu…
->
vÆue
);

151 
size_t
 
to_ªad
(
vÆue_Àngth
) + 2;

152 
memˇched_ªtu∫_t
 
ºc

	`memˇched_io_ªad
(
ö°™˚
, 
vÆue_±r
, 
to_ªad
, 
ªad_Àngth
);

153 i‡(
	`memˇched_Áûed
(
ºc
Ë
™d
Ñr¯=
MEMCACHED_IN_PROGRESS
)

155 
	`memˇched_quô_£rvî
(
ö°™˚
, 
åue
);

156  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_IN_PROGRESS
, 
MEMCACHED_AT
);

158 i‡(
	`memˇched_Áûed
(
ºc
))

160  
ºc
;

164 i‡(
ªad_Àngth
 !(
ssize_t
)(
vÆue_Àngth
 + 2))

166 
ªad_îr‹
;

171 *
ch¨_±r
;

172 
ch¨_±r

	`memˇched_°rög_vÆue_muèbÀ
(&
ªsu…
->
vÆue
);;

173 
ch¨_±r
[
vÆue_Àngth
]= 0;

174 
ch¨_±r
[
vÆue_Àngth
 +1]= 0;

175 
	`memˇched_°rög_£t_Àngth
(&
ªsu…
->
vÆue
, 
vÆue_Àngth
);

178 i‡(
	`memˇched_is_í¸y±ed
(
ö°™˚
->
roŸ
Ë
™d
 
	`memˇched_ªsu…_Àngth
(
ªsu…
))

180 
hashkô_°rög_°
 *
de°ö©i⁄
;

182 i‡((
de°ö©i⁄

	`hashkô_de¸y±
(&
ö°™˚
->
roŸ
->
hashkô
,

183 
	`memˇched_ªsu…_vÆue
(
ªsu…
), 
	`memˇched_ªsu…_Àngth
‘esu…))Ë=
NULL
)

185 
rc

	`memˇched_£t_îr‹
(*
ö°™˚
->
roŸ
, 
MEMCACHED_FAILURE
,

186 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("hashkit_decrypt() failed"));

190 
	`memˇched_ªsu…_ª£t_vÆue
(
ªsu…
);

191 i‡(
	`memˇched_Áûed
(
	`memˇched_ªsu…_£t_vÆue
(
ªsu…
, 
	`hashkô_°rög_c_°r
(
de°ö©i⁄
), 
	`hashkô_°rög_Àngth
(destination))))

193 
rc

	`memˇched_£t_îr‹
(*
ö°™˚
->
roŸ
, 
MEMCACHED_FAILURE
,

194 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("hashkit_decrypt() failed"));

198 i‡(
	`memˇched_Áûed
(
rc
))

200 
	`memˇched_ªsu…_ª£t
(
ªsu…
);

202 
	`hashkô_°rög_‰ì
(
de°ö©i⁄
);

205  
rc
;

207 
ªad_îr‹
:

208 
	`memˇched_io_ª£t
(
ö°™˚
);

210  
MEMCACHED_PARTIAL_READ
;

211 
	}
}

213 
memˇched_ªtu∫_t
 
	$ãxtuÆ_ªad_⁄e_ª•⁄£
(
memˇched_ö°™˚_°
* 
ö°™˚
,

214 *
buf„r
, c⁄° 
size_t
 
buf„r_Àngth
,

215 
memˇched_ªsu…_°
 *
ªsu…
)

217 
	`¥ötf
("Reading oneÅextutalÑesponse\n");

218 
size_t
 
tŸÆ_ªad
;

219 
memˇched_ªtu∫_t
 
rc

	`memˇched_io_ªadlöe
(
ö°™˚
, 
buf„r
, 
buf„r_Àngth
, 
tŸÆ_ªad
);

221 i‡(
	`memˇched_Áûed
(
rc
))

223  
rc
;

225 
	`as£π
(
tŸÆ_ªad
);

226 
	`¥ötf
("AfterÅotalÑead\n");

228 
buf„r
[0])

233 i‡(
buf„r
[1] ='A' 
™d
 buffer[2] == 'L'ánd buffer[3] == 'U'ánd buffer[4] == 'E')

236 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

237  
	`ãxtuÆ_vÆue_„tch
(
ö°™˚
, 
buf„r
, 
ªsu…
);

240 i‡(
buf„r
[1] ='E' 
™d
 buffer[2] == 'R'ánd buffer[3] == 'S'ánd buffer[4] == 'I'ánd buffer[5] == 'O'ánd buffer[6] == 'N')

243 *
ª•⁄£_±r

	`ödex
(
buf„r
, ' ');

245 *
íd±r
;

246 
î∫o
= 0;

247 
vîsi⁄

	`°πﬁ
(
ª•⁄£_±r
, &
íd±r
, 10);

248 i‡(
î∫o
 !0 
‹
 
vîsi⁄
 =
LONG_MIN
 o∏vîsi⁄ =
LONG_MAX
 o∏vîsi⁄ > 
UINT8_MAX
 or version == 0)

250 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

251  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("strtol() failedÅoÖarse major version"));

253 
ö°™˚
->
maj‹_vîsi⁄

	`uöt8_t
(
vîsi⁄
);

255 
íd±r
++;

256 
î∫o
= 0;

257 
vîsi⁄

	`°πﬁ
(
íd±r
, &endptr, 10);

258 i‡(
î∫o
 !0 
‹
 
vîsi⁄
 =
LONG_MIN
 o∏vîsi⁄ =
LONG_MAX
 o∏vîsi⁄ > 
UINT8_MAX
)

260 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

261  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("strtol() failedÅoÖarse minor version"));

263 
ö°™˚
->
mö‹_vîsi⁄

	`uöt8_t
(
vîsi⁄
);

265 
íd±r
++;

266 
î∫o
= 0;

267 
vîsi⁄

	`°πﬁ
(
íd±r
, &endptr, 10);

268 i‡(
î∫o
 !0 
‹
 
vîsi⁄
 =
LONG_MIN
 o∏vîsi⁄ =
LONG_MAX
 o∏vîsi⁄ > 
UINT8_MAX
)

270 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

271  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("strtol() failedÅoÖarse micro version"));

273 
ö°™˚
->
mi¸o_vîsi⁄

	`uöt8_t
(
vîsi⁄
);

275  
MEMCACHED_SUCCESS
;

283 i‡(
buf„r
[1] == 'K')

285  
MEMCACHED_SUCCESS
;

292 
	`¥ötf
("Lookingát s\n");

294 i‡(
buf„r
[1] ='T' 
™d
 buffer[2] == 'A'ánd buffer[3] == 'T')

296 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

297  
MEMCACHED_STAT
;

300 i‡(
buf„r
[1] ='E' 
™d
 buffer[2] == 'R'ánd buffer[3] == 'V'ánd buffer[4] == 'E'ánd buffer[5] == 'R'

301 
™d
 
buf„r
[6] == '_'

302 
™d
 
buf„r
[7] == 'E'ánd buffer[8] == 'R'ánd buffer[9] == 'R'ánd buffer[10] == 'O'ánd buffer[11] == 'R' )

304 i‡(
tŸÆ_ªad
 =
	`memˇched_lôîÆ_∑øm_size
("SERVER_ERROR"))

306  
MEMCACHED_SERVER_ERROR
;

309 i‡(
tŸÆ_ªad
 >
	`memˇched_lôîÆ_∑øm_size
("SERVER_ERROR obje˘Åoÿœrgêf‹ cache"Ë
™d


310 (
	`memcmp
(
buf„r
, 
	`memˇched_lôîÆ_∑øm
("SERVER_ERROR objectÅooÜarge for cache")) == 0))

312  
MEMCACHED_E2BIG
;

315 i‡(
tŸÆ_ªad
 >
	`memˇched_lôîÆ_∑øm_size
("SERVER_ERROR ouào‡mem‹y st‹ög obje˘"Ë
™d


316 (
	`memcmp
(
buf„r
, 
	`memˇched_lôîÆ_∑øm
("SERVER_ERROR out of memory storing object")) == 0))

318  
MEMCACHED_SERVER_MEMORY_ALLOCATION_FAILURE
;

322 *
°¨çå

buf„r
 + 
	`memˇched_lôîÆ_∑øm_size
("SERVER_ERROR");

323 i‡(
°¨çå
[0] == ' ')

325 
°¨çå
++;

328 *
íd±r

°¨çå
;

329 *
íd±r
 != '\r' && *endptr != '\n')Éndptr++;

331  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_SERVER_ERROR
, 
MEMCACHED_AT
, 
°¨çå
, 
	`size_t
(
íd±r
 - startptr));

334 i‡(
buf„r
[1] ='T' 
™d
 buffer[2] == 'O'ánd buffer[3] == 'R')

337 
	`¥ötf
("Stored\n");

338  
MEMCACHED_STORED
;

346 i‡(
buf„r
[1] ='E' 
™d
 buffer[2] == 'L'ánd buffer[3] == 'E'ánd buffer[4] == 'T'ánd buffer[5] == 'E'ánd buffer[6] == 'D')

348  
MEMCACHED_DELETED
;

356 i‡(
buf„r
[1] ='O' 
™d
 buffer[2] == 'T'

357 
™d
 
buf„r
[3] == '_'

358 
™d
 
buf„r
[4] == 'F'ánd buffer[5] == 'O'ánd buffer[6] == 'U'ánd buffer[7] == 'N'ánd buffer[8] == 'D')

360  
MEMCACHED_NOTFOUND
;

363 i‡(
buf„r
[1] ='O' 
™d
 buffer[2] == 'T'

364 
™d
 
buf„r
[3] == '_'

365 
™d
 
buf„r
[4] == 'S'ánd buffer[5] == 'T'ánd buffer[6] == 'O'ánd buffer[7] == 'R'ánd buffer[8] == 'E'ánd buffer[9] == 'D')

367  
MEMCACHED_NOTSTORED
;

375 i‡(
buf„r
[1] ='N' 
™d
 buffer[2] == 'D')

377  
MEMCACHED_END
;

381 i‡(
buf„r
[1] ='R' 
™d
 buffer[2] == 'O'ánd buffer[3] == 'T'ánd buffer[4] == 'O'ánd buffer[5] == 'C'ánd buffer[6] == 'O'ánd buffer[7] == 'L'

382 
™d
 
buf„r
[8] == '_'

383 
™d
 
buf„r
[9] == 'E'ánd buffer[10] == 'R'ánd buffer[11] == 'R'ánd buffer[12] == 'O'ánd buffer[13] == 'R')

385  
MEMCACHED_PROTOCOL_ERROR
;

389 i‡(
buf„r
[1] ='R' 
™d
 buffer[2] == 'R'ánd buffer[3] == 'O'ánd buffer[4] == 'R')

391  
MEMCACHED_ERROR
;

394 i‡(
buf„r
[1] ='X' 
™d
 buffer[2] == 'I'ánd buffer[3] == 'S'ánd buffer[4] == 'T'ánd buffer[5] == 'S')

396  
MEMCACHED_DATA_EXISTS
;

404 i‡(
buf„r
[1] ='O' 
™d
 buffer[2] == 'U'ánd buffer[3] == 'C'ánd buffer[4] == 'H'ánd buffer[5] == 'E'ánd buffer[6] == 'D')

406  
MEMCACHED_SUCCESS
;

414 i‡(
buf„r
[1] ='T' 
™d
 buffer[2] == 'E'ánd buffer[3] == 'M')

417 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

418  
MEMCACHED_ITEM
;

426 i‡(
buf„r
[1] ='L' 
™d
 buffer[2] == 'I'ánd buffer[3] == 'E'ánd buffer[4] == 'N'ánd buffer[5] == 'T'

427 
™d
 
buf„r
[6] == '_'

428 
™d
 
buf„r
[7] == 'E'ánd buffer[8] == 'R'ánd buffer[9] == 'R'ánd buffer[10] == 'O'ánd buffer[11] == 'R')

431 *
°¨çå

buf„r
 + 
	`memˇched_lôîÆ_∑øm_size
("CLIENT_ERROR");

432 i‡(
°¨çå
[0] == ' ')

434 
°¨çå
++;

437 *
íd±r

°¨çå
;

438 *
íd±r
 != '\r' && *endptr != '\n')Éndptr++;

440  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_CLIENT_ERROR
, 
MEMCACHED_AT
, 
°¨çå
, 
	`size_t
(
íd±r
 - startptr));

456 
î∫o
= 0;

457 
auto_ªtu∫_vÆue

	`°πouŒ
(
buf„r
, (**)
NULL
, 10);

459 i‡(
auto_ªtu∫_vÆue
 =
ULLONG_MAX
 
™d
 
î∫o
 =
ERANGE
)

461 
ªsu…
->
numîic_vÆue

UINT64_MAX
;

462  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
,

463 
	`memˇched_lôîÆ_∑øm
("NumericÑesponse was out ofÑange"));

465 i‡(
î∫o
 =
EINVAL
)

467 
ªsu…
->
numîic_vÆue

UINT64_MAX
;

468  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
,

469 
	`memˇched_lôîÆ_∑øm
("NumericÑesponse was out ofÑange"));

471 i‡(
î∫o
 != 0)

473 
ªsu…
->
numîic_vÆue

UINT64_MAX
;

474  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
,

475 
	`memˇched_lôîÆ_∑øm
("NumericÑesponse was out ofÑange"));

478 
ªsu…
->
numîic_vÆue

	`uöt64_t
(
auto_ªtu∫_vÆue
);

480 
	`WATCHPOINT_STRING
(
buf„r
);

481  
MEMCACHED_SUCCESS
;

488 
buf„r
[
tŸÆ_ªad
]= 0;

490 i‡(
tŸÆ_ªad
 >= ("STORSTORED") -1)

492 
	`Ârötf
(
°dîr
, "%s:%d '%s', %.*s\n", 
__FILE__
, 
__LINE__
,

493 
buf„r
, 
MEMCACHED_MAX_BUFFER
, 
ö°™˚
->
ªad_buf„r
);

494 
	`as£π
(
	`memcmp
(
buf„r
,"STORSTORED", ("STORSTORED") -1));

497  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
,

498 
buf„r
, 
tŸÆ_ªad
);

499 
	}
}

501 
memˇched_ªtu∫_t
 
	$bö¨y_ªad_⁄e_ª•⁄£
(
memˇched_ö°™˚_°
* 
ö°™˚
,

502 *
buf„r
, c⁄° 
size_t
 
buf„r_Àngth
,

503 
memˇched_ªsu…_°
 *
ªsu…
)

505 
	`¥ötf
("Reading one binaryÑead\n");

506 
memˇched_ªtu∫_t
 
rc
;

507 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

509 i‡((
rc

	`memˇched_ß„_ªad
(
ö°™˚
, &
hódî
.
byãs
, (hódî.byãs))Ë!
MEMCACHED_SUCCESS
)

511 
	`WATCHPOINT_ERROR
(
rc
);

512  
rc
;

515 i‡(
hódî
.
ª•⁄£
.
magic
 !
PROTOCOL_BINARY_RES
)

517  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
);

523 
hódî
.
ª•⁄£
.
keyÀn

	`¡ohs
(header.response.keylen);

524 
hódî
.
ª•⁄£
.
°©us

	`¡ohs
(header.response.status);

525 
hódî
.
ª•⁄£
.
bodyÀn

	`¡ohl
(header.response.bodylen);

526 
hódî
.
ª•⁄£
.
ˇs

	`memˇched_¡ohŒ
(header.response.cas);

527 
uöt32_t
 
bodyÀn

hódî
.
ª•⁄£
.bodylen;

529 i‡(
hódî
.
ª•⁄£
.
°©us
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 
‹


530 
hódî
.
ª•⁄£
.
°©us
 =
PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE
)

532 
hódî
.
ª•⁄£
.
›code
)

534 
PROTOCOL_BINARY_CMD_GETKQ
:

539 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

541 
PROTOCOL_BINARY_CMD_GETK
:

543 
uöt16_t
 
keyÀn

hódî
.
ª•⁄£
.keylen;

544 
	`memˇched_ªsu…_ª£t
(
ªsu…
);

545 
ªsu…
->
ôem_ˇs

hódî
.
ª•⁄£
.
ˇs
;

547 i‡((
rc

	`memˇched_ß„_ªad
(
ö°™˚
, &
ªsu…
->
ôem_Êags
,  (ªsu…->ôem_Êags))Ë!
MEMCACHED_SUCCESS
)

549 
	`WATCHPOINT_ERROR
(
rc
);

550  
MEMCACHED_UNKNOWN_READ_FAILURE
;

553 
ªsu…
->
ôem_Êags

	`¡ohl
(result->item_flags);

554 
bodyÀn
 -
hódî
.
ª•⁄£
.
exéí
;

556 
ªsu…
->
key_Àngth

keyÀn
;

557 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_ß„_ªad
(
ö°™˚
, 
ªsu…
->
ôem_key
, 
keyÀn
)))

559 
	`WATCHPOINT_ERROR
(
rc
);

560  
MEMCACHED_UNKNOWN_READ_FAILURE
;

564 i‡(
ªsu…
->
key_Àngth
)

566 i‡(
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
Ë
™d
 memˇched_¨øy_size(ö°™˚->roŸ->_«me•a˚Ë>
ªsu…
->
key_Àngth
)

568  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
);

571 i‡(
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
))

573 
ªsu…
->
key_Àngth
-
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
);

574 
	`memmove
(
ªsu…
->
ôem_key
,Ñesu…->ôem_key +
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
),Ñesu…->
key_Àngth
);

578 
bodyÀn
 -
keyÀn
;

579 i‡(
	`memˇched_Áûed
(
	`memˇched_°rög_check
(&
ªsu…
->
vÆue
, 
bodyÀn
)))

581  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

584 *
v±r

	`memˇched_°rög_vÆue_muèbÀ
(&
ªsu…
->
vÆue
);

585 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_ß„_ªad
(
ö°™˚
, 
v±r
, 
bodyÀn
)))

587 
	`WATCHPOINT_ERROR
(
rc
);

588  
MEMCACHED_UNKNOWN_READ_FAILURE
;

591 
	`memˇched_°rög_£t_Àngth
(&
ªsu…
->
vÆue
, 
bodyÀn
);

595 
PROTOCOL_BINARY_CMD_INCREMENT
:

596 
PROTOCOL_BINARY_CMD_DECREMENT
:

598 i‡(
bodyÀn
 !(
uöt64_t
))

600 
ªsu…
->
numîic_vÆue

UINT64_MAX
;

601  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
);

604 
uöt64_t
 
vÆ
;

605 i‡((
rc

	`memˇched_ß„_ªad
(
ö°™˚
, &
vÆ
, (vÆ))Ë!
MEMCACHED_SUCCESS
)

607 
ªsu…
->
numîic_vÆue

UINT64_MAX
;

608  
MEMCACHED_UNKNOWN_READ_FAILURE
;

611 
ªsu…
->
numîic_vÆue

	`memˇched_¡ohŒ
(
vÆ
);

615 
PROTOCOL_BINARY_CMD_SASL_LIST_MECHS
:

617 i‡(
hódî
.
ª•⁄£
.
keyÀn
 !0 || 
bodyÀn
 + 1 > 
buf„r_Àngth
)

619  
MEMCACHED_UNKNOWN_READ_FAILURE
;

623 i‡((
rc

	`memˇched_ß„_ªad
(
ö°™˚
, 
buf„r
, 
bodyÀn
)Ë!
MEMCACHED_SUCCESS
)

625  
MEMCACHED_UNKNOWN_READ_FAILURE
;

631 
PROTOCOL_BINARY_CMD_VERSION
:

633 
vîsi⁄_buf„r
[32];

634 
	`mem£t
(
vîsi⁄_buf„r
, 0, (version_buffer));

636 i‡(
	`memˇched_ß„_ªad
(
ö°™˚
, 
vîsi⁄_buf„r
, 
bodyÀn
Ë!
MEMCACHED_SUCCESS
)

638  
MEMCACHED_UNKNOWN_READ_FAILURE
;

641 *
íd±r
;

642 
î∫o
= 0;

643 
vîsi⁄

	`°πﬁ
(
vîsi⁄_buf„r
, &
íd±r
, 10);

644 i‡(
î∫o
 !0 
‹
 
vîsi⁄
 =
LONG_MIN
 o∏vîsi⁄ =
LONG_MAX
 o∏vîsi⁄ > 
UINT8_MAX
 or version == 0)

646 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

647  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("strtol() failedÅoÖarse major version"));

649 
ö°™˚
->
maj‹_vîsi⁄

	`uöt8_t
(
vîsi⁄
);

651 
íd±r
++;

652 
î∫o
= 0;

653 
vîsi⁄

	`°πﬁ
(
íd±r
, &endptr, 10);

654 i‡(
î∫o
 !0 
‹
 
vîsi⁄
 =
LONG_MIN
 o∏vîsi⁄ =
LONG_MAX
 o∏vîsi⁄ > 
UINT8_MAX
)

656 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

657  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("strtol() failedÅoÖarse minor version"));

659 
ö°™˚
->
mö‹_vîsi⁄

	`uöt8_t
(
vîsi⁄
);

661 
íd±r
++;

662 
î∫o
= 0;

663 
vîsi⁄

	`°πﬁ
(
íd±r
, &endptr, 10);

664 i‡(
î∫o
 !0 
‹
 
vîsi⁄
 =
LONG_MIN
 o∏vîsi⁄ =
LONG_MAX
 o∏vîsi⁄ > 
UINT8_MAX
)

666 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

667  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("strtol() failedÅoÖarse micro version"));

669 
ö°™˚
->
mi¸o_vîsi⁄

	`uöt8_t
(
vîsi⁄
);

673 
PROTOCOL_BINARY_CMD_TOUCH
:

675 
rc

MEMCACHED_SUCCESS
;

676 i‡(
bodyÀn
 == 4)

678 
touch_buf„r
[4];

679 
rc

	`memˇched_ß„_ªad
(
ö°™˚
, 
touch_buf„r
, (touch_buffer));

681 
	`Ârötf
(
°dîr
, "%s:%d %d %d %d %d %.*s(%d)\n", 
__FILE__
, 
__LINE__
,

682 (
touch_buf„r
[0]),

683 (
touch_buf„r
[1]),

684 (
touch_buf„r
[2]),

685 (
touch_buf„r
[3]),

686 (
bodyÀn
), 
touch_buf„r
, (bodylen));

689  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
rc
, 
MEMCACHED_AT
);

692 
PROTOCOL_BINARY_CMD_FLUSH
:

693 
PROTOCOL_BINARY_CMD_QUIT
:

694 
PROTOCOL_BINARY_CMD_SET
:

695 
PROTOCOL_BINARY_CMD_ADD
:

696 
PROTOCOL_BINARY_CMD_REPLACE
:

697 
PROTOCOL_BINARY_CMD_APPEND
:

698 
PROTOCOL_BINARY_CMD_PREPEND
:

699 
PROTOCOL_BINARY_CMD_DELETE
:

701 
	`WATCHPOINT_ASSERT
(
bodyÀn
 == 0);

702  
MEMCACHED_SUCCESS
;

705 
PROTOCOL_BINARY_CMD_NOOP
:

707 
	`WATCHPOINT_ASSERT
(
bodyÀn
 == 0);

708  
MEMCACHED_END
;

711 
PROTOCOL_BINARY_CMD_STAT
:

713 i‡(
bodyÀn
 == 0)

715  
MEMCACHED_END
;

717 i‡(
bodyÀn
 + 1 > 
buf„r_Àngth
)

720  
MEMCACHED_UNKNOWN_READ_FAILURE
;

724 
size_t
 
keyÀn

hódî
.
ª•⁄£
.keylen;

725 
	`mem£t
(
buf„r
, 0, 
buf„r_Àngth
);

726 i‡((
rc

	`memˇched_ß„_ªad
(
ö°™˚
, 
buf„r
, 
keyÀn
)Ë!
MEMCACHED_SUCCESS
 ||

727 (
rc

	`memˇched_ß„_ªad
(
ö°™˚
, 
buf„r
 + 
keyÀn
 + 1, 
bodyÀn
 - keyÀn)Ë!
MEMCACHED_SUCCESS
)

729 
	`WATCHPOINT_ERROR
(
rc
);

730  
MEMCACHED_UNKNOWN_READ_FAILURE
;

736 
PROTOCOL_BINARY_CMD_SASL_AUTH
:

737 
PROTOCOL_BINARY_CMD_SASL_STEP
:

739 
	`memˇched_ªsu…_ª£t
(
ªsu…
);

740 
ªsu…
->
ôem_ˇs

hódî
.
ª•⁄£
.
ˇs
;

742 i‡(
	`memˇched_°rög_check
(&
ªsu…
->
vÆue
,

743 
bodyÀn
Ë!
MEMCACHED_SUCCESS
)

744  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

746 *
v±r

	`memˇched_°rög_vÆue_muèbÀ
(&
ªsu…
->
vÆue
);

747 i‡((
rc

	`memˇched_ß„_ªad
(
ö°™˚
, 
v±r
, 
bodyÀn
)Ë!
MEMCACHED_SUCCESS
)

749 
	`WATCHPOINT_ERROR
(
rc
);

750  
MEMCACHED_UNKNOWN_READ_FAILURE
;

753 
	`memˇched_°rög_£t_Àngth
(&
ªsu…
->
vÆue
, 
bodyÀn
);

759  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
);

763 i‡(
hódî
.
ª•⁄£
.
bodyÀn
)

766 
hﬁe
[
SMALL_STRING_LEN
];

767 
bodyÀn
 > 0)

769 
size_t
 
ƒ
(
bodyÀn
 > 
SMALL_STRING_LEN
) ? SMALL_STRING_LEN : bodylen;

770 i‡((
rc

	`memˇched_ß„_ªad
(
ö°™˚
, 
hﬁe
, 
ƒ
)Ë!
MEMCACHED_SUCCESS
)

772 
	`WATCHPOINT_ERROR
(
rc
);

773  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
);

775 
bodyÀn
-(
uöt32_t
Ë
ƒ
;

782 
hódî
.
ª•⁄£
.
›code
)

784 
PROTOCOL_BINARY_CMD_SETQ
:

785 
PROTOCOL_BINARY_CMD_ADDQ
:

786 
PROTOCOL_BINARY_CMD_REPLACEQ
:

787 
PROTOCOL_BINARY_CMD_APPENDQ
:

788 
PROTOCOL_BINARY_CMD_PREPENDQ
:

789  
	`bö¨y_ªad_⁄e_ª•⁄£
(
ö°™˚
, 
buf„r
, 
buf„r_Àngth
, 
ªsu…
);

796 
rc

MEMCACHED_SUCCESS
;

797 i‡(
hódî
.
ª•⁄£
.
°©us
 != 0)

799 
hódî
.
ª•⁄£
.
°©us
)

801 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
:

802 
rc

MEMCACHED_NOTFOUND
;

805 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
:

806 
rc

MEMCACHED_DATA_EXISTS
;

809 
PROTOCOL_BINARY_RESPONSE_NOT_STORED
:

810 
rc

MEMCACHED_NOTSTORED
;

813 
PROTOCOL_BINARY_RESPONSE_E2BIG
:

814 
rc

MEMCACHED_E2BIG
;

817 
PROTOCOL_BINARY_RESPONSE_ENOMEM
:

818 
rc

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

821 
PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE
:

822 
rc

MEMCACHED_AUTH_CONTINUE
;

825 
PROTOCOL_BINARY_RESPONSE_AUTH_ERROR
:

826 
rc

MEMCACHED_AUTH_FAILURE
;

829 
PROTOCOL_BINARY_RESPONSE_EINVAL
:

830 
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
:

832  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_UNKNOWN_READ_FAILURE
, 
MEMCACHED_AT
);

837  
rc
;

838 
	}
}

840 
memˇched_ªtu∫_t
 
	$_ªad_⁄e_ª•⁄£
(
memˇched_ö°™˚_°
* 
ö°™˚
,

841 *
buf„r
, c⁄° 
size_t
 
buf„r_Àngth
,

842 
memˇched_ªsu…_°
 *
ªsu…
)

844 
	`¥ötf
("Reading oneÑesponse\n");

845 
	`memˇched_£rvî_ª•⁄£_de¸emít
(
ö°™˚
);

847 i‡(
ªsu…
 =
NULL
)

849 
Memˇched
 *
roŸ
(Memˇched *)
ö°™˚
->root;

850 
ªsu…
 = &
roŸ
->result;

853 
memˇched_ªtu∫_t
 
rc
;

854 i‡(
	`memˇched_is_bö¨y
(
ö°™˚
->
roŸ
))

856 
rc

	`bö¨y_ªad_⁄e_ª•⁄£
(
ö°™˚
, 
buf„r
, 
buf„r_Àngth
, 
ªsu…
);

860 
rc

	`ãxtuÆ_ªad_⁄e_ª•⁄£
(
ö°™˚
, 
buf„r
, 
buf„r_Àngth
, 
ªsu…
);

863 i‡(
	`memˇched_Áèl
(
rc
))

865 
	`memˇched_io_ª£t
(
ö°™˚
);

868  
rc
;

869 
	}
}

871 
memˇched_ªtu∫_t
 
	$memˇched_ªad_⁄e_ª•⁄£
(
memˇched_ö°™˚_°
* 
ö°™˚
,

872 
memˇched_ªsu…_°
 *
ªsu…
)

874 
buf„r
[
SMALL_STRING_LEN
];

876 i‡(
	`memˇched_is_udp
(
ö°™˚
->
roŸ
))

878  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
);

882  
	`_ªad_⁄e_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
ªsu…
);

883 
	}
}

885 
memˇched_ªtu∫_t
 
	$memˇched_ª•⁄£
(
memˇched_ö°™˚_°
* 
ö°™˚
,

886 
memˇched_ªsu…_°
 *
ªsu…
)

888 
buf„r
[1024];

890  
	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
ªsu…
);

891 
	}
}

893 
memˇched_ªtu∫_t
 
	$memˇched_ª•⁄£
(
memˇched_ö°™˚_°
* 
ö°™˚
,

894 *
buf„r
, 
size_t
 
buf„r_Àngth
,

895 
memˇched_ªsu…_°
 *
ªsu…
)

897 
	`¥ötf
("Checking forÑesponse\n");

898 i‡(
	`memˇched_is_udp
(
ö°™˚
->
roŸ
))

900  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
);

904 i‡((
ö°™˚
->
roŸ
->
Êags
.
no_block
Ë
	`™d
 (
	`memˇched_is_¥o˚ssög_öput
(ö°™˚->roŸË=
Ál£
))

906 ()
	`memˇched_io_wrôe
(
ö°™˚
);

914 i‡(
	`memˇched_is_bö¨y
(
ö°™˚
->
roŸ
Ë=
Ál£
 
™d
 
	`memˇched_£rvî_ª•⁄£_cou¡
(instance) > 1)

916 
memˇched_ªsu…_°
 
junked_ªsu…
;

917 
memˇched_ªsu…_°
 *
junked_ªsu…_±r

	`memˇched_ªsu…_¸óã
(
ö°™˚
->
roŸ
, &
junked_ªsu…
);

919 
	`as£π
(
junked_ªsu…_±r
);

921 
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
) > 1)

923 
memˇched_ªtu∫_t
 
rc

	`_ªad_⁄e_ª•⁄£
(
ö°™˚
, 
buf„r
, 
buf„r_Àngth
, 
junked_ªsu…_±r
);

926 i‡(
	`memˇched_Áèl
(
rc
))

928 
	`memˇched_ªsu…_‰ì
(
junked_ªsu…_±r
);

929  
rc
;

932 
	`memˇched_ªsu…_‰ì
(
junked_ªsu…_±r
);

935  
	`_ªad_⁄e_ª•⁄£
(
ö°™˚
, 
buf„r
, 
buf„r_Àngth
, 
ªsu…
);

936 
	}
}

	@libmemcached/response.h

38 #¥agm®
⁄˚


41 
memˇched_ªtu∫_t
 
memˇched_ªad_⁄e_ª•⁄£
(
memˇched_ö°™˚_°
* 
±r
,

42 
memˇched_ªsu…_°
 *
ªsu…
);

44 
memˇched_ªtu∫_t
 
memˇched_ª•⁄£
(
memˇched_ö°™˚_°
* 
±r
,

45 
memˇched_ªsu…_°
 *
ªsu…
);

47 
memˇched_ªtu∫_t
 
memˇched_ª•⁄£
(
memˇched_ö°™˚_°
* 
±r
,

48 *
buf„r
, 
size_t
 
buf„r_Àngth
,

49 
memˇched_ªsu…_°
 *
ªsu…
);

	@libmemcached/result.cc

45 
	~<libmemˇched/comm⁄.h
>

47 
ölöe
 
	$_ªsu…_öô
(
memˇched_ªsu…_°
 *
£lf
,

48 
Memˇched
 *
memc
)

50 
£lf
->
ôem_Êags
= 0;

51 
£lf
->
ôem_expú©i⁄
= 0;

52 
£lf
->
key_Àngth
= 0;

53 
£lf
->
ôem_ˇs
= 0;

54 
£lf
->
roŸ

memc
;

55 
£lf
->
numîic_vÆue

UINT64_MAX
;

56 
£lf
->
cou¡
= 0;

57 
£lf
->
ôem_key
[0]= 0;

58 
	}
}

60 
memˇched_ªsu…_°
 *
	$memˇched_ªsu…_¸óã
(c⁄° 
memˇched_°
 *
shñl
,

61 
memˇched_ªsu…_°
 *
±r
)

63 c⁄° 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

66 i‡(
±r
)

68 
±r
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

72 
±r

	`libmemˇched_xmÆloc
(
memc
, 
memˇched_ªsu…_°
);

74 i‡(
nŸ
 
±r
)

76  
NULL
;

79 
±r
->
›ti⁄s
.
is_Æloˇãd

åue
;

82 
±r
->
›ti⁄s
.
is_öôülized

åue
;

84 
	`_ªsu…_öô
(
±r
, (
memˇched_°
 *)
memc
);

86 
	`WATCHPOINT_SET
(
±r
->
vÆue
.
›ti⁄s
.
is_öôülized

Ál£
);

87 
	`memˇched_°rög_¸óã
((
memˇched_°
*)
memc
, &
±r
->
vÆue
, 0);

88 
	`WATCHPOINT_ASSERT_INITIALIZED
(&
±r
->
vÆue
);

89 
	`WATCHPOINT_ASSERT
(
±r
->
vÆue
.
°rög
 =
NULL
);

91  
±r
;

92 
	}
}

94 
	$memˇched_ªsu…_ª£t
(
memˇched_ªsu…_°
 *
±r
)

96 
±r
->
key_Àngth
= 0;

97 
	`memˇched_°rög_ª£t
(&
±r
->
vÆue
);

98 
±r
->
ôem_Êags
= 0;

99 
±r
->
ôem_ˇs
= 0;

100 
±r
->
ôem_expú©i⁄
= 0;

101 
±r
->
numîic_vÆue

UINT64_MAX
;

102 
	}
}

104 
	$memˇched_ªsu…_‰ì
(
memˇched_ªsu…_°
 *
±r
)

106 i‡(
±r
 =
NULL
)

111 
	`memˇched_°rög_‰ì
(&
±r
->
vÆue
);

112 
±r
->
numîic_vÆue

UINT64_MAX
;

114 i‡(
	`memˇched_is_Æloˇãd
(
±r
))

116 
	`WATCHPOINT_ASSERT
(
±r
->
roŸ
);

117 
	`libmemˇched_‰ì
(
±r
->
roŸ
,Ötr);

121 
±r
->
cou¡
= 0;

122 
±r
->
›ti⁄s
.
is_öôülized

Ál£
;

124 
	}
}

126 
	$memˇched_ªsu…_ª£t_vÆue
(
memˇched_ªsu…_°
 *
±r
)

128 
	`memˇched_°rög_ª£t
(&
±r
->
vÆue
);

129 
	}
}

131 
memˇched_ªtu∫_t
 
	$memˇched_ªsu…_£t_vÆue
(
memˇched_ªsu…_°
 *
±r
,

132 c⁄° *
vÆue
,

133 
size_t
 
Àngth
)

135 i‡(
	`memˇched_Áûed
(
	`memˇched_°rög_≠≥nd
(&
±r
->
vÆue
, vÆue, 
Àngth
)))

137  
	`memˇched_£t_î∫o
(*
±r
->
roŸ
, 
î∫o
, 
MEMCACHED_AT
);

140  
MEMCACHED_SUCCESS
;

141 
	}
}

143 c⁄° *
	$memˇched_ªsu…_key_vÆue
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

145  
£lf
->
key_Àngth
 ? sñf->
ôem_key
 : 
NULL
;

146 
	}
}

148 
size_t
 
	$memˇched_ªsu…_key_Àngth
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

150  
£lf
->
key_Àngth
;

151 
	}
}

153 c⁄° *
	$memˇched_ªsu…_vÆue
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

155 c⁄° 
memˇched_°rög_°
 *
•å
&
£lf
->
vÆue
;

156  
	`memˇched_°rög_vÆue
(
•å
);

157 
	}
}

159 
size_t
 
	$memˇched_ªsu…_Àngth
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

161 c⁄° 
memˇched_°rög_°
 *
•å
&
£lf
->
vÆue
;

162  
	`memˇched_°rög_Àngth
(
•å
);

163 
	}
}

165 *
	$memˇched_ªsu…_èke_vÆue
(
memˇched_ªsu…_°
 *
£lf
)

167 
memˇched_°rög_°
 *
•å
&
£lf
->
vÆue
;

168  
	`memˇched_°rög_èke_vÆue
(
•å
);

169 
	}
}

171 
uöt32_t
 
	$memˇched_ªsu…_Êags
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

173  
£lf
->
ôem_Êags
;

174 
	}
}

176 
uöt64_t
 
	$memˇched_ªsu…_ˇs
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

178  
£lf
->
ôem_ˇs
;

179 
	}
}

181 
	$memˇched_ªsu…_£t_Êags
(
memˇched_ªsu…_°
 *
£lf
, 
uöt32_t
 
Êags
)

183 
£lf
->
ôem_Êags

Êags
;

184 
	}
}

186 
	$memˇched_ªsu…_£t_expú©i⁄
(
memˇched_ªsu…_°
 *
£lf
, 
time_t
 
expú©i⁄
)

188 
£lf
->
ôem_expú©i⁄

expú©i⁄
;

189 
	}
}

	@libmemcached/result.h

38 #¥agm®
⁄˚


39 
memˇched_ªsu…_ª£t_vÆue
(
memˇched_ªsu…_°
 *
±r
);

	@libmemcached/sasl.cc

38 
	~"libmemˇched/comm⁄.h
"

39 
	~<ˇs£π
>

41 #i‡
deföed
(
LIBMEMCACHED_WITH_SASL_SUPPORT
) && LIBMEMCACHED_WITH_SASL_SUPPORT

43 #i‡
deföed
(
HAVE_LIBSASL
) && HAVE_LIBSASL

44 
	~<ß¶/ß¶.h
>

47 
	~<±hªad.h
>

49 
	$memˇched_£t_ß¶_ˇŒbacks
(
memˇched_°
 *
shñl
,

50 c⁄° 
ß¶_ˇŒback_t
 *
ˇŒbacks
)

52 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

53 i‡(
£lf
)

55 
£lf
->
ß¶
.
ˇŒbacks

c⁄°_ˇ°
<
ß¶_ˇŒback_t
 *>(callbacks);

56 
£lf
->
ß¶
.
is_Æloˇãd

Ál£
;

58 
	}
}

60 
ß¶_ˇŒback_t
 *
	$memˇched_gë_ß¶_ˇŒbacks
(
memˇched_°
 *
shñl
)

62 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

63 i‡(
£lf
)

65  
£lf
->
ß¶
.
ˇŒbacks
;

68  
NULL
;

69 
	}
}

78 
memˇched_ªtu∫_t
 
	$ªsﬁve_«mes
(
memˇched_ö°™˚_°
& 
£rvî
, *
œddr
, 
size_t
 
œddr_Àngth
, *
øddr
, size_à
øddr_Àngth
)

80 
ho°
[
MEMCACHED_NI_MAXHOST
];

81 
p‹t
[
MEMCACHED_NI_MAXSERV
];

82 
sockaddr_°‹age
 
ßddr
;

83 
sockÀn_t
 
ßÀn
(
ßddr
);

85 i‡(
	`gësock«me
(
£rvî
.
fd
, (
sockaddr
 *)&
ßddr
, &
ßÀn
) < 0)

87  
	`memˇched_£t_îr‹
(
£rvî
, 
MEMCACHED_HOST_LOOKUP_FAILURE
, 
MEMCACHED_AT
);

90 i‡(
	`gë«meöfo
((
sockaddr
 *)&
ßddr
, 
ßÀn
, 
ho°
, (ho°), 
p‹t
, ’‹t), 
NI_NUMERICHOST
 | 
NI_NUMERICSERV
) < 0)

92  
	`memˇched_£t_îr‹
(
£rvî
, 
MEMCACHED_HOST_LOOKUP_FAILURE
, 
MEMCACHED_AT
);

95 ()
	`¢¥ötf
(
œddr
, 
œddr_Àngth
, "%s;%s", 
ho°
, 
p‹t
);

96 
ßÀn
(
ßddr
);

98 i‡(
	`gë≥î«me
(
£rvî
.
fd
, (
sockaddr
 *)&
ßddr
, &
ßÀn
) < 0)

100  
	`memˇched_£t_îr‹
(
£rvî
, 
MEMCACHED_HOST_LOOKUP_FAILURE
, 
MEMCACHED_AT
);

103 i‡(
	`gë«meöfo
((
sockaddr
 *)&
ßddr
, 
ßÀn
, 
ho°
, (host),

104 
p‹t
, ’‹t), 
NI_NUMERICHOST
 | 
NI_NUMERICSERV
) < 0)

106  
	`memˇched_£t_îr‹
(
£rvî
, 
MEMCACHED_HOST_LOOKUP_FAILURE
, 
MEMCACHED_AT
);

109 ()
	`¢¥ötf
(
øddr
, 
øddr_Àngth
, "%s;%s", 
ho°
, 
p‹t
);

111  
MEMCACHED_SUCCESS
;

112 
	}
}

116 
ß¶_shutdown_fun˘i⁄
()

118 
ß¶_d⁄e
();

121 vﬁ©ûê
ß¶_°¨tup_°©e

SASL_OK
;

122 
±hªad_muãx_t
 
ß¶_°¨tup_°©e_LOCK

PTHREAD_MUTEX_INITIALIZER
;

123 
±hªad_⁄˚_t
 
ß¶_°¨tup_⁄˚

PTHREAD_ONCE_INIT
;

124 
ß¶_°¨tup_fun˘i⁄
()

126 
ß¶_°¨tup_°©e

ß¶_˛õ¡_öô
(
NULL
);

128 i‡(
ß¶_°¨tup_°©e
 =
SASL_OK
)

130 ()
©exô
(
ß¶_shutdown_fun˘i⁄
);

136 
memˇched_ªtu∫_t
 
	$memˇched_ß¶_authítiˇã_c⁄√˘i⁄
(
memˇched_ö°™˚_°
* 
£rvî
)

138 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

140  
MEMCACHED_NOT_SUPPORTED
;

143 i‡(
£rvî
 =
NULL
)

145  
MEMCACHED_INVALID_ARGUMENTS
;

149 i‡(
	`memˇched_is_bö¨y
(
£rvî
->
roŸ
Ë=
Ál£
)

151  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
,

152 
	`memˇched_lôîÆ_∑øm
("memcached_sasl_authenticate_connection() isÇot supported viaÅhe ASCIIÖrotocol"));

159 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
ªque°
= { };

161 
	`öôülize_bö¨y_ªque°
(
£rvî
, 
ªque°
.
mesßge
.
hódî
);

163 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_SASL_LIST_MECHS
;

165 i‡(
	`memˇched_io_wrôe
(
£rvî
, 
ªque°
.
byãs
, ‘eque°.byãs), 
åue
) != (request.bytes))

167  
MEMCACHED_WRITE_FAILURE
;

169 
	`as£π_msg
(
£rvî
->
fd
 !
INVALID_SOCKET
, "ProgrammerÉrror, invalid socket");

171 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
£rvî
);

173 
mech
[
MEMCACHED_MAX_BUFFER
];

174 
memˇched_ªtu∫_t
 
rc

	`memˇched_ª•⁄£
(
£rvî
, 
mech
, (mech), 
NULL
);

175 i‡(
	`memˇched_Áûed
(
rc
))

177 i‡(
rc
 =
MEMCACHED_PROTOCOL_ERROR
)

185 
rc

MEMCACHED_SUCCESS
;

188  
rc
;

190 
	`as£π_msg
(
£rvî
->
fd
 !
INVALID_SOCKET
, "ProgrammerÉrror, invalid socket");

193 
œddr
[
MEMCACHED_NI_MAXHOST
 + 
MEMCACHED_NI_MAXSERV
];

194 
øddr
[
MEMCACHED_NI_MAXHOST
 + 
MEMCACHED_NI_MAXSERV
];

196 i‡(
	`memˇched_Áûed
(
rc

	`ªsﬁve_«mes
(*
£rvî
, 
œddr
, ÷addr), 
øddr
, (raddr))))

198  
rc
;

201 
±hªad_îr‹
;

202 i‡((
±hªad_îr‹

	`±hªad_⁄˚
(&
ß¶_°¨tup_⁄˚
, 
ß¶_°¨tup_fun˘i⁄
)) != 0)

204  
	`memˇched_£t_î∫o
(*
£rvî
, 
±hªad_îr‹
, 
MEMCACHED_AT
);

207 ()
	`±hªad_muãx_lock
(&
ß¶_°¨tup_°©e_LOCK
);

208 i‡(
ß¶_°¨tup_°©e
 !
SASL_OK
)

210 c⁄° *
ß¶_îr‹_msg

	`ß¶_îr°rög
(
ß¶_°¨tup_°©e
, 
NULL
, NULL);

211  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_AUTH_PROBLEM
, 
MEMCACHED_AT
,

212 
	`memˇched_°rög_make_‰om_c°r
(
ß¶_îr‹_msg
));

214 ()
	`±hªad_muãx_u∆ock
(&
ß¶_°¨tup_°©e_LOCK
);

216 
ß¶_c⁄n_t
 *
c⁄n
;

217 
ªt
;

218 i‡((
ªt

	`ß¶_˛õ¡_√w
("memˇched", 
£rvî
->
_ho°«me
, 
œddr
, 
øddr
, sîvî->
roŸ
->
ß¶
.
ˇŒbacks
, 0, &
c⁄n
ËË!
SASL_OK
)

220 c⁄° *
ß¶_îr‹_msg

	`ß¶_îr°rög
(
ªt
, 
NULL
, NULL);

222 
	`ß¶_di•o£
(&
c⁄n
);

224  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_AUTH_PROBLEM
, 
MEMCACHED_AT
,

225 
	`memˇched_°rög_make_‰om_c°r
(
ß¶_îr‹_msg
));

228 c⁄° *
d©a
;

229 c⁄° *
cho£nmech
;

230 
Àn
;

231 
ªt

	`ß¶_˛õ¡_°¨t
(
c⁄n
, 
mech
, 
NULL
, &
d©a
, &
Àn
, &
cho£nmech
);

232 i‡(
ªt
 !
SASL_OK
 
™d
Ñë !
SASL_CONTINUE
)

234 c⁄° *
ß¶_îr‹_msg

	`ß¶_îr°rög
(
ªt
, 
NULL
, NULL);

236 
	`ß¶_di•o£
(&
c⁄n
);

238  
	`memˇched_£t_îr‹
(*
£rvî
, 
MEMCACHED_AUTH_PROBLEM
, 
MEMCACHED_AT
,

239 
	`memˇched_°rög_make_‰om_c°r
(
ß¶_îr‹_msg
));

241 
uöt16_t
 
keyÀn
(uöt16_t)
	`°æí
(
cho£nmech
);

242 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_SASL_AUTH
;

243 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
(keylen);

244 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
(
Àn
 + 
keyÀn
);

249 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

251 { 
ªque°
.
byãs
, (request.bytes) },

252 { 
cho£nmech
, 
keyÀn
 },

253 { 
d©a
, 
Àn
 }

256 
	`as£π_msg
(
£rvî
->
fd
 !
INVALID_SOCKET
, "ProgrammerÉrror, invalid socket");

257 i‡(
	`memˇched_io_wrôev
(
£rvî
, 
ve˘‹
, 3, 
åue
Ë=
Ál£
)

259 
rc

MEMCACHED_WRITE_FAILURE
;

262 
	`as£π_msg
(
£rvî
->
fd
 !
INVALID_SOCKET
, "ProgrammerÉrror, invalid socket");

263 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
£rvî
);

266 
	`as£π_msg
(
£rvî
->
fd
 !
INVALID_SOCKET
, "ProgrammerÉrror, invalid socket");

267 
rc

	`memˇched_ª•⁄£
(
£rvî
, 
NULL
, 0, NULL);

268 i‡(
rc
 !
MEMCACHED_AUTH_CONTINUE
)

272 
	`as£π_msg
(
£rvî
->
fd
 !
INVALID_SOCKET
, "ProgrammerÉrror, invalid socket");

274 
ªt

	`ß¶_˛õ¡_°ï
(
c⁄n
, 
	`memˇched_ªsu…_vÆue
(&
£rvî
->
roŸ
->
ªsu…
),

275 ()
	`memˇched_ªsu…_Àngth
(&
£rvî
->
roŸ
->
ªsu…
),

276 
NULL
, &
d©a
, &
Àn
);

278 i‡(
ªt
 !
SASL_OK
 &&Ñë !
SASL_CONTINUE
)

280 
rc

MEMCACHED_AUTH_PROBLEM
;

284 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_SASL_STEP
;

285 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
(
Àn
 + 
keyÀn
);

286 } 
åue
);

289 
	`ß¶_di•o£
(&
c⁄n
);

291  
	`memˇched_£t_îr‹
(*
£rvî
, 
rc
, 
MEMCACHED_AT
);

292 
	}
}

294 
	$gë_u£∫ame
(*
c⁄ãxt
, 
id
, c⁄° **
ªsu…
, *
Àn
)

296 i‡(!
c⁄ãxt
 || !
ªsu…
 || (
id
 !
SASL_CB_USER
 && id !
SASL_CB_AUTHNAME
))

298  
SASL_BADPARAM
;

301 *
ªsu…
(*)
c⁄ãxt
;

302 i‡(
Àn
)

304 *
Àn
()
	`°æí
(*
ªsu…
);

307  
SASL_OK
;

308 
	}
}

310 
	$gë_∑ssw‹d
(
ß¶_c⁄n_t
 *
c⁄n
, *
c⁄ãxt
, 
id
,

311 
ß¶_£¸ë_t
 **
p£¸ë
)

313 i‡(!
c⁄n
 || ! 
p£¸ë
 || 
id
 !
SASL_CB_PASS
)

315  
SASL_BADPARAM
;

318 *
p£¸ë
(
ß¶_£¸ë_t
 *)
c⁄ãxt
;

320  
SASL_OK
;

321 
	}
}

323 
memˇched_ªtu∫_t
 
	$memˇched_£t_ß¶_auth_d©a
(
memˇched_°
 *
shñl
,

324 c⁄° *
u£∫ame
,

325 c⁄° *
∑ssw‹d
)

327 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

328 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

330  
MEMCACHED_NOT_SUPPORTED
;

333 i‡(
±r
 =
NULL
 
‹
 
u£∫ame
 =NULL o∏
∑ssw‹d
 == NULL)

335  
MEMCACHED_INVALID_ARGUMENTS
;

338 
memˇched_ªtu∫_t
 
ªt
;

339 i‡(
	`memˇched_Áûed
(
ªt

	`memˇched_behavi‹_£t
(
±r
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1)))

341  
	`memˇched_£t_îr‹
(*
±r
, 
ªt
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Unable changeÅo binaryÖrotocol which isÑequired for SASL."));

344 
	`memˇched_de°roy_ß¶_auth_d©a
(
±r
);

346 
ß¶_ˇŒback_t
 *
ˇŒbacks

	`libmemˇched_xˇŒoc
(
±r
, 4, sasl_callback_t);

347 
size_t
 
∑ssw‹d_Àngth

	`°æí
(
∑ssw‹d
);

348 
size_t
 
u£∫ame_Àngth

	`°æí
(
u£∫ame
);

349 *
«me
(*)
	`libmemˇched_mÆloc
(
±r
, 
u£∫ame_Àngth
 +1);

350 
ß¶_£¸ë_t
 *
£¸ë
(ß¶_£¸ë_t*)
	`libmemˇched_mÆloc
(
±r
, 
∑ssw‹d_Àngth
 +1 + (sasl_secret_t));

352 i‡(
ˇŒbacks
 =
NULL
 
‹
 
«me
 =NULL o∏
£¸ë
 == NULL)

354 
	`libmemˇched_‰ì
(
±r
, 
ˇŒbacks
);

355 
	`libmemˇched_‰ì
(
±r
, 
«me
);

356 
	`libmemˇched_‰ì
(
±r
, 
£¸ë
);

357  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

360 
£¸ë
->
Àn

∑ssw‹d_Àngth
;

361 
	`mem˝y
(
£¸ë
->
d©a
, 
∑ssw‹d
, 
∑ssw‹d_Àngth
);

362 
£¸ë
->
d©a
[
∑ssw‹d_Àngth
]= 0;

364 
ˇŒbacks
[0].
id

SASL_CB_USER
;

365 
ˇŒbacks
[0].
¥oc
((*)())
gë_u£∫ame
;

366 
ˇŒbacks
[0].
c⁄ãxt

	`°∫˝y
(
«me
, 
u£∫ame
, 
u£∫ame_Àngth
 +1);

367 
ˇŒbacks
[1].
id

SASL_CB_AUTHNAME
;

368 
ˇŒbacks
[1].
¥oc
((*)())
gë_u£∫ame
;

369 
ˇŒbacks
[1].
c⁄ãxt

«me
;

370 
ˇŒbacks
[2].
id

SASL_CB_PASS
;

371 
ˇŒbacks
[2].
¥oc
((*)())
gë_∑ssw‹d
;

372 
ˇŒbacks
[2].
c⁄ãxt

£¸ë
;

373 
ˇŒbacks
[3].
id

SASL_CB_LIST_END
;

375 
±r
->
ß¶
.
ˇŒbacks
= callbacks;

376 
±r
->
ß¶
.
is_Æloˇãd

åue
;

378  
MEMCACHED_SUCCESS
;

379 
	}
}

381 
memˇched_ªtu∫_t
 
	$memˇched_de°roy_ß¶_auth_d©a
(
memˇched_°
 *
shñl
)

383 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

385  
MEMCACHED_NOT_SUPPORTED
;

388 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

389 i‡(
±r
 =
NULL
)

391  
MEMCACHED_INVALID_ARGUMENTS
;

394 i‡(
±r
->
ß¶
.
ˇŒbacks
 =
NULL
)

396  
MEMCACHED_SUCCESS
;

399 i‡(
±r
->
ß¶
.
is_Æloˇãd
)

401 
	`libmemˇched_‰ì
(
±r
,Öå->
ß¶
.
ˇŒbacks
[0].
c⁄ãxt
);

402 
	`libmemˇched_‰ì
(
±r
,Öå->
ß¶
.
ˇŒbacks
[2].
c⁄ãxt
);

403 
	`libmemˇched_‰ì
(
±r
, (*Ìå->
ß¶
.
ˇŒbacks
);

404 
±r
->
ß¶
.
is_Æloˇãd

Ál£
;

407 
±r
->
ß¶
.
ˇŒbacks

NULL
;

409  
MEMCACHED_SUCCESS
;

410 
	}
}

412 
memˇched_ªtu∫_t
 
	$memˇched_˛⁄e_ß¶
(
memˇched_°
 *
˛⁄e
, c⁄° memˇched_° *
sour˚
)

414 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

416  
MEMCACHED_NOT_SUPPORTED
;

419 i‡(
˛⁄e
 =
NULL
 
‹
 
sour˚
 == NULL)

421  
MEMCACHED_INVALID_ARGUMENTS
;

424 i‡(
sour˚
->
ß¶
.
ˇŒbacks
 =
NULL
)

426  
MEMCACHED_SUCCESS
;

430 i‡(
sour˚
->
ß¶
.
ˇŒbacks
[0].
id
 =
SASL_CB_USER
 &&

431 
sour˚
->
ß¶
.
ˇŒbacks
[0].
¥oc
 =((*)())
gë_u£∫ame
 &&

432 
sour˚
->
ß¶
.
ˇŒbacks
[1].
id
 =
SASL_CB_AUTHNAME
 &&

433 
sour˚
->
ß¶
.
ˇŒbacks
[1].
¥oc
 =((*)())
gë_u£∫ame
 &&

434 
sour˚
->
ß¶
.
ˇŒbacks
[2].
id
 =
SASL_CB_PASS
 &&

435 
sour˚
->
ß¶
.
ˇŒbacks
[2].
¥oc
 =((*)())
gë_∑ssw‹d
 &&

436 
sour˚
->
ß¶
.
ˇŒbacks
[3].
id
 =
SASL_CB_LIST_END
)

438 
ß¶_£¸ë_t
 *
£¸ë
(ß¶_£¸ë_à*)
sour˚
->
ß¶
.
ˇŒbacks
[2].
c⁄ãxt
;

439  
	`memˇched_£t_ß¶_auth_d©a
(
˛⁄e
,

440 (c⁄° *)
sour˚
->
ß¶
.
ˇŒbacks
[0].
c⁄ãxt
,

441 (c⁄° *)
£¸ë
->
d©a
);

449 
±rdiff_t
 
tŸÆ
= 0;

451 
sour˚
->
ß¶
.
ˇŒbacks
[
tŸÆ
].
id
 !
SASL_CB_LIST_END
)

453 
sour˚
->
ß¶
.
ˇŒbacks
[
tŸÆ
].
id
)

455 
SASL_CB_USER
:

456 
SASL_CB_AUTHNAME
:

457 
SASL_CB_PASS
:

461  
MEMCACHED_NOT_SUPPORTED
;

464 ++
tŸÆ
;

467 
ß¶_ˇŒback_t
 *
ˇŒbacks

	`libmemˇched_xˇŒoc
(
˛⁄e
, 
tŸÆ
 +1, sasl_callback_t);

468 i‡(
ˇŒbacks
 =
NULL
)

470  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

472 
	`mem˝y
(
ˇŒbacks
, 
sour˚
->
ß¶
.ˇŒbacks, (
tŸÆ
 + 1Ë* (
ß¶_ˇŒback_t
));

475 
±rdiff_t
 
x
0; x < 
tŸÆ
; ++x)

477 i‡(
ˇŒbacks
[
x
].
id
 =
SASL_CB_USER
 || cÆlbacks[x].id =
SASL_CB_AUTHNAME
)

479 
ˇŒbacks
[
x
].
c⁄ãxt
(
ß¶_ˇŒback_t
*)
	`libmemˇched_mÆloc
(
˛⁄e
, 
	`°æí
((c⁄° *)
sour˚
->
ß¶
.callbacks[x].context));

481 i‡(
ˇŒbacks
[
x
].
c⁄ãxt
 =
NULL
)

484 
±rdiff_t
 
y
0; y < 
x
; ++y)

486 
	`libmemˇched_‰ì
(
˛⁄e
, cl⁄e->
ß¶
.
ˇŒbacks
[
y
].
c⁄ãxt
);

489 
	`libmemˇched_‰ì
(
˛⁄e
, 
ˇŒbacks
);

490  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

492 
	`°∫˝y
((*)
ˇŒbacks
[
x
].
c⁄ãxt
, (c⁄° *)
sour˚
->
ß¶
.callbacks[x].context, (callbacks[x].context));

496 
ß¶_£¸ë_t
 *
§c
(ß¶_£¸ë_à*)
sour˚
->
ß¶
.
ˇŒbacks
[
x
].
c⁄ãxt
;

497 
ß¶_£¸ë_t
 *
n
(ß¶_£¸ë_t*)
	`libmemˇched_mÆloc
(
˛⁄e
, 
§c
->
Àn
 + 1 + (*n));

498 i‡(
n
 =
NULL
)

501 
±rdiff_t
 
y
0; y < 
x
; ++y)

503 
	`libmemˇched_‰ì
(
˛⁄e
, cl⁄e->
ß¶
.
ˇŒbacks
[
y
].
c⁄ãxt
);

506 
	`libmemˇched_‰ì
(
˛⁄e
, 
ˇŒbacks
);

507  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

509 
	`mem˝y
(
n
, 
§c
, src->
Àn
 + 1 + (*n));

510 
ˇŒbacks
[
x
].
c⁄ãxt

n
;

514 
˛⁄e
->
ß¶
.
ˇŒbacks
= callbacks;

515 
˛⁄e
->
ß¶
.
is_Æloˇãd

åue
;

517  
MEMCACHED_SUCCESS
;

518 
	}
}

522 
	$memˇched_£t_ß¶_ˇŒbacks
(
memˇched_°
 *, c⁄° 
ß¶_ˇŒback_t
 *)

524 
	}
}

526 
ß¶_ˇŒback_t
 *
	$memˇched_gë_ß¶_ˇŒbacks
(
memˇched_°
 *)

528  
NULL
;

529 
	}
}

531 
memˇched_ªtu∫_t
 
	$memˇched_£t_ß¶_auth_d©a
(
memˇched_°
 *, const *, const *)

533  
MEMCACHED_NOT_SUPPORTED
;

534 
	}
}

536 
memˇched_ªtu∫_t
 
	$memˇched_˛⁄e_ß¶
(
memˇched_°
 *, const memcached_st *)

538  
MEMCACHED_NOT_SUPPORTED
;

539 
	}
}

	@libmemcached/sasl.hpp

38 #¥agm®
⁄˚


40 
memˇched_ªtu∫_t
 
memˇched_˛⁄e_ß¶
(
memˇched_°
 *
˛⁄e
, c⁄° memˇched_° *
sour˚
);

42 
memˇched_ªtu∫_t
 
memˇched_ß¶_authítiˇã_c⁄√˘i⁄
(
memˇched_ö°™˚_°
* 
£rvî
);

	@libmemcached/server.cc

41 
	~<libmemˇched/comm⁄.h
>

43 
ölöe
 
	$_£rvî_öô
(
memˇched_£rvî_°
 *
£lf
, 
Memˇched
 *
roŸ
,

44 c⁄° 
memˇched_°rög_t
& 
ho°«me
,

45 
ö_p‹t_t
 
p‹t
,

46 
uöt32_t
 
weight
, 
memˇched_c⁄√˘i⁄_t
 
ty≥
)

48 
£lf
->
›ti⁄s
.
is_shuâög_down

Ál£
;

49 
£lf
->
›ti⁄s
.
is_dód

Ál£
;

50 
£lf
->
numbî_of_ho°s
= 0;

51 
£lf
->
curs‹_a˘ive
= 0;

52 
£lf
->
p‹t
=Öort;

53 
£lf
->
io_byãs_£¡
= 0;

54 
£lf
->
ªque°_id
= 0;

55 
£lf
->
£rvî_Áûuª_cou¡î
= 0;

56 
£lf
->
£rvî_Áûuª_cou¡î_quîy_id
= 0;

57 
£lf
->
weight
= weight ? weight : 1;

58 
£lf
->
io_waô_cou¡
.
ªad
= 0;

59 
£lf
->
io_waô_cou¡
.
wrôe
= 0;

60 
£lf
->
io_waô_cou¡
.
timeouts
= 0;

61 
£lf
->
io_waô_cou¡
.
_byãs_ªad
= 0;

62 
£lf
->
maj‹_vîsi⁄

UINT8_MAX
;

63 
£lf
->
mi¸o_vîsi⁄

UINT8_MAX
;

64 
£lf
->
mö‹_vîsi⁄

UINT8_MAX
;

65 
£lf
->
ty≥
=Åype;

66 
£lf
->
îr‹_mesßges

NULL
;

68 
£lf
->
°©e

MEMCACHED_SERVER_STATE_NEW
;

69 
£lf
->
√xt_ªåy
= 0;

71 
£lf
->
roŸ
=Ñoot;

72 i‡(
roŸ
)

74 
£lf
->
vîsi⁄
++
roŸ
->
£rvî_öfo
.version;

78 
£lf
->
vîsi⁄

UINT_MAX
;

80 
£lf
->
limô_maxbyãs
= 0;

81 
	`mem˝y
(
£lf
->
ho°«me
, ho°«me.
c_°r
, ho°«me.
size
);

82 
£lf
->
ho°«me
[ho°«me.
size
]= 0;

83 
	}
}

85 
memˇched_£rvî_°
 *
	$_£rvî_¸óã
(
memˇched_£rvî_°
 *
£lf
, c⁄° 
Memˇched
 *
memc
)

87 i‡(
£lf
 =
NULL
)

89 
£lf

	`libmemˇched_xmÆloc
(
memc
, 
memˇched_£rvî_°
);

91 i‡(
£lf
 =
NULL
)

93  
NULL
;

96 
£lf
->
›ti⁄s
.
is_Æloˇãd

åue
;

100 
£lf
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

103 
£lf
->
›ti⁄s
.
is_öôülized

åue
;

105  
£lf
;

106 
	}
}

108 
memˇched_£rvî_°
 *
	$__£rvî_¸óã_wôh
(
Memˇched
 *
memc
,

109 
memˇched_£rvî_°
* 
Æloˇãd_ö°™˚
,

110 c⁄° 
memˇched_°rög_t
& 
ho°«me
,

111 c⁄° 
ö_p‹t_t
 
p‹t
,

112 
uöt32_t
 
weight
,

113 c⁄° 
memˇched_c⁄√˘i⁄_t
 
ty≥
)

115 i‡(
	`memˇched_is_vÆid_£rvî«me
(
ho°«me
Ë=
Ál£
)

117 
	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_INVALID_ARGUMENTS
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Invalid hostnameÖrovided"));

118  
NULL
;

121 
Æloˇãd_ö°™˚

	`_£rvî_¸óã
◊Œoˇãd_ö°™˚, 
memc
);

123 i‡(
Æloˇãd_ö°™˚
 =
NULL
)

125  
NULL
;

128 
	`_£rvî_öô
(
Æloˇãd_ö°™˚
, 
c⁄°_ˇ°
<
Memˇched
 *>(
memc
), 
ho°«me
, 
p‹t
, 
weight
, 
ty≥
);

130  
Æloˇãd_ö°™˚
;

131 
	}
}

133 
	$__£rvî_‰ì
(
memˇched_£rvî_°
 *
£lf
)

135 
	`memˇched_îr‹_‰ì
(*
£lf
);

137 i‡(
	`memˇched_is_Æloˇãd
(
£lf
))

139 
	`libmemˇched_‰ì
(
£lf
->
roŸ
, self);

143 
£lf
->
›ti⁄s
.
is_öôülized

Ál£
;

145 
	}
}

147 
	$memˇched_£rvî_‰ì
(
memˇched_£rvî_°
 *
£lf
)

149 i‡(
£lf
 =
NULL
)

154 i‡(
	`memˇched_£rvî_li°_cou¡
(
£lf
))

156 
	`memˇched_£rvî_li°_‰ì
(
£lf
);

160 
	`__£rvî_‰ì
(
£lf
);

161 
	}
}

163 
	$memˇched_£rvî_îr‹_ª£t
(
memˇched_£rvî_°
 *
£lf
)

165 
	`WATCHPOINT_ASSERT
(
£lf
);

166 i‡(
£lf
 =
NULL
)

171 
	`memˇched_îr‹_‰ì
(*
£lf
);

172 
	}
}

174 
uöt32_t
 
	$memˇched_£rvîs_£t_cou¡
(
memˇched_£rvî_°
 *
£rvîs
, 
uöt32_t
 
cou¡
)

176 
	`WATCHPOINT_ASSERT
(
£rvîs
);

177 i‡(
£rvîs
 =
NULL
)

182  
£rvîs
->
numbî_of_ho°s

cou¡
;

183 
	}
}

185 
uöt32_t
 
	$memˇched_£rvî_cou¡
(c⁄° 
memˇched_°
 *
£lf
)

187 
	`WATCHPOINT_ASSERT
(
£lf
);

188 i‡(
£lf
 =
NULL
)

191  
£lf
->
numbî_of_ho°s
;

192 
	}
}

194 c⁄° *
	$memˇched_£rvî_«me
(c⁄° 
memˇched_ö°™˚_°
 * 
£lf
)

196 
	`WATCHPOINT_ASSERT
(
£lf
);

197 i‡(
£lf
)

199  
£lf
->
_ho°«me
;

202  
NULL
;

203 
	}
}

205 
ö_p‹t_t
 
	$memˇched_£rvî_p‹t
(c⁄° 
memˇched_ö°™˚_°
 * 
£lf
)

207 
	`WATCHPOINT_ASSERT
(
£lf
);

208 i‡(
£lf
 =
NULL
)

213  
£lf
->
	`p‹t
();

214 
	}
}

216 
uöt32_t
 
	$memˇched_£rvî_ª•⁄£_cou¡
(c⁄° 
memˇched_ö°™˚_°
 * 
£lf
)

218 
	`WATCHPOINT_ASSERT
(
£lf
);

219 i‡(
£lf
 =
NULL
)

224  
£lf
->
curs‹_a˘ive_
;

225 
	}
}

227 c⁄° *
	$memˇched_£rvî_ty≥
(c⁄° 
memˇched_ö°™˚_°
 * 
±r
)

229 i‡(
±r
)

231 
±r
->
ty≥
)

233 
MEMCACHED_CONNECTION_TCP
:

236 
MEMCACHED_CONNECTION_UDP
:

239 
MEMCACHED_CONNECTION_UNIX_SOCKET
:

245 
	}
}

247 
uöt8_t
 
	$memˇched_£rvî_maj‹_vîsi⁄
(c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
)

249 i‡(
ö°™˚
)

251  
ö°™˚
->
maj‹_vîsi⁄
;

254  
UINT8_MAX
;

255 
	}
}

257 
uöt8_t
 
	$memˇched_£rvî_mö‹_vîsi⁄
(c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
)

259 i‡(
ö°™˚
)

261  
ö°™˚
->
mö‹_vîsi⁄
;

264  
UINT8_MAX
;

265 
	}
}

267 
uöt8_t
 
	$memˇched_£rvî_mi¸o_vîsi⁄
(c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
)

269 i‡(
ö°™˚
)

271  
ö°™˚
->
mi¸o_vîsi⁄
;

274  
UINT8_MAX
;

275 
	}
}

	@libmemcached/server.hpp

38 #¥agm®
⁄˚


40 #ifde‡
HAVE_SYS_TIME_H


41 
	~<sys/time.h
>

44 
	~<ˇs£π
>

46 
memˇched_£rvî_°
 *
__£rvî_¸óã_wôh
(
memˇched_°
 *
memc
,

47 
memˇched_£rvî_°
* 
£lf
,

48 c⁄° 
memˇched_°rög_t
& 
ho°«me
,

49 c⁄° 
ö_p‹t_t
 
p‹t
,

50 
uöt32_t
 
weight
,

51 c⁄° 
memˇched_c⁄√˘i⁄_t
 
ty≥
);

53 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_∑r£d
(
memˇched_°
 *
±r
,

54 c⁄° *
ho°«me
,

55 
size_t
 
ho°«me_Àngth
,

56 
ö_p‹t_t
 
p‹t
,

57 
uöt32_t
 
weight
);

59 
__£rvî_‰ì
(
memˇched_£rvî_°
 *);

61 
ölöe
 
boﬁ
 
	$memˇched_is_vÆid_£rvî«me
(c⁄° 
memˇched_°rög_t
& 
¨g
)

63  (
¨g
.
c_°r
 !
NULL
 
‹
árg.
size
 =0Ë
™d
árg.sizê< 
MEMCACHED_NI_MAXHOST
;

64 
	}
}

66 
ölöe
 
boﬁ
 
	$memˇched_is_vÆid_fûíame
(c⁄° 
memˇched_°rög_t
& 
¨g
)

68  
¨g
.
c_°r
 !
NULL
 
™d
árg.
size
 > 0ándárg.sizê< 
MEMCACHED_NI_MAXHOST
;

69 
	}
}

71 
memˇched_ö°™˚_‰ì
(
memˇched_ö°™˚_°
 *);

73 
£t_œ°_disc⁄√˘ed_ho°
(
memˇched_ö°™˚_°
* 
£lf
);

75 
ölöe
 
	$memˇched_m¨k_£rvî_f‹_timeout
(
memˇched_ö°™˚_°
* 
£rvî
)

77 i‡(
£rvî
->
°©e
 !
MEMCACHED_SERVER_STATE_IN_TIMEOUT
)

79 
timevÆ
 
√xt_time
;

80 i‡(
	`gëtimeofday
(&
√xt_time
, 
NULL
) == 0)

82 
£rvî
->
√xt_ªåy

√xt_time
.
tv_£c
 +£rvî->
roŸ
->
ªåy_timeout
;

86 
£rvî
->
√xt_ªåy
= 1;

89 
£rvî
->
°©e

MEMCACHED_SERVER_STATE_IN_TIMEOUT
;

90 i‡(
£rvî
->
£rvî_Áûuª_cou¡î_quîy_id
 !£rvî->
roŸ
->
quîy_id
)

92 
£rvî
->
£rvî_Áûuª_cou¡î
++;

93 
£rvî
->
£rvî_Áûuª_cou¡î_quîy_id
£rvî->
roŸ
->
quîy_id
;

95 
	`£t_œ°_disc⁄√˘ed_ho°
(
£rvî
);

97 
	}
}

	@libmemcached/server_instance.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


41 
memˇched_ö°™˚_°
* 
	tmemˇched_£rvî_wrôe_ö°™˚_°
;

43 * 
	tmemˇched_£rvî_wrôe_ö°™˚_°
;

46 #ifde‡
__˝lu•lus


50 
memˇched_ªtu∫_t
 (*
	tmemˇched_£rvî_execuã_‚
)(
	tmemˇched_°
 *
	t±r
, 
	tmemˇched_£rvî_wrôe_ö°™˚_°
 
	t£rvî
, *
	tc⁄ãxt
);

52 
memˇched_ªtu∫_t
 
memˇched_£rvî_execuã
(
memˇched_°
 *
±r
,

53 
memˇched_£rvî_execuã_‚
 
ˇŒback
,

54 *
c⁄ãxt
);

56 #ifde‡
__˝lu•lus


	@libmemcached/server_list.cc

40 
	~<libmemˇched/comm⁄.h
>

42 
memˇched_£rvî_li°_°


43 
	$memˇched_£rvî_li°_≠≥nd_wôh_weight
(
memˇched_£rvî_li°_°
 
±r
,

44 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
,

45 
uöt32_t
 
weight
,

46 
memˇched_ªtu∫_t
 *
îr‹
)

48 
memˇched_ªtu∫_t
 
unu£d
;

49 i‡(
îr‹
 =
NULL
)

51 
îr‹
&
unu£d
;

54 i‡(
ho°«me
 =
NULL
)

56 
ho°«me
= "localhost";

59 i‡(
ho°«me
[0] == '/')

61 
p‹t
 = 0;

63 i‡(
p‹t
 == 0)

65 
p‹t

MEMCACHED_DEFAULT_PORT
;

70 
uöt32_t
 
cou¡
= 1;

71 i‡(
±r
 !
NULL
)

73 
cou¡
+
	`memˇched_£rvî_li°_cou¡
(
±r
);

76 
memˇched_£rvî_li°_°
 
√w_ho°_li°
(
memˇched_£rvî_°
*)
	`ªÆloc
(
±r
, (memˇched_£rvî_°Ë* 
cou¡
);

77 i‡(
√w_ho°_li°
 =
NULL
)

80 *
îr‹

	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

82  
NULL
;

85 
memˇched_°rög_t
 
_ho°«me
{ 
	`memˇched_°rög_make_‰om_c°r
(
ho°«me
) };

87 i‡(
	`__£rvî_¸óã_wôh
(
NULL
, &
√w_ho°_li°
[
cou¡
-1], 
_ho°«me
, 
p‹t
, 
weight
,Ö‹à? 
MEMCACHED_CONNECTION_TCP
 : 
MEMCACHED_CONNECTION_UNIX_SOCKET
) == NULL)

90 *
îr‹

	`memˇched_£t_î∫o
(*
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

92 
	`‰ì
(
√w_ho°_li°
);

93  
NULL
;

98 
√w_ho°_li°
->
›ti⁄s
.
is_Æloˇãd

åue
;

102 
	`memˇched_£rvîs_£t_cou¡
(
√w_ho°_li°
, 
cou¡
);

104 *
îr‹

MEMCACHED_SUCCESS
;

105  
√w_ho°_li°
;

106 
	}
}

108 
memˇched_£rvî_li°_°


109 
	$memˇched_£rvî_li°_≠≥nd
(
memˇched_£rvî_li°_°
 
±r
,

110 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
,

111 
memˇched_ªtu∫_t
 *
îr‹
)

113  
	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
±r
, 
ho°«me
, 
p‹t
, 0, 
îr‹
);

114 
	}
}

116 
uöt32_t
 
	$memˇched_£rvî_li°_cou¡
(c⁄° 
memˇched_£rvî_li°_°
 
£lf
)

118  (
£lf
 =
NULL
)

120 : 
£lf
->
numbî_of_ho°s
;

121 
	}
}

123 
uöt32_t
 
	$memˇched_ö°™˚_li°_cou¡
(c⁄° 
memˇched_°
* 
£lf
)

125  (
£lf
 =
NULL
)

127 : 
£lf
->
numbî_of_ho°s
;

128 
	}
}

130 
	$memˇched_ö°™˚_£t
(
memˇched_°
* 
memc
, 
memˇched_ö°™˚_°
* 
li°
, c⁄° 
uöt32_t
 
ho°_li°_size
)

132 
	`as£π
(
memc
);

133 
memc
->
£rvîs

li°
;

134 
memc
->
numbî_of_ho°s

ho°_li°_size
;

135 
	}
}

137 
	$memˇched_£rvî_li°_‰ì
(
memˇched_£rvî_li°_°
 
£lf
)

139 i‡(
£lf
)

141 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_li°_cou¡
(
£lf
); x++)

143 
	`as£π_msg
(
nŸ
 
	`memˇched_is_Æloˇãd
(&
£lf
[
x
]), "You have called memcached_server_list_free(), but you didÇotÖass itá valid memcached_server_list_st");

144 
	`__£rvî_‰ì
(&
£lf
[
x
]);

147 
	`libmemˇched_‰ì
(
£lf
->
roŸ
, self);

149 
	}
}

151 
	$memˇched_ö°™˚_li°_‰ì
(
memˇched_ö°™˚_°
* 
£lf
, 
uöt32_t
 
ö°™˚_cou¡
)

153 i‡(
£lf
)

155 
uöt32_t
 
x
0; x < 
ö°™˚_cou¡
; x++)

157 
	`as£π_msg
(
	`memˇched_is_Æloˇãd
(&
£lf
[
x
]Ë=
Ál£
, "You have called memcached_server_list_free(), but you didÇotÖass itá valid memcached_server_list_st");

158 
	`__ö°™˚_‰ì
(&
£lf
[
x
]);

161 
	`libmemˇched_‰ì
(
£lf
->
roŸ
, self);

163 
	}
}

	@libmemcached/server_list.hpp

37 #¥agm®
⁄˚


39 
memˇched_ö°™˚_°
* 
memˇched_ö°™˚_li°
(c⁄° 
memˇched_°
 *);

41 
uöt32_t
 
memˇched_ö°™˚_li°_cou¡
(c⁄° 
memˇched_°
*);

43 
uöt32_t
 
memˇched_£rvîs_£t_cou¡
(
memˇched_£rvî_li°_°
 
£rvîs
, uöt32_à
cou¡
);

45 
memˇched_ö°™˚_li°_‰ì
(
memˇched_ö°™˚_°
* 
£lf
, 
uöt32_t
 
cou¡
);

47 
memˇched_ö°™˚_£t
(
memˇched_°
*, 
memˇched_ö°™˚_°
*, c⁄° 
uöt32_t
 
ho°_li°_size
);

	@libmemcached/socket.hpp

39 #¥agm®
⁄˚


49 #i‡
deföed
(
WIN32
Ë|| deföed(
__MINGW32__
)

50 
	~"wö32/wøµîs.h
"

51 
	#gë_sockë_î∫o
(Ë
	`WSAGëLa°Eº‹
()

	)

53 
	~<uni°d.h
>

54 
	#INVALID_SOCKET
 -1

	)

55 
	#SOCKET_ERROR
 -1

	)

56 
	#˛o£sockë
(
a
Ë
	`˛o£
◊)

	)

57 
	#gë_sockë_î∫o
(Ë
î∫o


	)

60 #ifde‡
__˝lu•lus


61 
ölöe
 
	$memˇched_˛o£_sockë
(
memˇched_sockë_t
& 
sockë_fd
)

63 
	`˛o£sockë
(
sockë_fd
);

64 
sockë_fd

INVALID_SOCKET
;

65 
	}
}

68 #i‚de‡
HAVE_MSG_NOSIGNAL


69 
	#MSG_NOSIGNAL
 0

	)

72 #i‚de‡
HAVE_MSG_DONTWAIT


73 
	#MSG_DONTWAIT
 0

	)

76 #i‚de‡
HAVE_MSG_MORE


77 
	#MSG_MORE
 0

	)

	@libmemcached/stats.cc

37 
	~<libmemˇched/comm⁄.h
>

39 c⁄° *
	gmemˇched_°©_keys
[] = {

62 
NULL


65 
	sloˇl_c⁄ãxt


67 
memˇched_°©_‚
 
	mfunc
;

68 *
	mc⁄ãxt
;

69 c⁄° *
	m¨gs
;

70 c⁄° 
size_t
 
	m¨gs_Àngth
;

72 
loˇl_c⁄ãxt
(
memˇched_°©_‚
 
func_¨g
,

73 *
c⁄ãxt_¨g
,

74 c⁄° *
¨gs_¨g
,

75 c⁄° 
size_t
 
¨gs_Àngth_¨g
) :

76 
func
(
func_¨g
),

77 
c⁄ãxt
(
c⁄ãxt_¨g
),

78 
¨gs
(
¨gs_¨g
),

79 
¨gs_Àngth
(
¨gs_Àngth_¨g
)

84 
memˇched_ªtu∫_t
 
	$£t_d©a
(
memˇched_°©_°
 *
memc_°©
, c⁄° *
key
, c⁄° *
vÆue
)

87 i‡(
	`°æí
(
key
) < 1)

89 
	`WATCHPOINT_STRING
(
key
);

90  
MEMCACHED_UNKNOWN_STAT_KEY
;

92 i‡(
	`°rcmp
("pid", 
key
) == 0)

94 
î∫o
= 0;

95 
öt64_t
 
ãmp

	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

96 i‡(
î∫o
 != 0)

98  
MEMCACHED_FAILURE
;

101 i‡(
ãmp
 <
INT32_MAX
 
	`™d
 ( (
pid_t
Ë=(
öt32_t
) ))

103 
memc_°©
->
pid

	`pid_t
(
ãmp
);

105 i‡(
ãmp
 > -1)

107 
memc_°©
->
pid

	`pid_t
(
ãmp
);

115 i‡(
nŸ
 
	`°rcmp
("u±ime", 
key
))

117 
î∫o
= 0;

118 
memc_°©
->
u±ime

	`°πoul
(
vÆue
, (**)
NULL
, 10);

119 i‡(
î∫o
 != 0)

121  
MEMCACHED_FAILURE
;

124 i‡(
nŸ
 
	`°rcmp
("time", 
key
))

126 
î∫o
= 0;

127 
memc_°©
->
time

	`°πoul
(
vÆue
, (**)
NULL
, 10);

128 i‡(
î∫o
 != 0)

130  
MEMCACHED_FAILURE
;

133 i‡(
nŸ
 
	`°rcmp
("vîsi⁄", 
key
))

135 
	`mem˝y
(
memc_°©
->
vîsi⁄
, 
vÆue
, 
	`°æí
(value));

136 
memc_°©
->
vîsi⁄
[
	`°æí
(
vÆue
)]= 0;

138 i‡(
nŸ
 
	`°rcmp
("poöãr_size", 
key
))

140 
î∫o
= 0;

141 
memc_°©
->
poöãr_size

	`°πoul
(
vÆue
, (**)
NULL
, 10);

142 i‡(
î∫o
 != 0)

144  
MEMCACHED_FAILURE
;

147 i‡(
nŸ
 
	`°rcmp
("rußge_u£r", 
key
))

149 *
wÆk_±r
;

150 
wÆk_±r
(*)
vÆue
; (!
	`i•un˘
(*walk_ptr)); walk_ptr++) {};

151 *
wÆk_±r
= 0;

152 
wÆk_±r
++;

154 
î∫o
= 0;

155 
memc_°©
->
rußge_u£r_£c⁄ds

	`°πoul
(
vÆue
, (**)
NULL
, 10);

156 i‡(
î∫o
 != 0)

158  
MEMCACHED_FAILURE
;

161 
î∫o
= 0;

162 
memc_°©
->
rußge_u£r_mi¸o£c⁄ds

	`°πoul
(
wÆk_±r
, (**)
NULL
, 10);

163 i‡(
î∫o
 != 0)

165  
MEMCACHED_FAILURE
;

168 i‡(
nŸ
 
	`°rcmp
("rußge_sy°em", 
key
))

170 *
wÆk_±r
;

171 
wÆk_±r
(*)
vÆue
; (!
	`i•un˘
(*walk_ptr)); walk_ptr++) {};

172 *
wÆk_±r
= 0;

173 
wÆk_±r
++;

175 
î∫o
= 0;

176 
memc_°©
->
rußge_sy°em_£c⁄ds

	`°πoul
(
vÆue
, (**)
NULL
, 10);

177 i‡(
î∫o
 != 0)

179  
MEMCACHED_FAILURE
;

182 
î∫o
= 0;

183 
memc_°©
->
rußge_sy°em_mi¸o£c⁄ds

	`°πoul
(
wÆk_±r
, (**)
NULL
, 10);

184 i‡(
î∫o
 != 0)

186  
MEMCACHED_FAILURE
;

189 i‡(
nŸ
 
	`°rcmp
("cuº_ôems", 
key
))

191 
î∫o
= 0;

192 
memc_°©
->
cuº_ôems

	`°πoul
(
vÆue
, (**)
NULL
, 10);

193 i‡(
î∫o
 != 0)

195  
MEMCACHED_FAILURE
;

198 i‡(
nŸ
 
	`°rcmp
("tŸÆ_ôems", 
key
))

200 
î∫o
= 0;

201 
memc_°©
->
tŸÆ_ôems

	`°πoul
(
vÆue
, (**)
NULL
, 10);

202 i‡(
î∫o
 != 0)

204  
MEMCACHED_FAILURE
;

207 i‡(
nŸ
 
	`°rcmp
("byãs_ªad", 
key
))

209 
î∫o
= 0;

210 
memc_°©
->
byãs_ªad

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

211 i‡(
î∫o
 != 0)

213  
MEMCACHED_FAILURE
;

216 i‡(
nŸ
 
	`°rcmp
("byãs_wrôãn", 
key
))

218 
î∫o
= 0;

219 
memc_°©
->
byãs_wrôãn

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

220 i‡(
î∫o
 != 0)

222  
MEMCACHED_FAILURE
;

225 i‡(
nŸ
 
	`°rcmp
("byãs", 
key
))

227 
î∫o
= 0;

228 
memc_°©
->
byãs

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

229 i‡(
î∫o
 != 0)

231  
MEMCACHED_FAILURE
;

234 i‡(
nŸ
 
	`°rcmp
("cuº_c⁄√˘i⁄s", 
key
))

236 
î∫o
= 0;

237 
memc_°©
->
cuº_c⁄√˘i⁄s

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

238 i‡(
î∫o
 != 0)

240  
MEMCACHED_FAILURE
;

243 i‡(
nŸ
 
	`°rcmp
("tŸÆ_c⁄√˘i⁄s", 
key
))

245 
î∫o
= 0;

246 
memc_°©
->
tŸÆ_c⁄√˘i⁄s

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

247 i‡(
î∫o
 != 0)

249  
MEMCACHED_FAILURE
;

252 i‡(
nŸ
 
	`°rcmp
("c⁄√˘i⁄_°ru˘uªs", 
key
))

254 
î∫o
= 0;

255 
memc_°©
->
c⁄√˘i⁄_°ru˘uªs

	`°πoul
(
vÆue
, (**)
NULL
, 10);

256 i‡(
î∫o
 != 0)

258  
MEMCACHED_FAILURE
;

261 i‡(
nŸ
 
	`°rcmp
("cmd_gë", 
key
))

263 
î∫o
= 0;

264 
memc_°©
->
cmd_gë

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

265 i‡(
î∫o
 != 0)

267  
MEMCACHED_FAILURE
;

270 i‡(
nŸ
 
	`°rcmp
("cmd_£t", 
key
))

272 
î∫o
= 0;

273 
memc_°©
->
cmd_£t

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

274 i‡(
î∫o
 != 0)

276  
MEMCACHED_FAILURE
;

279 i‡(
nŸ
 
	`°rcmp
("gë_hôs", 
key
))

281 
î∫o
= 0;

282 
memc_°©
->
gë_hôs

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

283 i‡(
î∫o
 != 0)

285  
MEMCACHED_FAILURE
;

288 i‡(
nŸ
 
	`°rcmp
("gë_mis£s", 
key
))

290 
î∫o
= 0;

291 
memc_°©
->
gë_mis£s

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

292 i‡(
î∫o
 != 0)

294  
MEMCACHED_FAILURE
;

297 i‡(
nŸ
 
	`°rcmp
("evi˘i⁄s", 
key
))

299 
î∫o
= 0;

300 
memc_°©
->
evi˘i⁄s

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

301 i‡(
î∫o
 != 0)

303  
MEMCACHED_FAILURE
;

306 i‡(
nŸ
 
	`°rcmp
("limô_maxbyãs", 
key
))

308 
î∫o
= 0;

309 
memc_°©
->
limô_maxbyãs

	`°πouŒ
(
vÆue
, (**)
NULL
, 10);

310 i‡(
î∫o
 != 0)

312  
MEMCACHED_FAILURE
;

315 i‡(
nŸ
 
	`°rcmp
("thªads", 
key
))

317 
î∫o
= 0;

318 
memc_°©
->
thªads

	`°πoul
(
vÆue
, (**)
NULL
, 10);

319 i‡(
î∫o
 != 0)

321  
MEMCACHED_FAILURE
;

324 i‡((
	`°rcmp
("dñëe_mis£s", 
key
Ë=0 
‹


325 
	`°rcmp
("dñëe_hôs", 
key
Ë=0 
‹


326 
	`°rcmp
("ö¸_mis£s", 
key
Ë=0 
‹


327 
	`°rcmp
("ö¸_hôs", 
key
Ë=0 
‹


328 
	`°rcmp
("de¸_mis£s", 
key
Ë=0 
‹


329 
	`°rcmp
("de¸_hôs", 
key
Ë=0 
‹


330 
	`°rcmp
("ˇs_mis£s", 
key
Ë=0 
‹


331 
	`°rcmp
("ˇs_hôs", 
key
Ë=0 
‹


332 
	`°rcmp
("ˇs_badvÆ", 
key
Ë=0 
‹


333 
	`°rcmp
("cmd_Êush", 
key
Ë=0 
‹


334 
	`°rcmp
("ac˚±ög_c⁄ns", 
key
Ë=0 
‹


335 
	`°rcmp
("li°í_dißbÀd_num", 
key
Ë=0 
‹


336 
	`°rcmp
("c⁄n_yõlds", 
key
Ë=0 
‹


337 
	`°rcmp
("auth_cmds", 
key
Ë=0 
‹


338 
	`°rcmp
("auth_îr‹s", 
key
Ë=0 
‹


339 
	`°rcmp
("ª˛aimed", 
key
) == 0) == 0)

341 
	`WATCHPOINT_STRING
(
key
);

343  
MEMCACHED_SUCCESS
;

346  
MEMCACHED_SUCCESS
;

347 
	}
}

349 *
	$memˇched_°©_gë_vÆue
(c⁄° 
memˇched_°
 *, 
memˇched_°©_°
 *
memc_°©
,

350 c⁄° *
key
, 
memˇched_ªtu∫_t
 *
îr‹
)

352 
memˇched_ªtu∫_t
 
nŸ_u£d
;

353 i‡(
îr‹
 =
NULL
)

355 
îr‹
&
nŸ_u£d
;

358 i‡(
memc_°©
 =
NULL
)

360 *
îr‹

MEMCACHED_INVALID_ARGUMENTS
;

361  
NULL
;

364 
buf„r
[
SMALL_STRING_LEN
];

365 
Àngth
;

367 *
îr‹

MEMCACHED_SUCCESS
;

369 i‡(
	`memcmp
("pid", 
key
, ("pid") -1) == 0)

371 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œd", (sig√d )
memc_°©
->
pid
);

373 i‡(
nŸ
 
	`memcmp
("u±ime", 
key
, ("uptime") -1))

375 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu", 
memc_°©
->
u±ime
);

377 i‡(
nŸ
 
	`memcmp
("time", 
key
, ("time") -1))

379 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
time
);

381 i‡(
nŸ
 
	`memcmp
("vîsi⁄", 
key
, ("version") -1))

383 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%s", 
memc_°©
->
vîsi⁄
);

385 i‡(
nŸ
 
	`memcmp
("poöãr_size", 
key
, ("pointer_size") -1))

387 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu", 
memc_°©
->
poöãr_size
);

389 i‡(
nŸ
 
	`memcmp
("rußge_u£r", 
key
, ("rusage_user") -1))

391 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu.%lu", 
memc_°©
->
rußge_u£r_£c⁄ds
, memc_°©->
rußge_u£r_mi¸o£c⁄ds
);

393 i‡(
nŸ
 
	`memcmp
("rußge_sy°em", 
key
, ("rusage_system") -1))

395 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu.%lu", 
memc_°©
->
rußge_sy°em_£c⁄ds
, memc_°©->
rußge_sy°em_mi¸o£c⁄ds
);

397 i‡(
nŸ
 
	`memcmp
("cuº_ôems", 
key
, ("curr_items") -1))

399 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu", 
memc_°©
->
cuº_ôems
);

401 i‡(
nŸ
 
	`memcmp
("tŸÆ_ôems", 
key
, ("total_items") -1))

403 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu", 
memc_°©
->
tŸÆ_ôems
);

405 i‡(
nŸ
 
	`memcmp
("cuº_c⁄√˘i⁄s", 
key
, ("curr_connections") -1))

407 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu", 
memc_°©
->
cuº_c⁄√˘i⁄s
);

409 i‡(
nŸ
 
	`memcmp
("tŸÆ_c⁄√˘i⁄s", 
key
, ("total_connections") -1))

411 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu", 
memc_°©
->
tŸÆ_c⁄√˘i⁄s
);

413 i‡(
nŸ
 
	`memcmp
("c⁄√˘i⁄_°ru˘uªs", 
key
, ("connection_structures") -1))

415 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu", 
memc_°©
->
c⁄√˘i⁄_°ru˘uªs
);

417 i‡(
nŸ
 
	`memcmp
("cmd_gë", 
key
, ("cmd_get") -1))

419 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
cmd_gë
);

421 i‡(
nŸ
 
	`memcmp
("cmd_£t", 
key
, ("cmd_set") -1))

423 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
cmd_£t
);

425 i‡(
nŸ
 
	`memcmp
("gë_hôs", 
key
, ("get_hits") -1))

427 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
gë_hôs
);

429 i‡(
nŸ
 
	`memcmp
("gë_mis£s", 
key
, ("get_misses") -1))

431 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
gë_mis£s
);

433 i‡(
nŸ
 
	`memcmp
("evi˘i⁄s", 
key
, ("evictions") -1))

435 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
evi˘i⁄s
);

437 i‡(
nŸ
 
	`memcmp
("byãs_ªad", 
key
, ("bytes_read") -1))

439 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
byãs_ªad
);

441 i‡(
nŸ
 
	`memcmp
("byãs_wrôãn", 
key
, ("bytes_written") -1))

443 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
byãs_wrôãn
);

445 i‡(
nŸ
 
	`memcmp
("byãs", 
key
, ("bytes") -1))

447 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
byãs
);

449 i‡(
nŸ
 
	`memcmp
("limô_maxbyãs", 
key
, ("limit_maxbytes") -1))

451 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
limô_maxbyãs
);

453 i‡(
nŸ
 
	`memcmp
("thªads", 
key
, ("threads") -1))

455 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%lu", 
memc_°©
->
thªads
);

459 *
îr‹

MEMCACHED_NOTFOUND
;

460  
NULL
;

463 i‡(
Àngth
 >
SMALL_STRING_LEN
 ||Üength < 0)

465 *
îr‹

MEMCACHED_FAILURE
;

466  
NULL
;

470 *
ªt

°©ic_ˇ°
<*>(
	`mÆloc
(
	`size_t
(
Àngth
 +1)));

471 
	`mem˝y
(
ªt
, 
buf„r
, (
size_t
Ë
Àngth
);

472 
ªt
[
Àngth
]= '\0';

474  
ªt
;

475 
	}
}

477 
memˇched_ªtu∫_t
 
	$bö¨y_°©s_„tch
(
memˇched_°©_°
 *
memc_°©
,

478 c⁄° *
¨gs
,

479 c⁄° 
size_t
 
¨gs_Àngth
,

480 
memˇched_ö°™˚_°
* 
ö°™˚
,

481 
loˇl_c⁄ãxt
 *
check
)

483 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

484 
¥Ÿocﬁ_bö¨y_ªque°_°©s
 
ªque°
= {};

486 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

488 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_STAT
;

489 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

491 i‡(
¨gs_Àngth
)

493 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
(
	`uöt16_t
(
¨gs_Àngth
));

494 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
(
	`uöt32_t
–
¨gs_Àngth
));

496 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

498 { 
ªque°
.
byãs
, (request.bytes) },

499 { 
¨gs
, 
¨gs_Àngth
 }

502 i‡(
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 2, 
åue
Ë!
MEMCACHED_SUCCESS
)

504 
	`memˇched_io_ª£t
(
ö°™˚
);

505  
MEMCACHED_WRITE_FAILURE
;

510 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

512 { 
ªque°
.
byãs
, (request.bytes) }

515 i‡(
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 1, 
åue
Ë!
MEMCACHED_SUCCESS
)

517 
	`memˇched_io_ª£t
(
ö°™˚
);

518  
MEMCACHED_WRITE_FAILURE
;

522 
	`memˇched_£rvî_ª•⁄£_de¸emít
(
ö°™˚
);

525 
memˇched_ªtu∫_t
 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
NULL
);

527 i‡(
rc
 =
MEMCACHED_END
)

532 i‡(
rc
 !
MEMCACHED_SUCCESS
)

534 
	`memˇched_io_ª£t
(
ö°™˚
);

535  
rc
;

538 i‡(
check
 && check->
func
)

540 
size_t
 
key_Àngth

	`°æí
(
buf„r
);

542 
check
->
	`func
(
ö°™˚
,

543 
buf„r
, 
key_Àngth
,

544 
buf„r
+
key_Àngth
+1, 
	`°æí
(buffer+key_length+1),

545 
check
->
c⁄ãxt
);

548 i‡(
memc_°©
)

550 i‡((
	`£t_d©a
(
memc_°©
, 
buf„r
, buf„∏+ 
	`°æí
(buf„rË+ 1)Ë=
MEMCACHED_UNKNOWN_STAT_KEY
)

552 
	`WATCHPOINT_ERROR
(
MEMCACHED_UNKNOWN_STAT_KEY
);

553 
	`WATCHPOINT_ASSERT
(0);

562 
ö°™˚
->
curs‹_a˘ive_
= 0;

564  
MEMCACHED_SUCCESS
;

565 
	}
}

567 
memˇched_ªtu∫_t
 
	$ascii_°©s_„tch
(
memˇched_°©_°
 *
memc_°©
,

568 c⁄° *
¨gs
,

569 c⁄° 
size_t
 
¨gs_Àngth
,

570 
memˇched_ö°™˚_°
* 
ö°™˚
,

571 
loˇl_c⁄ãxt
 *
check
)

573 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

575 { 
	`memˇched_lôîÆ_∑øm
("stats ") },

576 { 
¨gs
, 
¨gs_Àngth
 },

577 { 
	`memˇched_lôîÆ_∑øm
("\r\n") }

580 
memˇched_ªtu∫_t
 
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 3, 
åue
);

581 i‡(
	`memˇched_suc˚ss
(
rc
))

583 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

584 (
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
NULL
)Ë=
MEMCACHED_STAT
)

586 *
°rög_±r

buf„r
;

587 
°rög_±r
+= 5;

589 *
íd_±r
;

590 
íd_±r

°rög_±r
; 
	`isgøph
(*end_ptr);Énd_ptr++) {};

591 *
key

°rög_±r
;

592 
key
[
	`size_t
(
íd_±r
-
°rög_±r
)]= 0;

594 
°rög_±r

íd_±r
 + 1;

595 
íd_±r

°rög_±r
; !(
	`is•a˚
(*end_ptr));Énd_ptr++) {};

596 *
vÆue

°rög_±r
;

597 
vÆue
[(
size_t
)(
íd_±r
 -
°rög_±r
)]= 0;

599 
boﬁ
 
check_boﬁ

	`boﬁ
(
check
);

600 
boﬁ
 
check_func_boﬁ

	`boﬁ
(
check
Ë? boﬁ(check->
func
Ë: 
Ál£
;

601 
	`Ârötf
(
°dîr
, "%s:%d %†%†%d:%d\n", 
__FILE__
, 
__LINE__
, 
key
, 
vÆue
, 
check_boﬁ
, 
check_func_boﬁ
);

604 i‡(
check
 
™d
 check->
func
)

606 
check
->
	`func
(
ö°™˚
,

607 
key
, 
	`°æí
(key),

608 
vÆue
, 
	`°æí
(value),

609 
check
->
c⁄ãxt
);

612 i‡(
memc_°©
)

614 if((
	`£t_d©a
(
memc_°©
, 
key
, 
vÆue
)Ë=
MEMCACHED_UNKNOWN_STAT_KEY
)

616 
	`WATCHPOINT_ERROR
(
MEMCACHED_UNKNOWN_STAT_KEY
);

617 
	`WATCHPOINT_ASSERT
(0);

623 i‡(
rc
 =
MEMCACHED_ERROR
)

625  
MEMCACHED_INVALID_ARGUMENTS
;

628 i‡(
rc
 =
MEMCACHED_END
)

630  
MEMCACHED_SUCCESS
;

633  
rc
;

634 
	}
}

636 
memˇched_°©_°
 *
	$memˇched_°©
(
memˇched_°
 *
shñl
, *
¨gs
, 
memˇched_ªtu∫_t
 *
îr‹
)

638 
Memˇched
* 
£lf

	`memˇched2Memˇched
(
shñl
);

639 
memˇched_ªtu∫_t
 
unu£d
;

640 i‡(
îr‹
 =
NULL
)

642 
îr‹
&
unu£d
;

645 i‡(
	`memˇched_Áûed
(*
îr‹

	`öôülize_quîy
(
£lf
, 
åue
)))

647  
NULL
;

650 i‡(
	`memˇched_is_udp
(
£lf
))

652 *
îr‹

	`memˇched_£t_îr‹
(*
£lf
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
);

653  
NULL
;

656 
memˇched_ªtu∫_t
 
rc
;

657 
size_t
 
¨gs_Àngth
= 0;

658 i‡(
¨gs
)

660 
¨gs_Àngth

	`°æí
(
¨gs
);

661 
rc

	`memˇched_vÆid©e_key_Àngth
(
¨gs_Àngth
, 
£lf
->
Êags
.
bö¨y_¥Ÿocﬁ
);

662 i‡(
	`memˇched_Áûed
(
rc
))

664 *
îr‹

	`memˇched_£t_îr‹
(*
£lf
, 
rc
, 
MEMCACHED_AT
);

665  
NULL
;

669 
	`WATCHPOINT_ASSERT
(
îr‹
);

671 
memˇched_°©_°
 *
°©s

	`libmemˇched_xˇŒoc
(
£lf
, 
	`memˇched_£rvî_cou¡
(self), memcached_stat_st);

672 i‡(
°©s
 =
NULL
)

674 *
îr‹

	`memˇched_£t_îr‹
(*
£lf
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

675  
NULL
;

678 
	`WATCHPOINT_ASSERT
(
rc
 =
MEMCACHED_SUCCESS
);

679 
rc

MEMCACHED_SUCCESS
;

680 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
£lf
); x++)

682 
memˇched_°©_°
* 
°©_ö°™˚

°©s
 +
x
;

684 
°©_ö°™˚
->
pid
= -1;

685 
°©_ö°™˚
->
roŸ

£lf
;

687 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
£lf
, 
x
);

689 
memˇched_ªtu∫_t
 
ãmp_ªtu∫
;

690 i‡(
	`memˇched_is_bö¨y
(
£lf
))

692 
ãmp_ªtu∫

	`bö¨y_°©s_„tch
(
°©_ö°™˚
, 
¨gs
, 
¨gs_Àngth
, 
ö°™˚
, 
NULL
);

696 
ãmp_ªtu∫

	`ascii_°©s_„tch
(
°©_ö°™˚
, 
¨gs
, 
¨gs_Àngth
, 
ö°™˚
, 
NULL
);

700 i‡(
ãmp_ªtu∫
 =
MEMCACHED_INVALID_ARGUMENTS
)

702 
rc

MEMCACHED_INVALID_ARGUMENTS
;

706 i‡(
	`memˇched_Áûed
(
ãmp_ªtu∫
))

708 
rc

MEMCACHED_SOME_ERRORS
;

712 *
îr‹

rc
;

714  
°©s
;

715 
	}
}

717 
memˇched_ªtu∫_t
 
	$memˇched_°©_£rvî«me
(
memˇched_°©_°
 *
memc_°©
, *
¨gs
,

718 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
)

720 
memˇched_°
 
memc
;

722 
memˇched_°©_°
 
unu£d_memc_°©
;

723 i‡(
memc_°©
 =
NULL
)

725 
memc_°©
&
unu£d_memc_°©
;

728 
	`mem£t
(
memc_°©
, 0, (
memˇched_°©_°
));

730 
memˇched_°
 *
memc_±r

	`memˇched_¸óã
(&
memc
);

731 i‡(
memc_±r
 =
NULL
)

733  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

736 
memˇched_ªtu∫_t
 
rc
;

737 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_£rvî_add
(&
memc
, 
ho°«me
, 
p‹t
)))

739 
	`memˇched_‰ì
(&
memc
);

740  
rc
;

743 i‡(
	`memˇched_suc˚ss
(
rc

	`öôülize_quîy
(
memc_±r
, 
åue
)))

745 
size_t
 
¨gs_Àngth
= 0;

746 i‡(
¨gs
)

748 
¨gs_Àngth

	`°æí
(
¨gs
);

749 
rc

	`memˇched_vÆid©e_key_Àngth
(
¨gs_Àngth
, 
memc
.
Êags
.
bö¨y_¥Ÿocﬁ
);

752 i‡(
	`memˇched_suc˚ss
(
rc
))

754 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc_±r
, 0);

755 i‡(
memc
.
Êags
.
bö¨y_¥Ÿocﬁ
)

757 
rc

	`bö¨y_°©s_„tch
(
memc_°©
, 
¨gs
, 
¨gs_Àngth
, 
ö°™˚
, 
NULL
);

761 
rc

	`ascii_°©s_„tch
(
memc_°©
, 
¨gs
, 
¨gs_Àngth
, 
ö°™˚
, 
NULL
);

766 
	`memˇched_‰ì
(&
memc
);

768  
rc
;

769 
	}
}

775 ** 
	$memˇched_°©_gë_keys
(
memˇched_°
 *
shñl
,

776 
memˇched_°©_°
 *,

777 
memˇched_ªtu∫_t
 *
îr‹
)

779 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

780 i‡(
memc
)

782 **
li°

°©ic_ˇ°
<**>(
	`libmemˇched_mÆloc
(
memc
, (
memˇched_°©_keys
)));

783 i‡(
li°
 =
NULL
)

785 i‡(
îr‹
)

787 *
îr‹

	`memˇched_£t_îr‹
(*
memc
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

790  
NULL
;

793 
	`mem˝y
(
li°
, 
memˇched_°©_keys
, (memcached_stat_keys));

795 i‡(
îr‹
)

797 *
îr‹

MEMCACHED_SUCCESS
;

800  
li°
;

803  
NULL
;

804 
	}
}

806 
	$memˇched_°©_‰ì
(c⁄° 
memˇched_°
 *, 
memˇched_°©_°
 *
memc_°©
)

808 
	`WATCHPOINT_ASSERT
(
memc_°©
);

809 i‡(
memc_°©
)

811 
	`libmemˇched_‰ì
(
memc_°©
->
roŸ
, memc_stat);

813 
	}
}

815 
memˇched_ªtu∫_t
 
	$ˇŒ_°©_‚
(
memˇched_°
 *
memc
,

816 
memˇched_ö°™˚_°
* 
ö°™˚
,

817 *
c⁄ãxt
)

819 i‡(
memc
)

821 
loˇl_c⁄ãxt
 *
check
(loˇl_c⁄ãxà*)
c⁄ãxt
;

823 i‡(
	`memˇched_is_bö¨y
(
memc
))

825  
	`bö¨y_°©s_„tch
(
NULL
, 
check
->
¨gs
, check->
¨gs_Àngth
, 
ö°™˚
, check);

829  
	`ascii_°©s_„tch
(
NULL
, 
check
->
¨gs
, check->
¨gs_Àngth
, 
ö°™˚
, check);

833  
MEMCACHED_INVALID_ARGUMENTS
;

834 
	}
}

836 
memˇched_ªtu∫_t
 
	$memˇched_°©_execuã
(
memˇched_°
 *
shñl
, c⁄° *
¨gs
, 
memˇched_°©_‚
 
func
, *
c⁄ãxt
)

838 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

839 i‡(
	`memˇched_Áèl
(
	`memˇched_vîsi⁄
(
memc
)))

841  
	`memˇched_œ°_îr‹
(
memc
);

844 
loˇl_c⁄ãxt
 
	`check
(
func
, 
c⁄ãxt
, 
¨gs
,árg†? 
	`°æí
(args) : 0);

846  
	`memˇched_£rvî_execuã
(
memc
, 
ˇŒ_°©_‚
, (*)&
check
);

847 
	}
}

	@libmemcached/storage.cc

39 
	~<libmemˇched/comm⁄.h
>

41 
	ememˇched_°‹age_a˘i⁄_t
 {

42 
	mSET_OP
,

43 
	mREPLACE_OP
,

44 
	mADD_OP
,

45 
	mPREPEND_OP
,

46 
	mAPPEND_OP
,

47 
	mCAS_OP


51 
ölöe
 c⁄° *
	$°‹age_›_°rög
(
memˇched_°‹age_a˘i⁄_t
 
vîb
)

53 
vîb
)

55 
REPLACE_OP
:

58 
ADD_OP
:

61 
PREPEND_OP
:

64 
APPEND_OP
:

67 
CAS_OP
:

70 
SET_OP
:

75 
	}
}

77 
ölöe
 
uöt8_t
 
	$ˇn_by_í¸y±ed
(c⁄° 
memˇched_°‹age_a˘i⁄_t
 
vîb
)

79 
vîb
)

81 
SET_OP
:

82 
ADD_OP
:

83 
CAS_OP
:

84 
REPLACE_OP
:

85  
åue
;

87 
APPEND_OP
:

88 
PREPEND_OP
:

92  
Ál£
;

93 
	}
}

95 
ölöe
 
uöt8_t
 
	$gë_com_code
(c⁄° 
memˇched_°‹age_a˘i⁄_t
 
vîb
, c⁄° 
boﬁ
 
ª∂y
)

97 i‡(
ª∂y
 =
Ál£
)

99 
vîb
)

101 
SET_OP
:

102  
PROTOCOL_BINARY_CMD_SETQ
;

104 
ADD_OP
:

105  
PROTOCOL_BINARY_CMD_ADDQ
;

107 
CAS_OP
:

108 
REPLACE_OP
:

109  
PROTOCOL_BINARY_CMD_REPLACEQ
;

111 
APPEND_OP
:

112  
PROTOCOL_BINARY_CMD_APPENDQ
;

114 
PREPEND_OP
:

115  
PROTOCOL_BINARY_CMD_PREPENDQ
;

119 
vîb
)

121 
SET_OP
:

124 
ADD_OP
:

125  
PROTOCOL_BINARY_CMD_ADD
;

127 
CAS_OP
:

128 
REPLACE_OP
:

129  
PROTOCOL_BINARY_CMD_REPLACE
;

131 
APPEND_OP
:

132  
PROTOCOL_BINARY_CMD_APPEND
;

134 
PREPEND_OP
:

135  
PROTOCOL_BINARY_CMD_PREPEND
;

138  
PROTOCOL_BINARY_CMD_SET
;

139 
	}
}

141 
memˇched_ªtu∫_t
 
	$memˇched_£nd_bö¨y
(
Memˇched
 *
±r
,

142 
memˇched_ö°™˚_°
* 
£rvî
,

143 
uöt32_t
 
£rvî_key
,

144 c⁄° *
key
,

145 c⁄° 
size_t
 
key_Àngth
,

146 c⁄° *
vÆue
,

147 c⁄° 
size_t
 
vÆue_Àngth
,

148 c⁄° 
time_t
 
expú©i⁄
,

149 c⁄° 
uöt32_t
 
Êags
,

150 c⁄° 
uöt64_t
 
ˇs
,

151 c⁄° 
boﬁ
 
Êush
,

152 c⁄° 
boﬁ
 
ª∂y
,

153 
memˇched_°‹age_a˘i⁄_t
 
vîb
)

155 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
ªque°
= {};

156 
size_t
 
£nd_Àngth
(
ªque°
.
byãs
);

158 
	`öôülize_bö¨y_ªque°
(
£rvî
, 
ªque°
.
mesßge
.
hódî
);

160 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

	`gë_com_code
(
vîb
, 
ª∂y
);

161 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
 + 
	`memˇched_¨øy_size
(
±r
->
_«me•a˚
)));

162 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

163 i‡(
vîb
 =
APPEND_OP
 
‹
 vîb =
PREPEND_OP
)

165 
£nd_Àngth
 -= 8;

169 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
= 8;

170 
ªque°
.
mesßge
.
body
.
Êags

	`ht⁄l
(flags);

171 
ªque°
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
((
uöt32_t
)expiration);

174 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
Ë(
key_Àngth
 + 
	`memˇched_¨øy_size
(
±r
->
_«me•a˚
Ë+ 
vÆue_Àngth
 +

175 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
));

177 i‡(
ˇs
)

179 
ªque°
.
mesßge
.
hódî
.ªque°.
ˇs

	`memˇched_ht⁄Œ
(cas);

182 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

184 { 
NULL
, 0 },

185 { 
ªque°
.
byãs
, 
£nd_Àngth
 },

186 { 
	`memˇched_¨øy_°rög
(
±r
->
_«me•a˚
), 
	`memˇched_¨øy_size
(ptr->_namespace) },

187 { 
key
, 
key_Àngth
 },

188 { 
vÆue
, 
vÆue_Àngth
 }

192 
memˇched_ªtu∫_t
 
rc
;

193 i‡((
rc

	`memˇched_vdo
(
£rvî
, 
ve˘‹
, 5, 
Êush
)Ë!
MEMCACHED_SUCCESS
)

195 
	`memˇched_io_ª£t
(
£rvî
);

198 i‡(
	`memˇched_has_îr‹
(
±r
))

200 
	`memˇched_£t_îr‹
(*
£rvî
, 
rc
, 
MEMCACHED_AT
);

204 
	`as£π
(
	`memˇched_œ°_îr‹
(
£rvî
->
roŸ
Ë!
MEMCACHED_SUCCESS
);

205  
	`memˇched_œ°_îr‹
(
£rvî
->
roŸ
);

208 i‡(
vîb
 =
SET_OP
 
™d
 
±r
->
numbî_of_ª∂iˇs
 > 0)

210 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_SETQ
;

211 
	`WATCHPOINT_STRING
("replicating");

213 
uöt32_t
 
x
0; x < 
±r
->
numbî_of_ª∂iˇs
; x++)

215 ++
£rvî_key
;

216 i‡(
£rvî_key
 =
	`memˇched_£rvî_cou¡
(
±r
))

218 
£rvî_key
= 0;

221 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
£rvî_key
);

223 i‡(
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 5, 
Ál£
Ë!
MEMCACHED_SUCCESS
)

225 
	`memˇched_io_ª£t
(
ö°™˚
);

229 
	`memˇched_£rvî_ª•⁄£_de¸emít
(
ö°™˚
);

234 i‡(
Êush
 =
Ál£
)

236  
MEMCACHED_BUFFERED
;

240 i‡(
ª∂y
 =
Ál£
)

242  
MEMCACHED_SUCCESS
;

245  
	`memˇched_ª•⁄£
(
£rvî
, 
NULL
, 0, NULL);

246 
	}
}

248 
memˇched_ªtu∫_t
 
	$memˇched_£nd_ascii
(
Memˇched
 *
±r
,

249 
memˇched_ö°™˚_°
* 
ö°™˚
,

250 c⁄° *
key
,

251 c⁄° 
size_t
 
key_Àngth
,

252 c⁄° *
vÆue
,

253 c⁄° 
size_t
 
vÆue_Àngth
,

254 c⁄° 
time_t
 
expú©i⁄
,

255 c⁄° 
uöt32_t
 
Êags
,

256 c⁄° 
uöt64_t
 
ˇs
,

257 c⁄° 
boﬁ
 
Êush
,

258 c⁄° 
boﬁ
 
ª∂y
,

259 c⁄° 
memˇched_°‹age_a˘i⁄_t
 
vîb
)

261 
id
 = 10 + 
	`gëpid
();

262 
id
++;

263 
Êags_buf„r
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

264 
Êags_buf„r_Àngth

	`¢¥ötf
(
Êags_buf„r
, (Êags_buf„r), " %u", 
Êags
);

265 i‡(
	`size_t
(
Êags_buf„r_Àngth
Ë>(
Êags_buf„r
Ë
‹
 flags_buffer_length < 0)

267  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

268 
	`memˇched_lôîÆ_∑øm
("snprintf(MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH)"));

271 
expú©i⁄_buf„r
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

272 
expú©i⁄_buf„r_Àngth

	`¢¥ötf
(
expú©i⁄_buf„r
, ”xpú©i⁄_buf„r), " %d", 
id
);

273 i‡(
	`size_t
(
expú©i⁄_buf„r_Àngth
Ë>(
expú©i⁄_buf„r
Ë
‹
Éxpiration_buffer_length < 0)

275  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

276 
	`memˇched_lôîÆ_∑øm
("snprintf(MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH)"));

279 
vÆue_buf„r
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

280 
vÆue_buf„r_Àngth

	`¢¥ötf
(
vÆue_buf„r
, (vÆue_buf„r), " %Œu", ()
vÆue_Àngth
);

281 i‡(
	`size_t
(
vÆue_buf„r_Àngth
Ë>(
vÆue_buf„r
Ë
‹
 value_buffer_length < 0)

283  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

284 
	`memˇched_lôîÆ_∑øm
("snprintf(MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH)"));

287 
ˇs_buf„r
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

288 
ˇs_buf„r_Àngth
= 0;

289 i‡(
ˇs
)

291 
ˇs_buf„r_Àngth

	`¢¥ötf
(
ˇs_buf„r
, (ˇs_buf„r), " %Œu", ()
ˇs
);

292 i‡(
	`size_t
(
ˇs_buf„r_Àngth
Ë>(
ˇs_buf„r
Ë
‹
 cas_buffer_length < 0)

294  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

295 
	`memˇched_lôîÆ_∑øm
("snprintf(MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH)"));

299 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

301 { 
NULL
, 0 },

302 { 
	`°‹age_›_°rög
(
vîb
), 
	`°æí
(storage_op_string(verb))},

303 { 
	`memˇched_¨øy_°rög
(
±r
->
_«me•a˚
), 
	`memˇched_¨øy_size
(ptr->_namespace) },

304 { 
key
, 
key_Àngth
 },

305 { 
Êags_buf„r
, 
	`size_t
(
Êags_buf„r_Àngth
) },

306 { 
expú©i⁄_buf„r
, 
	`size_t
(
expú©i⁄_buf„r_Àngth
) },

307 { 
vÆue_buf„r
, 
	`size_t
(
vÆue_buf„r_Àngth
) },

308 { 
ˇs_buf„r
, 
	`size_t
(
ˇs_buf„r_Àngth
) },

309 { "Ç‹ïly", 
ª∂y
 ? 0 : 
	`memˇched_lôîÆ_∑øm_size
("Çoreply") },

310 { 
	`memˇched_lôîÆ_∑øm
("\r\n") },

311 { 
vÆue
, 
vÆue_Àngth
 },

312 { 
	`memˇched_lôîÆ_∑øm
("\r\n") }

316 
memˇched_ªtu∫_t
 
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 12, 
Êush
);

319 i‡(
ª∂y
 =
Ál£
)

321  
	`memˇched_suc˚ss
(
rc
Ë? 
MEMCACHED_SUCCESS
 :Ñc;

324 i‡(
Êush
 =
Ál£
)

326  
	`memˇched_suc˚ss
(
rc
Ë? 
MEMCACHED_BUFFERED
 :Ñc;

329 i‡(
rc
 =
MEMCACHED_SUCCESS
)

331 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
 + 30];

332 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
NULL
);

334 i‡(
rc
 =
MEMCACHED_STORED
)

336  
MEMCACHED_SUCCESS
;

340 i‡(
rc
 =
MEMCACHED_WRITE_FAILURE
)

342 
	`memˇched_io_ª£t
(
ö°™˚
);

345 
	`as£π
(
	`memˇched_Áûed
(
rc
));

347 i‡(
	`memˇched_has_îr‹
(
±r
Ë=
Ál£
)

349  
	`memˇched_£t_îr‹
(*
±r
, 
rc
, 
MEMCACHED_AT
);

353  
rc
;

354 
	}
}

356 
ölöe
 
memˇched_ªtu∫_t
 
	$memˇched_£nd
(
memˇched_°
 *
shñl
,

357 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

358 c⁄° *
key
, 
size_t
 
key_Àngth
,

359 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

360 c⁄° 
time_t
 
expú©i⁄
,

361 c⁄° 
uöt32_t
 
Êags
,

362 c⁄° 
uöt64_t
 
ˇs
,

363 
memˇched_°‹age_a˘i⁄_t
 
vîb
)

365 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

366 
memˇched_ªtu∫_t
 
rc
;

367 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
±r
, 
åue
)))

369  
rc
;

372 i‡(
	`memˇched_Áûed
(
	`memˇched_key_ã°
(*
±r
, (c⁄° **)&
key
, &
key_Àngth
, 1)))

374  
	`memˇched_œ°_îr‹
(
±r
);

377 
uöt32_t
 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
group_key
, 
group_key_Àngth
);

378 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
£rvî_key
);

380 
	`WATCHPOINT_SET
(
ö°™˚
->
io_waô_cou¡
.
ªad
= 0);

381 
	`WATCHPOINT_SET
(
ö°™˚
->
io_waô_cou¡
.
wrôe
= 0);

384 
boﬁ
 
Êush

åue
;

385 i‡(
	`memˇched_is_buf„rög
(
ö°™˚
->
roŸ
Ë
™d
 
vîb
 =
SET_OP
)

387 
Êush

Ál£
;

390 
boﬁ
 
ª∂y

	`memˇched_is_ª∂yög
(
±r
);

392 
hashkô_°rög_°
* 
de°ö©i⁄

NULL
;

394 i‡(
	`memˇched_is_í¸y±ed
(
±r
))

396 i‡(
	`ˇn_by_í¸y±ed
(
vîb
Ë=
Ál£
)

398  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_NOT_SUPPORTED
, 
MEMCACHED_AT
,

399 
	`memˇched_lôîÆ_∑øm
("OperationÇotállowed whileÉncyrption isÉnabled"));

402 i‡((
de°ö©i⁄

	`hashkô_í¸y±
(&
±r
->
hashkô
, 
vÆue
, 
vÆue_Àngth
)Ë=
NULL
)

404  
rc
;

406 
vÆue

	`hashkô_°rög_c_°r
(
de°ö©i⁄
);

407 
vÆue_Àngth

	`hashkô_°rög_Àngth
(
de°ö©i⁄
);

410 i‡(
	`memˇched_is_bö¨y
(
±r
))

412 
	`¥ötf
("Binary send\n");

413 
rc

	`memˇched_£nd_bö¨y
(
±r
, 
ö°™˚
, 
£rvî_key
,

414 
key
, 
key_Àngth
,

415 
vÆue
, 
vÆue_Àngth
, 
expú©i⁄
,

416 
Êags
, 
ˇs
, 
Êush
, 
ª∂y
, 
vîb
);

420 
	`¥ötf
("ascii send\n");

421 
rc

	`memˇched_£nd_ascii
(
±r
, 
ö°™˚
,

422 
key
, 
key_Àngth
,

423 
vÆue
, 
vÆue_Àngth
, 
expú©i⁄
,

424 
Êags
, 
ˇs
, 
Êush
, 
ª∂y
, 
vîb
);

427 
	`hashkô_°rög_‰ì
(
de°ö©i⁄
);

429  
rc
;

430 
	}
}

433 
memˇched_ªtu∫_t
 
	$memˇched_£t
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

434 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

435 
time_t
 
expú©i⁄
,

436 
uöt32_t
 
Êags
)

438 
memˇched_ªtu∫_t
 
rc
;

439 
	`LIBMEMCACHED_MEMCACHED_SET_START
();

440 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

441 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

442 
expú©i⁄
, 
Êags
, 0, 
SET_OP
);

443 
	`LIBMEMCACHED_MEMCACHED_SET_END
();

444  
rc
;

445 
	}
}

447 
memˇched_ªtu∫_t
 
	$memˇched_add
(
memˇched_°
 *
±r
,

448 c⁄° *
key
, 
size_t
 
key_Àngth
,

449 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

450 
time_t
 
expú©i⁄
,

451 
uöt32_t
 
Êags
)

453 
memˇched_ªtu∫_t
 
rc
;

454 
	`LIBMEMCACHED_MEMCACHED_ADD_START
();

455 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

456 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

457 
expú©i⁄
, 
Êags
, 0, 
ADD_OP
);

459 
	`LIBMEMCACHED_MEMCACHED_ADD_END
();

460  
rc
;

461 
	}
}

463 
memˇched_ªtu∫_t
 
	$memˇched_ª∂a˚
(
memˇched_°
 *
±r
,

464 c⁄° *
key
, 
size_t
 
key_Àngth
,

465 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

466 
time_t
 
expú©i⁄
,

467 
uöt32_t
 
Êags
)

469 
memˇched_ªtu∫_t
 
rc
;

470 
	`LIBMEMCACHED_MEMCACHED_REPLACE_START
();

471 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

472 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

473 
expú©i⁄
, 
Êags
, 0, 
REPLACE_OP
);

474 
	`LIBMEMCACHED_MEMCACHED_REPLACE_END
();

475  
rc
;

476 
	}
}

478 
memˇched_ªtu∫_t
 
	$memˇched_¥ïíd
(
memˇched_°
 *
±r
,

479 c⁄° *
key
, 
size_t
 
key_Àngth
,

480 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

481 
time_t
 
expú©i⁄
,

482 
uöt32_t
 
Êags
)

484 
memˇched_ªtu∫_t
 
rc
;

485 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

486 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

487 
expú©i⁄
, 
Êags
, 0, 
PREPEND_OP
);

488  
rc
;

489 
	}
}

491 
memˇched_ªtu∫_t
 
	$memˇched_≠≥nd
(
memˇched_°
 *
±r
,

492 c⁄° *
key
, 
size_t
 
key_Àngth
,

493 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

494 
time_t
 
expú©i⁄
,

495 
uöt32_t
 
Êags
)

497 
memˇched_ªtu∫_t
 
rc
;

498 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

499 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

500 
expú©i⁄
, 
Êags
, 0, 
APPEND_OP
);

501  
rc
;

502 
	}
}

504 
memˇched_ªtu∫_t
 
	$memˇched_ˇs
(
memˇched_°
 *
±r
,

505 c⁄° *
key
, 
size_t
 
key_Àngth
,

506 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

507 
time_t
 
expú©i⁄
,

508 
uöt32_t
 
Êags
,

509 
uöt64_t
 
ˇs
)

511 
memˇched_ªtu∫_t
 
rc
;

512 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

513 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

514 
expú©i⁄
, 
Êags
, 
ˇs
, 
CAS_OP
);

515  
rc
;

516 
	}
}

518 
memˇched_ªtu∫_t
 
	$memˇched_£t_by_key
(
memˇched_°
 *
±r
,

519 c⁄° *
group_key
,

520 
size_t
 
group_key_Àngth
,

521 c⁄° *
key
, 
size_t
 
key_Àngth
,

522 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

523 
time_t
 
expú©i⁄
,

524 
uöt32_t
 
Êags
)

526 
memˇched_ªtu∫_t
 
rc
;

527 
	`LIBMEMCACHED_MEMCACHED_SET_START
();

528 
rc

	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

529 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

530 
expú©i⁄
, 
Êags
, 0, 
SET_OP
);

531 
	`LIBMEMCACHED_MEMCACHED_SET_END
();

532  
rc
;

533 
	}
}

535 
memˇched_ªtu∫_t
 
	$memˇched_add_by_key
(
memˇched_°
 *
±r
,

536 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

537 c⁄° *
key
, 
size_t
 
key_Àngth
,

538 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

539 
time_t
 
expú©i⁄
,

540 
uöt32_t
 
Êags
)

542 
memˇched_ªtu∫_t
 
rc
;

543 
	`LIBMEMCACHED_MEMCACHED_ADD_START
();

544 
rc

	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

545 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

546 
expú©i⁄
, 
Êags
, 0, 
ADD_OP
);

547 
	`LIBMEMCACHED_MEMCACHED_ADD_END
();

548  
rc
;

549 
	}
}

551 
memˇched_ªtu∫_t
 
	$memˇched_ª∂a˚_by_key
(
memˇched_°
 *
±r
,

552 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

553 c⁄° *
key
, 
size_t
 
key_Àngth
,

554 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

555 
time_t
 
expú©i⁄
,

556 
uöt32_t
 
Êags
)

558 
memˇched_ªtu∫_t
 
rc
;

559 
	`LIBMEMCACHED_MEMCACHED_REPLACE_START
();

560 
rc

	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

561 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

562 
expú©i⁄
, 
Êags
, 0, 
REPLACE_OP
);

563 
	`LIBMEMCACHED_MEMCACHED_REPLACE_END
();

564  
rc
;

565 
	}
}

567 
memˇched_ªtu∫_t
 
	$memˇched_¥ïíd_by_key
(
memˇched_°
 *
±r
,

568 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

569 c⁄° *
key
, 
size_t
 
key_Àngth
,

570 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

571 
time_t
 
expú©i⁄
,

572 
uöt32_t
 
Êags
)

574  
	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

575 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

576 
expú©i⁄
, 
Êags
, 0, 
PREPEND_OP
);

577 
	}
}

579 
memˇched_ªtu∫_t
 
	$memˇched_≠≥nd_by_key
(
memˇched_°
 *
±r
,

580 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

581 c⁄° *
key
, 
size_t
 
key_Àngth
,

582 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

583 
time_t
 
expú©i⁄
,

584 
uöt32_t
 
Êags
)

586  
	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

587 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

588 
expú©i⁄
, 
Êags
, 0, 
APPEND_OP
);

589 
	}
}

591 
memˇched_ªtu∫_t
 
	$memˇched_ˇs_by_key
(
memˇched_°
 *
±r
,

592 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

593 c⁄° *
key
, 
size_t
 
key_Àngth
,

594 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

595 
time_t
 
expú©i⁄
,

596 
uöt32_t
 
Êags
,

597 
uöt64_t
 
ˇs
)

599  
	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

600 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

601 
expú©i⁄
, 
Êags
, 
ˇs
, 
CAS_OP
);

602 
	}
}

	@libmemcached/strerror.cc

38 
	~<libmemˇched/comm⁄.h
>

40 c⁄° *
	$memˇched_°ªº‹
(c⁄° 
memˇched_°
 *, 
memˇched_ªtu∫_t
 
rc
)

42 
rc
)

44 
MEMCACHED_SUCCESS
:

47 
MEMCACHED_FAILURE
:

50 
MEMCACHED_HOST_LOOKUP_FAILURE
:

53 
MEMCACHED_CONNECTION_FAILURE
:

56 
MEMCACHED_CONNECTION_BIND_FAILURE
:

59 
MEMCACHED_READ_FAILURE
:

62 
MEMCACHED_UNKNOWN_READ_FAILURE
:

65 
MEMCACHED_PROTOCOL_ERROR
:

68 
MEMCACHED_CLIENT_ERROR
:

71 
MEMCACHED_SERVER_ERROR
:

74 
MEMCACHED_WRITE_FAILURE
:

77 
MEMCACHED_ERROR
:

80 
MEMCACHED_DATA_EXISTS
:

83 
MEMCACHED_DATA_DOES_NOT_EXIST
:

86 
MEMCACHED_NOTSTORED
:

89 
MEMCACHED_STORED
:

92 
MEMCACHED_NOTFOUND
:

95 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
:

98 
MEMCACHED_PARTIAL_READ
:

101 
MEMCACHED_SOME_ERRORS
:

104 
MEMCACHED_NO_SERVERS
:

107 
MEMCACHED_END
:

110 
MEMCACHED_DELETED
:

113 
MEMCACHED_VALUE
:

116 
MEMCACHED_STAT
:

119 
MEMCACHED_ITEM
:

122 
MEMCACHED_ERRNO
:

125 
MEMCACHED_FAIL_UNIX_SOCKET
:

128 
MEMCACHED_NOT_SUPPORTED
:

131 
MEMCACHED_FETCH_NOTFINISHED
:

134 
MEMCACHED_NO_KEY_PROVIDED
:

137 
MEMCACHED_BUFFERED
:

140 
MEMCACHED_TIMEOUT
:

143 
MEMCACHED_BAD_KEY_PROVIDED
:

146 
MEMCACHED_INVALID_HOST_PROTOCOL
:

149 
MEMCACHED_SERVER_MARKED_DEAD
:

152 
MEMCACHED_UNKNOWN_STAT_KEY
:

155 
MEMCACHED_E2BIG
:

158 
MEMCACHED_INVALID_ARGUMENTS
:

161 
MEMCACHED_KEY_TOO_BIG
:

164 
MEMCACHED_AUTH_PROBLEM
:

167 
MEMCACHED_AUTH_FAILURE
:

170 
MEMCACHED_AUTH_CONTINUE
:

173 
MEMCACHED_PARSE_ERROR
:

176 
MEMCACHED_PARSE_USER_ERROR
:

179 
MEMCACHED_DEPRECATED
:

182 
MEMCACHED_IN_PROGRESS
:

185 
MEMCACHED_SERVER_TEMPORARILY_DISABLED
:

188 
MEMCACHED_SERVER_MEMORY_ALLOCATION_FAILURE
:

192 
MEMCACHED_MAXIMUM_RETURN
:

195 
	}
}

	@libmemcached/string.cc

39 
	~<libmemˇched/comm⁄.h
>

41 
ölöe
 
memˇched_ªtu∫_t
 
	$_°rög_check
(
memˇched_°rög_°
 *
°rög
, 
size_t
 
√ed
)

43 i‡(
√ed
 &&Çìd > (
size_t
)(
°rög
->
cuºít_size
 - (size_t)(°rög->
íd
 - string->string)))

45 
size_t
 
cuºít_off£t
(size_tË(
°rög
->
íd
 - string->string);

48 
size_t
 
adju°
(
√ed
 - (size_t)(
°rög
->
cuºít_size
 - (size_t)(°rög->
íd
 - såög->°rög))Ë/ 
MEMCACHED_BLOCK_SIZE
;

49 
adju°
++;

51 
size_t
 
√w_size
(Ë* (size_t)((
adju°
 * 
MEMCACHED_BLOCK_SIZE
Ë+ 
°rög
->
cuºít_size
);

53 i‡(
√w_size
 < 
√ed
)

55 
îr‹_mesßge
[1024];

56 
îr‹_mesßge_Àngth

	`¢¥ötf
(
îr‹_mesßge
, ”º‹_mesßge),"Nìded %ld, gŸ %ld", ()
√ed
, ()
√w_size
);

57  
	`memˇched_£t_îr‹
(*
°rög
->
roŸ
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
, 
îr‹_mesßge
, 
îr‹_mesßge_Àngth
);

60 *
√w_vÆue

	`libmemˇched_xªÆloc
(
°rög
->
roŸ
, såög->°rög, 
√w_size
, );

62 i‡(
√w_vÆue
 =
NULL
)

64  
	`memˇched_£t_îr‹
(*
°rög
->
roŸ
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
);

67 
°rög
->°rög
√w_vÆue
;

68 
°rög
->
íd
°rög->°rög + 
cuºít_off£t
;

70 
°rög
->
cuºít_size
+(
MEMCACHED_BLOCK_SIZE
 * 
adju°
);

73  
MEMCACHED_SUCCESS
;

74 
	}
}

76 
ölöe
 
	$_öô_°rög
(
memˇched_°rög_°
 *
£lf
)

78 
£lf
->
cuºít_size
= 0;

79 
£lf
->
íd
£lf->
°rög

NULL
;

80 
	}
}

82 
memˇched_°rög_°
 *
	$memˇched_°rög_¸óã
(
Memˇched
 *
memc
, 
memˇched_°rög_°
 *
£lf
, 
size_t
 
öôül_size
)

84 
	`WATCHPOINT_ASSERT
(
memc
);

87 i‡(
£lf
)

89 
	`WATCHPOINT_ASSERT
(
£lf
->
›ti⁄s
.
is_öôülized
 =
Ál£
);

91 
	`memˇched_£t_Æloˇãd
(
£lf
, 
Ál£
);

95 
£lf

	`libmemˇched_xmÆloc
(
memc
, 
memˇched_°rög_°
);

97 i‡(
£lf
 =
NULL
)

99  
NULL
;

102 
	`memˇched_£t_Æloˇãd
(
£lf
, 
åue
);

104 
£lf
->
roŸ

memc
;

106 
	`_öô_°rög
(
£lf
);

108 i‡(
	`memˇched_Áûed
(
	`_°rög_check
(
£lf
, 
öôül_size
)))

110 i‡(
	`memˇched_is_Æloˇãd
(
£lf
))

112 
	`libmemˇched_‰ì
(
memc
, 
£lf
);

115  
NULL
;

118 
	`memˇched_£t_öôülized
(
£lf
, 
åue
);

120 
	`WATCHPOINT_ASSERT
(
£lf
->
°rög
 =£lf->
íd
);

122  
£lf
;

123 
	}
}

125 
memˇched_ªtu∫_t
 
	$memˇched_°rög_≠≥nd_nuŒ
(
memˇched_°rög_°
& 
°rög
)

127 i‡(
	`memˇched_Áûed
(
	`_°rög_check
(&
°rög
, 1)))

129  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

132 *
°rög
.
íd
= 0;

134  
MEMCACHED_SUCCESS
;

135 
	}
}

137 
memˇched_ªtu∫_t
 
	$memˇched_°rög_≠≥nd_nuŒ
(
memˇched_°rög_°
 *
°rög
)

139 i‡(
	`memˇched_Áûed
(
	`_°rög_check
(
°rög
, 1)))

141  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

144 *
°rög
->
íd
= 0;

146  
MEMCACHED_SUCCESS
;

147 
	}
}

149 
memˇched_ªtu∫_t
 
	$memˇched_°rög_≠≥nd_ch¨a˘î
(
memˇched_°rög_°
 *
°rög
,

150 
ch¨a˘î
)

152 i‡(
	`memˇched_Áûed
(
	`_°rög_check
(
°rög
, 1)))

154  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

157 *
°rög
->
íd

ch¨a˘î
;

158 
°rög
->
íd
++;

160  
MEMCACHED_SUCCESS
;

161 
	}
}

163 
memˇched_ªtu∫_t
 
	$memˇched_°rög_≠≥nd
(
memˇched_°rög_°
 *
°rög
,

164 c⁄° *
vÆue
, 
size_t
 
Àngth
)

166 i‡(
	`memˇched_Áûed
(
	`_°rög_check
(
°rög
, 
Àngth
)))

168  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

171 
	`WATCHPOINT_ASSERT
(
Àngth
 <
°rög
->
cuºít_size
);

172 
	`WATCHPOINT_ASSERT
(
°rög
->string);

173 
	`WATCHPOINT_ASSERT
(
°rög
->
íd
 >= string->string);

175 
	`mem˝y
(
°rög
->
íd
, 
vÆue
, 
Àngth
);

176 
°rög
->
íd
+
Àngth
;

178  
MEMCACHED_SUCCESS
;

179 
	}
}

181 *
	$memˇched_°rög_c_c›y
(
memˇched_°rög_°
 *
°rög
)

183 i‡(
	`memˇched_°rög_Àngth
(
°rög
) == 0)

185  
NULL
;

188 *
c_±r

°©ic_ˇ°
<*>(
	`libmemˇched_mÆloc
(
°rög
->
roŸ
, (
	`memˇched_°rög_Àngth
(string)+1) * ()));

190 i‡(
c_±r
 =
NULL
)

192  
NULL
;

195 
	`mem˝y
(
c_±r
, 
	`memˇched_°rög_vÆue
(
°rög
), 
	`memˇched_°rög_Àngth
(string));

196 
c_±r
[
	`memˇched_°rög_Àngth
(
°rög
)]= 0;

198  
c_±r
;

199 
	}
}

201 
boﬁ
 
	$memˇched_°rög_£t
(
memˇched_°rög_°
& 
°rög
, c⁄° * 
vÆue
, 
size_t
 
Àngth
)

203 
	`memˇched_°rög_ª£t
(&
°rög
);

204 i‡(
	`memˇched_suc˚ss
(
	`memˇched_°rög_≠≥nd
(&
°rög
, 
vÆue
, 
Àngth
)))

206 
	`memˇched_°rög_≠≥nd_nuŒ
(
°rög
);

207  
åue
;

210  
Ál£
;

211 
	}
}

213 
	$memˇched_°rög_ª£t
(
memˇched_°rög_°
 *
°rög
)

215 
°rög
->
íd
= string->string;

216 
	}
}

218 
	$memˇched_°rög_‰ì
(
memˇched_°rög_°
& 
±r
)

220 
	`memˇched_°rög_‰ì
(&
±r
);

221 
	}
}

223 
	$memˇched_°rög_‰ì
(
memˇched_°rög_°
 *
±r
)

225 i‡(
±r
 =
NULL
)

230 i‡(
±r
->
°rög
)

232 
	`libmemˇched_‰ì
(
±r
->
roŸ
,Öå->
°rög
);

235 i‡(
	`memˇched_is_Æloˇãd
(
±r
))

237 
	`libmemˇched_‰ì
(
±r
->
roŸ
,Ötr);

241 
±r
->
›ti⁄s
.
is_öôülized

Ál£
;

243 
	}
}

245 
memˇched_ªtu∫_t
 
	$memˇched_°rög_check
(
memˇched_°rög_°
 *
°rög
, 
size_t
 
√ed
)

247  
	`_°rög_check
(
°rög
, 
√ed
);

248 
	}
}

250 
boﬁ
 
	$memˇched_°rög_ªsize
(
memˇched_°rög_°
& 
°rög
, c⁄° 
size_t
 
√ed
)

252  
	`memˇched_suc˚ss
(
	`_°rög_check
(&
°rög
, 
√ed
));

253 
	}
}

255 
size_t
 
	$memˇched_°rög_Àngth
(c⁄° 
memˇched_°rög_°
 *
£lf
)

257  
	`size_t
(
£lf
->
íd
 -£lf->
°rög
);

258 
	}
}

260 
size_t
 
	$memˇched_°rög_Àngth
(c⁄° 
memˇched_°rög_°
& 
£lf
)

262  
	`size_t
(
£lf
.
íd
 -£lf.
°rög
);

263 
	}
}

265 
size_t
 
	$memˇched_°rög_size
(c⁄° 
memˇched_°rög_°
 *
£lf
)

267  
£lf
->
cuºít_size
;

268 
	}
}

270 c⁄° *
	$memˇched_°rög_vÆue
(c⁄° 
memˇched_°rög_°
 *
£lf
)

272  
£lf
->
°rög
;

273 
	}
}

275 c⁄° *
	$memˇched_°rög_vÆue
(c⁄° 
memˇched_°rög_°
& 
£lf
)

277  
£lf
.
°rög
;

278 
	}
}

280 *
	$memˇched_°rög_èke_vÆue
(
memˇched_°rög_°
 *
£lf
)

282 * 
vÆue

NULL
;

284 i‡(
	`memˇched_°rög_Àngth
(
£lf
))

286 
	`as£π_msg
(
£lf
, "Invalid memcached_string_st");

288 i‡(
	`memˇched_suc˚ss
(
	`memˇched_°rög_≠≥nd_nuŒ
(
£lf
)))

290  
	`memˇched_°rög_c_c›y
(
£lf
);

293 
vÆue

£lf
->
°rög
;

295 
	`_öô_°rög
(
£lf
);

298  
vÆue
;

299 
	}
}

301 *
	$memˇched_°rög_vÆue_muèbÀ
(c⁄° 
memˇched_°rög_°
 *
£lf
)

303  
£lf
->
°rög
;

304 
	}
}

306 *
	$memˇched_°rög_c_°r
(
memˇched_°rög_°
& 
£lf
)

308  
£lf
.
°rög
;

309 
	}
}

311 
	$memˇched_°rög_£t_Àngth
(
memˇched_°rög_°
 *
£lf
, 
size_t
 
Àngth
)

313 
£lf
->
íd
£lf->
°rög
 +
Àngth
;

314 
	}
}

316 
	$memˇched_°rög_£t_Àngth
(
memˇched_°rög_°
& 
£lf
, c⁄° 
size_t
 
Àngth
)

318 
	`as£π
(
£lf
.
cuºít_size
 >
Àngth
);

319 
size_t
 
£t_Àngth

Àngth
;

320 i‡(
£lf
.
cuºít_size
 > 
Àngth
)

322 i‡(
	`memˇched_Áûed
(
	`_°rög_check
(&
£lf
, 
Àngth
)))

324 
£t_Àngth

£lf
.
cuºít_size
;

327 
£lf
.
íd
£lf.
°rög
 +
£t_Àngth
;

328 
	}
}

	@libmemcached/string.hpp

38 #¥agm®
⁄˚


40 
	~"utû/°rög.hµ
"

42 
	#memˇched_lôîÆ_∑øm
 
utû_lôîÆ_∑øm


	)

43 
	#memˇched_lôîÆ_∑øm_size
 
utû_lôîÆ_∑øm_size


	)

44 
	#memˇched_°rög_make_‰om_c°r
 
utû_°rög_make_‰om_c°r


	)

45 
	#memˇched_¨øy_Àngth
 
utû_¨øy_Àngth


	)

57 
memˇched_°rög_°
 *
memˇched_°rög_¸óã
(
memˇched_°
 *
±r
,

58 
memˇched_°rög_°
 *
°rög
,

59 
size_t
 
öôül_size
);

61 
memˇched_ªtu∫_t
 
memˇched_°rög_check
(
memˇched_°rög_°
 *
°rög
, 
size_t
 
√ed
);

63 *
memˇched_°rög_c_c›y
(
memˇched_°rög_°
 *
°rög
);

65 
memˇched_ªtu∫_t
 
memˇched_°rög_≠≥nd_ch¨a˘î
(
memˇched_°rög_°
 *
°rög
,

66 
ch¨a˘î
);

68 
memˇched_ªtu∫_t
 
memˇched_°rög_≠≥nd
(
memˇched_°rög_°
 *
°rög
,

69 c⁄° *
vÆue
, 
size_t
 
Àngth
);

71 
memˇched_°rög_ª£t
(
memˇched_°rög_°
 *
°rög
);

73 
memˇched_°rög_‰ì
(
memˇched_°rög_°
 *
°rög
);

74 
memˇched_°rög_‰ì
(
memˇched_°rög_°
&);

76 
size_t
 
memˇched_°rög_Àngth
(c⁄° 
memˇched_°rög_°
 *
£lf
);

77 
size_t
 
memˇched_°rög_Àngth
(c⁄° 
memˇched_°rög_°
&);

79 
size_t
 
memˇched_°rög_size
(c⁄° 
memˇched_°rög_°
 *
£lf
);

81 c⁄° *
memˇched_°rög_vÆue
(c⁄° 
memˇched_°rög_°
 *
£lf
);

82 c⁄° *
memˇched_°rög_vÆue
(c⁄° 
memˇched_°rög_°
&);

84 *
memˇched_°rög_èke_vÆue
(
memˇched_°rög_°
 *
£lf
);

86 *
memˇched_°rög_vÆue_muèbÀ
(c⁄° 
memˇched_°rög_°
 *
£lf
);

88 
boﬁ
 
memˇched_°rög_£t
(
memˇched_°rög_°
&, c⁄° *, 
size_t
);

90 
memˇched_°rög_£t_Àngth
(
memˇched_°rög_°
 *
£lf
, 
size_t
 
Àngth
);

91 
memˇched_°rög_£t_Àngth
(
memˇched_°rög_°
&, c⁄° 
size_t
 
Àngth
);

93 
boﬁ
 
memˇched_°rög_ªsize
(
memˇched_°rög_°
&, c⁄° 
size_t
);

94 *
memˇched_°rög_c_°r
(
memˇched_°rög_°
&);

	@libmemcached/touch.cc

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
>

41 
memˇched_ªtu∫_t
 
	$ascii_touch
(
memˇched_ö°™˚_°
* 
ö°™˚
,

42 c⁄° *
key
, 
size_t
 
key_Àngth
,

43 
time_t
 
expú©i⁄
)

45 
expú©i⁄_buf„r
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

46 
expú©i⁄_buf„r_Àngth

	`¢¥ötf
(
expú©i⁄_buf„r
, ”xpú©i⁄_buf„r), " %Œu", ()
expú©i⁄
);

47 i‡(
	`size_t
(
expú©i⁄_buf„r_Àngth
Ë>(
expú©i⁄_buf„r
Ë
‹
Éxpiration_buffer_length < 0)

49  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

50 
	`memˇched_lôîÆ_∑øm
("snprintf(MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH)"));

53 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

55 { 
NULL
, 0 },

56 { 
	`memˇched_lôîÆ_∑øm
("touch ") },

57 { 
	`memˇched_¨øy_°rög
(
ö°™˚
->
roŸ
->
_«me•a˚
), 
	`memˇched_¨øy_size
(instance->root->_namespace) },

58 { 
key
, 
key_Àngth
 },

59 { 
expú©i⁄_buf„r
, 
	`size_t
(
expú©i⁄_buf„r_Àngth
) },

60 { 
	`memˇched_lôîÆ_∑øm
("\r\n") }

63 
memˇched_ªtu∫_t
 
rc
;

64 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 6, 
åue
)))

66 
	`memˇched_io_ª£t
(
ö°™˚
);

67  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_WRITE_FAILURE
, 
MEMCACHED_AT
);

70  
rc
;

71 
	}
}

73 
memˇched_ªtu∫_t
 
	$bö¨y_touch
(
memˇched_ö°™˚_°
* 
ö°™˚
,

74 c⁄° *
key
, 
size_t
 
key_Àngth
,

75 
time_t
 
expú©i⁄
)

77 
¥Ÿocﬁ_bö¨y_ªque°_touch
 
ªque°
= {};

79 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

81 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_TOUCH
;

82 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
= 4;

83 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
 +
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
)));

84 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

85 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
)(
key_Àngth
 +
	`memˇched_¨øy_size
(
ö°™˚
->
roŸ
->
_«me•a˚
Ë+ªque°.mesßge.hódî.ªque°.
exéí
));

86 
ªque°
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
((
uöt32_t
)Éxpiration);

88 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

90 { 
NULL
, 0 },

91 { 
ªque°
.
byãs
, (request.bytes) },

92 { 
	`memˇched_¨øy_°rög
(
ö°™˚
->
roŸ
->
_«me•a˚
), 
	`memˇched_¨øy_size
(instance->root->_namespace) },

93 { 
key
, 
key_Àngth
 }

96 
memˇched_ªtu∫_t
 
rc
;

97 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 4, 
åue
)))

99 
	`memˇched_io_ª£t
(
ö°™˚
);

100  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
MEMCACHED_WRITE_FAILURE
, 
MEMCACHED_AT
);

103  
rc
;

104 
	}
}

106 
memˇched_ªtu∫_t
 
	$memˇched_touch
(
memˇched_°
 *
±r
,

107 c⁄° *
key
, 
size_t
 
key_Àngth
,

108 
time_t
 
expú©i⁄
)

110  
	`memˇched_touch_by_key
(
±r
, 
key
, 
key_Àngth
, key, key_Àngth, 
expú©i⁄
);

111 
	}
}

113 
memˇched_ªtu∫_t
 
	$memˇched_touch_by_key
(
memˇched_°
 *
shñl
,

114 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

115 c⁄° *
key
, 
size_t
 
key_Àngth
,

116 
time_t
 
expú©i⁄
)

118 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

119 
	`LIBMEMCACHED_MEMCACHED_TOUCH_START
();

121 
memˇched_ªtu∫_t
 
rc
;

122 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
±r
, 
åue
)))

124  
rc
;

127 i‡(
	`memˇched_Áûed
(
rc

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
, 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)))

129  
rc
;

132 
uöt32_t
 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
group_key
, 
group_key_Àngth
);

133 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
±r
, 
£rvî_key
);

135 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

137 
rc

	`bö¨y_touch
(
ö°™˚
, 
key
, 
key_Àngth
, 
expú©i⁄
);

141 
rc

	`ascii_touch
(
ö°™˚
, 
key
, 
key_Àngth
, 
expú©i⁄
);

144 i‡(
	`memˇched_Áûed
(
rc
))

146  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
rc
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Error occcured while writingÅouch commandÅo server"));

149 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

150 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
NULL
);

152 i‡(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_NOTFOUND
)

154  
rc
;

157  
	`memˇched_£t_îr‹
(*
ö°™˚
, 
rc
, 
MEMCACHED_AT
, 
	`memˇched_lôîÆ_∑øm
("Error occcured whileÑeadingÑesponse"));

158 
	}
}

	@libmemcached/udp.cc

38 
	~<libmemˇched/comm⁄.h
>

51 
	$ö¸emít_udp_mesßge_id
(
memˇched_ö°™˚_°
* 
±r
)

53 
udp_d©agøm_hódî_°
 *
hódî
(udp_d©agøm_hódî_° *)
±r
->
wrôe_buf„r
;

54 
uöt16_t
 
cur_ªq

	`gë_udp_d©agøm_ªque°_id
(
hódî
);

55 
msg_num

	`gë_msg_num_‰om_ªque°_id
(
cur_ªq
);

56 
thªad_id

	`gë_thªad_id_‰om_ªque°_id
(
cur_ªq
);

58 i‡(((++
msg_num
Ë& 
UDP_REQUEST_ID_THREAD_MASK
) != 0)

59 
msg_num
= 0;

61 
hódî
->
ªque°_id

	`ht⁄s
((
uöt16_t
Ë(
thªad_id
 | 
msg_num
));

62 
	}
}

64 
boﬁ
 
	$memˇched_io_öô_udp_hódî
(
memˇched_ö°™˚_°
* 
±r
, c⁄° 
uöt16_t
 
thªad_id
)

66 i‡(
thªad_id
 > 
UDP_REQUEST_ID_MAX_THREAD_ID
)

68  
MEMCACHED_FAILURE
;

71 
udp_d©agøm_hódî_°
 *
hódî
(udp_d©agøm_hódî_° *)
±r
->
wrôe_buf„r
;

72 
hódî
->
ªque°_id

	`ht⁄s
(
	`uöt16_t
((
	`gíî©e_udp_ªque°_thªad_id
(
thªad_id
))));

73 
hódî
->
num_d©agøms

	`ht⁄s
(1);

74 
hódî
->
£quí˚_numbî

	`ht⁄s
(0);

76  
MEMCACHED_SUCCESS
;

77 
	}
}

	@libmemcached/udp.hpp

38 
	#MAX_UDP_DATAGRAM_LENGTH
 1400

	)

39 
	#UDP_DATAGRAM_HEADER_LENGTH
 8

	)

40 
	#UDP_REQUEST_ID_MSG_SIG_DIGITS
 10

	)

41 
	#UDP_REQUEST_ID_THREAD_MASK
 0xFFFF << 
UDP_REQUEST_ID_MSG_SIG_DIGITS


	)

42 
	#gë_udp_d©agøm_ªque°_id
(
A
Ë
	`¡ohs
((A)->
ªque°_id
)

	)

43 
	#gë_udp_d©agøm_£q_num
(
A
Ë
	`¡ohs
((A)->
£quí˚_numbî
)

	)

44 
	#gë_udp_d©agøm_num_d©agøms
(
A
Ë
	`¡ohs
((A)->
num_d©agøms
)

	)

45 
	#gë_msg_num_‰om_ªque°_id
(
A
Ë–(AË& (~(
UDP_REQUEST_ID_THREAD_MASK
)Ë)

	)

46 
	#gë_thªad_id_‰om_ªque°_id
(
A
Ë–(AË& (
UDP_REQUEST_ID_THREAD_MASK
ËË>> 
UDP_REQUEST_ID_MSG_SIG_DIGITS


	)

47 
	#gíî©e_udp_ªque°_thªad_id
(
A
Ë(AË<< 
UDP_REQUEST_ID_MSG_SIG_DIGITS


	)

48 
	#UDP_REQUEST_ID_MAX_THREAD_ID
 
	`gë_thªad_id_‰om_ªque°_id
(0xFFFF)

	)

50 
	sudp_d©agøm_hódî_°


52 
uöt16_t
 
	mªque°_id
;

53 
uöt16_t
 
	m£quí˚_numbî
;

54 
uöt16_t
 
	mnum_d©agøms
;

55 
uöt16_t
 
	mª£rved
;

58 
boﬁ
 
memˇched_io_öô_udp_hódî
(
memˇched_ö°™˚_°
*, c⁄° 
uöt16_t
 
thªad_id
);

59 
ö¸emít_udp_mesßge_id
(
memˇched_ö°™˚_°
*);

	@libmemcached/util.h

37 #¥agm®
⁄˚


39 
	~<libmemˇchedutû-1.0/utû.h
>

	@libmemcached/verbosity.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
	sc⁄ãxt_°


42 
size_t
 
	mÀngth
;

43 c⁄° *
	mbuf„r
;

46 
memˇched_ªtu∫_t
 
	$_£t_vîbosôy
(c⁄° 
Memˇched
 *,

47 c⁄° 
memˇched_ö°™˚_°
 * 
£rvî
,

48 *
c⁄ãxt
)

50 
libmemˇched_io_ve˘‹_°
 *
ve˘‹
÷ibmemˇched_io_ve˘‹_° *)
c⁄ãxt
;

52 
Memˇched
 
loˇl_memc
;

53 
Memˇched
 *
memc_±r

	`memˇched_¸óã
(&
loˇl_memc
);

55 
memˇched_ªtu∫_t
 
rc

	`memˇched_£rvî_add
(
memc_±r
, 
	`memˇched_£rvî_«me
(
£rvî
), 
	`memˇched_£rvî_p‹t
(server));

57 i‡(
rc
 =
MEMCACHED_SUCCESS
)

59 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc_±r
, 0);

62 
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 4, 
åue
);

64 i‡(
rc
 =
MEMCACHED_SUCCESS
)

66 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

67 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
NULL
);

71 
	`memˇched_‰ì
(
memc_±r
);

73  
rc
;

74 
	}
}

76 
memˇched_ªtu∫_t
 
	$memˇched_vîbosôy
(
memˇched_°
 *
shñl
, 
uöt32_t
 
vîbosôy
)

78 
Memˇched
* 
±r

	`memˇched2Memˇched
(
shñl
);

79 
memˇched_ªtu∫_t
 
rc
;

80 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
±r
, 
Ál£
)))

82  
rc
;

85 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

87 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

89 
£nd_Àngth

	`¢¥ötf
(
buf„r
, (buf„r), "%u", 
vîbosôy
);

90 i‡(
£nd_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
 
‹
 send_length < 0)

92  
	`memˇched_£t_îr‹
(*
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
MEMCACHED_AT
,

93 
	`memˇched_lôîÆ_∑øm
("snprintf(MEMCACHED_DEFAULT_COMMAND_SIZE)"));

96 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

98 { 
NULL
, 0 },

99 { 
	`memˇched_lôîÆ_∑øm
("verbosity ") },

100 { 
buf„r
, 
	`size_t
(
£nd_Àngth
) },

101 { 
	`memˇched_lôîÆ_∑øm
("\r\n") }

104 
ˇŒbacks
[0]
_£t_vîbosôy
;

106  
	`memˇched_£rvî_curs‹
(
±r
, 
ˇŒbacks
, 
ve˘‹
, 1);

107 
	}
}

	@libmemcached/version.cc

37 
	~<libmemˇched/comm⁄.h
>

39 c⁄° * 
	$memˇched_lib_vîsi⁄
()

41  
LIBMEMCACHED_VERSION_STRING
;

42 
	}
}

44 
ölöe
 
memˇched_ªtu∫_t
 
	$memˇched_vîsi⁄_ãxtuÆ
(
Memˇched
 *
memc
)

46 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

48 { 
	`memˇched_lôîÆ_∑øm
("version\r\n") },

51 
uöt32_t
 
suc˚ss
= 0;

52 
boﬁ
 
îr‹s_h≠≥√d

Ál£
;

53 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

55 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
x
);

58 i‡(
ö°™˚
->
maj‹_vîsi⁄
 !
UINT8_MAX
)

63 
memˇched_ªtu∫_t
 
ºc
;

64 i‡(
	`memˇched_Áûed
(
ºc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 1, 
åue
)))

66 
îr‹s_h≠≥√d

åue
;

67 ()
	`memˇched_£t_îr‹
(*
ö°™˚
, 
ºc
, 
MEMCACHED_AT
);

70 
suc˚ss
++;

73 i‡(
suc˚ss
)

76 
memˇched_ö°™˚_°
* 
ö°™˚
;

77 
memˇched_ªtu∫_t
 
ªadabÀ_îr‹
;

78 (
ö°™˚

	`memˇched_io_gë_ªadabÀ_£rvî
(
memc
, 
ªadabÀ_îr‹
)))

80 
memˇched_ªtu∫_t
 
ºc

	`memˇched_ª•⁄£
(
ö°™˚
, 
NULL
);

81 i‡(
	`memˇched_Áûed
(
ºc
))

83 
	`memˇched_io_ª£t
(
ö°™˚
);

84 
îr‹s_h≠≥√d

åue
;

89  
îr‹s_h≠≥√d
 ? 
MEMCACHED_SOME_ERRORS
 : 
MEMCACHED_SUCCESS
;

90 
	}
}

92 
ölöe
 
memˇched_ªtu∫_t
 
	$memˇched_vîsi⁄_bö¨y
(
Memˇched
 *
memc
)

94 
¥Ÿocﬁ_bö¨y_ªque°_vîsi⁄
 
ªque°
= {};

96 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_VERSION
;

97 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

99 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

101 { 
ªque°
.
byãs
, (request.bytes) }

104 
uöt32_t
 
suc˚ss
= 0;

105 
boﬁ
 
îr‹s_h≠≥√d

Ál£
;

106 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

108 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_ö°™˚_„tch
(
memc
, 
x
);

110 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

112 i‡(
ö°™˚
->
maj‹_vîsi⁄
 !
UINT8_MAX
)

117 
memˇched_ªtu∫_t
 
ºc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 1, 
åue
);

118 i‡(
	`memˇched_Áûed
(
ºc
))

120 
	`memˇched_io_ª£t
(
ö°™˚
);

121 
îr‹s_h≠≥√d

åue
;

125 
suc˚ss
++;

128 i‡(
suc˚ss
)

131 
memˇched_ö°™˚_°
* 
ö°™˚
;

132 
memˇched_ªtu∫_t
 
ªadabÀ_îr‹
;

133 (
ö°™˚

	`memˇched_io_gë_ªadabÀ_£rvî
(
memc
, 
ªadabÀ_îr‹
)))

135 
buf„r
[32];

136 
memˇched_ªtu∫_t
 
ºc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
NULL
);

137 i‡(
	`memˇched_Áûed
(
ºc
))

139 
	`memˇched_io_ª£t
(
ö°™˚
);

140 
îr‹s_h≠≥√d

åue
;

145  
îr‹s_h≠≥√d
 ? 
MEMCACHED_SOME_ERRORS
 : 
MEMCACHED_SUCCESS
;

146 
	}
}

148 
ölöe
 
	$vîsi⁄_ascii_ö°™˚
(
memˇched_ö°™˚_°
* 
ö°™˚
)

150 i‡(
ö°™˚
->
maj‹_vîsi⁄
 !
UINT8_MAX
)

152 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

154 { 
	`memˇched_lôîÆ_∑øm
("version\r\n") },

157 ()
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 1, 
Ál£
);

159 
	}
}

161 
ölöe
 
	$vîsi⁄_bö¨y_ö°™˚
(
memˇched_ö°™˚_°
* 
ö°™˚
)

163 i‡(
ö°™˚
->
maj‹_vîsi⁄
 !
UINT8_MAX
)

165 
¥Ÿocﬁ_bö¨y_ªque°_vîsi⁄
 
ªque°
= {};

167 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_VERSION
;

168 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

170 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

172 { 
ªque°
.
byãs
, (request.bytes) }

175 
	`öôülize_bö¨y_ªque°
(
ö°™˚
, 
ªque°
.
mesßge
.
hódî
);

177 ()
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 1, 
Ál£
);

179 
	}
}

181 
	$memˇched_vîsi⁄_ö°™˚
(
memˇched_ö°™˚_°
* 
ö°™˚
)

183 i‡(
ö°™˚
)

185 i‡(
	`memˇched_has_roŸ
(
ö°™˚
))

187 i‡(
	`memˇched_is_„tchög_vîsi⁄
(
ö°™˚
->
roŸ
))

189 i‡(
	`memˇched_is_udp
(
ö°™˚
->
roŸ
Ë=
Ál£
)

192 i‡(
	`memˇched_is_bö¨y
(
ö°™˚
->
roŸ
))

194 
	`vîsi⁄_bö¨y_ö°™˚
(
ö°™˚
);

198 
	`vîsi⁄_ascii_ö°™˚
(
ö°™˚
);

203 
	}
}

205 
memˇched_ªtu∫_t
 
	$memˇched_vîsi⁄
(
memˇched_°
 *
shñl
)

207 
Memˇched
* 
memc

	`memˇched2Memˇched
(
shñl
);

208 i‡(
memc
)

210 
memˇched_ªtu∫_t
 
rc
;

211 i‡(
	`memˇched_Áûed
(
rc

	`öôülize_quîy
(
memc
, 
åue
)))

213  
rc
;

216 i‡(
	`memˇched_is_udp
(
memc
))

218  
MEMCACHED_NOT_SUPPORTED
;

221 i‡(
	`memˇched_is_bö¨y
(
memc
))

223  
	`memˇched_vîsi⁄_bö¨y
(
memc
);

226  
	`memˇched_vîsi⁄_ãxtuÆ
(
memc
);

229  
MEMCACHED_INVALID_ARGUMENTS
;

230 
	}
}

	@libmemcached/version.hpp

42 #¥agm®
⁄˚


44 
memˇched_vîsi⁄_ö°™˚
(
memˇched_ö°™˚_°
*);

	@libmemcached/virtual_bucket.c

38 
	~<libmemˇched/comm⁄.h
>

40 
	sbuckë_t
 {

41 
uöt32_t
 
	mma°î
;

42 
uöt32_t
 
	mf‹w¨d
;

45 
	smemˇched_vútuÆ_buckë_t
 {

46 
boﬁ
 
	mhas_f‹w¨d
;

47 
uöt32_t
 
	msize
;

48 
uöt32_t
 
	mª∂iˇs
;

49 
buckë_t
 
	mbuckës
[];

52 
memˇched_ªtu∫_t
 
	$memˇched_vútuÆ_buckë_¸óã
(
memˇched_°
 *
£lf
,

53 c⁄° 
uöt32_t
 *
ho°_m≠
,

54 c⁄° 
uöt32_t
 *
f‹w¨d_m≠
,

55 c⁄° 
uöt32_t
 
buckës
,

56 c⁄° 
uöt32_t
 
ª∂iˇs
)

58 i‡(
£lf
 =
NULL
 || 
ho°_m≠
 =NULL || 
buckës
 == 0U)

60  
MEMCACHED_INVALID_ARGUMENTS
;

63 
	`memˇched_vútuÆ_buckë_‰ì
(
£lf
);

65 
memˇched_vútuÆ_buckë_t
 *
vútuÆ_buckë
(memˇched_vútuÆ_buckë_à*)
	`mÆloc
((memˇched_vútuÆ_buckë_tË+ (
buckë_t
Ë*
buckës
);

67 i‡(
vútuÆ_buckë
 =
NULL
)

69  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

73 
vútuÆ_buckë
->
size

buckës
;

74 
vútuÆ_buckë
->
ª∂iˇs
=Ñeplicas;

75 
£lf
->
vútuÆ_buckë
= virtual_bucket;

77 
uöt32_t
 
x
= 0;

78 ; 
x
 < 
buckës
; x++)

80 
vútuÆ_buckë
->
buckës
[
x
].
ma°î

ho°_m≠
[x];

81 i‡(
f‹w¨d_m≠
)

83 
vútuÆ_buckë
->
buckës
[
x
].
f‹w¨d

f‹w¨d_m≠
[x];

87 
vútuÆ_buckë
->
buckës
[
x
].
f‹w¨d
= 0;

91  
MEMCACHED_SUCCESS
;

92 
	}
}

94 
	$memˇched_vútuÆ_buckë_‰ì
(
memˇched_°
 *
£lf
)

96 i‡(
£lf
)

98 i‡(
£lf
->
vútuÆ_buckë
)

100 
	`‰ì
(
£lf
->
vútuÆ_buckë
);

101 
£lf
->
vútuÆ_buckë

NULL
;

104 
	}
}

106 
uöt32_t
 
	$memˇched_vútuÆ_buckë_gë
(c⁄° 
memˇched_°
 *
£lf
, 
uöt32_t
 
dige°
)

108 i‡(
£lf
)

110 i‡(
£lf
->
vútuÆ_buckë
)

112 i‡(
£lf
->
vútuÆ_buckë
)

114 
uöt32_t
 
ªsu…
(uöt32_tË(
dige°
 & (
£lf
->
vútuÆ_buckë
->
size
 -1));

115  
£lf
->
vútuÆ_buckë
->
buckës
[
ªsu…
].
ma°î
;

118  (
uöt32_t
Ë(
dige°
 & (
£lf
->
numbî_of_ho°s
 -1));

123 
	}
}

	@libmemcached/virtual_bucket.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
memˇched_ªtu∫_t
 
memˇched_vútuÆ_buckë_¸óã
(
memˇched_°
 *
£lf
,

45 c⁄° 
uöt32_t
 *
ho°_m≠
,

46 c⁄° 
uöt32_t
 *
f‹w¨d_m≠
,

47 c⁄° 
uöt32_t
 
buckës
,

48 c⁄° 
uöt32_t
 
ª∂iˇs
);

50 
uöt32_t
 
memˇched_vútuÆ_buckë_gë
(c⁄° 
memˇched_°
 *
£lf
, uöt32_à
dige°
);

52 
memˇched_vútuÆ_buckë_‰ì
(
memˇched_°
 *
£lf
);

54 #ifde‡
__˝lu•lus


	@libmemcached/watchpoint.h

38 #¥agm®
⁄˚


40 
	#WATCHPOINT


	)

41 
	#WATCHPOINT_ERROR
(
A
)

	)

42 
	#WATCHPOINT_IFERROR
(
__memˇched_ªtu∫_t
Ë()(__memˇched_ªtu∫_t)

	)

43 
	#WATCHPOINT_STRING
(
A
)

	)

44 
	#WATCHPOINT_NUMBER
(
A
)

	)

45 
	#WATCHPOINT_LABELED_NUMBER
(
A
,
B
)

	)

46 
	#WATCHPOINT_IF_LABELED_NUMBER
(
A
,
B
,
C
)

	)

47 
	#WATCHPOINT_ERRNO
(
A
)

	)

48 
	#WATCHPOINT_ASSERT_PRINT
(
A
,
B
,
C
)

	)

49 
	#WATCHPOINT_ASSERT
(
A
Ë()(A)

	)

50 
	#WATCHPOINT_ASSERT_INITIALIZED
(
A
)

	)

51 
	#WATCHPOINT_SET
(
A
)

	)

	@libmemcached/windows.hpp

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


40 
	~<˚ºno
>

42 
	~<î∫o.h
>

45 #i‚de‡
WIN32_LEAN_AND_MEAN


46 
	#WIN32_LEAN_AND_MEAN


	)

49 #i‚de‡
_WIN32_WINNT


50 
	#_WIN32_WINNT
 0x0501

	)

53 #ifde‡
__MINGW32__


54 #if(
_WIN32_WINNT
 >= 0x0501)

56 #unde‡
_WIN32_WINNT


57 
	#_WIN32_WINNT
 0x0501

	)

61 #i‡
deföed
(
HAVE_WINSOCK2_H
) && HAVE_WINSOCK2_H

62 
	~<wösock2.h
>

65 #i‡
deföed
(
HAVE_WS2TCPIP_H
) && HAVE_WS2TCPIP_H

66 
	~<ws2t˝ù.h
>

69 #i‡
deföed
(
HAVE_IO_H
) && HAVE_IO_H

70 
	~<io.h
>

73 
	ssockaddr_un


75 
	msun_Ámûy
;

76 
	msun_∑th
[108];

79 
ölöe
 
	$å™¶©e_wödows_îr‹
()

81 
loˇl_î∫o

	`WSAGëLa°Eº‹
();

83 
loˇl_î∫o
) {

84 
WSAEINVAL
:

85 
loˇl_î∫o

EINPROGRESS
;

87 
WSAEALREADY
:

88 
WSAEWOULDBLOCK
:

89 
loˇl_î∫o

EAGAIN
;

92 
WSAECONNREFUSED
:

93 
loˇl_î∫o

ECONNREFUSED
;

96 
WSAENETUNREACH
:

97 
loˇl_î∫o

ENETUNREACH
;

100 
WSAETIMEDOUT
:

101 
loˇl_î∫o

ETIMEDOUT
;

104 
WSAECONNRESET
:

105 
loˇl_î∫o

ECONNRESET
;

108 
WSAEADDRINUSE
:

109 
loˇl_î∫o

EADDRINUSE
;

112 
WSAEOPNOTSUPP
:

113 
loˇl_î∫o

EOPNOTSUPP
;

116 
WSAENOPROTOOPT
:

117 
loˇl_î∫o

ENOPROTOOPT
;

124  
loˇl_î∫o
;

125 
	}
}

	@libmemcachedprotocol-0.0/binary.h

36 #i‚de‡
PROTOCOL_BINARY_H


37 
	#PROTOCOL_BINARY_H


	)

39 
	~<libmemˇched¥Ÿocﬁ-0.0/vbuckë.h
>

52 #ifde‡
__˝lu•lus


62 
PROTOCOL_BINARY_REQ
 = 0x80,

63 
PROTOCOL_BINARY_RES
 = 0x81

64 } 
	t¥Ÿocﬁ_bö¨y_magic
;

71 
PROTOCOL_BINARY_RESPONSE_SUCCESS
 = 0x00,

72 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
 = 0x01,

73 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
 = 0x02,

74 
PROTOCOL_BINARY_RESPONSE_E2BIG
 = 0x03,

75 
PROTOCOL_BINARY_RESPONSE_EINVAL
 = 0x04,

76 
PROTOCOL_BINARY_RESPONSE_NOT_STORED
 = 0x05,

77 
PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL
 = 0x06,

78 
PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET
 = 0x07,

79 
PROTOCOL_BINARY_RESPONSE_AUTH_ERROR
 = 0x20,

80 
PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE
 = 0x21,

81 
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
 = 0x81,

82 
PROTOCOL_BINARY_RESPONSE_ENOMEM
 = 0x82,

83 
PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED
 = 0x83,

84 
PROTOCOL_BINARY_RESPONSE_EINTERNAL
 = 0x84,

85 
PROTOCOL_BINARY_RESPONSE_EBUSY
 = 0x85,

86 
PROTOCOL_BINARY_RESPONSE_ETMPFAIL
 = 0x86

87 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
;

94 
PROTOCOL_BINARY_CMD_GET
 = 0x00,

95 
PROTOCOL_BINARY_CMD_SET
 = 0x01,

96 
PROTOCOL_BINARY_CMD_ADD
 = 0x02,

97 
PROTOCOL_BINARY_CMD_REPLACE
 = 0x03,

98 
PROTOCOL_BINARY_CMD_DELETE
 = 0x04,

99 
PROTOCOL_BINARY_CMD_INCREMENT
 = 0x05,

100 
PROTOCOL_BINARY_CMD_DECREMENT
 = 0x06,

101 
PROTOCOL_BINARY_CMD_QUIT
 = 0x07,

102 
PROTOCOL_BINARY_CMD_FLUSH
 = 0x08,

103 
PROTOCOL_BINARY_CMD_GETQ
 = 0x09,

104 
PROTOCOL_BINARY_CMD_NOOP
 = 0x0a,

105 
PROTOCOL_BINARY_CMD_VERSION
 = 0x0b,

106 
PROTOCOL_BINARY_CMD_GETK
 = 0x0c,

107 
PROTOCOL_BINARY_CMD_GETKQ
 = 0x0d,

108 
PROTOCOL_BINARY_CMD_APPEND
 = 0x0e,

109 
PROTOCOL_BINARY_CMD_PREPEND
 = 0x0f,

110 
PROTOCOL_BINARY_CMD_STAT
 = 0x10,

111 
PROTOCOL_BINARY_CMD_SETQ
 = 0x11,

112 
PROTOCOL_BINARY_CMD_ADDQ
 = 0x12,

113 
PROTOCOL_BINARY_CMD_REPLACEQ
 = 0x13,

114 
PROTOCOL_BINARY_CMD_DELETEQ
 = 0x14,

115 
PROTOCOL_BINARY_CMD_INCREMENTQ
 = 0x15,

116 
PROTOCOL_BINARY_CMD_DECREMENTQ
 = 0x16,

117 
PROTOCOL_BINARY_CMD_QUITQ
 = 0x17,

118 
PROTOCOL_BINARY_CMD_FLUSHQ
 = 0x18,

119 
PROTOCOL_BINARY_CMD_APPENDQ
 = 0x19,

120 
PROTOCOL_BINARY_CMD_PREPENDQ
 = 0x1a,

121 
PROTOCOL_BINARY_CMD_VERBOSITY
 = 0x1b,

122 
PROTOCOL_BINARY_CMD_TOUCH
 = 0x1c,

123 
PROTOCOL_BINARY_CMD_GAT
 = 0x1d,

124 
PROTOCOL_BINARY_CMD_GATQ
 = 0x1e,

125 
PROTOCOL_BINARY_CMD_GATK
 = 0x23,

126 
PROTOCOL_BINARY_CMD_GATKQ
 = 0x24,

128 
PROTOCOL_BINARY_CMD_SASL_LIST_MECHS
 = 0x20,

129 
PROTOCOL_BINARY_CMD_SASL_AUTH
 = 0x21,

130 
PROTOCOL_BINARY_CMD_SASL_STEP
 = 0x22,

136 
PROTOCOL_BINARY_CMD_RGET
 = 0x30,

137 
PROTOCOL_BINARY_CMD_RSET
 = 0x31,

138 
PROTOCOL_BINARY_CMD_RSETQ
 = 0x32,

139 
PROTOCOL_BINARY_CMD_RAPPEND
 = 0x33,

140 
PROTOCOL_BINARY_CMD_RAPPENDQ
 = 0x34,

141 
PROTOCOL_BINARY_CMD_RPREPEND
 = 0x35,

142 
PROTOCOL_BINARY_CMD_RPREPENDQ
 = 0x36,

143 
PROTOCOL_BINARY_CMD_RDELETE
 = 0x37,

144 
PROTOCOL_BINARY_CMD_RDELETEQ
 = 0x38,

145 
PROTOCOL_BINARY_CMD_RINCR
 = 0x39,

146 
PROTOCOL_BINARY_CMD_RINCRQ
 = 0x3a,

147 
PROTOCOL_BINARY_CMD_RDECR
 = 0x3b,

148 
PROTOCOL_BINARY_CMD_RDECRQ
 = 0x3c,

152 
PROTOCOL_BINARY_CMD_SET_VBUCKET
 = 0x3d,

153 
PROTOCOL_BINARY_CMD_GET_VBUCKET
 = 0x3e,

154 
PROTOCOL_BINARY_CMD_DEL_VBUCKET
 = 0x3f,

158 
PROTOCOL_BINARY_CMD_TAP_CONNECT
 = 0x40,

159 
PROTOCOL_BINARY_CMD_TAP_MUTATION
 = 0x41,

160 
PROTOCOL_BINARY_CMD_TAP_DELETE
 = 0x42,

161 
PROTOCOL_BINARY_CMD_TAP_FLUSH
 = 0x43,

162 
PROTOCOL_BINARY_CMD_TAP_OPAQUE
 = 0x44,

163 
PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET
 = 0x45,

164 
PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START
 = 0x46,

165 
PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END
 = 0x47,

168 
PROTOCOL_BINARY_CMD_LAST_RESERVED
 = 0xef,

171 
PROTOCOL_BINARY_CMD_SCRUB
 = 0xf0

172 } 
	t¥Ÿocﬁ_bö¨y_comm™d
;

179 
PROTOCOL_BINARY_RAW_BYTES
 = 0x00

180 } 
	t¥Ÿocﬁ_bö¨y_d©©y≥s
;

188 
uöt8_t
 
magic
;

189 
uöt8_t
 
›code
;

190 
uöt16_t
 
keyÀn
;

191 
uöt8_t
 
exéí
;

192 
uöt8_t
 
d©©y≥
;

193 
uöt16_t
 
vbuckë
;

194 
uöt32_t
 
bodyÀn
;

195 
uöt32_t
 
›aque
;

196 
uöt64_t
 
ˇs
;

197 } 
ªque°
;

198 
uöt8_t
 
byãs
[24];

199 } 
	t¥Ÿocﬁ_bö¨y_ªque°_hódî
;

207 
uöt8_t
 
magic
;

208 
uöt8_t
 
›code
;

209 
uöt16_t
 
keyÀn
;

210 
uöt8_t
 
exéí
;

211 
uöt8_t
 
d©©y≥
;

212 
uöt16_t
 
°©us
;

213 
uöt32_t
 
bodyÀn
;

214 
uöt32_t
 
›aque
;

215 
uöt64_t
 
ˇs
;

216 } 
ª•⁄£
;

217 
uöt8_t
 
byãs
[24];

218 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
;

223 
	u¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 {

225 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

226 } 
mesßge
;

227 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
)];

229 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_no_exåas
;

236 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

237 } 
mesßge
;

238 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
)];

239 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
;

245 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gë
;

246 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gëq
;

247 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gëk
;

248 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gëkq
;

257 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

259 
uöt32_t
 
Êags
;

260 } 
body
;

261 } 
mesßge
;

262 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
) + 4];

263 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gë
;

265 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gëq
;

266 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gëk
;

267 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gëkq
;

273 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_dñëe
;

279 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_dñëe
;

289 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

291 
uöt32_t
 
expú©i⁄
;

292 } 
body
;

293 } 
mesßge
;

294 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

295 } 
	t¥Ÿocﬁ_bö¨y_ªque°_Êush
;

301 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_Êush
;

309 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

311 
uöt32_t
 
Êags
;

312 
uöt32_t
 
expú©i⁄
;

313 } 
body
;

314 } 
mesßge
;

315 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 8];

316 } 
	t¥Ÿocﬁ_bö¨y_ªque°_£t
;

317 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
	t¥Ÿocﬁ_bö¨y_ªque°_add
;

318 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
	t¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
;

324 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_£t
;

325 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_add
;

326 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_ª∂a˚
;

332 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_no›
;

338 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_no›
;

347 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

349 
uöt64_t
 
dñè
;

350 
uöt64_t
 
öôül
;

351 
uöt32_t
 
expú©i⁄
;

352 } 
body
;

353 } 
mesßge
;

354 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 20];

355 } 
	t¥Ÿocﬁ_bö¨y_ªque°_ö¸
;

356 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 
	t¥Ÿocﬁ_bö¨y_ªque°_de¸
;

365 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

367 
uöt64_t
 
vÆue
;

368 } 
body
;

369 } 
mesßge
;

370 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
) + 8];

371 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
;

372 
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_de¸
;

378 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_quô
;

384 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_quô
;

390 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_≠≥nd
;

391 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_¥ïíd
;

397 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_≠≥nd
;

398 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_¥ïíd
;

404 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_vîsi⁄
;

410 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_vîsi⁄
;

417 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_°©s
;

423 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_°©s
;

430 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

432 
uöt32_t
 
Àvñ
;

433 } 
body
;

434 } 
mesßge
;

435 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

436 } 
	t¥Ÿocﬁ_bö¨y_ªque°_vîbosôy
;

441 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_vîbosôy
;

448 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

450 
uöt32_t
 
expú©i⁄
;

451 } 
body
;

452 } 
mesßge
;

453 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

454 } 
	t¥Ÿocﬁ_bö¨y_ªque°_touch
;

459 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_touch
;

466 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

468 
uöt32_t
 
expú©i⁄
;

469 } 
body
;

470 } 
mesßge
;

471 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

472 } 
	t¥Ÿocﬁ_bö¨y_ªque°_g©
;

474 
¥Ÿocﬁ_bö¨y_ªque°_g©
 
	t¥Ÿocﬁ_bö¨y_ªque°_g©q
;

479 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_g©
;

480 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_g©q
;

493 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

495 
uöt16_t
 
size
;

496 
uöt8_t
 
ª£rved
;

497 
uöt8_t
 
Êags
;

498 
uöt32_t
 
max_ªsu…s
;

499 } 
body
;

500 } 
mesßge
;

501 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

502 } 
	t¥Ÿocﬁ_bö¨y_ªque°_ønge›
;

504 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rgë
;

505 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_r£t
;

506 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_r£tq
;

507 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_øµíd
;

508 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_øµídq
;

509 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_Ωª≥nd
;

510 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_Ωª≥ndq
;

511 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rdñëe
;

512 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rdñëeq
;

513 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rö¸
;

514 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rö¸q
;

515 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rde¸
;

516 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rde¸q
;

527 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

542 
uöt32_t
 
Êags
;

557 
	#TAP_CONNECT_FLAG_BACKFILL
 0x01

	)

563 
	#TAP_CONNECT_FLAG_DUMP
 0x02

	)

570 
	#TAP_CONNECT_FLAG_LIST_VBUCKETS
 0x04

	)

575 
	#TAP_CONNECT_FLAG_TAKEOVER_VBUCKETS
 0x08

	)

579 
	#TAP_CONNECT_SUPPORT_ACK
 0x10

	)

586 
	#TAP_CONNECT_REQUEST_KEYS_ONLY
 0x20

	)

593 
	#TAP_CONNECT_CHECKPOINT
 0x40

	)

598 
	#TAP_CONNECT_REGISTERED_CLIENT
 0x80

	)

599 } 
body
;

600 } 
mesßge
;

601 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

602 } 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_c⁄√˘
;

606 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

609 
uöt16_t
 
ígöe•ecific_Àngth
;

618 
	#TAP_FLAG_ACK
 0x01

	)

622 
	#TAP_FLAG_NO_VALUE
 0x02

	)

623 
uöt16_t
 
Êags
;

624 
uöt8_t
 
âl
;

625 
uöt8_t
 
ªs1
;

626 
uöt8_t
 
ªs2
;

627 
uöt8_t
 
ªs3
;

628 } 
èp
;

630 
uöt32_t
 
Êags
;

631 
uöt32_t
 
expú©i⁄
;

632 } 
ôem
;

633 } 
body
;

634 } 
mesßge
;

635 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 16];

636 } 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_muèti⁄
;

640 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

643 
uöt16_t
 
ígöe•ecific_Àngth
;

649 
uöt16_t
 
Êags
;

650 
uöt8_t
 
âl
;

651 
uöt8_t
 
ªs1
;

652 
uöt8_t
 
ªs2
;

653 
uöt8_t
 
ªs3
;

654 } 
èp
;

655 } 
body
;

656 } 
mesßge
;

657 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 8];

658 } 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
;

660 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_dñëe
;

661 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_Êush
;

662 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_›aque
;

663 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_vbuckë_£t
;

669 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_s¸ub
;

674 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_s¸ub
;

682 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

684 
vbuckë_°©e_t
 
°©e
;

685 } 
body
;

686 } 
mesßge
;

687 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
Ë+ (
vbuckë_°©e_t
)];

688 } 
	t¥Ÿocﬁ_bö¨y_ªque°_£t_vbuckë
;

692 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_£t_vbuckë
;

696 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_dñ_vbuckë
;

700 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_dñ_vbuckë
;

705 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gë_vbuckë
;

712 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

714 
vbuckë_°©e_t
 
°©e
;

715 } 
body
;

716 } 
mesßge
;

717 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
Ë+ (
vbuckë_°©e_t
)];

718 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gë_vbuckë
;

725 #ifde‡
__˝lu•lus


	@libmemcachedprotocol-0.0/callback.h

9 #¥agm®
⁄˚


23 
	g¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


24 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_gë_ª•⁄£_h™dÀr
)(c⁄° *
	tcookõ
,

25 c⁄° *
	tkey
,

26 
	tuöt16_t
 
	tkeyÀn
,

27 c⁄° *
	tbody
,

28 
	tuöt32_t
 
	tbodyÀn
,

29 
	tuöt32_t
 
	tÊags
,

30 
	tuöt64_t
 
	tˇs
);

40 
	g¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


41 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_°©_ª•⁄£_h™dÀr
)(c⁄° *
	tcookõ
,

42 c⁄° *
	tkey
,

43 
	tuöt16_t
 
	tkeyÀn
,

44 c⁄° *
	tbody
,

45 
	tuöt32_t
 
	tbodyÀn
);

53 
	g¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


54 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_vîsi⁄_ª•⁄£_h™dÀr
)(c⁄° *
	tcookõ
,

55 c⁄° *
	tãxt
,

56 
	tuöt32_t
 
	tÀngth
);

68 
	$¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
)(c⁄° *
	tcookõ
,

69 
	t¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
	tªque°
,

70 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
	tª•⁄£
);

81 
	$¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_comm™d_h™dÀr
)(c⁄° *
	tcookõ
,

82 
	t¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
	thódî
,

83 
	tmemˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
	tª•⁄£_h™dÀr
);

91 
memˇched_bö¨y_¥Ÿocﬁ_comm™d_h™dÀr
 
comcode
[256];

92 } 
	tmemˇched_bö¨y_¥Ÿocﬁ_ˇŒback_v0_°
;

115 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
add
)(c⁄° *
cookõ
,

116 c⁄° *
key
,

117 
uöt16_t
 
keyÀn
,

118 c⁄° * 
vÆ
,

119 
uöt32_t
 
vÆÀn
,

120 
uöt32_t
 
Êags
,

121 
uöt32_t
 
ex±ime
,

122 
uöt64_t
 *
ˇs
);

136 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
≠≥nd
)(c⁄° *
cookõ
,

137 c⁄° *
key
,

138 
uöt16_t
 
keyÀn
,

139 c⁄° * 
vÆ
,

140 
uöt32_t
 
vÆÀn
,

141 
uöt64_t
 
ˇs
,

142 
uöt64_t
 *
ªsu…_ˇs
);

158 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
de¸emít
)(c⁄° *
cookõ
,

159 c⁄° *
key
,

160 
uöt16_t
 
keyÀn
,

161 
uöt64_t
 
dñè
,

162 
uöt64_t
 
öôül
,

163 
uöt32_t
 
expú©i⁄
,

164 
uöt64_t
 *
ªsu…
,

165 
uöt64_t
 *
ªsu…_ˇs
);

175 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
dñëe_obje˘
)(c⁄° *
cookõ
,

176 c⁄° *
key
,

177 
uöt16_t
 
keyÀn
,

178 
uöt64_t
 
ˇs
);

187 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
Êush_obje˘
)(c⁄° *
cookõ
,

188 
uöt32_t
 
whí
);

200 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
gë
)(c⁄° *
cookõ
,

201 c⁄° *
key
,

202 
uöt16_t
 
keyÀn
,

203 
memˇched_bö¨y_¥Ÿocﬁ_gë_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
);

219 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
ö¸emít
)(c⁄° *
cookõ
,

220 c⁄° *
key
,

221 
uöt16_t
 
keyÀn
,

222 
uöt64_t
 
dñè
,

223 
uöt64_t
 
öôül
,

224 
uöt32_t
 
expú©i⁄
,

225 
uöt64_t
 *
ªsu…
,

226 
uöt64_t
 *
ªsu…_ˇs
);

234 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
no›
)(c⁄° *
cookõ
);

248 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
¥ïíd
)(c⁄° *
cookõ
,

249 c⁄° *
key
,

250 
uöt16_t
 
keyÀn
,

251 c⁄° * 
vÆ
,

252 
uöt32_t
 
vÆÀn
,

253 
uöt64_t
 
ˇs
,

254 
uöt64_t
 *
ªsu…_ˇs
);

262 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
quô
)(c⁄° *
cookõ
);

278 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
ª∂a˚
)(c⁄° *
cookõ
,

279 c⁄° *
key
,

280 
uöt16_t
 
keyÀn
,

281 c⁄° * 
vÆ
,

282 
uöt32_t
 
vÆÀn
,

283 
uöt32_t
 
Êags
,

284 
uöt32_t
 
ex±ime
,

285 
uöt64_t
 
ˇs
,

286 
uöt64_t
 *
ªsu…_ˇs
);

302 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
£t
)(c⁄° *
cookõ
,

303 c⁄° *
key
,

304 
uöt16_t
 
keyÀn
,

305 c⁄° * 
vÆ
,

306 
uöt32_t
 
vÆÀn
,

307 
uöt32_t
 
Êags
,

308 
uöt32_t
 
ex±ime
,

309 
uöt64_t
 
ˇs
,

310 
uöt64_t
 *
ªsu…_ˇs
);

324 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
°©
)(c⁄° *
cookõ
,

325 c⁄° *
key
,

326 
uöt16_t
 
keyÀn
,

327 
memˇched_bö¨y_¥Ÿocﬁ_°©_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
);

337 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
vîsi⁄
)(c⁄° *
cookõ
,

338 
memˇched_bö¨y_¥Ÿocﬁ_vîsi⁄_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
);

339 } 
	tmemˇched_bö¨y_¥Ÿocﬁ_ˇŒback_v1_°
;

347 
MEMCACHED_PROTOCOL_HANDLER_V0
= 0,

352 
MEMCACHED_PROTOCOL_HANDLER_V1
= 1

353 } 
	tmemˇched_¥Ÿocﬁ_öãrÁ˚_vîsi⁄_t
;

362 
memˇched_¥Ÿocﬁ_öãrÁ˚_vîsi⁄_t
 
öãrÁ˚_vîsi⁄
;

372 (*
¥e_execuã
)(c⁄° *
cookõ
,

373 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
);

384 (*
po°_execuã
)(c⁄° *
cookõ
,

385 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
);

397 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
unknown
)(c⁄° *
cookõ
,

398 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

399 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
);

407 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_v0_°
 
v0
;

414 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_v1_°
 
v1
;

415 } 
öãrÁ˚
;

416 } 
	tmemˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
;

	@libmemcachedprotocol-0.0/handler.h

14 #¥agm®
⁄˚


16 
	~<sys/ty≥s.h
>

17 #i‡!
deföed
(
__˝lu•lus
)

18 
	~<°dboﬁ.h
>

21 
	~<libmemˇched-1.0/visibûôy.h
>

22 
	~<libmemˇched-1.0/∂©f‹m.h
>

23 
	~<libmemˇched¥Ÿocﬁ-0.0/bö¨y.h
>

24 
	~<libmemˇched¥Ÿocﬁ-0.0/ˇŒback.h
>

32 
memˇched_¥Ÿocﬁ_°
 
	tmemˇched_¥Ÿocﬁ_°
;

33 
memˇched_¥Ÿocﬁ_˛õ¡_°
 
	tmemˇched_¥Ÿocﬁ_˛õ¡_°
;

35 #ifde‡
__˝lu•lus


50 
ssize_t
 (*
	tmemˇched_¥Ÿocﬁ_ªcv_func
)(c⁄° *
	tcookõ
,

51 
	tmemˇched_sockë_t
 
	tfd
,

52 *
	tbuf
,

53 
	tsize_t
 
	tnbuf
);

66 
ssize_t
 (*
	tmemˇched_¥Ÿocﬁ_£nd_func
)(c⁄° *
	tcookõ
,

67 
	tmemˇched_sockë_t
 
	tfd
,

68 c⁄° *
	tbuf
,

69 
	tsize_t
 
	tnbuf
);

76 
LIBMEMCACHED_API


77 
memˇched_¥Ÿocﬁ_°
 *
memˇched_¥Ÿocﬁ_¸óã_ö°™˚
();

83 
LIBMEMCACHED_API


84 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
memˇched_bö¨y_¥Ÿocﬁ_gë_ˇŒbacks
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
);

91 
LIBMEMCACHED_API


92 
memˇched_bö¨y_¥Ÿocﬁ_£t_ˇŒbacks
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
ˇŒback
);

102 
LIBMEMCACHED_API


103 
memˇched_bö¨y_¥Ÿocﬁ_£t_≥d™tic
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
boﬁ
 
íabÀ
);

110 
LIBMEMCACHED_API


111 
boﬁ
 
memˇched_bö¨y_¥Ÿocﬁ_gë_≥d™tic
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
);

118 
LIBMEMCACHED_API


119 
memˇched_¥Ÿocﬁ_de°roy_ö°™˚
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
);

129 
LIBMEMCACHED_API


130 
memached_¥Ÿocﬁ_£t_io_fun˘i⁄s
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
,

131 
memˇched_¥Ÿocﬁ_ªcv_func
 
ªcv
,

132 
memˇched_¥Ÿocﬁ_£nd_func
 
£nd
);

141 
LIBMEMCACHED_API


142 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
memˇched_¥Ÿocﬁ_¸óã_˛õ¡
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
memˇched_sockë_t
 
sock
);

152 
LIBMEMCACHED_API


153 
memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
);

155 
LIBMEMCACHED_API


156 
memˇched_¥Ÿocﬁ_˛õ¡_£t_vîbo£
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
boﬁ
 
¨g
);

162 
	#MEMCACHED_PROTOCOL_ERROR_EVENT
 1

	)

166 
	#MEMCACHED_PROTOCOL_READ_EVENT
 2

	)

170 
	#MEMCACHED_PROTOCOL_WRITE_EVENT
 4

	)

174 
	#MEMCACHED_PROTOCOL_PAUSE_EVENT
 8

	)

180 
uöt32_t
 
	tmemˇched_¥Ÿocﬁ_evít_t
;

188 
LIBMEMCACHED_API


189 
memˇched_¥Ÿocﬁ_evít_t
 
memˇched_¥Ÿocﬁ_˛õ¡_w‹k
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
);

196 
LIBMEMCACHED_API


197 
memˇched_sockë_t
 
memˇched_¥Ÿocﬁ_˛õ¡_gë_sockë
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
);

204 
LIBMEMCACHED_API


205 
memˇched_¥Ÿocﬁ_˛õ¡_gë_î∫o
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
);

213 
LIBMEMCACHED_API


214 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
memˇched_bö¨y_¥Ÿocﬁ_gë_øw_ª•⁄£_h™dÀr
(c⁄° *
cookõ
);

216 #ifde‡
__˝lu•lus


	@libmemcachedprotocol-0.0/vbucket.h

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


45 
vbuckë_°©e_a˘ive
 = 1,

46 
vbuckë_°©e_ª∂iˇ
,

47 
vbuckë_°©e_≥ndög
,

48 
vbuckë_°©e_dód


49 } 
	tvbuckë_°©e_t
;

51 
	#is_vÆid_vbuckë_°©e_t
(
°©e
) \

52 (
°©e
 =
vbuckë_°©e_a˘ive
 || \

53 
°©e
 =
vbuckë_°©e_ª∂iˇ
 || \

54 
°©e
 =
vbuckë_°©e_≥ndög
 || \

55 
°©e
 =
vbuckë_°©e_dód
)

	)

57 #ifde‡
__˝lu•lus


	@libmemcachedprotocol/ascii_handler.c

37 
	~<libmemˇched¥Ÿocﬁ/comm⁄.h
>

39 
	~<˘y≥.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<î∫o.h
>

46 
	$¥öt_ascii_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

48 i‡(
˛õ¡
->
is_vîbo£
)

50 
˛õ¡
->
ascii_comm™d
)

52 
SET_CMD
:

53 
	`Ârötf
(
°dîr
, "%s:%d SET_CMD\n", 
__FILE__
, 
__LINE__
);

56 
ADD_CMD
:

57 
	`Ârötf
(
°dîr
, "%s:%d ADD_CMD\n", 
__FILE__
, 
__LINE__
);

60 
REPLACE_CMD
:

61 
	`Ârötf
(
°dîr
, "%s:%d REPLACE_CMD\n", 
__FILE__
, 
__LINE__
);

64 
CAS_CMD
:

65 
	`Ârötf
(
°dîr
, "%s:%d CAS_CMD\n", 
__FILE__
, 
__LINE__
);

68 
APPEND_CMD
:

69 
	`Ârötf
(
°dîr
, "%s:%d APPEND_CMD\n", 
__FILE__
, 
__LINE__
);

72 
PREPEND_CMD
:

73 
	`Ârötf
(
°dîr
, "%s:%d PREPEND_CMD\n", 
__FILE__
, 
__LINE__
);

76 
DELETE_CMD
:

77 
	`Ârötf
(
°dîr
, "%s:%d DELETE_CMD\n", 
__FILE__
, 
__LINE__
);

80 
INCR_CMD
:

81 
	`Ârötf
(
°dîr
, "%s:%d INCR_CMD\n", 
__FILE__
, 
__LINE__
);

84 
DECR_CMD
:

85 
	`Ârötf
(
°dîr
, "%s:%d DECR_CMD\n", 
__FILE__
, 
__LINE__
);

88 
STATS_CMD
:

89 
	`Ârötf
(
°dîr
, "%s:%d STATS_CMD\n", 
__FILE__
, 
__LINE__
);

92 
FLUSH_ALL_CMD
:

93 
	`Ârötf
(
°dîr
, "%s:%d FLUSH_ALL_CMD\n", 
__FILE__
, 
__LINE__
);

96 
VERSION_CMD
:

97 
	`Ârötf
(
°dîr
, "%s:%d VERSION_CMD\n", 
__FILE__
, 
__LINE__
);

100 
QUIT_CMD
:

101 
	`Ârötf
(
°dîr
, "%s:%d QUIT_CMD\n", 
__FILE__
, 
__LINE__
);

104 
VERBOSITY_CMD
:

105 
	`Ârötf
(
°dîr
, "%s:%d VERBOSITY_CMD\n", 
__FILE__
, 
__LINE__
);

108 
GET_CMD
:

109 
	`Ârötf
(
°dîr
, "%s:%d GET_CMD\n", 
__FILE__
, 
__LINE__
);

112 
GETS_CMD
:

113 
	`Ârötf
(
°dîr
, "%s:%d GETS_CMD\n", 
__FILE__
, 
__LINE__
);

117 
UNKNOWN_CMD
:

118 
	`Ârötf
(
°dîr
, "%s:%d UNKNOWN_CMD\n", 
__FILE__
, 
__LINE__
);

123 
	}
}

132 
uöt16_t
 
	$∑r£_ascii_key
(**
°¨t
)

134 
uöt16_t
 
Àn
= 0;

135 *
c
*
°¨t
;

137 
	`is•a˚
(*
c
))

139 ++
c
;

142 *
°¨t

c
;

144 *
c
 !'\0' && !
	`is•a˚
(*cË&& !
	`is˙ål
(*c))

146 ++
c
;

147 ++
Àn
;

151 i‡(
Àn
 =0 ||Üí > 240 || (*
c
 !'\0' && *¯!'\r' && 
	`is˙ål
(*c)))

156  
Àn
;

157 
	}
}

165 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$øw_ª•⁄£_h™dÀr
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, c⁄° *
ãxt
)

167 i‡(
˛õ¡
->
is_vîbo£
)

169 
	`Ârötf
(
°dîr
, "%s:%d %s\n", 
__FILE__
, 
__LINE__
, 
ãxt
);

172 i‡(
˛õ¡
->
roŸ
->
	`døö
(˛õ¡Ë=
Ál£
)

174  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

177 
	`as£π
(
˛õ¡
->
ouçut
 !
NULL
);

179 i‡(
˛õ¡
->
ouçut
 =
NULL
)

184 
size_t
 
num_byãs

Àn
 -
off£t
;

185 
ssize_t
 
nw

˛õ¡
->
roŸ
->
	`£nd
(client,

186 
˛õ¡
->
sock
,

187 
±r
 + 
off£t
,

188 
num_byãs
);

189 i‡(
nw
 == -1)

191 i‡(
	`gë_sockë_î∫o
(Ë=
EWOULDBLOCK
)

195 i‡(
	`gë_sockë_î∫o
(Ë!
EINTR
)

197 
˛õ¡
->
îr‹

î∫o
;

198  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

203 
off£t
 +(
size_t
)
nw
;

205 } 
off£t
 < 
Àn
);

209  
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ãxt
, 
	`°æí
(text));

210 
	}
}

217 
	$£nd_comm™d_ußge
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

219 c⁄° *
îrmsg
[]= {

220 [
GET_CMD
]= "CLIENT_ERROR: SyntaxÉrror: get <key>*\r\n",

221 [
GETS_CMD
]= "CLIENT_ERROR: SyntaxÉrror: gets <key>*\r\n",

222 [
SET_CMD
]= "CLIENT_ERROR: SyntaxÉrror: set <key> <flags> <exptime> <bytes> [noreply]\r\n",

223 [
ADD_CMD
]= "CLIENT_ERROR: SyntaxÉrror:ádd <key> <flags> <exptime> <bytes> [noreply]\r\n",

224 [
REPLACE_CMD
]= "CLIENT_ERROR: SyntaxÉrror:Ñeplace <key> <flags> <exptime> <bytes> [noreply]\r\n",

225 [
CAS_CMD
]= "CLIENT_ERROR: SyntaxÉrror: cas <key> <flags> <exptime> <bytes> <casid> [noreply]\r\n",

226 [
APPEND_CMD
]= "CLIENT_ERROR: SyntaxÉrror:áppend <key> <flags> <exptime> <bytes> [noreply]\r\n",

227 [
PREPEND_CMD
]= "CLIENT_ERROR: SyntaxÉrror:Örepend <key> <flags> <exptime> <bytes> [noreply]\r\n",

228 [
DELETE_CMD
]= "CLIENT_ERROR: SyntaxÉrror: delete_object <key> [noreply]\r\n",

229 [
INCR_CMD
]= "CLIENT_ERROR: SyntaxÉrror: incr <key> <value> [noreply]\r\n",

230 [
DECR_CMD
]= "CLIENT_ERROR: SyntaxÉrror: decr <key> <value> [noreply]\r\n",

231 [
STATS_CMD
]= "CLIENT_ERROR: SyntaxÉrror: stats [key]\r\n",

232 [
FLUSH_ALL_CMD
]= "CLIENT_ERROR: SyntaxÉrror: flush_all [timeout] [noreply]\r\n",

233 [
VERSION_CMD
]= "CLIENT_ERROR: SyntaxÉrror: version\r\n",

234 [
QUIT_CMD
]="CLIENT_ERROR: SyntaxÉrror: quit\r\n",

236 [
VERBOSITY_CMD
]= "CLIENT_ERROR: SyntaxÉrror: verbosity <num>\r\n",

237 [
UNKNOWN_CMD
]= "CLIENT_ERROR: Unknown command\r\n",

240 
˛õ¡
->
muã
 = 
Ál£
;

241 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, 
îrmsg
[˛õ¡->
ascii_comm™d
]);

242 
	}
}

250 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$ascii_vîsi⁄_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

251 c⁄° *
ãxt
,

252 
uöt32_t
 
ãxéí
)

254 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(memˇched_¥Ÿocﬁ_˛õ¡_°*)
cookõ
;

255 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "VERSION ");

256 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ãxt
, 
ãxéí
);

257 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "\r\n");

258  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

259 
	}
}

271 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


272 
	$ascii_gë_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

273 c⁄° *
key
,

274 
uöt16_t
 
keyÀn
,

275 c⁄° *
body
,

276 
uöt32_t
 
bodyÀn
,

277 
uöt32_t
 
Êags
,

278 
uöt64_t
 
ˇs
)

280 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

281 
buf„r
[300];

282 
	`°r˝y
(
buf„r
, "VALUE ");

283 c⁄° *
sour˚

key
;

284 *
de°

buf„r
 + 6;

286 
x
0; x < 
keyÀn
; ++x)

288 i‡(*
sour˚
 !'\0' && !
	`is•a˚
(*sour˚Ë&& !
	`is˙ål
(*source))

290 *
de°
*
sour˚
;

294  
PROTOCOL_BINARY_RESPONSE_EINVAL
;

297 ++
de°
;

298 ++
sour˚
;

301 
size_t
 
u£d
(size_t)(
de°
 - 
buf„r
);

303 i‡(
˛õ¡
->
ascii_comm™d
 =
GETS_CMD
)

305 
	`¢¥ötf
(
de°
, (
buf„r
Ë- 
u£d
, " %u %u %" 
PRIu64
 "\r\n", 
Êags
,

306 
bodyÀn
, 
ˇs
);

310 
	`¢¥ötf
(
de°
, (
buf„r
Ë- 
u£d
, " %u %u\r\n", 
Êags
, 
bodyÀn
);

313 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
buf„r
, 
	`°æí
(buffer));

314 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
body
, 
bodyÀn
);

315 
˛õ¡
->
roŸ
->
	`•oﬁ
(client, "\r\n", 2);

317  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

318 
	}
}

328 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$ascii_°©_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

329 c⁄° *
key
,

330 
uöt16_t
 
keyÀn
,

331 c⁄° *
body
,

332 
uöt32_t
 
bodyÀn
)

335 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

337 i‡(
key
 !
NULL
)

339 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "STAT ");

340 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
key
, 
keyÀn
);

341 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, " ");

342 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
body
, 
bodyÀn
);

343 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "\r\n");

347 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "END\r\n");

350  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

351 
	}
}

359 
	$ascii_¥o˚ss_gës
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

360 *
buf„r
, *
íd
)

362 *
key

buf„r
;

365 
key
 +(
˛õ¡
->
ascii_comm™d
 =
GETS_CMD
) ? 5 : 4;

367 
num_keys
= 0;

368 
key
 < 
íd
)

370 
uöt16_t
 
nkey

	`∑r£_ascii_key
(&
key
);

371 i‡(
nkey
 == 0)

376 ()
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`gë
(˛õ¡, 
key
, 
nkey
,

377 
ascii_gë_ª•⁄£_h™dÀr
);

378 
key
 +
nkey
;

379 ++
num_keys
;

382 i‡(
num_keys
 == 0)

384 
	`£nd_comm™d_ußge
(
˛õ¡
);

388 
˛õ¡
->
roŸ
->
	`•oﬁ
(client, "END\r\n", 5);

390 
	}
}

401 
	$ascii_tokíize_comm™d
(*
°r
, *
íd
, **
vec
, 
size
)

403 
ñem
= 0;

405 
°r
 < 
íd
)

408 
°r
 < 
íd
 && 
	`is•a˚
(*str))

410 ++
°r
;

413 i‡(
°r
 =
íd
)

415  
ñem
;

418 
vec
[
ñem
++]
°r
;

420 
°r
 < 
íd
 && !
	`is•a˚
(*str))

422 ++
°r
;

426 *
°r
= '\0';

427 ++
°r
;

430 i‡(
ñem
 =
size
)

436  
ñem
;

437 
	}
}

448 
	$ªcovî_tokíize_comm™d
(*
°¨t
, *
íd
)

450 
°¨t
 < 
íd
)

452 i‡(*
°¨t
 == '\0')

453 *
°¨t
= ' ';

454 ++
°¨t
;

457 *
íd
= '\n';

458 
	}
}

463 
ascii_cmd
 
	$ascii_to_cmd
(*
°¨t
, 
size_t
 
Àngth
)

466 c⁄° *
cmd
;

467 
size_t
 
Àn
;

468 
ascii_cmd
 
cc
;

469 } 
comm™ds
[]= {

470 { .
cmd
"gë", .
Àn
3, .
cc

GET_CMD
 },

471 { .
cmd
"gës", .
Àn
4, .
cc

GETS_CMD
 },

472 { .
cmd
"£t", .
Àn
3, .
cc

SET_CMD
 },

473 { .
cmd
"add", .
Àn
3, .
cc

ADD_CMD
 },

474 { .
cmd
"ª∂a˚", .
Àn
7, .
cc

REPLACE_CMD
 },

475 { .
cmd
"ˇs", .
Àn
3, .
cc

CAS_CMD
 },

476 { .
cmd
"≠≥nd", .
Àn
6, .
cc

APPEND_CMD
 },

477 { .
cmd
"¥ïíd", .
Àn
7, .
cc

PREPEND_CMD
 },

478 { .
cmd
"dñëe_obje˘", .
Àn
6, .
cc

DELETE_CMD
 },

479 { .
cmd
"ö¸", .
Àn
4, .
cc

INCR_CMD
 },

480 { .
cmd
"de¸", .
Àn
4, .
cc

DECR_CMD
 },

481 { .
cmd
"°©s", .
Àn
5, .
cc

STATS_CMD
 },

482 { .
cmd
"Êush_Æl", .
Àn
9, .
cc

FLUSH_ALL_CMD
 },

483 { .
cmd
"vîsi⁄", .
Àn
7, .
cc

VERSION_CMD
 },

484 { .
cmd
"quô", .
Àn
4, .
cc

QUIT_CMD
 },

485 { .
cmd
"vîbosôy", .
Àn
9, .
cc

VERBOSITY_CMD
 },

486 { .
cmd

NULL
, .
Àn
0, .
cc

UNKNOWN_CMD
 }};

488 
x
= 0;

489 
comm™ds
[
x
].
Àn
 > 0) {

490 i‡(
Àngth
 >
comm™ds
[
x
].
Àn
)

492 i‡(
	`°∫cmp
(
°¨t
, 
comm™ds
[
x
].
cmd
, comm™ds[x].
Àn
) == 0)

495 i‡(
Àngth
 =
comm™ds
[
x
].
Àn
 || 
	`is•a˚
(*(
°¨t
 + commands[x].len)))

497  
comm™ds
[
x
].
cc
;

501 ++
x
;

504  
UNKNOWN_CMD
;

505 
	}
}

514 
	$¥o˚ss_dñëe
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

515 **
tokís
, 
¡okís
)

517 *
key

tokís
[1];

518 
uöt16_t
 
nkey
;

520 i‡(
¡okís
 !2 || (
nkey

	`∑r£_ascii_key
(&
key
)) == 0)

522 
	`£nd_comm™d_ußge
(
˛õ¡
);

526 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
dñëe_obje˘
 =
NULL
)

528 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

532 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`dñëe_obje˘
(˛õ¡, 
key
, 
nkey
, 0);

534 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

536 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "DELETED\r\n");

538 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
)

540 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "NOT_FOUND\r\n");

544 
msg
[80];

545 
	`¢¥ötf
(
msg
, (msg), "SERVER_ERROR: dñëe_obje˘ faûed %u\r\n",(
uöt32_t
)
rvÆ
);

546 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, 
msg
);

548 
	}
}

550 
	$¥o˚ss_¨ôhmëic
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

551 **
tokís
, 
¡okís
)

553 *
key

tokís
[1];

554 
uöt16_t
 
nkey
;

556 i‡(
¡okís
 !3 || (
nkey

	`∑r£_ascii_key
(&
key
)) == 0)

558 
	`£nd_comm™d_ußge
(
˛õ¡
);

562 
uöt64_t
 
ˇs
;

563 
uöt64_t
 
ªsu…
;

564 
î∫o
= 0;

565 
uöt64_t
 
dñè

	`°πouŒ
(
tokís
[2], 
NULL
, 10);

566 i‡(
î∫o
 != 0)

571 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

572 i‡(
˛õ¡
->
ascii_comm™d
 =
INCR_CMD
)

574 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ö¸emít
 =
NULL
)

576 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

579 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`ö¸emít
(client,

580 
key
, 
nkey
,

581 
dñè
, 0,

583 &
ªsu…
,

584 &
ˇs
);

588 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
de¸emít
 =
NULL
)

590 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

593 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`de¸emít
(client,

594 
key
, 
nkey
,

595 
dñè
, 0,

597 &
ªsu…
,

598 &
ˇs
);

601 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

603 
buf„r
[80];

604 
	`¢¥ötf
(
buf„r
, (buf„r), "%"
PRIu64
"\r\n", 
ªsu…
);

605 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, 
buf„r
);

609 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "NOT_FOUND\r\n");

611 
	}
}

618 
	$¥o˚ss_°©s
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

619 *
key
, *
íd
)

621 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
°©
 =
NULL
)

623 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

627 
	`is•a˚
(*
key
))

629 
key
++;

632 
uöt16_t
 
nkey
(uöt16_t)(
íd
 - 
key
);

633 ()
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`°©
(˛õ¡, 
key
, 
nkey
,

634 
ascii_°©_ª•⁄£_h™dÀr
);

635 
	}
}

637 
	$¥o˚ss_vîsi⁄
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

638 **
tokís
, 
¡okís
)

640 ()
tokís
;

641 i‡(
¡okís
 != 1)

643 
	`£nd_comm™d_ußge
(
˛õ¡
);

647 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
vîsi⁄
 =
NULL
)

649 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

653 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`vîsi⁄
(client,

654 
ascii_vîsi⁄_ª•⁄£_h™dÀr
);

655 
	}
}

657 
	$¥o˚ss_Êush
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

658 **
tokís
, 
¡okís
)

660 i‡(
¡okís
 > 2)

662 
	`£nd_comm™d_ußge
(
˛õ¡
);

666 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
Êush_obje˘
 =
NULL
)

668 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

672 
uöt32_t
 
timeout
= 0;

673 i‡(
¡okís
 == 2)

675 
î∫o
= 0;

676 
timeout
(
uöt32_t
)
	`°πoul
(
tokís
[1], 
NULL
, 10);

677 i‡(
î∫o
 != 0)

683 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

684 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`Êush_obje˘
(˛õ¡, 
timeout
);

685 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

686 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "OK\r\n");

688 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: internalÉrror\r\n");

689 
	}
}

705 
ölöe
 
	$¥o˚ss_°‹age_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

706 **
tokís
, 
¡okís
, *
°¨t
,

707 **
íd
, 
ssize_t
 
Àngth
)

709 ()
¡okís
;

710 *
key

tokís
[1];

711 
uöt16_t
 
nkey

	`∑r£_ascii_key
(&
key
);

712 i‡(
nkey
 == 0)

715 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "CLIENT_ERROR: bad key\r\n");

719 
î∫o
= 0;

720 
uöt32_t
 
Êags
(uöt32_t)
	`°πoul
(
tokís
[2], 
NULL
, 10);

721 i‡(
î∫o
 != 0)

724 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "CLIENT_ERROR: bad key\r\n");

728 
uöt32_t
 
timeout
(uöt32_t)
	`°πoul
(
tokís
[3], 
NULL
, 10);

729 i‡(
î∫o
 != 0)

732 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "CLIENT_ERROR: bad key\r\n");

736 
nbyãs

	`°πoul
(
tokís
[4], 
NULL
, 10);

737 i‡(
î∫o
 != 0)

740 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "CLIENT_ERROR: bad key\r\n");

745 
√ed

nbyãs
 + ()((*
íd
 - 
°¨t
) + 1) + 2;

746 i‡((
ssize_t
)
√ed
 > 
Àngth
)

749 
	`ªcovî_tokíize_comm™d
(
°¨t
, *
íd
);

753 *
d©a
(*
íd
) + 1;

754 
uöt64_t
 
ˇs
= 0;

755 
uöt64_t
 
ªsu…_ˇs
;

756 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

757 
˛õ¡
->
ascii_comm™d
)

759 
SET_CMD
:

760 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`£t
(˛õ¡, 
key
,

761 (
uöt16_t
)
nkey
,

762 
d©a
,

763 (
uöt32_t
)
nbyãs
,

764 
Êags
,

765 
timeout
, 
ˇs
,

766 &
ªsu…_ˇs
);

768 
ADD_CMD
:

769 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`add
(˛õ¡, 
key
,

770 (
uöt16_t
)
nkey
,

771 
d©a
,

772 (
uöt32_t
)
nbyãs
,

773 
Êags
,

774 
timeout
, &
ªsu…_ˇs
);

776 
CAS_CMD
:

777 
î∫o
= 0;

778 
ˇs

	`°πouŒ
(
tokís
[5], 
NULL
, 10);

779 i‡(
î∫o
 != 0)

782 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "CLIENT_ERROR: bad key\r\n");

786 
REPLACE_CMD
:

787 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`ª∂a˚
(˛õ¡, 
key
,

788 (
uöt16_t
)
nkey
,

789 
d©a
,

790 (
uöt32_t
)
nbyãs
,

791 
Êags
,

792 
timeout
, 
ˇs
,

793 &
ªsu…_ˇs
);

795 
APPEND_CMD
:

796 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`≠≥nd
(˛õ¡, 
key
,

797 (
uöt16_t
)
nkey
,

798 
d©a
,

799 (
uöt32_t
)
nbyãs
,

800 
ˇs
,

801 &
ªsu…_ˇs
);

803 
PREPEND_CMD
:

804 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`¥ïíd
(˛õ¡, 
key
,

805 (
uöt16_t
)
nkey
,

806 
d©a
,

807 (
uöt32_t
)
nbyãs
,

808 
ˇs
,

809 &
ªsu…_ˇs
);

813 
GET_CMD
:

814 
GETS_CMD
:

815 
DELETE_CMD
:

816 
DECR_CMD
:

817 
INCR_CMD
:

818 
STATS_CMD
:

819 
FLUSH_ALL_CMD
:

820 
VERSION_CMD
:

821 
QUIT_CMD
:

822 
VERBOSITY_CMD
:

823 
UNKNOWN_CMD
:

825 
	`ab‹t
();

828 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

830 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "STORED\r\n");

834 i‡(
˛õ¡
->
ascii_comm™d
 =
CAS_CMD
)

836 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
)

838 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "EXISTS\r\n");

840 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
)

842 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "NOT_FOUND\r\n");

846 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "NOT_STORED\r\n");

851 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "NOT_STORED\r\n");

855 *
íd
 +
nbyãs
 + 2;

858 
	}
}

860 
	$¥o˚ss_ˇs_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

861 **
tokís
, 
¡okís
, *
°¨t
,

862 **
íd
, 
ssize_t
 
Àngth
)

864 i‡(
¡okís
 != 6)

866 
	`£nd_comm™d_ußge
(
˛õ¡
);

867  
Ál£
;

870 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ª∂a˚
 =
NULL
)

872 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

873  
Ál£
;

876  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

877 
	}
}

879 
	$¥o˚ss_£t_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

880 **
tokís
, 
¡okís
, *
°¨t
,

881 **
íd
, 
ssize_t
 
Àngth
)

883 i‡(
¡okís
 != 5)

885 
	`£nd_comm™d_ußge
(
˛õ¡
);

886  
Ál£
;

889 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
£t
 =
NULL
)

891 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

892  
Ál£
;

895  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

896 
	}
}

898 
	$¥o˚ss_add_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

899 **
tokís
, 
¡okís
, *
°¨t
,

900 **
íd
, 
ssize_t
 
Àngth
)

902 i‡(
¡okís
 != 5)

904 
	`£nd_comm™d_ußge
(
˛õ¡
);

905  
Ál£
;

908 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
add
 =
NULL
)

910 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

911  
Ál£
;

914  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

915 
	}
}

917 
	$¥o˚ss_ª∂a˚_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

918 **
tokís
, 
¡okís
, *
°¨t
,

919 **
íd
, 
ssize_t
 
Àngth
)

921 i‡(
¡okís
 != 5)

923 
	`£nd_comm™d_ußge
(
˛õ¡
);

924  
Ál£
;

927 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ª∂a˚
 =
NULL
)

929 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

930  
Ál£
;

933  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

934 
	}
}

936 
	$¥o˚ss_≠≥nd_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

937 **
tokís
, 
¡okís
, *
°¨t
,

938 **
íd
, 
ssize_t
 
Àngth
)

940 i‡(
¡okís
 != 5)

942 
	`£nd_comm™d_ußge
(
˛õ¡
);

943  
Ál£
;

946 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
≠≥nd
 =
NULL
)

948 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

949  
Ál£
;

952  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

953 
	}
}

955 
	$¥o˚ss_¥ïíd_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

956 **
tokís
, 
¡okís
, *
°¨t
,

957 **
íd
, 
ssize_t
 
Àngth
)

959 i‡(
¡okís
 != 5)

961 
	`£nd_comm™d_ußge
(
˛õ¡
);

962  
Ál£
;

965 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
¥ïíd
 =
NULL
)

967 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

968  
Ál£
;

971  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

972 
	}
}

979 
memˇched_¥Ÿocﬁ_evít_t
 
	$memˇched_ascii_¥Ÿocﬁ_¥o˚ss_d©a
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
)

981 *
±r
(*)
˛õ¡
->
roŸ
->
öput_buf„r
;

982 *
íd±r

±r
;

986 *
íd

	`memchr
(
±r
, '\n', (
size_t
)*
Àngth
);

987 i‡(
íd
 =
NULL
)

989 *
íd±r

±r
;

990  
MEMCACHED_PROTOCOL_READ_EVENT
;

993 
˛õ¡
->
ascii_comm™d

	`ascii_to_cmd
(
±r
, (
size_t
)(*
Àngth
));

996 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
¥e_execuã
 !
NULL
)

998 
˛õ¡
->
roŸ
->
ˇŒback
->
	`¥e_execuã
(˛õ¡, 
NULL
);

1006 i‡(
˛õ¡
->
ascii_comm™d
 =
GET_CMD
 ||

1007 
˛õ¡
->
ascii_comm™d
 =
GETS_CMD
)

1009 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
gë
 !
NULL
)

1011 
	`ascii_¥o˚ss_gës
(
˛õ¡
, 
±r
, 
íd
);

1015 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "SERVER_ERROR: CommandÇot implemented\n");

1023 *
tokís
[10];

1024 
¡okís

	`ascii_tokíize_comm™d
(
±r
, 
íd
, 
tokís
, 10);

1026 i‡(
¡okís
 < 10)

1028 
˛õ¡
->
muã

	`°rcmp
(
tokís
[
¡okís
 - 1], "noreply") == 0;

1029 i‡(
˛õ¡
->
muã
)

1031 --
¡okís
;

1035 
îr‹
= 0;

1037 
	`¥öt_ascii_comm™d
(
˛õ¡
);

1038 
˛õ¡
->
ascii_comm™d
)

1040 
SET_CMD
:

1041 
îr‹

	`¥o˚ss_£t_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
±r
, &
íd
, *
Àngth
);

1044 
ADD_CMD
:

1045 
îr‹

	`¥o˚ss_add_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
±r
, &
íd
, *
Àngth
);

1048 
REPLACE_CMD
:

1049 
îr‹

	`¥o˚ss_ª∂a˚_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
±r
, &
íd
, *
Àngth
);

1052 
CAS_CMD
:

1053 
îr‹

	`¥o˚ss_ˇs_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
±r
, &
íd
, *
Àngth
);

1056 
APPEND_CMD
:

1057 
îr‹

	`¥o˚ss_≠≥nd_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
±r
, &
íd
, *
Àngth
);

1060 
PREPEND_CMD
:

1061 
îr‹

	`¥o˚ss_¥ïíd_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
±r
, &
íd
, *
Àngth
);

1064 
DELETE_CMD
:

1065 
	`¥o˚ss_dñëe
(
˛õ¡
, 
tokís
, 
¡okís
);

1068 
INCR_CMD
:

1069 
DECR_CMD
:

1070 
	`¥o˚ss_¨ôhmëic
(
˛õ¡
, 
tokís
, 
¡okís
);

1073 
STATS_CMD
:

1074 i‡(
˛õ¡
->
muã
)

1076 
	`£nd_comm™d_ußge
(
˛õ¡
);

1080 
	`ªcovî_tokíize_comm™d
(
±r
, 
íd
);

1081 
	`¥o˚ss_°©s
(
˛õ¡
, 
±r
 + 6, 
íd
);

1085 
FLUSH_ALL_CMD
:

1086 
	`¥o˚ss_Êush
(
˛õ¡
, 
tokís
, 
¡okís
);

1089 
VERSION_CMD
:

1090 i‡(
˛õ¡
->
muã
)

1092 
	`£nd_comm™d_ußge
(
˛õ¡
);

1096 
	`¥o˚ss_vîsi⁄
(
˛õ¡
, 
tokís
, 
¡okís
);

1100 
QUIT_CMD
:

1101 i‡(
¡okís
 !1 || 
˛õ¡
->
muã
)

1103 
	`£nd_comm™d_ußge
(
˛õ¡
);

1107 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
quô
 !
NULL
)

1109 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`quô
(client);

1112  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

1116 
VERBOSITY_CMD
:

1117 i‡(
¡okís
 != 2)

1119 
	`£nd_comm™d_ußge
(
˛õ¡
);

1123 
	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, "OK\r\n");

1127 
UNKNOWN_CMD
:

1128 
	`£nd_comm™d_ußge
(
˛õ¡
);

1131 
GET_CMD
:

1132 
GETS_CMD
:

1135 
	`ab‹t
();

1138 i‡(
îr‹
 == -1)

1140  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

1142 i‡(
îr‹
 == 1)

1144  
MEMCACHED_PROTOCOL_READ_EVENT
;

1148 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
po°_execuã
 !
NULL
)

1150 
˛õ¡
->
roŸ
->
ˇŒback
->
	`po°_execuã
(˛õ¡, 
NULL
);

1154 ++
íd
;

1155 *
Àngth
 -
íd
 - 
±r
;

1156 
±r

íd
;

1157 } *
Àngth
 > 0);

1159 *
íd±r

±r
;

1160  
MEMCACHED_PROTOCOL_READ_EVENT
;

1161 
	}
}

	@libmemcachedprotocol/ascii_handler.h

37 #¥agm®
⁄˚


39 
LIBMEMCACHED_LOCAL


40 
memˇched_¥Ÿocﬁ_evít_t
 
memˇched_ascii_¥Ÿocﬁ_¥o˚ss_d©a
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
);

	@libmemcachedprotocol/binary_handler.c

37 
	~<libmemˇched¥Ÿocﬁ/comm⁄.h
>

39 
	~<°dlib.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<î∫o.h
>

42 
	~<°dboﬁ.h
>

43 
	~<°rög.h
>

44 
	~<°dio.h
>

62 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$øw_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

63 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
,

64 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
ª•⁄£
)

66 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

68 i‡(
˛õ¡
->
roŸ
->
≥d™tic
 &&

69 !
	`memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ª•⁄£
(
ªque°
, 
ª•⁄£
))

71  
PROTOCOL_BINARY_RESPONSE_EINVAL
;

74 i‡(
˛õ¡
->
roŸ
->
	`døö
(˛õ¡Ë=
Ál£
)

76  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

79 
size_t
 
Àn
(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
Ë+ 
	`ht⁄l
(
ª•⁄£
->ª•⁄£.
bodyÀn
);

80 
size_t
 
off£t
= 0;

81 *
±r
(*)
ª•⁄£
;

83 i‡(
˛õ¡
->
ouçut
 =
NULL
)

88 
size_t
 
num_byãs

Àn
 - 
off£t
;

89 
ssize_t
 
nw

˛õ¡
->
roŸ
->
	`£nd
(client,

90 
˛õ¡
->
sock
,

91 
±r
 + 
off£t
,

92 
num_byãs
);

93 i‡(
nw
 == -1)

95 i‡(
	`gë_sockë_î∫o
(Ë=
EWOULDBLOCK
)

99 i‡(
	`gë_sockë_î∫o
(Ë!
EINTR
)

101 
˛õ¡
->
îr‹

î∫o
;

102  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

107 
off£t
 +(
size_t
)
nw
;

109 } 
off£t
 < 
Àn
);

112  
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
±r
, 
Àn
 - 
off£t
);

113 
	}
}

115 
	$¥öt_cmd
(
¥Ÿocﬁ_bö¨y_comm™d
 
cmd
)

117 
cmd
)

119 
PROTOCOL_BINARY_CMD_GET
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_GET\n", 
__FILE__
, 
__LINE__
); ;

120 
PROTOCOL_BINARY_CMD_SET
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_SET\n", 
__FILE__
, 
__LINE__
); ;

121 
PROTOCOL_BINARY_CMD_ADD
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_ADD\n", 
__FILE__
, 
__LINE__
); ;

122 
PROTOCOL_BINARY_CMD_REPLACE
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_REPLACE\n", 
__FILE__
, 
__LINE__
); ;

123 
PROTOCOL_BINARY_CMD_DELETE
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_DELETE\n", 
__FILE__
, 
__LINE__
); ;

124 
PROTOCOL_BINARY_CMD_INCREMENT
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_INCREMENT\n", 
__FILE__
, 
__LINE__
); ;

125 
PROTOCOL_BINARY_CMD_DECREMENT
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_DECREMENT\n", 
__FILE__
, 
__LINE__
); ;

126 
PROTOCOL_BINARY_CMD_QUIT
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_QUIT\n", 
__FILE__
, 
__LINE__
); ;

127 
PROTOCOL_BINARY_CMD_FLUSH
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_FLUSH\n", 
__FILE__
, 
__LINE__
); ;

128 
PROTOCOL_BINARY_CMD_GETQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_GETQ\n", 
__FILE__
, 
__LINE__
); ;

129 
PROTOCOL_BINARY_CMD_NOOP
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_NOOP\n", 
__FILE__
, 
__LINE__
); ;

130 
PROTOCOL_BINARY_CMD_VERSION
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_VERSION\n", 
__FILE__
, 
__LINE__
); ;

131 
PROTOCOL_BINARY_CMD_GETK
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_GETK\n", 
__FILE__
, 
__LINE__
); ;

132 
PROTOCOL_BINARY_CMD_GETKQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_GETKQ\n", 
__FILE__
, 
__LINE__
); ;

133 
PROTOCOL_BINARY_CMD_APPEND
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_APPEND\n", 
__FILE__
, 
__LINE__
); ;

134 
PROTOCOL_BINARY_CMD_PREPEND
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_PREPEND\n", 
__FILE__
, 
__LINE__
); ;

135 
PROTOCOL_BINARY_CMD_STAT
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_STAT\n", 
__FILE__
, 
__LINE__
); ;

136 
PROTOCOL_BINARY_CMD_SETQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_SETQ\n", 
__FILE__
, 
__LINE__
); ;

137 
PROTOCOL_BINARY_CMD_ADDQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_ADDQ\n", 
__FILE__
, 
__LINE__
); ;

138 
PROTOCOL_BINARY_CMD_REPLACEQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_REPLACEQ\n", 
__FILE__
, 
__LINE__
); ;

139 
PROTOCOL_BINARY_CMD_DELETEQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_DELETEQ\n", 
__FILE__
, 
__LINE__
); ;

140 
PROTOCOL_BINARY_CMD_INCREMENTQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_INCREMENTQ\n", 
__FILE__
, 
__LINE__
); ;

141 
PROTOCOL_BINARY_CMD_DECREMENTQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_DECREMENTQ\n", 
__FILE__
, 
__LINE__
); ;

142 
PROTOCOL_BINARY_CMD_QUITQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_QUITQ\n", 
__FILE__
, 
__LINE__
); ;

143 
PROTOCOL_BINARY_CMD_FLUSHQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_FLUSHQ\n", 
__FILE__
, 
__LINE__
); ;

144 
PROTOCOL_BINARY_CMD_APPENDQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_APPENDQ\n", 
__FILE__
, 
__LINE__
); ;

145 
PROTOCOL_BINARY_CMD_PREPENDQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_PREPENDQ\n", 
__FILE__
, 
__LINE__
); ;

146 
PROTOCOL_BINARY_CMD_VERBOSITY
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_VERBOSITY\n", 
__FILE__
, 
__LINE__
); ;

147 
PROTOCOL_BINARY_CMD_TOUCH
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_TOUCH\n", 
__FILE__
, 
__LINE__
); ;

148 
PROTOCOL_BINARY_CMD_GAT
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_GAT\n", 
__FILE__
, 
__LINE__
); ;

149 
PROTOCOL_BINARY_CMD_GATQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_GATQ\n", 
__FILE__
, 
__LINE__
); ;

150 
PROTOCOL_BINARY_CMD_SASL_LIST_MECHS
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_SASL_LIST_MECHS\n", 
__FILE__
, 
__LINE__
); ;

151 
PROTOCOL_BINARY_CMD_SASL_AUTH
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_SASL_AUTH\n", 
__FILE__
, 
__LINE__
); ;

152 
PROTOCOL_BINARY_CMD_SASL_STEP
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_SASL_STEP\n", 
__FILE__
, 
__LINE__
); ;

153 
PROTOCOL_BINARY_CMD_RGET
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RGET\n", 
__FILE__
, 
__LINE__
); ;

154 
PROTOCOL_BINARY_CMD_RSET
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RSET\n", 
__FILE__
, 
__LINE__
); ;

155 
PROTOCOL_BINARY_CMD_RSETQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RSETQ\n", 
__FILE__
, 
__LINE__
); ;

156 
PROTOCOL_BINARY_CMD_RAPPEND
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RAPPEND\n", 
__FILE__
, 
__LINE__
); ;

157 
PROTOCOL_BINARY_CMD_RAPPENDQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RAPPENDQ\n", 
__FILE__
, 
__LINE__
); ;

158 
PROTOCOL_BINARY_CMD_RPREPEND
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RPREPEND\n", 
__FILE__
, 
__LINE__
); ;

159 
PROTOCOL_BINARY_CMD_RPREPENDQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RPREPENDQ\n", 
__FILE__
, 
__LINE__
); ;

160 
PROTOCOL_BINARY_CMD_RDELETE
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RDELETE\n", 
__FILE__
, 
__LINE__
); ;

161 
PROTOCOL_BINARY_CMD_RDELETEQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RDELETEQ\n", 
__FILE__
, 
__LINE__
); ;

162 
PROTOCOL_BINARY_CMD_RINCR
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RINCR\n", 
__FILE__
, 
__LINE__
); ;

163 
PROTOCOL_BINARY_CMD_RINCRQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RINCRQ\n", 
__FILE__
, 
__LINE__
); ;

164 
PROTOCOL_BINARY_CMD_RDECR
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RDECR\n", 
__FILE__
, 
__LINE__
); ;

165 
PROTOCOL_BINARY_CMD_RDECRQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_RDECRQ\n", 
__FILE__
, 
__LINE__
); ;

166 
PROTOCOL_BINARY_CMD_SET_VBUCKET
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_SET_VBUCKET\n", 
__FILE__
, 
__LINE__
); ;

167 
PROTOCOL_BINARY_CMD_GET_VBUCKET
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_GET_VBUCKET\n", 
__FILE__
, 
__LINE__
); ;

168 
PROTOCOL_BINARY_CMD_DEL_VBUCKET
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_DEL_VBUCKET\n", 
__FILE__
, 
__LINE__
); ;

169 
PROTOCOL_BINARY_CMD_TAP_CONNECT
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_TAP_CONNECT\n", 
__FILE__
, 
__LINE__
); ;

170 
PROTOCOL_BINARY_CMD_TAP_MUTATION
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_TAP_MUTATION\n", 
__FILE__
, 
__LINE__
); ;

171 
PROTOCOL_BINARY_CMD_TAP_DELETE
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_TAP_DELETE\n", 
__FILE__
, 
__LINE__
); ;

172 
PROTOCOL_BINARY_CMD_TAP_FLUSH
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_TAP_FLUSH\n", 
__FILE__
, 
__LINE__
); ;

173 
PROTOCOL_BINARY_CMD_TAP_OPAQUE
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_TAP_OPAQUE\n", 
__FILE__
, 
__LINE__
); ;

174 
PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET\n", 
__FILE__
, 
__LINE__
); ;

175 
PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START\n", 
__FILE__
, 
__LINE__
); ;

176 
PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END\n", 
__FILE__
, 
__LINE__
); ;

177 
PROTOCOL_BINARY_CMD_LAST_RESERVED
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_LAST_RESERVED\n", 
__FILE__
, 
__LINE__
); ;

178 
PROTOCOL_BINARY_CMD_GATK
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_GATK\n", 
__FILE__
, 
__LINE__
); ;

179 
PROTOCOL_BINARY_CMD_GATKQ
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_GATKQ\n", 
__FILE__
, 
__LINE__
); ;

180 
PROTOCOL_BINARY_CMD_SCRUB
: 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL_BINARY_CMD_SCRUB\n", 
__FILE__
, 
__LINE__
); ;

182 
	`ab‹t
();

184 
	}
}

204 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$gë_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

205 c⁄° *
key
,

206 
uöt16_t
 
keyÀn
,

207 c⁄° *
body
,

208 
uöt32_t
 
bodyÀn
,

209 
uöt32_t
 
Êags
,

210 
uöt64_t
 
ˇs
)

212 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

213 
uöt8_t
 
›code

˛õ¡
->
cuºít_comm™d
->
ªque°
.opcode;

215 i‡(
›code
 =
PROTOCOL_BINARY_CMD_GET
 || opcodê=
PROTOCOL_BINARY_CMD_GETQ
)

217 
keyÀn
= 0;

220 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
ª•⁄£
= {

221 .
mesßge
.
hódî
.
ª•⁄£
= {

222 .
magic

PROTOCOL_BINARY_RES
,

223 .
›code
= opcode,

224 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

225 .
›aque

˛õ¡
->
cuºít_comm™d
->
ªque°
.opaque,

226 .
ˇs

	`memˇched_ht⁄Œ
(cas),

227 .
keyÀn

	`ht⁄s
(keylen),

228 .
exéí
= 4,

229 .
bodyÀn

	`ht⁄l
(bodyÀ¿+ 
keyÀn
 + 4),

233 
ª•⁄£
.
mesßge
.
body
.
Êags

	`ht⁄l
(flags);

235 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

236 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
suc˚ss

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

237 i‡((
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ª•⁄£
.
byãs
, ‘e•⁄£.byãs))Ë!
suc˚ss
 ||

238 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
key
, 
keyÀn
)Ë!
suc˚ss
 ||

239 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
body
, 
bodyÀn
)Ë!
suc˚ss
)

241  
rvÆ
;

244  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

245 
	}
}

255 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$°©_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

256 c⁄° *
key
,

257 
uöt16_t
 
keyÀn
,

258 c⁄° *
body
,

259 
uöt32_t
 
bodyÀn
)

262 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

264 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

265 .
mesßge
.
hódî
.
ª•⁄£
= {

266 .
magic

PROTOCOL_BINARY_RES
,

267 .
›code

˛õ¡
->
cuºít_comm™d
->
ªque°
.opcode,

268 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

269 .
›aque

˛õ¡
->
cuºít_comm™d
->
ªque°
.opaque,

270 .
keyÀn

	`ht⁄s
(keylen),

271 .
bodyÀn

	`ht⁄l
(bodyÀ¿+ 
keyÀn
),

272 .
ˇs
= 0

276 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

277 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
suc˚ss

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

278 i‡((
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ª•⁄£
.
byãs
, ‘e•⁄£.byãs))Ë!
suc˚ss
 ||

279 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
key
, 
keyÀn
)Ë!
suc˚ss
 ||

280 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
body
, 
bodyÀn
)Ë!
suc˚ss
)

282  
rvÆ
;

285  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

286 
	}
}

294 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$vîsi⁄_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

295 c⁄° *
ãxt
,

296 
uöt32_t
 
ãxéí
)

299 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

301 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

302 .
mesßge
.
hódî
.
ª•⁄£
= {

303 .
magic

PROTOCOL_BINARY_RES
,

304 .
›code

˛õ¡
->
cuºít_comm™d
->
ªque°
.opcode,

305 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

306 .
›aque

˛õ¡
->
cuºít_comm™d
->
ªque°
.opaque,

307 .
bodyÀn

	`ht⁄l
(
ãxéí
),

308 .
ˇs
= 0

312 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

313 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
suc˚ss

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

314 i‡((
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ª•⁄£
.
byãs
, ‘e•⁄£.byãs))Ë!
suc˚ss
 ||

315 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ãxt
, 
ãxéí
)Ë!
suc˚ss
)

317  
rvÆ
;

320  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

321 
	}
}

330 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


331 
	$add_comm™d_h™dÀr
(c⁄° *
cookõ
,

332 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

333 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

335 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

337 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

338 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
add
 !
NULL
)

340 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

341 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

342 
¥Ÿocﬁ_bö¨y_ªque°_add
 *
ªque°
(*)
hódî
;

343 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

344 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

345 *
key
((*)
hódî
) + (*header) + 8;

346 *
d©a

key
 + 
keyÀn
;

347 
uöt64_t
 
ˇs
;

349 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`add
(
cookõ
, 
key
, 
keyÀn
,

350 
d©a
, 
d©Æí
, 
Êags
,

351 
timeout
, &
ˇs
);

353 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

354 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_ADD
)

357 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

358 .
mesßge
= {

359 .
hódî
.
ª•⁄£
= {

360 .
magic

PROTOCOL_BINARY_RES
,

361 .
›code

PROTOCOL_BINARY_CMD_ADD
,

362 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

363 .
›aque

hódî
->
ªque°
.opaque,

364 .
ˇs

	`memˇched_¡ohŒ
(cas)

368 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

373 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

376  
rvÆ
;

377 
	}
}

386 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


387 
	$de¸emít_comm™d_h™dÀr
(c⁄° *
cookõ
,

388 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

389 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

391 ()
ª•⁄£_h™dÀr
;

392 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

394 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

395 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
de¸emít
 !
NULL
)

397 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

398 
¥Ÿocﬁ_bö¨y_ªque°_de¸
 *
ªque°
(*)
hódî
;

399 
uöt64_t
 
öô

	`memˇched_¡ohŒ
(
ªque°
->
mesßge
.
body
.
öôül
);

400 
uöt64_t
 
dñè

	`memˇched_¡ohŒ
(
ªque°
->
mesßge
.
body
.delta);

401 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

402 *
key

ªque°
->
byãs
 + (request->bytes);

403 
uöt64_t
 
ªsu…
;

404 
uöt64_t
 
ˇs
;

406 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`de¸emít
(
cookõ
, 
key
, 
keyÀn
,

407 
dñè
, 
öô
, 
timeout
,

408 &
ªsu…
, &
ˇs
);

409 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

410 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_DECREMENT
)

413 
¥Ÿocﬁ_bö¨y_ª•⁄£_de¸
 
ª•⁄£
= {

414 .
mesßge
= {

415 .
hódî
.
ª•⁄£
= {

416 .
magic

PROTOCOL_BINARY_RES
,

417 .
›code

PROTOCOL_BINARY_CMD_DECREMENT
,

418 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

419 .
›aque

hódî
->
ªque°
.opaque,

420 .
ˇs

	`memˇched_¡ohŒ
(cas),

421 .
bodyÀn

	`ht⁄l
(8)

423 .
body
.
vÆue

	`memˇched_ht⁄Œ
(
ªsu…
)

426 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

431 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

434  
rvÆ
;

435 
	}
}

444 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$dñëe_comm™d_h™dÀr
(c⁄° *
cookõ
,

445 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

446 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

448 ()
ª•⁄£_h™dÀr
;

449 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

451 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

452 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
dñëe_obje˘
 !
NULL
)

454 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

455 *
key
(
hódî
 +1);

456 
uöt64_t
 
ˇs

	`memˇched_¡ohŒ
(
hódî
->
ªque°
.cas);

457 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`dñëe_obje˘
(
cookõ
, 
key
, 
keyÀn
, 
ˇs
);

458 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

459 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_DELETE
)

462 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

463 .
mesßge
= {

464 .
hódî
.
ª•⁄£
= {

465 .
magic

PROTOCOL_BINARY_RES
,

466 .
›code

PROTOCOL_BINARY_CMD_DELETE
,

467 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

468 .
›aque

hódî
->
ªque°
.opaque,

472 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

477 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

480  
rvÆ
;

481 
	}
}

490 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


491 
	$Êush_comm™d_h™dÀr
(c⁄° *
cookõ
,

492 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

493 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

495 ()
ª•⁄£_h™dÀr
;

496 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

498 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

499 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
Êush_obje˘
 !
NULL
)

501 
¥Ÿocﬁ_bö¨y_ªque°_Êush
 *
Êush_obje˘
(*)
hódî
;

502 
uöt32_t
 
timeout
= 0;

503 i‡(
	`ht⁄l
(
hódî
->
ªque°
.
bodyÀn
) == 4)

505 
timeout

	`¡ohl
(
Êush_obje˘
->
mesßge
.
body
.
expú©i⁄
);

508 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`Êush_obje˘
(
cookõ
, 
timeout
);

509 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

510 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_FLUSH
)

513 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

514 .
mesßge
= {

515 .
hódî
.
ª•⁄£
= {

516 .
magic

PROTOCOL_BINARY_RES
,

517 .
›code

PROTOCOL_BINARY_CMD_FLUSH
,

518 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

519 .
›aque

hódî
->
ªque°
.opaque,

523 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

528 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

531  
rvÆ
;

532 
	}
}

541 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


542 
	$gë_comm™d_h™dÀr
(c⁄° *
cookõ
,

543 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

544 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

546 ()
ª•⁄£_h™dÀr
;

547 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

549 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

550 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
gë
 !
NULL
)

552 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

553 *
key
(
hódî
 + 1);

554 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`gë
(
cookõ
, 
key
, 
keyÀn
,

555 
gë_ª•⁄£_h™dÀr
);

557 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
 &&

558 (
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_GETQ
 ||

559 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_GETKQ
))

562 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

567 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

570  
rvÆ
;

571 
	}
}

580 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


581 
	$ö¸emít_comm™d_h™dÀr
(c⁄° *
cookõ
,

582 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

583 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

585 ()
ª•⁄£_h™dÀr
;

586 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

588 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

589 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ö¸emít
 !
NULL
)

591 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

592 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 *
ªque°
(*)
hódî
;

593 
uöt64_t
 
öô

	`memˇched_¡ohŒ
(
ªque°
->
mesßge
.
body
.
öôül
);

594 
uöt64_t
 
dñè

	`memˇched_¡ohŒ
(
ªque°
->
mesßge
.
body
.delta);

595 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

596 *
key

ªque°
->
byãs
 + (request->bytes);

597 
uöt64_t
 
ˇs
;

598 
uöt64_t
 
ªsu…
;

600 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`ö¸emít
(
cookõ
, 
key
, 
keyÀn
,

601 
dñè
, 
öô
, 
timeout
,

602 &
ªsu…
, &
ˇs
);

603 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

604 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_INCREMENT
)

607 
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
 
ª•⁄£
= {

608 .
mesßge
= {

609 .
hódî
.
ª•⁄£
= {

610 .
magic

PROTOCOL_BINARY_RES
,

611 .
›code

PROTOCOL_BINARY_CMD_INCREMENT
,

612 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

613 .
›aque

hódî
->
ªque°
.opaque,

614 .
ˇs

	`memˇched_¡ohŒ
(cas),

615 .
bodyÀn

	`ht⁄l
(8)

617 .
body
.
vÆue

	`memˇched_ht⁄Œ
(
ªsu…
)

621 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

626 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

629  
rvÆ
;

630 
	}
}

641 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


642 
	$no›_comm™d_h™dÀr
(c⁄° *
cookõ
,

643 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

644 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

646 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

647 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
no›
 !
NULL
)

649 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`no›
(
cookõ
);

652 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

653 .
mesßge
= {

654 .
hódî
.
ª•⁄£
= {

655 .
magic

PROTOCOL_BINARY_RES
,

656 .
›code

PROTOCOL_BINARY_CMD_NOOP
,

657 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

658 .
›aque

hódî
->
ªque°
.opaque,

663  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

664 
	}
}

673 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


674 
	$≠≥nd_comm™d_h™dÀr
(c⁄° *
cookõ
,

675 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

676 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

678 ()
ª•⁄£_h™dÀr
;

679 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

681 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

682 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
≠≥nd
 !
NULL
)

684 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

685 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
;

686 *
key
(*)(
hódî
 +1);

687 *
d©a

key
 +
keyÀn
;

688 
uöt64_t
 
ˇs

	`memˇched_¡ohŒ
(
hódî
->
ªque°
.cas);

689 
uöt64_t
 
ªsu…_ˇs
;

691 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`≠≥nd
(
cookõ
, 
key
, 
keyÀn
,

692 
d©a
, 
d©Æí
, 
ˇs
,

693 &
ªsu…_ˇs
);

694 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

695 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_APPEND
)

698 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

699 .
mesßge
= {

700 .
hódî
.
ª•⁄£
= {

701 .
magic

PROTOCOL_BINARY_RES
,

702 .
›code

PROTOCOL_BINARY_CMD_APPEND
,

703 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

704 .
›aque

hódî
->
ªque°
.opaque,

705 .
ˇs

	`memˇched_¡ohŒ
(
ªsu…_ˇs
),

709 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

714 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

717  
rvÆ
;

718 
	}
}

727 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


728 
	$¥ïíd_comm™d_h™dÀr
(c⁄° *
cookõ
,

729 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

730 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

732 ()
ª•⁄£_h™dÀr
;

733 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

735 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

736 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
¥ïíd
 !
NULL
)

738 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

739 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
;

740 *
key
(*)(
hódî
 + 1);

741 *
d©a

key
 + 
keyÀn
;

742 
uöt64_t
 
ˇs

	`memˇched_¡ohŒ
(
hódî
->
ªque°
.cas);

743 
uöt64_t
 
ªsu…_ˇs
;

744 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`¥ïíd
(
cookõ
, 
key
, 
keyÀn
,

745 
d©a
, 
d©Æí
, 
ˇs
,

746 &
ªsu…_ˇs
);

747 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

748 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_PREPEND
)

751 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

752 .
mesßge
= {

753 .
hódî
.
ª•⁄£
= {

754 .
magic

PROTOCOL_BINARY_RES
,

755 .
›code

PROTOCOL_BINARY_CMD_PREPEND
,

756 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

757 .
›aque

hódî
->
ªque°
.opaque,

758 .
ˇs

	`memˇched_¡ohŒ
(
ªsu…_ˇs
),

762 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

767 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

770  
rvÆ
;

771 
	}
}

780 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


781 
	$quô_comm™d_h™dÀr
(c⁄° *
cookõ
,

782 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

783 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

785 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

786 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
quô
 !
NULL
)

788 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`quô
(
cookõ
);

791 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

792 .
mesßge
= {

793 .
hódî
.
ª•⁄£
= {

794 .
magic

PROTOCOL_BINARY_RES
,

795 .
›code

PROTOCOL_BINARY_CMD_QUIT
,

796 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

797 .
›aque

hódî
->
ªque°
.opaque

802 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_QUIT
)

804 
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

808  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

809 
	}
}

818 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


819 
	$ª∂a˚_comm™d_h™dÀr
(c⁄° *
cookõ
,

820 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

821 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

823 ()
ª•⁄£_h™dÀr
;

824 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

826 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

827 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ª∂a˚
 !
NULL
)

829 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

830 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

831 
¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
 *
ªque°
(*)
hódî
;

832 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

833 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

834 *
key
((*)
hódî
) + (*header) + 8;

835 *
d©a

key
 + 
keyÀn
;

836 
uöt64_t
 
ˇs

	`memˇched_¡ohŒ
(
hódî
->
ªque°
.cas);

837 
uöt64_t
 
ªsu…_ˇs
;

839 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`ª∂a˚
(
cookõ
, 
key
, 
keyÀn
,

840 
d©a
, 
d©Æí
, 
Êags
,

841 
timeout
, 
ˇs
,

842 &
ªsu…_ˇs
);

843 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

844 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_REPLACE
)

847 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

848 .
mesßge
= {

849 .
hódî
.
ª•⁄£
= {

850 .
magic

PROTOCOL_BINARY_RES
,

851 .
›code

PROTOCOL_BINARY_CMD_REPLACE
,

852 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

853 .
›aque

hódî
->
ªque°
.opaque,

854 .
ˇs

	`memˇched_¡ohŒ
(
ªsu…_ˇs
),

858 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

863 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

866  
rvÆ
;

867 
	}
}

876 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$£t_comm™d_h™dÀr
(c⁄° *
cookõ
,

877 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

878 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

880 ()
ª•⁄£_h™dÀr
;

881 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

883 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

884 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
£t
 !
NULL
)

886 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

887 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

888 
¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
 *
ªque°
(*)
hódî
;

889 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

890 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

891 *
key
((*)
hódî
) + (*header) + 8;

892 *
d©a

key
 + 
keyÀn
;

893 
uöt64_t
 
ˇs

	`memˇched_¡ohŒ
(
hódî
->
ªque°
.cas);

894 
uöt64_t
 
ªsu…_ˇs
;

897 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`£t
(
cookõ
, 
key
, 
keyÀn
,

898 
d©a
, 
d©Æí
, 
Êags
,

899 
timeout
, 
ˇs
, &
ªsu…_ˇs
);

900 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

901 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_SET
)

904 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

905 .
mesßge
= {

906 .
hódî
.
ª•⁄£
= {

907 .
magic

PROTOCOL_BINARY_RES
,

908 .
›code

PROTOCOL_BINARY_CMD_SET
,

909 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

910 .
›aque

hódî
->
ªque°
.opaque,

911 .
ˇs

	`memˇched_¡ohŒ
(
ªsu…_ˇs
),

915 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

920 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

923  
rvÆ
;

924 
	}
}

933 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


934 
	$°©_comm™d_h™dÀr
(c⁄° *
cookõ
,

935 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

936 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

938 ()
ª•⁄£_h™dÀr
;

939 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

941 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

942 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
°©
 !
NULL
)

944 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

946 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`°©
(
cookõ
,

947 (*)(
hódî
 + 1),

948 
keyÀn
,

949 
°©_ª•⁄£_h™dÀr
);

953 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

956  
rvÆ
;

957 
	}
}

966 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


967 
	$vîsi⁄_comm™d_h™dÀr
(c⁄° *
cookõ
,

968 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

969 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

971 ()
ª•⁄£_h™dÀr
;

972 ()
hódî
;

973 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

975 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

976 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
vîsi⁄
 !
NULL
)

978 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`vîsi⁄
(
cookõ
,

979 
vîsi⁄_ª•⁄£_h™dÀr
);

983 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

986  
rvÆ
;

987 
	}
}

992 
memˇched_bö¨y_¥Ÿocﬁ_comm™d_h™dÀr
 
	gcomcode_v0_v1_ªm≠
[256]= {

993 [
PROTOCOL_BINARY_CMD_ADDQ
]
add_comm™d_h™dÀr
,

994 [
PROTOCOL_BINARY_CMD_ADD
]
add_comm™d_h™dÀr
,

995 [
PROTOCOL_BINARY_CMD_APPENDQ
]
≠≥nd_comm™d_h™dÀr
,

996 [
PROTOCOL_BINARY_CMD_APPEND
]
≠≥nd_comm™d_h™dÀr
,

997 [
PROTOCOL_BINARY_CMD_DECREMENTQ
]
de¸emít_comm™d_h™dÀr
,

998 [
PROTOCOL_BINARY_CMD_DECREMENT
]
de¸emít_comm™d_h™dÀr
,

999 [
PROTOCOL_BINARY_CMD_DELETEQ
]
dñëe_comm™d_h™dÀr
,

1000 [
PROTOCOL_BINARY_CMD_DELETE
]
dñëe_comm™d_h™dÀr
,

1001 [
PROTOCOL_BINARY_CMD_FLUSHQ
]
Êush_comm™d_h™dÀr
,

1002 [
PROTOCOL_BINARY_CMD_FLUSH
]
Êush_comm™d_h™dÀr
,

1003 [
PROTOCOL_BINARY_CMD_GETKQ
]
gë_comm™d_h™dÀr
,

1004 [
PROTOCOL_BINARY_CMD_GETK
]
gë_comm™d_h™dÀr
,

1005 [
PROTOCOL_BINARY_CMD_GETQ
]
gë_comm™d_h™dÀr
,

1006 [
PROTOCOL_BINARY_CMD_GET
]
gë_comm™d_h™dÀr
,

1007 [
PROTOCOL_BINARY_CMD_INCREMENTQ
]
ö¸emít_comm™d_h™dÀr
,

1008 [
PROTOCOL_BINARY_CMD_INCREMENT
]
ö¸emít_comm™d_h™dÀr
,

1009 [
PROTOCOL_BINARY_CMD_NOOP
]
no›_comm™d_h™dÀr
,

1010 [
PROTOCOL_BINARY_CMD_PREPENDQ
]
¥ïíd_comm™d_h™dÀr
,

1011 [
PROTOCOL_BINARY_CMD_PREPEND
]
¥ïíd_comm™d_h™dÀr
,

1012 [
PROTOCOL_BINARY_CMD_QUITQ
]
quô_comm™d_h™dÀr
,

1013 [
PROTOCOL_BINARY_CMD_QUIT
]
quô_comm™d_h™dÀr
,

1014 [
PROTOCOL_BINARY_CMD_REPLACEQ
]
ª∂a˚_comm™d_h™dÀr
,

1015 [
PROTOCOL_BINARY_CMD_REPLACE
]
ª∂a˚_comm™d_h™dÀr
,

1016 [
PROTOCOL_BINARY_CMD_SETQ
]
£t_comm™d_h™dÀr
,

1017 [
PROTOCOL_BINARY_CMD_SET
]
£t_comm™d_h™dÀr
,

1018 [
PROTOCOL_BINARY_CMD_STAT
]
°©_comm™d_h™dÀr
,

1019 [
PROTOCOL_BINARY_CMD_VERSION
]
vîsi⁄_comm™d_h™dÀr
,

1031 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$execuã_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
)

1033 i‡(
˛õ¡
->
roŸ
->
≥d™tic
 &&

1034 
	`memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ªque°
(
hódî
))

1040 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
¥e_execuã
 !
NULL
)

1042 
˛õ¡
->
roŸ
->
ˇŒback
->
	`¥e_execuã
(˛õ¡, 
hódî
);

1045 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

1046 
uöt8_t
 
cc

hódî
->
ªque°
.
›code
;

1048 i‡(
˛õ¡
->
is_vîbo£
)

1050 
	`¥öt_cmd
(
cc
);

1053 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚_vîsi⁄
)

1056 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v0
.
comcode
[
cc
] !
NULL
)

1058 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v0
.
comcode
[
cc
](˛õ¡, 
hódî
, 
øw_ª•⁄£_h™dÀr
);

1063 i‡(
comcode_v0_v1_ªm≠
[
cc
] !
NULL
)

1065 
rvÆ

comcode_v0_v1_ªm≠
[
cc
](
˛õ¡
, 
hódî
, 
øw_ª•⁄£_h™dÀr
);

1074 
	`ab‹t
();

1078 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
 &&

1079 
˛õ¡
->
roŸ
->
ˇŒback
->
unknown
 !
NULL
)

1081 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
	`unknown
(˛õ¡, 
hódî
, 
øw_ª•⁄£_h™dÀr
);

1084 i‡(
rvÆ
 !
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

1085 
rvÆ
 !
PROTOCOL_BINARY_RESPONSE_EINTERNAL
 &&

1086 
rvÆ
 !
PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED
)

1088 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

1089 .
mesßge
= {

1090 .
hódî
.
ª•⁄£
= {

1091 .
magic

PROTOCOL_BINARY_RES
,

1092 .
›code

cc
,

1093 .
°©us

	`ht⁄s
(
rvÆ
),

1094 .
›aque

hódî
->
ªque°
.opaque,

1098 
rvÆ

	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, 
hódî
, (*)&
ª•⁄£
);

1101 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
po°_execuã
 !
NULL
)

1103 
˛õ¡
->
roŸ
->
ˇŒback
->
	`po°_execuã
(˛õ¡, 
hódî
);

1106  
rvÆ
;

1107 
	}
}

1114 
memˇched_¥Ÿocﬁ_evít_t
 
	$memˇched_bö¨y_¥Ÿocﬁ_¥o˚ss_d©a
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
)

1117 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
;

1118 
hódî
(*)
˛õ¡
->
roŸ
->
öput_buf„r
;

1119 i‡(
hódî
->
ªque°
.
magic
 !(
uöt8_t
)
PROTOCOL_BINARY_REQ
)

1121 
˛õ¡
->
îr‹

EINVAL
;

1122  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

1124 
ssize_t
 
Àn
*
Àngth
;

1126 
Àn
 >(
ssize_t
)(*
hódî
) &&

1127 (
Àn
 >(
ssize_t
)((*
hódî
Ë+ 
	`¡ohl
(hódî->
ªque°
.
bodyÀn
))))

1130 
˛õ¡
->
cuºít_comm™d

hódî
;

1131 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rv

	`execuã_comm™d
(
˛õ¡
, 
hódî
);

1133 i‡(
rv
 =
PROTOCOL_BINARY_RESPONSE_EINTERNAL
)

1135 *
Àngth

Àn
;

1136 *
íd±r
(*)
hódî
;

1137  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

1139 i‡(
rv
 =
PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED
)

1141  
MEMCACHED_PROTOCOL_PAUSE_EVENT
;

1144 
ssize_t
 
tŸÆ
(ssize_t)((*
hódî
Ë+ 
	`¡ohl
(hódî->
ªque°
.
bodyÀn
));

1145 
Àn
 -
tŸÆ
;

1146 i‡(
Àn
 > 0)

1148 
öçå_t
 
±r
(öçå_t)
hódî
;

1149 
±r
 +
tŸÆ
;

1150 i‡((
±r
 % 8) == 0)

1152 
hódî
(*)
±r
;

1157 
	`memmove
(
˛õ¡
->
roŸ
->
öput_buf„r
, (*)
±r
, (
size_t
)
Àn
);

1158 
hódî
(*)
˛õ¡
->
roŸ
->
öput_buf„r
;

1161 *
Àngth

Àn
;

1162 *
íd±r
(*)
hódî
;

1165  
MEMCACHED_PROTOCOL_READ_EVENT
;

1166 
	}
}

1173 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
	$memˇched_bö¨y_¥Ÿocﬁ_gë_ˇŒbacks
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
)

1175  
ö°™˚
->
ˇŒback
;

1176 
	}
}

1178 
	$memˇched_bö¨y_¥Ÿocﬁ_£t_ˇŒbacks
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
ˇŒback
)

1180 
ö°™˚
->
ˇŒback
= callback;

1181 
	}
}

1183 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
	$memˇched_bö¨y_¥Ÿocﬁ_gë_øw_ª•⁄£_h™dÀr
(c⁄° *
cookõ
)

1185 ()
cookõ
;

1186  
øw_ª•⁄£_h™dÀr
;

1187 
	}
}

1189 
	$memˇched_bö¨y_¥Ÿocﬁ_£t_≥d™tic
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
boﬁ
 
íabÀ
)

1191 
ö°™˚
->
≥d™tic

íabÀ
;

1192 
	}
}

1194 
boﬁ
 
	$memˇched_bö¨y_¥Ÿocﬁ_gë_≥d™tic
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
)

1196  
ö°™˚
->
≥d™tic
;

1197 
	}
}

	@libmemcachedprotocol/binary_handler.h

37 #¥agm®
⁄˚


39 
LIBMEMCACHED_LOCAL


40 
boﬁ
 
memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ªque°
(c⁄° 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
);

42 
LIBMEMCACHED_LOCAL


43 
boﬁ
 
memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ª•⁄£
(c⁄° 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
,

44 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
ª•⁄£
);

46 
LIBMEMCACHED_LOCAL


47 
memˇched_¥Ÿocﬁ_evít_t
 
memˇched_bö¨y_¥Ÿocﬁ_¥o˚ss_d©a
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
);

	@libmemcachedprotocol/cache.c

38 
	~"mem_c⁄fig.h
"

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<öây≥s.h
>

44 #i‚de‡
NDEBUG


45 
	~<sig«l.h
>

48 
	~<libmemˇched¥Ÿocﬁ/comm⁄.h
>

50 #i‚de‡
NDEBUG


51 c⁄° 
uöt64_t
 
	gªdz⁄e_∑âîn
 = 0xdeadbeefcafebabe;

52 
	gˇche_îr‹
 = 0;

55 c⁄° 
size_t
 
	göôül_poﬁ_size
 = 64;

57 
ˇche_t
* 
	$ˇche_¸óã
(c⁄° *
«me
, 
size_t
 
bufsize
, size_à
Æign
,

58 
ˇche_c⁄°ru˘‹_t
* 
c⁄°ru˘‹
,

59 
ˇche_de°ru˘‹_t
* 
de°ru˘‹
) {

60 
ˇche_t
* 
ªt
 = 
	`ˇŒoc
(1, (cache_t));

61 
size_t
 
«me_Àngth

	`°æí
(
«me
);

62 * 
nm

	`ˇŒoc
(1, ((Ë* 
«me_Àngth
) +1);

63 
	`mem˝y
(
nm
, 
«me
, 
«me_Àngth
);

64 ** 
±r
 = 
	`ˇŒoc
(
öôül_poﬁ_size
, 
bufsize
);

65 i‡(
ªt
 =
NULL
 || 
nm
 =NULL || 
±r
 == NULL ||

66 
	`±hªad_muãx_öô
(&
ªt
->
muãx
, 
NULL
) == -1) {

67 
	`‰ì
(
ªt
);

68 
	`‰ì
(
nm
);

69 
	`‰ì
(
±r
);

70  
NULL
;

73 
ªt
->
«me
 = 
nm
;

74 
ªt
->
±r
 =Ötr;

75 
ªt
->
‰ìtŸÆ
 = 
öôül_poﬁ_size
;

76 
ªt
->
c⁄°ru˘‹
 = constructor;

77 
ªt
->
de°ru˘‹
 = destructor;

79 #i‚de‡
NDEBUG


80 
ªt
->
bufsize
 = bufsizê+ 2 * (
ªdz⁄e_∑âîn
);

82 
ªt
->
bufsize
 = bufsize;

85 ()
Æign
;

87  
ªt
;

88 
	}
}

90 
ölöe
 * 
	$gë_obje˘
(*
±r
) {

91 #i‚de‡
NDEBUG


92 
uöt64_t
 *
¥e
 = 
±r
;

93  
¥e
 + 1;

95  
±r
;

97 
	}
}

99 
	$ˇche_de°roy
(
ˇche_t
 *
ˇche
) {

100 
ˇche
->
‰ìcuº
 > 0) {

101 *
±r
 = 
ˇche
->±r[--ˇche->
‰ìcuº
];

102 i‡(
ˇche
->
de°ru˘‹
) {

103 
ˇche
->
	`de°ru˘‹
(
	`gë_obje˘
(
±r
), 
NULL
);

105 
	`‰ì
(
±r
);

107 
	`‰ì
(
ˇche
->
«me
);

108 
	`‰ì
(
ˇche
->
±r
);

109 
	`±hªad_muãx_de°roy
(&
ˇche
->
muãx
);

110 
	}
}

112 * 
	$ˇche_Æloc
(
ˇche_t
 *
ˇche
) {

113 *
ªt
;

114 *
obje˘
;

115 
	`±hªad_muãx_lock
(&
ˇche
->
muãx
);

116 i‡(
ˇche
->
‰ìcuº
 > 0) {

117 
ªt
 = 
ˇche
->
±r
[--ˇche->
‰ìcuº
];

118 
obje˘
 = 
	`gë_obje˘
(
ªt
);

120 
obje˘
 = 
ªt
 = 
	`mÆloc
(
ˇche
->
bufsize
);

121 i‡(
ªt
 !
NULL
) {

122 
obje˘
 = 
	`gë_obje˘
(
ªt
);

124 i‡(
ˇche
->
c⁄°ru˘‹
 !
NULL
 &&

125 
ˇche
->
	`c⁄°ru˘‹
(
obje˘
, 
NULL
, 0) != 0) {

126 
	`‰ì
(
ªt
);

127 
obje˘
 = 
NULL
;

131 
	`±hªad_muãx_u∆ock
(&
ˇche
->
muãx
);

133 #i‚de‡
NDEBUG


134 i‡(
obje˘
 !
NULL
) {

136 
uöt64_t
 *
¥e
 = 
ªt
;

137 *
¥e
 = 
ªdz⁄e_∑âîn
;

138 
ªt
 = 
¥e
+1;

139 
	`mem˝y
(((*)
ªt
Ë+ 
ˇche
->
bufsize
 - (2 * (
ªdz⁄e_∑âîn
)),

140 &
ªdz⁄e_∑âîn
, (redzone_pattern));

144  
obje˘
;

145 
	}
}

147 
	$ˇche_‰ì
(
ˇche_t
 *
ˇche
, *
±r
) {

148 
	`±hªad_muãx_lock
(&
ˇche
->
muãx
);

150 #i‚de‡
NDEBUG


152 i‡(
	`memcmp
(((*)
±r
Ë+ 
ˇche
->
bufsize
 - (2 * (
ªdz⁄e_∑âîn
)),

153 &
ªdz⁄e_∑âîn
, (redzone_pattern)) != 0) {

154 
	`øi£
(
SIGABRT
);

155 
ˇche_îr‹
 = 1;

156 
	`±hªad_muãx_u∆ock
(&
ˇche
->
muãx
);

159 
uöt64_t
 *
¥e
 = 
±r
;

160 --
¥e
;

161 i‡(*
¥e
 !
ªdz⁄e_∑âîn
) {

162 
	`øi£
(
SIGABRT
);

163 
ˇche_îr‹
 = -1;

164 
	`±hªad_muãx_u∆ock
(&
ˇche
->
muãx
);

167 
±r
 = 
¥e
;

169 i‡(
ˇche
->
‰ìcuº
 < cache->
‰ìtŸÆ
) {

170 
ˇche
->
±r
[ˇche->
‰ìcuº
++] =Ötr;

173 
size_t
 
√wtŸÆ
 = 
ˇche
->
‰ìtŸÆ
 * 2;

174 **
√w_‰ì
 = 
	`ªÆloc
(
ˇche
->
±r
, (*Ë* 
√wtŸÆ
);

175 i‡(
√w_‰ì
) {

176 
ˇche
->
‰ìtŸÆ
 = 
√wtŸÆ
;

177 
ˇche
->
±r
 = 
√w_‰ì
;

178 
ˇche
->
±r
[ˇche->
‰ìcuº
++] =Ötr;

180 i‡(
ˇche
->
de°ru˘‹
) {

181 
ˇche
->
	`de°ru˘‹
(
±r
, 
NULL
);

183 
	`‰ì
(
±r
);

187 
	`±hªad_muãx_u∆ock
(&
ˇche
->
muãx
);

188 
	}
}

	@libmemcachedprotocol/cache.h

38 #¥agm®
⁄˚


40 
	~<±hªad.h
>

42 #ifde‡
HAVE_UMEM_H


43 
	~<umem.h
>

44 
	#ˇche_t
 
umem_ˇche_t


	)

45 
	#ˇche_Æloc
(
a
Ë
	`umem_ˇche_Æloc
◊, 
UMEM_DEFAULT
)

	)

46 
	#ˇche_‰ì
(
a
, 
b
Ë
	`umem_ˇche_‰ì
◊, b)

	)

47 
	#ˇche_¸óã
(
a
,
b
,
c
,
d
,
e
Ë
	`umem_ˇche_¸óã
((*Ô, b, c, d,É, 
NULL
, NULL, NULL, 0)

	)

48 
	#ˇche_de°roy
(
a
Ë
	`umem_ˇche_de°roy
◊);

	)

50 #i‚de‡
NDEBUG


52 
ˇche_îr‹
;

63 
	tˇche_c⁄°ru˘‹_t
(* 
	tobj
, * 
	tnŸu£d1
, 
	tnŸu£d2
);

73 
	tˇche_de°ru˘‹_t
(* 
	tobj
, * 
	tnŸu£d
);

82 
±hªad_muãx_t
 
	mmuãx
;

84 *
	m«me
;

86 **
	m±r
;

88 
size_t
 
	mbufsize
;

90 
size_t
 
	m‰ìtŸÆ
;

92 
size_t
 
	m‰ìcuº
;

94 
ˇche_c⁄°ru˘‹_t
* 
	mc⁄°ru˘‹
;

96 
ˇche_de°ru˘‹_t
* 
	mde°ru˘‹
;

97 } 
	tˇche_t
;

117 
ˇche_t
* 
ˇche_¸óã
(c⁄° * 
«me
, 
size_t
 
bufsize
, size_à
Æign
,

118 
ˇche_c⁄°ru˘‹_t
* 
c⁄°ru˘‹
,

119 
ˇche_de°ru˘‹_t
* 
de°ru˘‹
);

129 
ˇche_de°roy
(
ˇche_t
* 
h™dÀ
);

137 * 
ˇche_Æloc
(
ˇche_t
* 
h™dÀ
);

147 
ˇche_‰ì
(
ˇche_t
* 
h™dÀ
, * 
±r
);

	@libmemcachedprotocol/common.h

37 #¥agm®
⁄˚


39 
	~"mem_c⁄fig.h
"

40 
	~<as£π.h
>

42 
	~<libmemˇched¥Ÿocﬁ-0.0/h™dÀr.h
>

43 
	~<libmemˇched¥Ÿocﬁ/ˇche.h
>

44 
	~<libmemˇched/byã‹dî.h
>

45 
	~<libmemˇched/sockë.hµ
>

54 
	$boﬁ
 (*
	tdøö_func
)(
	tmemˇched_¥Ÿocﬁ_˛õ¡_°
 *
	t˛õ¡
);

55 
	$¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
	t•oﬁ_func
)(
	tmemˇched_¥Ÿocﬁ_˛õ¡_°
 *
	t˛õ¡
,

56 c⁄° *
	td©a
,

57 
	tsize_t
 
	tÀngth
);

62 
	smemˇched_¥Ÿocﬁ_°
 {

63 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
ˇŒback
;

64 
memˇched_¥Ÿocﬁ_ªcv_func
 
ªcv
;

65 
memˇched_¥Ÿocﬁ_£nd_func
 
£nd
;

71 
døö_func
 
døö
;

72 
•oﬁ_func
 
•oﬁ
;

81 
uöt8_t
 *
öput_buf„r
;

82 
size_t
 
öput_buf„r_size
;

84 
boﬁ
 
≥d™tic
;

86 
ˇche_t
 *
buf„r_ˇche
;

89 
	schunk_°
 {

91 *
d©a
;

93 
size_t
 
off£t
;

95 
size_t
 
nbyãs
;

97 
size_t
 
size
;

99 
chunk_°
 *
√xt
;

102 
	#CHUNK_BUFFERSIZE
 2048

	)

104 
	$memˇched_¥Ÿocﬁ_evít_t
 (*
	t¥o˚ss_d©a
)(
	tmemˇched_¥Ÿocﬁ_˛õ¡_°
 *
	t˛õ¡
, 
	tssize_t
 *
	tÀngth
, **
	tíd±r
);

106 
	eascii_cmd
 {

107 
GET_CMD
,

108 
GETS_CMD
,

109 
SET_CMD
,

110 
ADD_CMD
,

111 
REPLACE_CMD
,

112 
CAS_CMD
,

113 
APPEND_CMD
,

114 
PREPEND_CMD
,

115 
DELETE_CMD
,

116 
INCR_CMD
,

117 
DECR_CMD
,

118 
STATS_CMD
,

119 
FLUSH_ALL_CMD
,

120 
VERSION_CMD
,

121 
QUIT_CMD
,

122 
VERBOSITY_CMD
,

123 
UNKNOWN_CMD


126 
	smemˇched_¥Ÿocﬁ_˛õ¡_°
 {

127 
boﬁ
 
is_vîbo£
;

128 
memˇched_¥Ÿocﬁ_°
 *
roŸ
;

129 
memˇched_sockë_t
 
sock
;

130 
îr‹
;

133 
chunk_°
 *
ouçut
;

134 
chunk_°
 *
ouçut_èû
;

141 
uöt8_t
 *
öput_buf„r
;

142 
size_t
 
öput_buf„r_size
;

143 
size_t
 
öput_buf„r_off£t
;

146 
¥o˚ss_d©a
 
w‹k
;

152 
boﬁ
 
muã
;

155 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
cuºít_comm™d
;

158 
ascii_cmd
 
ascii_comm™d
;

161 
	~"ascii_h™dÀr.h
"

162 
	~"bö¨y_h™dÀr.h
"

	@libmemcachedprotocol/handler.c

38 
	~<libmemˇched¥Ÿocﬁ/comm⁄.h
>

40 
	~<°dlib.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<î∫o.h
>

43 
	~<°dboﬁ.h
>

44 
	~<°rög.h
>

45 
	~<°rögs.h
>

46 
	~<˘y≥.h
>

47 
	~<°dio.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/sockë.h
>

69 
ssize_t
 
	$deÁu…_ªcv
(c⁄° *
cookõ
,

70 
memˇched_sockë_t
 
sock
,

71 *
buf
,

72 
size_t
 
nbyãs
)

74 ()
cookõ
;

75  
	`ªcv
(
sock
, 
buf
, 
nbyãs
, 0);

76 
	}
}

89 
ssize_t
 
	$deÁu…_£nd
(c⁄° *
cookõ
,

90 
memˇched_sockë_t
 
fd
,

91 c⁄° *
buf
,

92 
size_t
 
nbyãs
)

94 ()
cookõ
;

95  
	`£nd
(
fd
, 
buf
, 
nbyãs
, 
MSG_NOSIGNAL
);

96 
	}
}

106 
boﬁ
 
	$døö_ouçut
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

108 i‡(
˛õ¡
->
is_vîbo£
)

110 
	`Ârötf
(
°dîr
, "%s:%d %†muã:%d ouçut:%†Àngth:%d\n", 
__FILE__
, 
__LINE__
, 
__func__
, ()
˛õ¡
->
muã
,

111 
˛õ¡
->
ouçut
 ? "yes" : "no",

112 
˛õ¡
->
ouçut
 ? ()(˛õ¡->ouçut->
nbyãs
 - clõ¡->ouçut->
off£t
) : 0);

116 
˛õ¡
->
ouçut
 !
NULL
)

118 
ssize_t
 
Àn

˛õ¡
->
roŸ
->
	`£nd
(client,

119 
˛õ¡
->
sock
,

120 
˛õ¡
->
ouçut
->
d©a
 + clõ¡->ouçut->
off£t
,

121 
˛õ¡
->
ouçut
->
nbyãs
 - clõ¡->ouçut->
off£t
);

123 i‡(
Àn
 == -1)

125 i‡(
	`gë_sockë_î∫o
(Ë=
EWOULDBLOCK
)

127  
åue
;

129 i‡(
	`gë_sockë_î∫o
(Ë!
EINTR
)

131 
˛õ¡
->
îr‹

	`gë_sockë_î∫o
();

132  
Ál£
;

137 
˛õ¡
->
ouçut
->
off£t
 +(
size_t
)
Àn
;

138 i‡(
˛õ¡
->
ouçut
->
off£t
 =˛õ¡->ouçut->
nbyãs
)

141 
chunk_°
 *
ﬁd

˛õ¡
->
ouçut
;

142 
˛õ¡
->
ouçut
˛õ¡->ouçut->
√xt
;

143 i‡(
˛õ¡
->
ouçut
 =
NULL
)

145 
˛õ¡
->
ouçut_èû

NULL
;

147 
	`ˇche_‰ì
(
˛õ¡
->
roŸ
->
buf„r_ˇche
, 
ﬁd
);

152  
åue
;

153 
	}
}

161 
chunk_°
 *
	$Æloˇã_ouçut_chunk
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

163 
chunk_°
 *
ªt

	`ˇche_Æloc
(
˛õ¡
->
roŸ
->
buf„r_ˇche
);

165 i‡(
ªt
 =
NULL
)

167  
NULL
;

170 
ªt
->
off£t
ªt->
nbyãs
= 0;

171 
ªt
->
√xt

NULL
;

172 
ªt
->
size

CHUNK_BUFFERSIZE
;

173 
ªt
->
d©a
= (*)(ret + 1);

174 i‡(
˛õ¡
->
ouçut
 =
NULL
)

176 
˛õ¡
->
ouçut
˛õ¡->
ouçut_èû

ªt
;

180 
˛õ¡
->
ouçut_èû
->
√xt

ªt
;

181 
˛õ¡
->
ouçut_èû

ªt
;

184  
ªt
;

185 
	}
}

196 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$•oﬁ_ouçut
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

197 c⁄° *
d©a
,

198 
size_t
 
Àngth
)

200 i‡(
˛õ¡
->
is_vîbo£
)

202 
	`Ârötf
(
°dîr
, "%s:%d %†muã:%dÜígth:%d\n", 
__FILE__
, 
__LINE__
, 
__func__
, ()
˛õ¡
->
muã
, ()
Àngth
);

205 i‡(
˛õ¡
->
muã
)

207  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

210 
size_t
 
off£t
= 0;

212 
chunk_°
 *
chunk

˛õ¡
->
ouçut
;

213 
off£t
 < 
Àngth
)

215 i‡(
chunk
 =
NULL
 || (chunk->
size
 - chunk->
nbyãs
) == 0)

217 i‡((
chunk

	`Æloˇã_ouçut_chunk
(
˛õ¡
)Ë=
NULL
)

219  
PROTOCOL_BINARY_RESPONSE_ENOMEM
;

223 
size_t
 
bulk

Àngth
 - 
off£t
;

224 i‡(
bulk
 > 
chunk
->
size
 - chunk->
nbyãs
)

226 
bulk

chunk
->
size
 - chunk->
nbyãs
;

229 
	`mem˝y
(
chunk
->
d©a
 + chunk->
nbyãs
, d©a, 
bulk
);

230 
chunk
->
nbyãs
 +
bulk
;

231 
off£t
 +
bulk
;

234  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

235 
	}
}

245 
memˇched_¥Ÿocﬁ_evít_t
 
	$dëîmöe_¥Ÿocﬁ
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
)

247 i‡(*
˛õ¡
->
roŸ
->
öput_buf„r
 =(
uöt8_t
)
PROTOCOL_BINARY_REQ
)

249 i‡(
˛õ¡
->
is_vîbo£
)

251 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL: memˇched_bö¨y_¥Ÿocﬁ_¥o˚ss_d©a\n", 
__FILE__
, 
__LINE__
);

253 
˛õ¡
->
w‹k

memˇched_bö¨y_¥Ÿocﬁ_¥o˚ss_d©a
;

255 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚_vîsi⁄
 == 1)

257 i‡(
˛õ¡
->
is_vîbo£
)

259 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL: memˇched_ascii_¥Ÿocﬁ_¥o˚ss_d©a\n", 
__FILE__
, 
__LINE__
);

270 
˛õ¡
->
w‹k

memˇched_ascii_¥Ÿocﬁ_¥o˚ss_d©a
;

274 i‡(
˛õ¡
->
is_vîbo£
)

276 
	`Ârötf
(
°dîr
, "%s:%d PROTOCOL: Unsuµ‹ãdÖrŸocﬁ\n", 
__FILE__
, 
__LINE__
);

282 c⁄° *
îr
= "CLIENT_ERROR: UnsupportedÖrotocol\r\n";

283 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
îr
, 
	`°æí
(err));

284 
˛õ¡
->
roŸ
->
	`døö
(client);

286  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

289  
˛õ¡
->
	`w‹k
(˛õ¡, 
Àngth
, 
íd±r
);

290 
	}
}

298 
memˇched_¥Ÿocﬁ_°
 *
	$memˇched_¥Ÿocﬁ_¸óã_ö°™˚
()

300 
memˇched_¥Ÿocﬁ_°
 *
ªt

	`ˇŒoc
(1, (*ret));

301 i‡(
ªt
 !
NULL
)

303 
ªt
->
ªcv

deÁu…_ªcv
;

304 
ªt
->
£nd

deÁu…_£nd
;

305 
ªt
->
døö

døö_ouçut
;

306 
ªt
->
•oﬁ

•oﬁ_ouçut
;

307 
ªt
->
öput_buf„r_size
= 1 * 1024 * 1024;

308 
ªt
->
öput_buf„r

	`mÆloc
‘ë->
öput_buf„r_size
);

309 i‡(
ªt
->
öput_buf„r
 =
NULL
)

311 
	`‰ì
(
ªt
);

312 
ªt

NULL
;

314  
NULL
;

317 
ªt
->
buf„r_ˇche

	`ˇche_¸óã
("protocol_handler",

318 
CHUNK_BUFFERSIZE
 + (
chunk_°
),

319 0, 
NULL
, NULL);

320 i‡(
ªt
->
buf„r_ˇche
 =
NULL
)

322 
	`‰ì
(
ªt
->
öput_buf„r
);

323 
	`‰ì
(
ªt
);

324 
ªt

NULL
;

328  
ªt
;

329 
	}
}

331 
	$memˇched_¥Ÿocﬁ_de°roy_ö°™˚
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
)

333 
	`ˇche_de°roy
(
ö°™˚
->
buf„r_ˇche
);

334 
	`‰ì
(
ö°™˚
->
öput_buf„r
);

335 
	`‰ì
(
ö°™˚
);

336 
	}
}

338 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
	$memˇched_¥Ÿocﬁ_¸óã_˛õ¡
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
memˇched_sockë_t
 
sock
)

340 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
ªt

	`ˇŒoc
(1, (memcached_protocol_client_st));

341 i‡(
ªt
 !
NULL
)

343 
ªt
->
roŸ

ö°™˚
;

344 
ªt
->
sock
= sock;

345 
ªt
->
w‹k

dëîmöe_¥Ÿocﬁ
;

348  
ªt
;

349 
	}
}

351 
	$memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

353 
	`‰ì
(
˛õ¡
);

354 
	}
}

356 
	$memˇched_¥Ÿocﬁ_˛õ¡_£t_vîbo£
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
boﬁ
 
¨g
)

358 i‡(
˛õ¡
)

360 
˛õ¡
->
is_vîbo£

¨g
;

362 
	}
}

364 
memˇched_¥Ÿocﬁ_evít_t
 
	$memˇched_¥Ÿocﬁ_˛õ¡_w‹k
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

367 
boﬁ
 
m‹e_d©a

åue
;

370 
ssize_t
 
Àn

˛õ¡
->
roŸ
->
	`ªcv
(client,

371 
˛õ¡
->
sock
,

372 
˛õ¡
->
roŸ
->
öput_buf„r
 + clõ¡->
öput_buf„r_off£t
,

373 
˛õ¡
->
roŸ
->
öput_buf„r_size
 - clõ¡->
öput_buf„r_off£t
);

375 i‡(
Àn
 > 0)

378 i‡(
˛õ¡
->
öput_buf„r_off£t
 > 0)

380 
	`mem˝y
(
˛õ¡
->
roŸ
->
öput_buf„r
, client->input_buffer,

381 
˛õ¡
->
öput_buf„r_off£t
);

382 
Àn
 +(
ssize_t
)
˛õ¡
->
öput_buf„r_off£t
;

385 
	`‰ì
(
˛õ¡
->
öput_buf„r
);

386 
˛õ¡
->
öput_buf„r_off£t
= 0;

389 *
íd±r
;

390 
memˇched_¥Ÿocﬁ_evít_t
 
evíts

˛õ¡
->
	`w‹k
(˛õ¡, &
Àn
, &
íd±r
);

391 i‡(
evíts
 =
MEMCACHED_PROTOCOL_ERROR_EVENT
)

393  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

396 i‡(
Àn
 > 0)

400 
˛õ¡
->
öput_buf„r

	`mÆloc
((
size_t
)
Àn
);

401 i‡(
˛õ¡
->
öput_buf„r
 =
NULL
)

403 
˛õ¡
->
îr‹

ENOMEM
;

404  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

406 
	`mem˝y
(
˛õ¡
->
öput_buf„r
, 
íd±r
, (
size_t
)
Àn
);

407 
˛õ¡
->
öput_buf„r_off£t
(
size_t
)
Àn
;

408 
m‹e_d©a

Ál£
;

411 i‡(
Àn
 == 0)

414 
	`døö_ouçut
(
˛õ¡
);

415  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

419 i‡(
	`gë_sockë_î∫o
(Ë!
EWOULDBLOCK
)

421 
˛õ¡
->
îr‹

	`gë_sockë_î∫o
();

423  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

425 
m‹e_d©a

Ál£
;

427 } 
m‹e_d©a
);

429 i‡(!
	`døö_ouçut
(
˛õ¡
))

431  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

434 
memˇched_¥Ÿocﬁ_evít_t
 
ªt

MEMCACHED_PROTOCOL_READ_EVENT
;

435 i‡(
˛õ¡
->
ouçut
)

437 
ªt
|
MEMCACHED_PROTOCOL_READ_EVENT
;

440  
ªt
;

441 
	}
}

	@libmemcachedprotocol/pedantic.c

38 
	~<libmemˇched¥Ÿocﬁ/comm⁄.h
>

40 
	~<sys/ty≥s.h
>

42 
	#ísuª
(
a
Ëi‡(!◊)Ë{  
Ál£
; }

	)

44 
boﬁ
 
	$memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ªque°
(c⁄° 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
)

46 
	`ísuª
(
ªque°
->ªque°.
magic
 =
PROTOCOL_BINARY_REQ
);

47 
	`ísuª
(
ªque°
->ªque°.
d©©y≥
 =
PROTOCOL_BINARY_RAW_BYTES
);

49 
	`ísuª
(
ªque°
->
byãs
[6] == 0);

50 
	`ísuª
(
ªque°
->
byãs
[7] == 0);

52 
uöt8_t
 
›code

ªque°
->request.opcode;

53 
uöt16_t
 
keyÀn

	`¡ohs
(
ªque°
->request.keylen);

54 
uöt8_t
 
exéí

ªque°
->request.extlen;

55 
uöt32_t
 
bodyÀn

	`¡ohl
(
ªque°
->request.bodylen);

57 
	`ísuª
(
bodyÀn
 >(
keyÀn
 + 
exéí
));

59 
›code
) {

60 
PROTOCOL_BINARY_CMD_GET
:

61 
PROTOCOL_BINARY_CMD_GETK
:

62 
PROTOCOL_BINARY_CMD_GETKQ
:

63 
PROTOCOL_BINARY_CMD_GETQ
:

64 
	`ísuª
(
exéí
 == 0);

65 
	`ísuª
(
keyÀn
 > 0);

66 
	`ísuª
(
keyÀn
 =
bodyÀn
);

67 
	`ísuª
(
ªque°
->ªque°.
ˇs
 == 0);

70 
PROTOCOL_BINARY_CMD_ADD
:

71 
PROTOCOL_BINARY_CMD_ADDQ
:

73 
	`ísuª
(
ªque°
->ªque°.
ˇs
 == 0);

75 
PROTOCOL_BINARY_CMD_SET
:

76 
PROTOCOL_BINARY_CMD_SETQ
:

77 
PROTOCOL_BINARY_CMD_REPLACE
:

78 
PROTOCOL_BINARY_CMD_REPLACEQ
:

79 
	`ísuª
(
keyÀn
 > 0);

80 
	`ísuª
(
exéí
 == 8);

83 
PROTOCOL_BINARY_CMD_DELETE
:

84 
PROTOCOL_BINARY_CMD_DELETEQ
:

85 
	`ísuª
(
exéí
 == 0);

86 
	`ísuª
(
keyÀn
 > 0);

87 
	`ísuª
(
keyÀn
 =
bodyÀn
);

90 
PROTOCOL_BINARY_CMD_INCREMENT
:

91 
PROTOCOL_BINARY_CMD_INCREMENTQ
:

92 
PROTOCOL_BINARY_CMD_DECREMENT
:

93 
PROTOCOL_BINARY_CMD_DECREMENTQ
:

94 
	`ísuª
(
exéí
 == 20);

95 
	`ísuª
(
keyÀn
 > 0);

96 
	`ísuª
(
keyÀn
 + 
exéí
 =
bodyÀn
);

99 
PROTOCOL_BINARY_CMD_QUIT
:

100 
PROTOCOL_BINARY_CMD_QUITQ
:

101 
PROTOCOL_BINARY_CMD_NOOP
:

102 
PROTOCOL_BINARY_CMD_VERSION
:

103 
	`ísuª
(
exéí
 == 0);

104 
	`ísuª
(
keyÀn
 == 0);

105 
	`ísuª
(
bodyÀn
 == 0);

108 
PROTOCOL_BINARY_CMD_FLUSH
:

109 
PROTOCOL_BINARY_CMD_FLUSHQ
:

110 
	`ísuª
(
exéí
 == 0 ||Éxtlen == 4);

111 
	`ísuª
(
keyÀn
 == 0);

112 
	`ísuª
(
bodyÀn
 =
exéí
);

115 
PROTOCOL_BINARY_CMD_STAT
:

116 
	`ísuª
(
exéí
 == 0);

118 
	`ísuª
(
keyÀn
 =
bodyÀn
);

121 
PROTOCOL_BINARY_CMD_APPEND
:

122 
PROTOCOL_BINARY_CMD_APPENDQ
:

123 
PROTOCOL_BINARY_CMD_PREPEND
:

124 
PROTOCOL_BINARY_CMD_PREPENDQ
:

125 
	`ísuª
(
exéí
 == 0);

126 
	`ísuª
(
keyÀn
 > 0);

133  
åue
;

134 
	}
}

136 
boﬁ
 
	$memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ª•⁄£
(c⁄° 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
,

137 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
ª•⁄£
)

139 
	`ísuª
(
ª•⁄£
->ª•⁄£.
magic
 =
PROTOCOL_BINARY_RES
);

140 
	`ísuª
(
ª•⁄£
->ª•⁄£.
d©©y≥
 =
PROTOCOL_BINARY_RAW_BYTES
);

141 
	`ísuª
(
ª•⁄£
->ª•⁄£.
›aque
 =
ªque°
->request.opaque);

143 
uöt16_t
 
°©us

	`¡ohs
(
ª•⁄£
->response.status);

144 
uöt8_t
 
›code

ª•⁄£
->response.opcode;

146 i‡(
°©us
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

148 
›code
) {

149 
PROTOCOL_BINARY_CMD_ADDQ
:

150 
PROTOCOL_BINARY_CMD_APPENDQ
:

151 
PROTOCOL_BINARY_CMD_DECREMENTQ
:

152 
PROTOCOL_BINARY_CMD_DELETEQ
:

153 
PROTOCOL_BINARY_CMD_FLUSHQ
:

154 
PROTOCOL_BINARY_CMD_INCREMENTQ
:

155 
PROTOCOL_BINARY_CMD_PREPENDQ
:

156 
PROTOCOL_BINARY_CMD_QUITQ
:

157 
PROTOCOL_BINARY_CMD_REPLACEQ
:

158 
PROTOCOL_BINARY_CMD_SETQ
:

160  
Ál£
;

165 
›code
) {

166 
PROTOCOL_BINARY_CMD_ADD
:

167 
PROTOCOL_BINARY_CMD_REPLACE
:

168 
PROTOCOL_BINARY_CMD_SET
:

169 
PROTOCOL_BINARY_CMD_APPEND
:

170 
PROTOCOL_BINARY_CMD_PREPEND
:

171 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

172 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

173 
	`ísuª
(
ª•⁄£
->ª•⁄£.
bodyÀn
 == 0);

174 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 != 0);

176 
PROTOCOL_BINARY_CMD_FLUSH
:

177 
PROTOCOL_BINARY_CMD_NOOP
:

178 
PROTOCOL_BINARY_CMD_QUIT
:

179 
PROTOCOL_BINARY_CMD_DELETE
:

180 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

181 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

182 
	`ísuª
(
ª•⁄£
->ª•⁄£.
bodyÀn
 == 0);

183 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 == 0);

186 
PROTOCOL_BINARY_CMD_DECREMENT
:

187 
PROTOCOL_BINARY_CMD_INCREMENT
:

188 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

189 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

190 
	`ísuª
(
	`¡ohl
(
ª•⁄£
->ª•⁄£.
bodyÀn
) == 8);

191 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 != 0);

194 
PROTOCOL_BINARY_CMD_STAT
:

195 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

197 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 == 0);

200 
PROTOCOL_BINARY_CMD_VERSION
:

201 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

202 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

203 
	`ísuª
(
ª•⁄£
->ª•⁄£.
bodyÀn
 != 0);

204 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 == 0);

207 
PROTOCOL_BINARY_CMD_GET
:

208 
PROTOCOL_BINARY_CMD_GETQ
:

209 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

210 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 4);

211 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 != 0);

214 
PROTOCOL_BINARY_CMD_GETK
:

215 
PROTOCOL_BINARY_CMD_GETKQ
:

216 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 != 0);

217 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 4);

218 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 != 0);

228 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 == 0);

229 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

230 i‡(
›code
 !
PROTOCOL_BINARY_CMD_GETK
)

232 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

236  
åue
;

237 
	}
}

	@libmemcachedutil-1.0/flush.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
boﬁ
 
libmemˇched_utû_Êush
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, 
memˇched_ªtu∫_t
 *
ªt
);

47 #ifde‡
__˝lu•lus


	@libmemcachedutil-1.0/ostream.hpp

37 #¥agm®
⁄˚


39 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	gmemˇched_ªtu∫_t
 &
	g¨g
)

41 
	gouçut
 << 
memˇched_°ªº‹
(
NULL
, 
¨g
);

42  
	gouçut
;

45 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	gmemˇched_°
 &
	g¨g
)

47 
	gouçut
 << " quîy_id: " << 
memˇched_quîy_id
(&
¨g
);

48 
	gouçut
 << "Éº‹: " << 
memˇched_œ°_îr‹_mesßge
(&
¨g
);

49  
	gouçut
;

	@libmemcachedutil-1.0/pid.h

37 #¥agm®
⁄˚


39 #i‚de‡
_WIN32


40 
	~<√tdb.h
>

43 
	~<sys/ty≥s.h
>

45 #ifde‡
__˝lu•lus


49 
LIBMEMCACHED_API


50 
pid_t
 
libmemˇched_utû_gëpid
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, 
memˇched_ªtu∫_t
 *
ªt
);

52 
LIBMEMCACHED_API


53 
pid_t
 
libmemˇched_utû_gëpid2
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, 
memˇched_ªtu∫_t
 *
ªt
);

55 #ifde‡
__˝lu•lus


	@libmemcachedutil-1.0/ping.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
boﬁ
 
libmemˇched_utû_pög
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, 
memˇched_ªtu∫_t
 *
ªt
);

47 
LIBMEMCACHED_API


48 
boﬁ
 
libmemˇched_utû_pög2
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, 
memˇched_ªtu∫_t
 *
ªt
);

50 #ifde‡
__˝lu•lus


	@libmemcachedutil-1.0/pool.h

38 #¥agm®
⁄˚


41 
	~<libmemˇched-1.0/memˇched.h
>

43 #ifde‡
__˝lu•lus


47 
memˇched_poﬁ_°
;

48 
memˇched_poﬁ_°
 
	tmemˇched_poﬁ_°
;

50 
LIBMEMCACHED_API


51 
memˇched_poﬁ_°
 *
memˇched_poﬁ_¸óã
(
memˇched_°
* 
mmc
, 
uöt32_t
 
öôül
, uöt32_à
max
);

53 
LIBMEMCACHED_API


54 
memˇched_poﬁ_°
 *
memˇched_poﬁ
(c⁄° *
›ti⁄_°rög
, 
size_t
 
›ti⁄_°rög_Àngth
);

56 
LIBMEMCACHED_API


57 
memˇched_°
* 
memˇched_poﬁ_de°roy
(
memˇched_poﬁ_°
* 
poﬁ
);

59 
LIBMEMCACHED_API


60 
memˇched_°
* 
memˇched_poﬁ_p›
(
memˇched_poﬁ_°
* 
poﬁ
,

61 
boﬁ
 
block
,

62 
memˇched_ªtu∫_t
* 
rc
);

63 
LIBMEMCACHED_API


64 
memˇched_ªtu∫_t
 
memˇched_poﬁ_push
(
memˇched_poﬁ_°
* 
poﬁ
,

65 
memˇched_°
* 
mmc
);

66 
LIBMEMCACHED_API


67 
memˇched_ªtu∫_t
 
memˇched_poﬁ_ªÀa£
(
memˇched_poﬁ_°
* 
poﬁ
, 
memˇched_°
* 
mmc
);

69 
LIBMEMCACHED_API


70 
memˇched_°
* 
memˇched_poﬁ_„tch
(
memˇched_poﬁ_°
*, 
time•ec
* 
ªœtive_time
, 
memˇched_ªtu∫_t
* 
rc
);

72 
LIBMEMCACHED_API


73 
memˇched_ªtu∫_t
 
memˇched_poﬁ_behavi‹_£t
(
memˇched_poﬁ_°
 *
±r
,

74 
memˇched_behavi‹_t
 
Êag
,

75 
uöt64_t
 
d©a
);

76 
LIBMEMCACHED_API


77 
memˇched_ªtu∫_t
 
memˇched_poﬁ_behavi‹_gë
(
memˇched_poﬁ_°
 *
±r
,

78 
memˇched_behavi‹_t
 
Êag
,

79 
uöt64_t
 *
vÆue
);

81 #ifde‡
__˝lu•lus


	@libmemcachedutil-1.0/util.h

38 #¥agm®
⁄˚


40 
	~<libmemˇched-1.0/memˇched.h
>

42 
	~<libmemˇchedutû-1.0/pid.h
>

43 
	~<libmemˇchedutû-1.0/Êush.h
>

44 
	~<libmemˇchedutû-1.0/pög.h
>

45 
	~<libmemˇchedutû-1.0/poﬁ.h
>

46 
	~<libmemˇchedutû-1.0/vîsi⁄.h
>

	@libmemcachedutil-1.0/version.h

38 #¥agm®
⁄˚


41 #ifde‡
__˝lu•lus


45 
LIBMEMCACHED_API


46 
boﬁ
 
libmemˇched_utû_vîsi⁄_check
(
memˇched_°
 *
memc
,

47 
uöt8_t
 
maj‹_vîsi⁄
,

48 
uöt8_t
 
mö‹_vîsi⁄
,

49 
uöt8_t
 
mi¸o_vîsi⁄
);

51 #ifde‡
__˝lu•lus


	@libmemcachedutil/common.h

39 #¥agm®
⁄˚


41 
	~"mem_c⁄fig.h
"

43 
	~<c°ddef
>

44 
	~<c°dlib
>

45 
	~<c°dio
>

47 
	~"libmemˇchedutû-1.0/utû.h
"

48 
	~"libmemˇched/as£π.hµ
"

49 
	~"libmemˇched/backåa˚.hµ
"

	@libmemcachedutil/flush.cc

39 
	~<libmemˇchedutû/comm⁄.h
>

42 
boﬁ
 
	$libmemˇched_utû_Êush
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, 
memˇched_ªtu∫_t
 *
ªt
)

44 
memˇched_°
 *
memc_±r

	`memˇched_¸óã
(
NULL
);

46 
memˇched_ªtu∫_t
 
rc

	`memˇched_£rvî_add
(
memc_±r
, 
ho°«me
, 
p‹t
);

47 i‡(
	`memˇched_suc˚ss
(
rc
))

49 
rc

	`memˇched_Êush
(
memc_±r
, 0);

52 
	`memˇched_‰ì
(
memc_±r
);

54 i‡(
ªt
)

56 *
ªt

rc
;

59  
	`memˇched_suc˚ss
(
rc
);

60 
	}
}

	@libmemcachedutil/pid.cc

40 
	~<libmemˇchedutû/comm⁄.h
>

46 
pid_t
 
	$libmemˇched_utû_gëpid
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, 
memˇched_ªtu∫_t
 *
ªt
)

48 
pid_t
 
pid
= -1;

50 
memˇched_ªtu∫_t
 
unu£d
;

51 i‡(
ªt
 =
NULL
)

53 
ªt
&
unu£d
;

56 
memˇched_°
 *
memc_±r

	`memˇched_¸óã
(
NULL
);

57 i‡(
memc_±r
 =
NULL
)

59 *
ªt

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

63 
memˇched_ªtu∫_t
 
rc

	`memˇched_£rvî_add
(
memc_±r
, 
ho°«me
, 
p‹t
);

64 i‡(
	`memˇched_suc˚ss
(
rc
))

66 
memˇched_°©_°
 *
°©

	`memˇched_°©
(
memc_±r
, 
NULL
, &
rc
);

67 i‡(
	`memˇched_suc˚ss
(
rc
Ë
™d
 
°©
ánd sèt->
pid
 != -1)

69 
pid

°©
->pid;

71 i‡(
	`memˇched_suc˚ss
(
rc
))

73 
rc

MEMCACHED_UNKNOWN_STAT_KEY
;

75 i‡(
rc
 =
MEMCACHED_SOME_ERRORS
)

77 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_±r
, 0);

79 
	`as£π_msg
(
ö°™˚
 
™d
 
	`memˇched_£rvî_îr‹
(instance), " ");

80 i‡(
ö°™˚
 
™d
 
	`memˇched_£rvî_îr‹
(instance))

82 
rc

	`memˇched_£rvî_îr‹_ªtu∫
(
ö°™˚
);

86 
	`memˇched_°©_‰ì
(
memc_±r
, 
°©
);

88 
	`memˇched_‰ì
(
memc_±r
);

90 *
ªt

rc
;

92  
pid
;

93 
	}
}

95 
pid_t
 
	$libmemˇched_utû_gëpid2
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, 
memˇched_ªtu∫_t
 *
ªt
)

97 i‡(
u£∫ame
 =
NULL
)

99  
	`libmemˇched_utû_gëpid
(
ho°«me
, 
p‹t
, 
ªt
);

102 
pid_t
 
pid
= -1;

104 
memˇched_ªtu∫_t
 
unu£d
;

105 i‡(
nŸ
 
ªt
)

106 
ªt
&
unu£d
;

108 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

110 *
ªt

MEMCACHED_NOT_SUPPORTED
;

111  
pid
;

114 
memˇched_°
 *
memc_±r

	`memˇched_¸óã
(
NULL
);

115 i‡(
nŸ
 
memc_±r
)

117 *
ªt

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

121 i‡(
	`memˇched_Áûed
(*
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc_±r
, 
u£∫ame
, 
∑ssw‹d
)))

123 
	`memˇched_‰ì
(
memc_±r
);

124  
Ál£
;

128 
memˇched_ªtu∫_t
 
rc

	`memˇched_£rvî_add
(
memc_±r
, 
ho°«me
, 
p‹t
);

129 i‡(
	`memˇched_suc˚ss
(
rc
))

131 
memˇched_°©_°
 *
°©

	`memˇched_°©
(
memc_±r
, 
NULL
, &
rc
);

132 i‡(
	`memˇched_suc˚ss
(
rc
Ë
™d
 
°©
ánd sèt->
pid
 != -1)

134 
pid

°©
->pid;

136 i‡(
	`memˇched_suc˚ss
(
rc
))

138 
rc

MEMCACHED_UNKNOWN_STAT_KEY
;

140 i‡(
rc
 =
MEMCACHED_SOME_ERRORS
)

142 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

143 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_±r
, 0);

146 
	`as£π_msg
(
ö°™˚
 
™d
 in°™˚->
îr‹_mesßges
, " ");

148 i‡(
ö°™˚
 
™d
 
	`memˇched_£rvî_îr‹
(instance))

150 
rc

	`memˇched_£rvî_îr‹_ªtu∫
(
ö°™˚
);

154 
	`memˇched_°©_‰ì
(
memc_±r
, 
°©
);

156 
	`memˇched_‰ì
(
memc_±r
);

158 *
ªt

rc
;

160  
pid
;

161 
	}
}

	@libmemcachedutil/ping.cc

40 
	~<libmemˇchedutû/comm⁄.h
>

42 
boﬁ
 
	$libmemˇched_utû_pög
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, 
memˇched_ªtu∫_t
 *
ªt
)

44 
memˇched_ªtu∫_t
 
unu£d
;

45 i‡(
ªt
 =
NULL
)

47 
ªt
&
unu£d
;

50 
memˇched_°
 *
memc_±r

	`memˇched_¸óã
(
NULL
);

51 i‡(
memc_±r
 =
NULL
)

53 *
ªt

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

54  
Ál£
;

57 i‡(
	`memˇched_suc˚ss
((*
ªt

	`memˇched_behavi‹_£t
(
memc_±r
, 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
, 400000))))

59 
memˇched_ªtu∫_t
 
rc

	`memˇched_£rvî_add
(
memc_±r
, 
ho°«me
, 
p‹t
);

60 i‡(
	`memˇched_suc˚ss
(
rc
))

62 
rc

	`memˇched_vîsi⁄
(
memc_±r
);

65 i‡(
	`memˇched_Áûed
(
rc
Ë
™d
Ñ¯=
MEMCACHED_SOME_ERRORS
)

67 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

68 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_±r
, 0);

70 
	`as£π_msg
(
ö°™˚
 
™d
 
	`memˇched_£rvî_îr‹
(instance), " ");

71 i‡(
ö°™˚
 
™d
 
	`memˇched_£rvî_îr‹
(instance))

73 
rc

	`memˇched_£rvî_îr‹_ªtu∫
(
ö°™˚
);

77 *
ªt

rc
;

79 
	`memˇched_‰ì
(
memc_±r
);

81  
	`memˇched_suc˚ss
(*
ªt
);

82 
	}
}

84 
boﬁ
 
	$libmemˇched_utû_pög2
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, 
memˇched_ªtu∫_t
 *
ªt
)

86 i‡(
u£∫ame
 =
NULL
)

88  
	`libmemˇched_utû_pög
(
ho°«me
, 
p‹t
, 
ªt
);

91 
memˇched_ªtu∫_t
 
unu£d
;

92 i‡(
nŸ
 
ªt
)

93 
ªt
&
unu£d
;

95 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

97 *
ªt

MEMCACHED_NOT_SUPPORTED
;

98  
Ál£
;

101 
memˇched_°
 *
memc_±r

	`memˇched_¸óã
(
NULL
);

102 i‡(
nŸ
 
memc_±r
)

104 *
ªt

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

105  
Ál£
;

108 i‡(
	`memˇched_Áûed
(*
ªt

	`memˇched_£t_ß¶_auth_d©a
(
memc_±r
, 
u£∫ame
, 
∑ssw‹d
)))

110 
	`memˇched_‰ì
(
memc_±r
);

111  
Ál£
;

114 
memˇched_ªtu∫_t
 
rc

	`memˇched_£rvî_add
(
memc_±r
, 
ho°«me
, 
p‹t
);

115 i‡(
	`memˇched_suc˚ss
(
rc
))

117 
rc

	`memˇched_vîsi⁄
(
memc_±r
);

120 i‡(
	`memˇched_Áûed
(
rc
Ë
™d
Ñ¯=
MEMCACHED_SOME_ERRORS
)

122 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

123 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_±r
, 0);

125 
	`as£π_msg
(
ö°™˚
 
™d
 
	`memˇched_£rvî_îr‹
(instance), " ");

126 i‡(
ö°™˚
 
™d
 
	`memˇched_£rvî_îr‹
(instance))

128 
rc

	`memˇched_£rvî_îr‹_ªtu∫
(
ö°™˚
);

131 
	`memˇched_‰ì
(
memc_±r
);

133 *
ªt

rc
;

135  
	`memˇched_suc˚ss
(
rc
);

136 
	}
}

	@libmemcachedutil/pool.cc

39 
	~<libmemˇchedutû/comm⁄.h
>

41 
	~<ˇs£π
>

42 
	~<˚ºno
>

43 
	~<±hªad.h
>

44 
	~<mem‹y
>

46 
	smemˇched_poﬁ_°


48 
±hªad_muãx_t
 
	mmuãx
;

49 
±hªad_c⁄d_t
 
	mc⁄d
;

50 
memˇched_°
 *
	mma°î
;

51 
memˇched_°
 **
	m£rvî_poﬁ
;

52 
	mfú°‰ì
;

53 c⁄° 
uöt32_t
 
	msize
;

54 
uöt32_t
 
	mcuºít_size
;

55 
boﬁ
 
	m_owns_ma°î
;

56 
time•ec
 
	m_timeout
;

58 
memˇched_poﬁ_°
(
memˇched_°
 *
ma°î_¨g
, 
size_t
 
max_¨g
) :

59 
ma°î
(
ma°î_¨g
),

60 
£rvî_poﬁ
(
NULL
),

61 
fú°‰ì
(-1),

62 
size
(
uöt32_t
(
max_¨g
)),

63 
cuºít_size
(0),

64 
_owns_ma°î
(
Ál£
)

66 
±hªad_muãx_öô
(&
muãx
, 
NULL
);

67 
±hªad_c⁄d_öô
(&
c⁄d
, 
NULL
);

68 
	m_timeout
.
	mtv_£c
= 5;

69 
	m_timeout
.
	mtv_n£c
= 0;

72 c⁄° 
	mtime•ec
& 
timeout
() const

74  
	m_timeout
;

77 
boﬁ
 
ªÀa£
(
memˇched_°
*, 
memˇched_ªtu∫_t
& 
rc
);

79 
memˇched_°
 *
„tch
(
memˇched_ªtu∫_t
& 
rc
);

80 
memˇched_°
 *
„tch
(c⁄° 
time•ec
&, 
memˇched_ªtu∫_t
& 
rc
);

82 
boﬁ
 
öô
(
uöt32_t
 
öôül
);

84 ~
memˇched_poﬁ_°
()

86 
	mx
0; x <
fú°‰ì
; ++x)

88 
memˇched_‰ì
(
£rvî_poﬁ
[
x
]);

89 
	m£rvî_poﬁ
[
x
]
NULL
;

92 
	mîr‹
;

93 i‡((
	mîr‹

±hªad_muãx_de°roy
(&
muãx
)) != 0)

95 
as£π_vmsg
(
îr‹
 !0, "±hªad_muãx_de°roy(Ë%s(%d)", 
°ªº‹
(error),Érror);

98 i‡((
	mîr‹

±hªad_c⁄d_de°roy
(&
c⁄d
)) != 0)

100 
as£π_vmsg
(
îr‹
 !0, "±hªad_c⁄d_de°roy(Ë%s", 
°ªº‹
(error));

103 
	mdñëe
 [] 
	m£rvî_poﬁ
;

104 i‡(
	m_owns_ma°î
)

106 
memˇched_‰ì
(
ma°î
);

110 
ö¸emít_vîsi⁄
()

112 ++
	mma°î
->
	mc⁄figuª
.
	mvîsi⁄
;

115 
boﬁ
 
com∑ª_vîsi⁄
(c⁄° 
memˇched_°
 *
¨g
) const

117  (
	m¨g
->
	mc⁄figuª
.
	mvîsi⁄
 =
vîsi⁄
());

120 
öt32_t
 
vîsi⁄
() const

122  
	mma°î
->
	mc⁄figuª
.
	mvîsi⁄
;

131 
boﬁ
 
	$grow_poﬁ
(
memˇched_poﬁ_°
* 
poﬁ
)

133 
	`as£π
(
poﬁ
);

135 
memˇched_°
 *
obj
;

136 i‡(
	`nŸ
 (
obj

	`memˇched_˛⁄e
(
NULL
, 
poﬁ
->
ma°î
)))

138  
Ál£
;

141 
poﬁ
->
£rvî_poﬁ
[++poﬁ->
fú°‰ì
]
obj
;

142 
poﬁ
->
cuºít_size
++;

143 
obj
->
c⁄figuª
.
vîsi⁄

poﬁ
->
	`vîsi⁄
();

145  
åue
;

146 
	}
}

148 
boﬁ
 
	gmemˇched_poﬁ_°
::
	$öô
(
uöt32_t
 
öôül
)

150 
£rvî_poﬁ

	`√w
 (
°d
::
nŸhrow
Ë
memˇched_°
 *[
size
];

151 i‡(
£rvî_poﬁ
 =
NULL
)

153  
Ál£
;

160 
x
0; x < 
öôül
; ++x)

162 i‡(
	`grow_poﬁ
(
this
Ë=
Ál£
)

168  
åue
;

169 
	}
}

172 
ölöe
 
memˇched_poﬁ_°
 *
	$_poﬁ_¸óã
(
memˇched_°
* 
ma°î
, 
uöt32_t
 
öôül
, uöt32_à
max
)

174 i‡(
öôül
 =0 
‹
 
max
 =0 
	`‹
 (initial > max))

176  
NULL
;

179 
memˇched_poﬁ_°
 *
obje˘

	`√w
 (
°d
::
nŸhrow
Ë
	`memˇched_poﬁ_°
(
ma°î
, 
max
);

180 i‡(
obje˘
 =
NULL
)

182  
NULL
;

189 i‡(
nŸ
 
obje˘
->
	`öô
(
öôül
))

191 
dñëe
 
obje˘
;

192  
NULL
;

195  
obje˘
;

196 
	}
}

198 
memˇched_poﬁ_°
 *
	$memˇched_poﬁ_¸óã
(
memˇched_°
* 
ma°î
, 
uöt32_t
 
öôül
, uöt32_à
max
)

200  
	`_poﬁ_¸óã
(
ma°î
, 
öôül
, 
max
);

201 
	}
}

203 
memˇched_poﬁ_°
 * 
	$memˇched_poﬁ
(c⁄° *
›ti⁄_°rög
, 
size_t
 
›ti⁄_°rög_Àngth
)

205 
memˇched_°
 *
memc

	`memˇched
(
›ti⁄_°rög
, 
›ti⁄_°rög_Àngth
);

207 i‡(
memc
 =
NULL
)

209  
NULL
;

212 
memˇched_poﬁ_°
 *
£lf

	`memˇched_poﬁ_¸óã
(
memc
, memc->
c⁄figuª
.
öôül_poﬁ_size
, memc->c⁄figuª.
max_poﬁ_size
);

213 i‡(
£lf
 =
NULL
)

215 
	`memˇched_‰ì
(
memc
);

216  
NULL
;

219 
£lf
->
_owns_ma°î

åue
;

221  
£lf
;

222 
	}
}

224 
memˇched_°
* 
	$memˇched_poﬁ_de°roy
(
memˇched_poﬁ_°
* 
poﬁ
)

226 i‡(
poﬁ
 =
NULL
)

228  
NULL
;

232 
memˇched_°
 *
ªt

NULL
;

233 i‡(
poﬁ
->
_owns_ma°î
)

237 
ªt

poﬁ
->
ma°î
;

240 
dñëe
 
poﬁ
;

242  
ªt
;

243 
	}
}

245 
memˇched_°
* 
	gmemˇched_poﬁ_°
::
	$„tch
(
memˇched_ªtu∫_t
& 
rc
)

247 
time•ec
 
ªœtive_time
= { 0, 0 };

248  
	`„tch
(
ªœtive_time
, 
rc
);

249 
	}
}

251 
memˇched_°
* 
	gmemˇched_poﬁ_°
::
	$„tch
(c⁄° 
time•ec
& 
ªœtive_time
, 
memˇched_ªtu∫_t
& 
rc
)

253 
rc

MEMCACHED_SUCCESS
;

255 
îr‹
;

256 i‡((
îr‹

	`±hªad_muãx_lock
(&
muãx
)) != 0)

258 
rc

MEMCACHED_IN_PROGRESS
;

259  
NULL
;

262 
memˇched_°
 *
ªt

NULL
;

265 i‡(
fú°‰ì
 > -1)

267 
ªt

£rvî_poﬁ
[
fú°‰ì
--];

269 i‡(
cuºít_size
 =
size
)

271 i‡(
ªœtive_time
.
tv_£c
 =0 
™d
Ññ©ive_time.
tv_n£c
 == 0)

273 
îr‹

	`±hªad_muãx_u∆ock
(&
muãx
);

274 
rc

MEMCACHED_NOTFOUND
;

276  
NULL
;

279 
time•ec
 
time_to_waô
= {0, 0};

280 
time_to_waô
.
tv_£c

	`time
(
NULL
Ë+
ªœtive_time
.tv_sec;

281 
time_to_waô
.
tv_n£c

ªœtive_time
.tv_nsec;

283 
thªad_ªt
;

284 i‡((
thªad_ªt

	`±hªad_c⁄d_timedwaô
(&
c⁄d
, &
muãx
, &
time_to_waô
)) != 0)

286 
u∆ock_îr‹
;

287 i‡((
u∆ock_îr‹

	`±hªad_muãx_u∆ock
(&
muãx
)) != 0)

289 
	`as£π_vmsg
(
îr‹
 !0, "±hªad_muãx_u∆ock(Ë%s", 
	`°ªº‹
(error));

292 i‡(
thªad_ªt
 =
ETIMEDOUT
)

294 
rc

MEMCACHED_TIMEOUT
;

298 
î∫o

thªad_ªt
;

299 
rc

MEMCACHED_ERRNO
;

302  
NULL
;

305 i‡(
	`grow_poﬁ
(
this
Ë=
Ál£
)

307 
u∆ock_îr‹
;

308 i‡((
u∆ock_îr‹

	`±hªad_muãx_u∆ock
(&
muãx
)) != 0)

310 
	`as£π_vmsg
(
îr‹
 !0, "±hªad_muãx_u∆ock(Ë%s", 
	`°ªº‹
(error));

313  
NULL
;

315 } 
ªt
 =
NULL
);

317 i‡((
îr‹

	`±hªad_muãx_u∆ock
(&
muãx
)) != 0)

319 
	`as£π_vmsg
(
îr‹
 !0, "±hªad_muãx_u∆ock(Ë%s", 
	`°ªº‹
(error));

322  
ªt
;

323 
	}
}

325 
boﬁ
 
	gmemˇched_poﬁ_°
::
	$ªÀa£
(
memˇched_°
 *
ªÀa£d
, 
memˇched_ªtu∫_t
& 
rc
)

327 
rc

MEMCACHED_SUCCESS
;

328 i‡(
ªÀa£d
 =
NULL
)

330 
rc

MEMCACHED_INVALID_ARGUMENTS
;

331  
Ál£
;

334 
îr‹
;

335 i‡((
îr‹

	`±hªad_muãx_lock
(&
muãx
)))

337 
rc

MEMCACHED_IN_PROGRESS
;

338  
Ál£
;

344 i‡(
	`com∑ª_vîsi⁄
(
ªÀa£d
Ë=
Ál£
)

346 
memˇched_°
 *
memc
;

347 i‡((
memc

	`memˇched_˛⁄e
(
NULL
, 
ma°î
)))

349 
	`memˇched_‰ì
(
ªÀa£d
);

350 
ªÀa£d

memc
;

354 
£rvî_poﬁ
[++
fú°‰ì
]
ªÀa£d
;

356 i‡(
fú°‰ì
 =0 
™d
 
cuºít_size
 =
size
)

359 i‡((
îr‹

	`±hªad_c⁄d_brﬂdˇ°
(&
c⁄d
)) != 0)

361 
	`as£π_vmsg
(
îr‹
 !0, "±hªad_c⁄d_brﬂdˇ°(Ë%s", 
	`°ªº‹
(error));

365 i‡((
îr‹

	`±hªad_muãx_u∆ock
(&
muãx
)) != 0)

369  
åue
;

370 
	}
}

372 
memˇched_°
* 
	$memˇched_poﬁ_„tch
(
memˇched_poﬁ_°
* 
poﬁ
, 
time•ec
* 
ªœtive_time
, 
memˇched_ªtu∫_t
* 
rc
)

374 i‡(
poﬁ
 =
NULL
)

376  
NULL
;

379 
memˇched_ªtu∫_t
 
unu£d
;

380 i‡(
rc
 =
NULL
)

382 
rc
&
unu£d
;

385 i‡(
ªœtive_time
 =
NULL
)

387  
poﬁ
->
	`„tch
(*
rc
);

390  
poﬁ
->
	`„tch
(*
ªœtive_time
, *
rc
);

391 
	}
}

393 
memˇched_°
* 
	$memˇched_poﬁ_p›
(
memˇched_poﬁ_°
* 
poﬁ
,

394 
boﬁ
 
block
,

395 
memˇched_ªtu∫_t
 *
rc
)

397 i‡(
poﬁ
 =
NULL
)

399  
NULL
;

402 
memˇched_ªtu∫_t
 
unu£d
;

403 i‡(
rc
 =
NULL
)

405 
rc
&
unu£d
;

408 
memˇched_°
 *
memc
;

409 i‡(
block
)

411 
memc

poﬁ
->
	`„tch
’oﬁ->
	`timeout
(), *
rc
);

415 
memc

poﬁ
->
	`„tch
(*
rc
);

418  
memc
;

419 
	}
}

421 
memˇched_ªtu∫_t
 
	$memˇched_poﬁ_ªÀa£
(
memˇched_poﬁ_°
* 
poﬁ
, 
memˇched_°
 *
ªÀa£d
)

423 i‡(
poﬁ
 =
NULL
)

425  
MEMCACHED_INVALID_ARGUMENTS
;

428 
memˇched_ªtu∫_t
 
rc
;

430 (Ë
poﬁ
->
	`ªÀa£
(
ªÀa£d
, 
rc
);

432  
rc
;

433 
	}
}

435 
memˇched_ªtu∫_t
 
	$memˇched_poﬁ_push
(
memˇched_poﬁ_°
* 
poﬁ
, 
memˇched_°
 *
ªÀa£d
)

437  
	`memˇched_poﬁ_ªÀa£
(
poﬁ
, 
ªÀa£d
);

438 
	}
}

441 
memˇched_ªtu∫_t
 
	$memˇched_poﬁ_behavi‹_£t
(
memˇched_poﬁ_°
 *
poﬁ
,

442 
memˇched_behavi‹_t
 
Êag
,

443 
uöt64_t
 
d©a
)

445 i‡(
poﬁ
 =
NULL
)

447  
MEMCACHED_INVALID_ARGUMENTS
;

450 
îr‹
;

451 i‡((
îr‹

	`±hªad_muãx_lock
(&
poﬁ
->
muãx
)))

453  
MEMCACHED_IN_PROGRESS
;

457 
memˇched_ªtu∫_t
 
rc

	`memˇched_behavi‹_£t
(
poﬁ
->
ma°î
, 
Êag
, 
d©a
);

458 i‡(
	`memˇched_Áûed
(
rc
))

460 i‡((
îr‹

	`±hªad_muãx_u∆ock
(&
poﬁ
->
muãx
)) != 0)

462 
	`as£π_vmsg
(
îr‹
 !0, "±hªad_muãx_u∆ock(Ë%s", 
	`°ªº‹
(error));

464  
rc
;

467 
poﬁ
->
	`ö¸emít_vîsi⁄
();

469 
xx
0; xx <
poﬁ
->
fú°‰ì
; ++xx)

471 i‡(
	`memˇched_suc˚ss
(
	`memˇched_behavi‹_£t
(
poﬁ
->
£rvî_poﬁ
[
xx
], 
Êag
, 
d©a
)))

473 
poﬁ
->
£rvî_poﬁ
[
xx
]->
c⁄figuª
.
vîsi⁄
poﬁ->
	`vîsi⁄
();

477 
memˇched_°
 *
memc
;

478 i‡((
memc

	`memˇched_˛⁄e
(
NULL
, 
poﬁ
->
ma°î
)))

480 
	`memˇched_‰ì
(
poﬁ
->
£rvî_poﬁ
[
xx
]);

481 
poﬁ
->
£rvî_poﬁ
[
xx
]
memc
;

492 i‡((
îr‹

	`±hªad_muãx_u∆ock
(&
poﬁ
->
muãx
)) != 0)

494 
	`as£π_vmsg
(
îr‹
 !0, "±hªad_muãx_u∆ock(Ë%s", 
	`°ªº‹
(error));

497  
rc
;

498 
	}
}

500 
memˇched_ªtu∫_t
 
	$memˇched_poﬁ_behavi‹_gë
(
memˇched_poﬁ_°
 *
poﬁ
,

501 
memˇched_behavi‹_t
 
Êag
,

502 
uöt64_t
 *
vÆue
)

504 i‡(
poﬁ
 =
NULL
)

506  
MEMCACHED_INVALID_ARGUMENTS
;

509 
îr‹
;

510 i‡((
îr‹

	`±hªad_muãx_lock
(&
poﬁ
->
muãx
)))

512  
MEMCACHED_IN_PROGRESS
;

515 *
vÆue

	`memˇched_behavi‹_gë
(
poﬁ
->
ma°î
, 
Êag
);

517 i‡((
îr‹

	`±hªad_muãx_u∆ock
(&
poﬁ
->
muãx
)) != 0)

519 
	`as£π_vmsg
(
îr‹
 !0, "±hªad_muãx_u∆ock(Ë%s", 
	`°ªº‹
(error));

522  
MEMCACHED_SUCCESS
;

523 
	}
}

	@libmemcachedutil/version.cc

39 
	~<libmemˇchedutû/comm⁄.h
>

40 
	~<ˇs£π
>

42 
	sloˇl_c⁄ãxt


44 
uöt8_t
 
	mmaj‹_vîsi⁄
;

45 
uöt8_t
 
	mmö‹_vîsi⁄
;

46 
uöt8_t
 
	mmi¸o_vîsi⁄
;

48 
boﬁ
 
	måuth
;

51 
memˇched_ªtu∫_t
 
	$check_£rvî_vîsi⁄
(c⁄° 
memˇched_°
 *,

52 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
,

53 *
c⁄ãxt
)

56 
loˇl_c⁄ãxt
 *
check
(loˇl_c⁄ãxà*)
c⁄ãxt
;

58 i‡(
	`memˇched_£rvî_maj‹_vîsi⁄
(
ö°™˚
Ë!
UINT8_MAX
 &&

59 
	`memˇched_£rvî_maj‹_vîsi⁄
(
ö°™˚
Ë>
check
->
maj‹_vîsi⁄
 
™d


60 
	`memˇched_£rvî_mö‹_vîsi⁄
(
ö°™˚
Ë>
check
->
mö‹_vîsi⁄
 
™d


61 
	`memˇched_£rvî_mi¸o_vîsi⁄
(
ö°™˚
Ë>
check
->
mi¸o_vîsi⁄
 )

63  
MEMCACHED_SUCCESS
;

66 
check
->
åuth

Ál£
;

68  
MEMCACHED_FAILURE
;

69 
	}
}

71 
boﬁ
 
	$libmemˇched_utû_vîsi⁄_check
(
memˇched_°
 *
memc
,

72 
uöt8_t
 
maj‹_vîsi⁄
,

73 
uöt8_t
 
mö‹_vîsi⁄
,

74 
uöt8_t
 
mi¸o_vîsi⁄
)

76 i‡(
	`memˇched_Áûed
(
	`memˇched_vîsi⁄
(
memc
)))

78  
Ál£
;

81 
loˇl_c⁄ãxt
 
check
{ 
maj‹_vîsi⁄
, 
mö‹_vîsi⁄
, 
mi¸o_vîsi⁄
, 
åue
 };

83 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

84 
ˇŒbacks
[0]
check_£rvî_vîsi⁄
;

85 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, (*)&
check
, 1);

87  
check
.
åuth
;

88 
	}
}

	@libtest/abort.cc

37 
	~<c°dlib
>

39 
	$maö
()

43 
	`ab‹t
();

47 
	}
}

	@libtest/alarm.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/comm⁄.h
>

41 
	~<sys/time.h
>

42 
	~<c°dlib
>

44 
«me•a˚
 
	glibã°
 {

46 c⁄° 
timevÆ
 
	gdeÁu…_ô_vÆue
= { 600, 0 };

47 c⁄° 
timevÆ
 
	gdeÁu…_ô_öãrvÆ
= { 0, 0 };

48 c⁄° 
ôimîvÆ
 
	gdefuÆt_timî
{ 
deÁu…_ô_öãrvÆ
, 
deÁu…_ô_vÆue
 };

50 c⁄° 
ôimîvÆ
 
	gˇn˚l_timî
{ 
deÁu…_ô_öãrvÆ
, default_it_interval };

53 
£t_Æ¨m
()

55 i‡(
£tôimî
(
ITIMER_VIRTUAL
, &
defuÆt_timî
, 
NULL
) == -1)

57 
Eº‹
 << "setitimer() failed";

61 
£t_Æ¨m
(
tv_£c
, 
tv_u£c
)

64 i‡(
gëív
("YATL_ALARM"))

66 
	gî∫o
= 0;

67 
	gtv_£c

°πﬁ
(
gëív
("YATL_ALARM"), (**Ë
NULL
, 10);

69 i‡(
	gî∫o
 != 0)

71 
FATAL
("Bad value for YATL_ALARM");

73 i‡(
	gtv_£c
 == 0)

75 
ˇn˚l_Æ¨m
();

79 #ifde‡
__APPLE__


80 
timevÆ
 
	gô_vÆue
{ 
time_t
(
tv_£c
), 
su£c⁄ds_t
(
tv_u£c
) };

82 
timevÆ
 
	gô_vÆue
{ 
tv_£c
, 
tv_u£c
 };

85 
ôimîvÆ
 
	gtimî
{ 
deÁu…_ô_öãrvÆ
, 
ô_vÆue
 };

87 i‡(
£tôimî
(
ITIMER_VIRTUAL
, &
timî
, 
NULL
) == -1)

89 
Eº‹
 << "setitimer() failed";

93 
ˇn˚l_Æ¨m
()

95 i‡(
£tôimî
(
ITIMER_VIRTUAL
, &
ˇn˚l_timî
, 
NULL
) == -1)

97 
Eº‹
 << "setitimer() failed";

	@libtest/alarm.h

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 
£t_Æ¨m
(
tv_£c
, 
tv_u£c
);

42 
£t_Æ¨m
();

43 
ˇn˚l_Æ¨m
();

	@libtest/backtrace_test.cc

37 
	~<˚ºno
>

38 
	~<csig«l
>

39 
	~<c°dio
>

40 
	~<c°dlib
>

41 
	~<c°rög
>

42 
	~<io°ªam
>

44 
	~"libmemˇched/backåa˚.hµ
"

46 ˛as†
	cTe°
 {

47 
	mpublic
:

48 
	$Te°
()

52 
	$ˇŒ_backåa˚
()

54 
°d
::
˚º
 << 
__func__
 << std::
ídl
;

55 
	`cu°om_backåa˚
();

56 
	}
}

59 
	$SIGSEGV_h™dÀr
(
sig_num
, 
sigöfo_t
* 
öfo
, * 
uc⁄ãxt
)

61 
°d
::
˚º
 << 
__func__
 << std::
ídl
;

62 ()
sig_num
;

63 ()
öfo
;

64 ()
uc⁄ãxt
;

66 
	`cu°om_backåa˚
();

67 
	}
}

69 
	$øi£_SIGSEGV
()

71 
°d
::
˚º
 << std::
ídl
 << "Calling backtrace()" << std::endl;

72 
	`cu°om_backåa˚
();

73 
°d
::
˚º
 << std::
ídl
 << "CallingÑaise()" << std::endl;

74  
	`øi£
(
SIGSEGV
);

75 
	}
}

77 
	$œyî4
()

79  
	`øi£_SIGSEGV
();

80 
	}
}

82 
	$œyî3
()

84  
	`œyî4
();

85 
	}
}

87 
	$œyî2
()

89  
	`œyî3
();

90 
	}
}

92 
	$œyî1
()

94  
	`œyî2
();

95 
	}
}

97 
	$maö
(, **)

99 
Te°
 
t
;

101 
t
.
	`ˇŒ_backåa˚
();

103 
siga˘i⁄
 
siga˘
;

105 
siga˘
.
ß_siga˘i⁄

SIGSEGV_h™dÀr
;

106 
siga˘
.
ß_Êags

SA_RESTART
 | 
SA_SIGINFO
;

108 i‡(
	`siga˘i⁄
(
SIGSEGV
, &
siga˘
, (
siga˘i⁄
 *)
NULL
) != 0)

110 
°d
::
˚º
 << "îr‹ sëtög sig«»h™dÀ∏f‹ " << 
	`°rsig«l
(
SIGSEGV
Ë<< "(" << SIGSEGV << ")" << std::
ídl
;

112 
	`exô
(
EXIT_FAILURE
);

115 
ªt

	`œyî1
();

116 i‡(
ªt
)

118 
°d
::
˚º
 << "øi£(Ë" << 
	`°ªº‹
(
î∫o
Ë<< std::
ídl
;

119 
	`exô
(
EXIT_FAILURE
);

122 
	`exô
(
EXIT_SUCCESS
);

123 
	}
}

	@libtest/binaries.cc

37 
	~"libã°/y©lc⁄.h
"

39 
«me•a˚
 
	glibã°
 {

	@libtest/binaries.h

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

	@libtest/blobslap_worker.cc

38 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/comm⁄.h
>

41 
	~<libã°/blob¶≠_w‹kî.h
>

43 
	~<ˇs£π
>

44 
	~<˚ºno
>

45 
	~<c°dio
>

46 
	~<c°dlib
>

47 
	~<c°rög
>

48 
	~<io°ªam
>

49 
	~<sig«l.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<sys/waô.h
>

52 
	~<uni°d.h
>

54 #i‚de‡
__INTEL_COMPILER


55 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

58 
«me•a˚
 
	glibã°
 {

60 ˛as†
	cBlob¶≠W‹kî
 : 
public
 
Sîvî


62 
¥iv©e
:

63 
public
:

64 
Blob¶≠W‹kî
(
ö_p‹t_t
 
p‹t_¨g
) :

65 
Sîvî
("loˇlho°", 
p‹t_¨g
, "bíchm¨k/blob¶≠_w‹kî", 
åue
)

67 
£t_pid_fûe
();

70 
pid_t
 
gë_pid
(
boﬁ
 
îr‹_is_ok
)

72 i‡(
pid_fûe
().
em±y
())

74 
	gEº‹
 << "pid_file wasÉmpty";

78 
Waô
 
waô
(
pid_fûe
(), 0);

80 i‡(
îr‹_is_ok
 
™d
 
nŸ
 
	gwaô
.
suc˚ssful
())

82 
	gEº‹
 << "Pidfûêwa†nŸ found:" << 
pid_fûe
();

86 
	g°d
::
°rög°ªam
 
îr‹_mesßge
;

87 
pid_t
 
	gªt

gë_pid_‰om_fûe
(
pid_fûe
(), 
îr‹_mesßge
);

89 i‡(
îr‹_is_ok
 
™d
 
is_pid_vÆid
(
ªt
Ë=
Ál£
)

91 
Eº‹
 << 
îr‹_mesßge
.
°r
();

94  
	gªt
;

97 
boﬁ
 
pög
()

99 i‡(
pid_fûe
().
em±y
())

101 
	gEº‹
 << "NoÖid fileávailable";

102  
	gÁl£
;

105 
Waô
 
waô
(
pid_fûe
(), 0);

106 i‡(
nŸ
 
	gwaô
.
suc˚ssful
())

108 
	gEº‹
 << "Pidfûêwa†nŸ found:" << 
pid_fûe
();

109  
	gÁl£
;

112 
	g°d
::
°rög°ªam
 
îr‹_mesßge
;

113 
pid_t
 
	gloˇl_pid

gë_pid_‰om_fûe
(
pid_fûe
(), 
îr‹_mesßge
);

114 i‡(
is_pid_vÆid
(
loˇl_pid
Ë=
Ál£
)

116 
Eº‹
 << 
îr‹_mesßge
.
°r
();

117  
	gÁl£
;

121 i‡(::
kûl
(
loˇl_pid
, 0) == 0)

123  
åue
;

126  
	gÁl£
;

129 c⁄° *
«me
()

134 
boﬁ
 
has_p‹t_›ti⁄
() const

136  
	gåue
;

139 
boﬁ
 
has_log_fûe_›ti⁄
() const

141  
	gåue
;

144 
boﬁ
 
is_libtoﬁ
()

146  
	gåue
;

149 
boﬁ
 
buûd
();

153 
	~<s°ªam
>

155 
boﬁ
 
	gBlob¶≠W‹kî
::
	$buûd
()

157  
åue
;

158 
	}
}

160 
Sîvî
 *
	$buûd_blob¶≠_w‹kî
(
ö_p‹t_t
 
åy_p‹t
)

162  
√w
 
	`Blob¶≠W‹kî
(
åy_p‹t
);

163 
	}
}

	@libtest/blobslap_worker.h

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 
Sîvî
 *
buûd_blob¶≠_w‹kî
(
ö_p‹t_t
 
åy_p‹t
);

	@libtest/callbacks.h

37 #¥agm®
⁄˚


39 #ifdef 
__˝lu•lus


43 * (
	tã°_ˇŒback_¸óã_‚
)(
	tlibã°
::
	t£rvî_°¨tup_°
&, 
	tã°_ªtu∫_t
&);

44 
boﬁ
 
	tã°_ˇŒback_de°roy_‚
(*);

45 
ã°_ªtu∫_t
 (
	tã°_ˇŒback_‚
)(*);

46 
ã°_ªtu∫_t
 (
	tã°_ˇŒback_ru¬î_‚
)(
	tã°_ˇŒback_‚
*, *);

47 
ã°_ªtu∫_t
 (
	tã°_ˇŒback_îr‹_‚
)(c⁄° 
	tã°_ªtu∫_t
, *);

49 #ifdef 
__˝lu•lus


	@libtest/client.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/sockë.h
>

42 
	~<uni°d.h
>

43 
	~<°rög
>

45 #ifde‡
HAVE_POLL_H


46 
	~<pﬁl.h
>

49 #i‚de‡
HAVE_MSG_NOSIGNAL


50 
	#MSG_NOSIGNAL
 0

	)

53 
«me•a˚
 
	glibã°
 {

55 
	gSim∂eClõ¡
::
Sim∂eClõ¡
(c⁄° 
°d
::
°rög
& 
ho°«me_
, 
ö_p‹t_t
 
p‹t_
) :

56 
_is_c⁄√˘ed
(
Ál£
),

57 
_ho°«me
(
ho°«me_
),

58 
_p‹t
(
p‹t_
),

59 
sock_fd
(
INVALID_SOCKET
),

60 
ªque°ed_mesßge
(1)

64 
boﬁ
 
	gSim∂eClõ¡
::
ªady
(
evít_
)

66 
pﬁlfd
 
fds
[1];

67 
	gfds
[0].
	gfd

sock_fd
;

68 
	gfds
[0].
	gevíts

evít_
;

69 
	gfds
[0].
	gªvíts
= 0;

71 
	gtimeout
= 5000;

72 i‡(
	g_is_c⁄√˘ed
 =
Ál£
)

74 
timeout
=Åimeout * 30;

77 
	gªady_fds

pﬁl
(
fds
, 1, 
timeout
);

79 i‡(
	gªady_fds
 == -1)

81 
_îr‹

°ªº‹
(
î∫o
);

82  
	gÁl£
;

84 i‡(
	gªady_fds
 == 1)

86 i‡(
fds
[0].
ªvíts
 & (
POLLERR
 | 
POLLHUP
 | 
POLLNVAL
))

88 
îr
;

89 
sockÀn_t
 
	gÀn
 (
îr
);

92 i‡(
gësock›t
(
fds
[0].
fd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
Àn
) == 0)

95 i‡(
îr
 == 0)

97 
_îr‹
= "getsockopt()ÑeturnedÇoÉrror butÖoll() indicated oneÉxisted";

98  
	gÁl£
;

100 
	gî∫o

îr
;

102 
	g_îr‹

°ªº‹
(
î∫o
);

104  
	gÁl£
;

107 
	g_is_c⁄√˘ed

åue
;

108 i‡(
	gfds
[0].
	gªvíts
 & 
	gevít_
)

110  
	gåue
;

114 
Áèl_as£π
(
ªady_fds
 == 0);

115 
	g_îr‹
= "TIMEOUT";

117  
	gÁl£
;

120 
addröfo
* 
	gSim∂eClõ¡
::
lookup
()

122 
addröfo
 *
ai

NULL
;

123 
addröfo
 
	ghöts
;

124 
mem£t
(&
höts
, 0, (
addröfo
));

125 
	ghöts
.
	gai_sockty≥

SOCK_STREAM
;

126 
	ghöts
.
	gai_¥Ÿocﬁ

IPPROTO_TCP
;

128 
	glibã°
::
vch¨_t
 
£rvi˚
;

129 
	g£rvi˚
.
ªsize
(
NI_MAXSERV
);

130 ()
¢¥ötf
(&
£rvi˚
[0], sîvi˚.
size
(), "%d", 
_p‹t
);

132 
	ggëaddröfo_îr‹
;

133 i‡((
	ggëaddröfo_îr‹

gëaddröfo
(
_ho°«me
.
c_°r
(), &
£rvi˚
[0], &
höts
, &
ai
)) != 0)

135 i‡(
gëaddröfo_îr‹
 !
EAI_SYSTEM
)

137 
_îr‹

gai_°ªº‹
(
gëaddröfo_îr‹
);

138  
	gNULL
;

142 
	g_îr‹

°ªº‹
(
gëaddröfo_îr‹
);

143  
	gNULL
;

147  
	gai
;

150 
	gSim∂eClõ¡
::~
Sim∂eClõ¡
()

152 
˛o£_sockë
();

155 
	gSim∂eClõ¡
::
˛o£_sockë
()

157 i‡(
sock_fd
 !
INVALID_SOCKET
)

159 
˛o£
(
sock_fd
);

160 
	gsock_fd

INVALID_SOCKET
;

164 
boﬁ
 
	gSim∂eClõ¡
::
ö°™˚_c⁄√˘
()

166 
_is_c⁄√˘ed

Ál£
;

167 
addröfo
 *
	gai
;

168 i‡((
	gai

lookup
()))

171 
addröfo
* 
addªss_öfo_√xt

ai
;

173 
addªss_öfo_√xt
 
™d
 
	gsock_fd
 =
INVALID_SOCKET
)

175 i‡((
sock_fd

sockë
(
addªss_öfo_√xt
->
ai_Ámûy
,áddªss_öfo_√xt->
ai_sockty≥
,áddªss_öfo_√xt->
ai_¥Ÿocﬁ
)Ë!
SOCKET_ERROR
)

177 i‡(
c⁄√˘
(
sock_fd
, 
addªss_öfo_√xt
->
ai_addr
,áddªss_öfo_√xt->
ai_addæí
Ë=
SOCKET_ERROR
)

179 
î∫o
)

181 
EINTR
:

182 
˛o£_sockë
();

185 
	gEINPROGRESS
:

186 
EALREADY
:

190 
	gECONNREFUSED
:

195 
˛o£_sockë
();

196 
	g_îr‹

°ªº‹
(
î∫o
);

201 
FATAL
(
°ªº‹
(
î∫o
));

203 
	gaddªss_öfo_√xt

addªss_öfo_√xt
->
ai_√xt
;

206 
‰ìaddröfo
(
ai
);

209 i‡(
	gsock_fd
 =
INVALID_SOCKET
)

211 
Áèl_as£π
(
_îr‹
.
size
());

214  
boﬁ
(
sock_fd
 !
INVALID_SOCKET
);

217  
	gÁl£
;

220 
boﬁ
 
	gSim∂eClõ¡
::
is_vÆid
()

222 
_îr‹
.
˛ór
();

223 i‡(
	gsock_fd
 =
INVALID_SOCKET
)

225  
ö°™˚_c⁄√˘
();

228  
	gåue
;

231 
boﬁ
 
	gSim∂eClõ¡
::
mesßge
(c⁄° * 
±r
, c⁄° 
size_t
 
Àn
)

233 i‡(
is_vÆid
())

235 i‡(
ªady
(
POLLOUT
))

237 
off_t
 
	goff£t
= 0;

240 
ssize_t
 
	gnw

£nd
(
sock_fd
, 
±r
 + 
off£t
, 
Àn
 - off£t, 
MSG_NOSIGNAL
);

241 i‡(
	gnw
 == -1)

243 i‡(
î∫o
 !
EINTR
)

245 
_îr‹

°ªº‹
(
î∫o
);

246  
	gÁl£
;

251 
	goff£t
 +
nw
;

253 } 
	goff£t
 < 
ssize_t
(
Àn
));

255  
	gåue
;

259 
Áèl_as£π
(
_îr‹
.
size
());

261  
	gÁl£
;

264 
boﬁ
 
	gSim∂eClõ¡
::
£nd_mesßge
(c⁄° 
°d
::
°rög
& 
¨g
)

266 i‡(
mesßge
(
¨g
.
c_°r
(),árg.
size
()Ë=
åue
)

268  
mesßge
("\r\n", 2);

271  
	gÁl£
;

274 
boﬁ
 
	gSim∂eClõ¡
::
£nd_d©a
(c⁄° 
libã°
::
vch¨_t
& 
mesßge_
,Üibã°::vch¨_t& 
ª•⁄£_
)

276 
ªque°ed_mesßge
++;

277 i‡(
mesßge
(&
mesßge_
[0], mesßge_.
size
()))

279  
ª•⁄£
(
ª•⁄£_
);

282  
	gÁl£
;

285 
boﬁ
 
	gSim∂eClõ¡
::
£nd_mesßge
(c⁄° 
°d
::
°rög
& 
mesßge_
, std::°rög& 
ª•⁄£_
)

287 
ªque°ed_mesßge
++;

288 i‡(
£nd_mesßge
(
mesßge_
))

290  
ª•⁄£
(
ª•⁄£_
);

293  
	gÁl£
;

296 
boﬁ
 
	gSim∂eClõ¡
::
ª•⁄£
(
libã°
::
vch¨_t
& 
ª•⁄£_
)

298 
ª•⁄£_
.
˛ór
();

300 i‡(
is_vÆid
())

302 i‡(
ªady
(
POLLIN
))

304 
boﬁ
 
	gm‹e

åue
;

305 
	gbuf„r
[2];

306 
	gbuf„r
[1]= 0;

309 
ssize_t
 
	gƒ

ªcv
(
sock_fd
, 
buf„r
, 1, 
MSG_NOSIGNAL
);

310 i‡(
	gƒ
 == -1)

312 i‡(
î∫o
 !
EINTR
)

314 
_îr‹

°ªº‹
(
î∫o
);

315  
	gÁl£
;

318 i‡(
	gƒ
 == 0)

320 
˛o£_sockë
();

321 
	gm‹e

Ál£
;

325 
	gª•⁄£_
.
ª£rve
(
ª•⁄£_
.
size
(Ë+ 
ƒ
 +1);

326 
Áèl_as£π
(
ƒ
 == 1);

327 i‡(
	gbuf„r
[0] == '\n')

329 
m‹e

Ál£
;

331 
	gª•⁄£_
.
ö£π
(
ª•⁄£_
.
íd
(), 
buf„r
, buf„∏+
ƒ
);

333 } 
	gm‹e
);

335  
	gª•⁄£_
.
size
();

339 
Áèl_as£π
(
_îr‹
.
size
());

340  
	gÁl£
;

343 
boﬁ
 
	gSim∂eClõ¡
::
ª•⁄£
(
°d
::
°rög
& 
ª•⁄£_
)

345 
ª•⁄£_
.
˛ór
();

347 i‡(
is_vÆid
())

349 i‡(
ªady
(
POLLIN
))

351 
boﬁ
 
	gm‹e

åue
;

352 
	gbuf„r
[2];

353 
	gbuf„r
[1]= 0;

356 
ssize_t
 
	gƒ

ªcv
(
sock_fd
, 
buf„r
, 1, 
MSG_NOSIGNAL
);

357 i‡(
	gƒ
 == -1)

359 i‡(
î∫o
 !
EINTR
)

361 
_îr‹

°ªº‹
(
î∫o
);

362  
	gÁl£
;

365 i‡(
	gƒ
 == 0)

367 
˛o£_sockë
();

368 
	gm‹e

Ál£
;

372 
Áèl_as£π
(
ƒ
 == 1);

373 i‡(
	gbuf„r
[0] == '\n')

375 
m‹e

Ál£
;

377 
	gª•⁄£_
.
≠≥nd
(
buf„r
);

379 } 
	gm‹e
);

381  
	gª•⁄£_
.
size
();

385 
Áèl_as£π
(
_îr‹
.
size
());

386  
	gÁl£
;

	@libtest/client.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 ˛as†
	cSim∂eClõ¡
 {

42 
	gpublic
:

43 
Sim∂eClõ¡
(c⁄° 
°d
::
°rög
& 
ho°«me_
, 
ö_p‹t_t
 
p‹t_
);

44 ~
Sim∂eClõ¡
();

46 
boﬁ
 
£nd_d©a
(c⁄° 
libã°
::
vch¨_t
&,Üibtest::vchar_t&);

47 
boﬁ
 
£nd_mesßge
(c⁄° 
°d
::
°rög
&);

48 
boﬁ
 
£nd_mesßge
(c⁄° 
°d
::
°rög
&, std::string&);

49 
boﬁ
 
ª•⁄£
(
°d
::
°rög
&);

50 
boﬁ
 
ª•⁄£
(
libã°
::
vch¨_t
&);

52 
boﬁ
 
is_vÆid
();

54 c⁄° 
	g°d
::
°rög
& 
îr‹
() const

56  
_îr‹
;

59 
boﬁ
 
is_îr‹
() const

61  
	g_îr‹
.
size
(Ë? 
	gåue
 : 
Ál£
;

64 
	g¥iv©e
:

65 
˛o£_sockë
();

66 
boﬁ
 
ö°™˚_c⁄√˘
();

67 
addröfo
* 
lookup
();

68 
boﬁ
 
mesßge
(c⁄° * 
±r
, c⁄° 
size_t
 
Àn
);

69 
boﬁ
 
ªady
(
evít_
);

71 
	g¥iv©e
:

72 
boﬁ
 
_is_c⁄√˘ed
;

73 
	g°d
::
°rög
 
_ho°«me
;

74 
ö_p‹t_t
 
	g_p‹t
;

75 
	gsock_fd
;

76 
	g°d
::
°rög
 
_îr‹
;

77 
	gªque°ed_mesßge
;

	@libtest/cmdline.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~"libã°/comm⁄.h
"

41 
usög
 
«me•a˚
 
	glibã°
;

43 
	~<c°dlib
>

44 
	~<c°rög
>

45 
	~<˚ºno
>

46 
	~<f˙é.h
>

47 
	~<f°ªam
>

48 
	~<mem‹y
>

49 #ifde‡
HAVE_POLL_H


50 
	~<pﬁl.h
>

52 #ifde‡
HAVE_SPAWN_H


53 
	~<•awn.h
>

55 
	~<s°ªam
>

56 
	~<°rög
>

57 
	~<sys/°©.h
>

58 
	~<sys/ty≥s.h
>

59 
	~<uni°d.h
>

61 
	~<Æg‹ôhm
>

63 #i‚de‡
__USE_GNU


64 **
	gívú⁄

NULL
;

67 #i‚de‡
FD_CLOEXEC


68 
	#FD_CLOEXEC
 0

	)

71 
	g«me•a˚
 {

73 
	g°d
::
°rög
 
¥öt_¨gv
(
libã°
::
vch¨_±r_t
& 
buût_¨gv
)

75 
°d
::
°rög°ªam
 
¨g_buf„r
;

77 
	gvch¨_±r_t
::
ôî©‹
 
ôî

buût_¨gv
.
begö
();

78 
	gôî
 !
buût_¨gv
.
íd
();

79 ++
	gôî
)

81 
	g¨g_buf„r
 << *
	gôî
 << " ";

84  
	g¨g_buf„r
.
°r
();

88 
	g°d
::
°rög
 
¥öt_¨gv
(** 
¨gv
)

90 
°d
::
°rög°ªam
 
¨g_buf„r
;

92 ** 
	g±r

¨gv
; *ptr; ++ptr)

94 
	g¨g_buf„r
 << *
	g±r
 << " ";

97  
	g¨g_buf„r
.
°r
();

101 
	gAµliˇti⁄
::
îr‹_t
 
öt_to_îr‹_t
(
¨g
)

103 
¨g
)

106  
Aµliˇti⁄
::
INVALID_POSIX_SPAWN
;

109  
Aµliˇti⁄
::
SUCCESS
;

112  
Aµliˇti⁄
::
FAILURE
;

115  
Aµliˇti⁄
::
UNKNOWN
;

120 
«me•a˚
 
	glibã°
 {

122 
	gAµliˇti⁄
::
Aµliˇti⁄
(c⁄° 
°d
::
°rög
& 
¨g
, c⁄° 
boﬁ
 
_u£_libtoﬁ_¨g
) :

123 
_u£_libtoﬁ
(
_u£_libtoﬁ_¨g
),

124 
_u£_vÆgröd
(
Ál£
),

125 
_u£_gdb
(
Ál£
),

126 
_u£_±rcheck
(
Ál£
),

127 
_wûl_Áû
(
Ál£
),

128 
_¨gc
(0),

129 
_exe˘ubÀ
(
¨g
),

130 
°dö_fd
(
STDIN_FILENO
),

131 
°dout_fd
(
STDOUT_FILENO
),

132 
°dîr_fd
(
STDERR_FILENO
),

133 
_pid
(-1),

134 
_°©us
(0),

135 
_≠p_exô_°©e
(
UNINITIALIZED
)

137 i‡(
	g_u£_libtoﬁ
)

139 i‡(
libtoﬁ
(Ë=
NULL
)

141 
FATAL
("libtoolÑequested, but knowÜibtool was found");

147 
size_t
 
	gfound

¨g
.
föd_œ°_of
("/\\");

148 i‡(
	gfound
)

150 
	g_exe˘ubÀ_«me

¨g
.
sub°r
(
found
 +1);

154 
	g_exe˘ubÀ_«me

¨g
;

158 i‡(
_u£_libtoﬁ
 
™d
 
gëív
("PWD"))

160 
	g_exe˘ubÀ_wôh_∑th
+
gëív
("PWD");

161 
	g_exe˘ubÀ_wôh_∑th
+= "/";

163 
	g_exe˘ubÀ_wôh_∑th
+
_exe˘ubÀ
;

166 
	gAµliˇti⁄
::~
Aµliˇti⁄
()

168 
murdî
();

169 
dñëe_¨gv
();

172 
	gAµliˇti⁄
::
îr‹_t
 
Aµliˇti⁄
::
run
(c⁄° *
¨gs
[])

174 
°dö_fd
.
ª£t
();

175 
	g°dout_fd
.
ª£t
();

176 
	g°dîr_fd
.
ª£t
();

177 
	g_°dout_buf„r
.
˛ór
();

178 
	g_°dîr_buf„r
.
˛ór
();

180 
posix_•awn_fûe_a˘i⁄s_t
 
	gfûe_a˘i⁄s
;

181 
posix_•awn_fûe_a˘i⁄s_öô
(&
fûe_a˘i⁄s
);

183 
	g°dö_fd
.
dup_f‹_•awn
(
fûe_a˘i⁄s
);

184 
	g°dout_fd
.
dup_f‹_•awn
(
fûe_a˘i⁄s
);

185 
	g°dîr_fd
.
dup_f‹_•awn
(
fûe_a˘i⁄s
);

187 
posix_•aw«âr_t
 
	g•aw«âr
;

188 
posix_•aw«âr_öô
(&
•aw«âr
);

190 
	gÊags
= 0;

193 
	gÊags
 |
POSIX_SPAWN_SETSIGMASK
;

195 
sig£t_t
 
	gmask
;

196 
sigem±y£t
(&
mask
);

198 
Áèl_as£π
(
posix_•aw«âr_£tsigmask
(&
•aw«âr
, &
mask
) == 0);

200 #i‡
deföed
(
POSIX_SPAWN_USEVFORK
Ë|| deföed(
__löux__
)

202 
	gÊags
 |
POSIX_SPAWN_USEVFORK
;

205 
	gÊags
 |
POSIX_SPAWN_SETPGROUP
;

206 
Áèl_as£π
(
posix_•aw«âr_£çgroup
(&
•aw«âr
, 0) == 0);

208 
Áèl_as£π
(
posix_•aw«âr_£tÊags
(&
•aw«âr
, 
Êags
) == 0);

210 
¸óã_¨gv
(
¨gs
);

212 
	g•awn_ªt
;

213 i‡(
	g_u£_gdb
)

215 
	g°d
::
°rög
 
gdb_run_fûe

¸óã_tmpfûe
(
_exe˘ubÀ_«me
);

216 
	g°d
::
f°ªam
 
fûe_°ªam
;

217 
	gfûe_°ªam
.
›í
(
gdb_run_fûe
.
c_°r
(), 
°d
::
f°ªam
::
out
 | std::f°ªam::
åunc
);

219 
	g_gdb_fûíame

¸óã_tmpfûe
(
_exe˘ubÀ_«me
);

220 
	gfûe_°ªam


221 << "£àloggögÑedúe˘ on" << 
	g°d
::
ídl


222 << "£àloggög fûê" << 
_gdb_fûíame
 << 
°d
::
ídl


223 << "£àloggög ovîwrôê⁄" << 
°d
::
ídl


224 << "£àloggög on" << 
°d
::
ídl


225 << "£àívú⁄míàLIBTEST_IN_GDB=1" << 
°d
::
ídl


226 << "ru¿" << 
¨gumíts
(Ë<< 
°d
::
ídl


227 << "thªadáµlyáŒ bt" << 
°d
::
ídl


228 << "quô" << 
°d
::
ídl
;

230 
Áèl_as£π
(
fûe_°ªam
.
good
());

231 
	gfûe_°ªam
.
˛o£
();

233 i‡(
	g_u£_libtoﬁ
)

236 *
	g¨gv
[]= {

237 
c⁄°_ˇ°
<*>(
libtoﬁ
()),

238 
c⁄°_ˇ°
<*>("--mode=execute"),

239 
c⁄°_ˇ°
<*>("gdb"),

240 
c⁄°_ˇ°
<*>("-batch"),

241 
c⁄°_ˇ°
<*>("-f"),

242 
c⁄°_ˇ°
<*>("-x"),

243 
c⁄°_ˇ°
<*>(
gdb_run_fûe
.
c_°r
()),

244 
c⁄°_ˇ°
<*>(
_exe˘ubÀ_wôh_∑th
.
c_°r
()),

247 
	g•awn_ªt

posix_•aw≈
(&
_pid
, 
libtoﬁ
(), &
fûe_a˘i⁄s
, &
•aw«âr
, 
¨gv
, 
ívú⁄
);

252 *
	g¨gv
[]= {

253 
c⁄°_ˇ°
<*>("gdb"),

254 
c⁄°_ˇ°
<*>("-batch"),

255 
c⁄°_ˇ°
<*>("-f"),

256 
c⁄°_ˇ°
<*>("-x"),

257 
c⁄°_ˇ°
<*>(
gdb_run_fûe
.
c_°r
()),

258 
c⁄°_ˇ°
<*>(
_exe˘ubÀ_wôh_∑th
.
c_°r
()),

260 
	g•awn_ªt

posix_•aw≈
(&
_pid
, "gdb", &
fûe_a˘i⁄s
, &
•aw«âr
, 
¨gv
, 
ívú⁄
);

265 
	g•awn_ªt

posix_•awn
(&
_pid
, 
buût_¨gv
[0], &
fûe_a˘i⁄s
, &
•aw«âr
, &buût_¨gv[0], 
NULL
);

268 
posix_•awn_fûe_a˘i⁄s_de°roy
(&
fûe_a˘i⁄s
);

269 
posix_•aw«âr_de°roy
(&
•aw«âr
);

271 
	g°dö_fd
.
˛o£
(
Aµliˇti⁄
::
Pùe
::
READ
);

272 
	g°dout_fd
.
˛o£
(
Aµliˇti⁄
::
Pùe
::
WRITE
);

273 
	g°dîr_fd
.
˛o£
(
Aµliˇti⁄
::
Pùe
::
WRITE
);

275 i‡(
	g•awn_ªt
 != 0)

277 i‡(
_wûl_Áû
 =
Ál£
)

279 
Eº‹
 << 
°ªº‹
(
•awn_ªt
) << "(" << spawn_ret << ")";

281 
	g_pid
= -1;

282  
	gAµliˇti⁄
::
INVALID_POSIX_SPAWN
;

285 
as£π
(
_pid
 != -1);

286 i‡(
	g_pid
 == -1)

288  
Aµliˇti⁄
::
INVALID_POSIX_SPAWN
;

292 
≠p_thªad_°
* 
	g_≠p_thªad

√w
áµ_thªad_°(
_pid
, 
_°©us
, 
buût_¨gv
[0], 
_≠p_exô_°©e
);

293 
	gîr‹
;

294 i‡((
	gîr‹

±hªad_¸óã
(&
_thªad
, 
NULL
, &
≠p_thªad
, 
_≠p_thªad
)) != 0)

296 
Eº‹
 << "±hªad_¸óã(Ëdõd durögÖthªad_¸óã(" << 
°ªº‹
(
îr‹
) << ")";

297  
	gAµliˇti⁄
::
FAILURE
;

301  
	gAµliˇti⁄
::
SUCCESS
;

304 
boﬁ
 
	gAµliˇti⁄
::
check
() const

306 i‡(
_pid
 > 1 
™d
 
kûl
(_pid, 0) == 0)

308  
åue
;

311  
	gÁl£
;

314 
	gAµliˇti⁄
::
murdî
()

316 i‡(
check
())

318 
cou¡
= 5;

319 (
	gcou¡
--Ë> 0 
™d
 
check
())

321 i‡(
kûl
(
_pid
, 
SIGTERM
) == 0)

323 
joö
();

327 
	gEº‹
 << "kûl’id, SIGTERMËÁûedá·î kû»wôhÉº‹ o‡" << 
°ªº‹
(
î∫o
);

335 i‡(
check
())

337 
	gEº‹
 << "using SIGKILL,Åhings willÜikely goÖoorly fromÅhisÖoint";

338 ()
kûl
(
_pid
, 
SIGKILL
);

341 
¶uΩ
();

345 
boﬁ
 
	gAµliˇti⁄
::
¶uΩ
()

347 
pﬁlfd
 
fds
[2];

348 
	gfds
[0].
	gfd

°dout_fd
.
fd
();

349 
	gfds
[0].
	gevíts

POLLRDNORM
;

350 
	gfds
[0].
	gªvíts
= 0;

351 
	gfds
[1].
	gfd

°dîr_fd
.
fd
();

352 
	gfds
[1].
	gevíts

POLLRDNORM
;

353 
	gfds
[1].
	gªvíts
= 0;

355 
	ga˘ive_fd
;

356 i‡((
	ga˘ive_fd

pﬁl
(
fds
, 2, 0)) == -1)

358 
îr‹
;

359 (
	gîr‹

î∫o
))

361 #ifde‡
TARGET_OS_LINUX


362 
ERESTART
:

364 
EINTR
:

367 
	gEFAULT
:

368 
ENOMEM
:

369 
FATAL
(
°ªº‹
(
îr‹
));

372 
	gEINVAL
:

373 
FATAL
("RLIMIT_NOFILEÉxceeded, or if OSXÅheÅimeout value was invalid");

377 
FATAL
(
°ªº‹
(
îr‹
));

381  
	gÁl£
;

384 i‡(
	ga˘ive_fd
 == 0)

386  
Ál£
;

389 
boﬁ
 
	gd©a_was_ªad

Ál£
;

390 i‡(
	gfds
[0].
	gªvíts
 & 
	gPOLLRDNORM
)

392 i‡(
	g°dout_fd
.
ªad
(
_°dout_buf„r
Ë=
åue
)

394 
d©a_was_ªad

åue
;

398 i‡(
	gfds
[1].
	gªvíts
 & 
	gPOLLRDNORM
)

400 i‡(
	g°dîr_fd
.
ªad
(
_°dîr_buf„r
Ë=
åue
)

402 
d©a_was_ªad

åue
;

406  
	gd©a_was_ªad
;

409 
	gAµliˇti⁄
::
îr‹_t
 
Aµliˇti⁄
::
joö
()

411 
pid_t
 
waôed_pid

waôpid
(
_pid
, &
_°©us
, 0);

412 
¶uΩ
();

413 i‡(
	gwaôed_pid
 =
_pid
 
™d
 
WIFEXITED
(
_°©us
Ë=
Ál£
)

422 i‡(
WEXITSTATUS
(
_°©us
) == 127)

424 
_≠p_exô_°©e

Aµliˇti⁄
::
INVALID_POSIX_SPAWN
;

425 
	g°d
::
°rög
 
îr‹_°rög
("posix_spawn() failedÖid:");

426 
	gîr‹_°rög
+
_pid
;

427 
	gîr‹_°rög
+= "Çame:";

428 
	gîr‹_°rög
+
¥öt_¨gv
(
buût_¨gv
);

429 i‡(
°dîr_ªsu…_Àngth
())

431 
	gîr‹_°rög
+= " stderr: ";

432 
	gîr‹_°rög
+
°dîr_c_°r
();

434 
throw
 
	g°d
::
logic_îr‹
(
îr‹_°rög
);

436 i‡(
WIFSIGNALED
(
_°©us
))

438 i‡(
WTERMSIG
(
_°©us
Ë!
SIGTERM
 
™d
 WTERMSIG(_°©usË!
SIGHUP
)

440 
_≠p_exô_°©e

Aµliˇti⁄
::
INVALID_POSIX_SPAWN
;

441 
	g°d
::
°rög
 
îr‹_°rög
(
¥öt_¨gv
(
buût_¨gv
));

442 
	gîr‹_°rög
+= " was killed by signal ";

443 
	gîr‹_°rög
+
°rsig«l
(
WTERMSIG
(
_°©us
));

444 i‡(
°dout_ªsu…_Àngth
())

446 
	gîr‹_°rög
+= " stdout: ";

447 
	gîr‹_°rög
+
°dout_c_°r
();

449 i‡(
°dîr_ªsu…_Àngth
())

451 
	gîr‹_°rög
+= " stderr: ";

452 
	gîr‹_°rög
+
°dîr_c_°r
();

455 
throw
 
	g°d
::
ru¡ime_îr‹
(
îr‹_°rög
);

459 #i‡
deföed
(
DEBUG
)

460 i‡(
	gDEBUG
)

462 
	gOut
 << "waitpid()ápplicationÅerminatedátÑequest"

463 << "Öid:" << 
	g_pid


464 << "Çame:" << 
	gbuût_¨gv
[0];

470 
	g_≠p_exô_°©e

Aµliˇti⁄
::
UNKNOWN
;

471 
	gEº‹
 << "Unknow¿logi¯°©ê©Éxô:" << 
WEXITSTATUS
(
_°©us
)

472 << "Öid:" << 
	g_pid


473 << "Çame:" << 
	gbuût_¨gv
[0];

476 i‡(
	gwaôed_pid
 =
_pid
 
™d
 
WIFEXITED
(
_°©us
))

478 
_≠p_exô_°©e

öt_to_îr‹_t
(
WEXITSTATUS
(
_°©us
));

480 i‡(
	gwaôed_pid
 == -1)

482 
_≠p_exô_°©e

Aµliˇti⁄
::
UNKNOWN
;

483 
	gEº‹
 << "waôpid(Ëªtu∫edÉºno:" << 
°ªº‹
(
î∫o
);

487 
	g_≠p_exô_°©e

Aµliˇti⁄
::
UNKNOWN
;

488 
throw
 
	g°d
::
logic_îr‹
("waitpid()Ñeturnedán unknown value");

491  
	g_≠p_exô_°©e
;

494 
	gAµliˇti⁄
::
add_l⁄g_›ti⁄
(c⁄° 
°d
::
°rög
& 
«me
, c⁄° std::°rög& 
›ti⁄_vÆue
)

496 
°d
::
°rög
 
¨g
(
«me
);

497 
	g¨g
+
›ti⁄_vÆue
;

498 
	g_›ti⁄s
.
push_back
(
°d
::
make_∑ú
(
¨g
, std::
°rög
()));

501 
	gAµliˇti⁄
::
add_›ti⁄
(c⁄° 
°d
::
°rög
& 
¨g
)

503 
_›ti⁄s
.
push_back
(
°d
::
make_∑ú
(
¨g
, std::
°rög
()));

506 
	gAµliˇti⁄
::
add_›ti⁄
(c⁄° 
°d
::
°rög
& 
«me
, c⁄° std::°rög& 
vÆue
)

508 
_›ti⁄s
.
push_back
(
°d
::
make_∑ú
(
«me
, 
vÆue
));

511 
	gAµliˇti⁄
::
Pùe
::Pùe(
¨g
) :

512 
_°d_fd
(
¨g
)

514 
_pùe_fd
[
READ
]= -1;

515 
	g_pùe_fd
[
WRITE
]= -1;

516 
	g_›í
[
READ
]
Ál£
;

517 
	g_›í
[
WRITE
]
Ál£
;

520 
	gAµliˇti⁄
::
Pùe
::Pùe::
fd
()

522 i‡(
_°d_fd
 =
STDOUT_FILENO
)

524  
_pùe_fd
[
READ
];

526 i‡(
	g_°d_fd
 =
STDERR_FILENO
)

528  
_pùe_fd
[
READ
];

531  
	g_pùe_fd
[
WRITE
];

535 
boﬁ
 
	gAµliˇti⁄
::
Pùe
::
ªad
(
libã°
::
vch¨_t
& 
¨g
)

537 
Áèl_as£π
(
_°d_fd
 =
STDOUT_FILENO
 
‹
 _°d_fd =
STDERR_FILENO
);

539 
boﬁ
 
	gd©a_was_ªad

Ál£
;

541 
	glibã°
::
vch¨_t
 
buf„r
;

542 
	gbuf„r
.
ªsize
(1024);

543 
ssize_t
 
	gªad_Àngth
;

544 (
	gªad_Àngth
::
ªad
(
_pùe_fd
[
READ
], &
buf„r
[0], buf„r.
size
())))

546 i‡(
	gªad_Àngth
 == -1)

548 
î∫o
)

550 
EAGAIN
:

554 
Eº‹
 << 
°ªº‹
(
î∫o
);

561 
	gd©a_was_ªad

åue
;

562 
	g¨g
.
ª£rve
(
ªad_Àngth
 +1);

563 
size_t
 
	gx
0; x < size_t(
ªad_Àngth
); ++x)

565 
	g¨g
.
push_back
(
buf„r
[
x
]);

570  
	gd©a_was_ªad
;

573 
	gAµliˇti⁄
::
Pùe
::
n⁄block
()

575 
Êags
;

577 
	gÊags

f˙é
(
_pùe_fd
[
READ
], 
F_GETFL
, 0);

578 } 
	gÊags
 =-1 
™d
 (
î∫o
 =
EINTR
 
‹
Éºnÿ=
EAGAIN
));

580 i‡(
	gÊags
 == -1)

582 
Eº‹
 << "f˙é(F_GETFLË" << 
°ªº‹
(
î∫o
);

583 
throw
 
°ªº‹
(
î∫o
);

586 
	grvÆ
;

589 
	grvÆ

f˙é
(
_pùe_fd
[
READ
], 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

590 } 
	grvÆ
 =-1 
™d
 (
î∫o
 =
EINTR
 
‹
Éºnÿ=
EAGAIN
));

592 i‡(
	grvÆ
 == -1)

594 
Eº‹
 << "f˙é(F_SETFLË" << 
°ªº‹
(
î∫o
);

595 
throw
 
°ªº‹
(
î∫o
);

599 
	gAµliˇti⁄
::
Pùe
::
ª£t
()

601 
˛o£
(
READ
);

602 
˛o£
(
WRITE
);

604 #i‡
deföed
(
HAVE_PIPE2
) && HAVE_PIPE2

605 i‡(
pùe2
(
_pùe_fd
, 
O_NONBLOCK
|
O_CLOEXEC
) == -1)

607 i‡(
pùe
(
_pùe_fd
) == -1)

610 
FATAL
(
°ªº‹
(
î∫o
));

612 
	g_›í
[0]
åue
;

613 
	g_›í
[1]
åue
;

615 #i‡
deföed
(
HAVE_PIPE2
) && HAVE_PIPE2

617 
n⁄block
();

618 
˛€xec
();

623 
	gAµliˇti⁄
::
Pùe
::
˛€xec
()

627 i‡(
FD_CLOEXEC
)

629 
Êags
;

632 
	gÊags

f˙é
(
_pùe_fd
[
WRITE
], 
F_GETFD
, 0);

633 } 
	gÊags
 =-1 
™d
 (
î∫o
 =
EINTR
 
‹
Éºnÿ=
EAGAIN
));

635 i‡(
	gÊags
 == -1)

637 
Eº‹
 << "f˙é(F_GETFDË" << 
°ªº‹
(
î∫o
);

638 
throw
 
°ªº‹
(
î∫o
);

641 
	grvÆ
;

644 
	grvÆ

f˙é
(
_pùe_fd
[
WRITE
], 
F_SETFD
, 
Êags
 | 
FD_CLOEXEC
);

645 } 
	grvÆ
 =-1 && (
î∫o
 =
EINTR
 
‹
Éºnÿ=
EAGAIN
));

647 i‡(
	grvÆ
 == -1)

649 
Eº‹
 << "f˙é(F_SETFDË" << 
°ªº‹
(
î∫o
);

650 
throw
 
°ªº‹
(
î∫o
);

656 
	gAµliˇti⁄
::
Pùe
::~Pipe()

658 i‡(
_pùe_fd
[0] != -1)

660 ::
˛o£
(
_pùe_fd
[0]);

663 i‡(
	g_pùe_fd
[1] != -1)

665 ::
˛o£
(
_pùe_fd
[1]);

669 
	gAµliˇti⁄
::
Pùe
::
dup_f‹_•awn
(
posix_•awn_fûe_a˘i⁄s_t
& 
fûe_a˘i⁄s
)

671 
ty≥

STDIN_FILENO
 =
_°d_fd
 ? 0 : 1;

673 
	gªt
;

674 i‡((
	gªt

posix_•awn_fûe_a˘i⁄s_adddup2
(&
fûe_a˘i⁄s
, 
_pùe_fd
[
ty≥
], 
_°d_fd
 )) < 0)

676 
FATAL
("posix_•awn_fûe_a˘i⁄s_adddup2(%s)", 
°ªº‹
(
ªt
));

679 i‡((
	gªt

posix_•awn_fûe_a˘i⁄s_add˛o£
(&
fûe_a˘i⁄s
, 
_pùe_fd
[
ty≥
])) < 0)

681 
FATAL
("posix_•awn_fûe_a˘i⁄s_add˛o£(%s)", 
°ªº‹
(
ªt
));

685 
	gAµliˇti⁄
::
Pùe
::
˛o£
(c⁄° 
˛o£_t
& 
¨g
)

687 
ty≥
(
¨g
);

689 i‡(
	g_›í
[
ty≥
])

691 i‡(::
˛o£
(
_pùe_fd
[
ty≥
]) == -1)

693 
Eº‹
 << "˛o£(" << 
°ªº‹
(
î∫o
) << ")";

695 
	g_›í
[
ty≥
]
Ál£
;

696 
	g_pùe_fd
[
ty≥
]= -1;

700 
	gAµliˇti⁄
::
¸óã_¨gv
(c⁄° *
¨gs
[])

702 
dñëe_¨gv
();

703 i‡(
	g_u£_libtoﬁ
)

705 
as£π
(
libtoﬁ
());

706 
	gvch¨
::
≠≥nd
(
buût_¨gv
, 
libtoﬁ
());

707 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "--mode=execute");

710 i‡(
	g_u£_vÆgröd
)

715 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "valgrind");

716 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "--error-exitcode=1");

717 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "--leak-check=yes");

719 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "--show-reachable=yes"));

721 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "--track-fds=yes");

723 
	gbuût_¨gv
[
x
++]
°rdup
("--track-origin=yes");

725 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "--malloc-fill=A5");

726 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "--free-fill=DE");

728 
	g°d
::
°rög
 
log_fûe

¸óã_tmpfûe
("valgrind");

729 
	glibã°
::
vch¨_t
 
buf„r
;

730 
	gbuf„r
.
ªsize
(1024);

731 
	gÀngth

¢¥ötf
(&
buf„r
[0], buf„r.
size
(), "--log-fûe=%s", 
log_fûe
.
c_°r
());

732 
Áèl_as£π
(
Àngth
 > 0 
™d
 
size_t
÷ígthË< 
buf„r
.
size
());

733 
	gvch¨
::
≠≥nd
(
buût_¨gv
, &
buf„r
[0]);

735 i‡(
	g_u£_±rcheck
)

740 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "valgrind");

741 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "--error-exitcode=1");

742 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "--tool=exp-ptrcheck");

743 
	g°d
::
°rög
 
log_fûe

¸óã_tmpfûe
("ptrcheck");

744 
	glibã°
::
vch¨_t
 
buf„r
;

745 
	gbuf„r
.
ªsize
(1024);

746 
	gÀngth

¢¥ötf
(&
buf„r
[0], buf„r.
size
(), "--log-fûe=%s", 
log_fûe
.
c_°r
());

747 
Áèl_as£π
(
Àngth
 > 0 
™d
 
size_t
÷ígthË< 
buf„r
.
size
());

748 
	gvch¨
::
≠≥nd
(
buût_¨gv
, &
buf„r
[0]);

750 i‡(
	g_u£_gdb
)

752 
	gvch¨
::
≠≥nd
(
buût_¨gv
, "gdb");

755 
	gvch¨
::
≠≥nd
(
buût_¨gv
, 
_exe˘ubÀ_wôh_∑th
.
c_°r
());

757 
	gO±i⁄s
::
c⁄°_ôî©‹
 
ôî

_›ti⁄s
.
begö
(); 
	gôî
 !_›ti⁄s.
íd
(); ++iter)

759 
	gvch¨
::
≠≥nd
(
buût_¨gv
, (*
ôî
).
fú°
.
c_°r
());

760 i‡((*
	gôî
).
	g£c⁄d
.
em±y
(Ë=
Ál£
)

762 
vch¨
::
≠≥nd
(
buût_¨gv
, (*
ôî
).
£c⁄d
.
c_°r
());

766 i‡(
	g¨gs
)

768 c⁄° **
	g±r

¨gs
; *ptr; ++ptr)

770 
	gvch¨
::
≠≥nd
(
buût_¨gv
, *
±r
);

773 
	gbuût_¨gv
.
push_back
(
NULL
);

776 
	g°d
::
°rög
 
Aµliˇti⁄
::
¥öt
()

778  
¥öt_¨gv
(
buût_¨gv
);

781 
	g°d
::
°rög
 
Aµliˇti⁄
::
¨gumíts
()

783 
°d
::
°rög°ªam
 
¨g_buf„r
;

786 
size_t
 
	gx

_u£_libtoﬁ
 ? 2 : 0; x < 
	g_¨gc
; ++x)

788 i‡(
	gbuût_¨gv
[
x
])

790 
	g¨g_buf„r
 << 
	gbuût_¨gv
[
x
] << " ";

794  
	g¨g_buf„r
.
°r
();

797 
	gAµliˇti⁄
::
dñëe_¨gv
()

799 
°d
::
f‹_óch
(
buût_¨gv
.
begö
(), buût_¨gv.
íd
(), 
FªeFromVe˘‹
());

801 
	gbuût_¨gv
.
˛ór
();

802 
	g_¨gc
= 0;

806 
exec_cmdlöe
(c⁄° 
°d
::
°rög
& 
comm™d
, c⁄° *
¨gs
[], 
boﬁ
 
u£_libtoﬁ
)

808 
Aµliˇti⁄
 
≠p
(
comm™d
, 
u£_libtoﬁ
);

810 
	gAµliˇti⁄
::
îr‹_t
 
ªt

≠p
.
run
(
¨gs
);

812 i‡(
	gªt
 !
Aµliˇti⁄
::
SUCCESS
)

814  (
ªt
);

817  (
	g≠p
.
joö
());

820 c⁄° *
górm™d_bö¨y
()

822  
	gGEARMAND_BINARY
;

825 c⁄° *
drizzÀd_bö¨y
()

827  
	gDRIZZLED_BINARY
;

	@libtest/cmdline.h

37 #¥agm®
⁄˚


39 
	~<•awn.h
>

42 #i‚de‡
EXIT_SKIP


43 
	#EXIT_SKIP
 77

	)

46 #i‚de‡
EXIT_FATAL


47 
	#EXIT_FATAL
 99

	)

50 #i‚de‡
EX_NOEXEC


51 
	#EX_NOEXEC
 126

	)

54 #i‚de‡
EX_NOTFOUND


55 
	#EX_NOTFOUND
 127

	)

58 
«me•a˚
 
	glibã°
 {

60 ˛as†
	cAµliˇti⁄
 {

61 
	g¥iv©e
:

62 
°d
::
	tve˘‹
< 
	t°d
::
	t∑ú
<°d::
	t°rög
, std::°rög> > 
	tO±i⁄s
;

64 
	gpublic
:

66 
	eîr‹_t
 {

67 
SUCCESS

EXIT_SUCCESS
,

68 
	gFAILURE

EXIT_FAILURE
,

69 
	gUNINITIALIZED
,

70 
	gSIGTERM_KILLED
,

71 
	gUNKNOWN
,

72 
	gUNKNOWN_SIGNAL
,

73 
	gINVALID_POSIX_SPAWN
= 127

76 c⁄° * 
toSåög
(
îr‹_t
 
¨g
)

78 
	g¨g
)

80 
	gAµliˇti⁄
::
SUCCESS
:

83 
	gAµliˇti⁄
::
UNINITIALIZED
:

86 
	gAµliˇti⁄
::
SIGTERM_KILLED
:

89 
	gAµliˇti⁄
::
FAILURE
:

92 
	gAµliˇti⁄
::
UNKNOWN_SIGNAL
:

95 
	gAµliˇti⁄
::
INVALID_POSIX_SPAWN
:

98 
	gAµliˇti⁄
::
UNKNOWN
:

106 ˛as†
	cPùe
 {

107 
	gpublic
:

108 
Pùe
();

109 ~
Pùe
();

111 
fd
();

113 
	e˛o£_t
 {

114 
	gREAD
= 0,

115 
	gWRITE
= 1

118 
ª£t
();

119 
˛o£
(c⁄° 
˛o£_t
& 
¨g
);

120 
dup_f‹_•awn
(
posix_•awn_fûe_a˘i⁄s_t
& 
fûe_a˘i⁄s
);

122 
n⁄block
();

123 
˛€xec
();

124 
boﬁ
 
ªad
(
libã°
::
vch¨_t
&);

126 
	g¥iv©e
:

127 c⁄° 
_°d_fd
;

128 
	g_pùe_fd
[2];

129 
boﬁ
 
	g_›í
[2];

132 
	gpublic
:

133 
Aµliˇti⁄
(c⁄° 
°d
::
°rög
& 
¨g
, c⁄° 
boﬁ
 
_u£_libtoﬁ_¨g

Ál£
);

135 
	gvútuÆ
 ~
Aµliˇti⁄
();

137 
add_›ti⁄
(c⁄° 
°d
::
°rög
&);

138 
add_›ti⁄
(c⁄° 
°d
::
°rög
&, const std::string&);

139 
add_l⁄g_›ti⁄
(c⁄° 
°d
::
°rög
& 
›ti⁄_«me
, c⁄° std::°rög& 
›ti⁄_vÆue
);

140 
îr‹_t
 
run
(c⁄° *
¨gs
[]
NULL
);

141 
	gAµliˇti⁄
::
îr‹_t
 
joö
();

143 
	glibã°
::
vch¨_t
 
°dout_ªsu…
() const

145  
_°dout_buf„r
;

148 
size_t
 
°dout_ªsu…_Àngth
() const

150  
	g_°dout_buf„r
.
size
();

153 c⁄° * 
°dout_c_°r
() const

155  &
	g_°dout_buf„r
[0];

158 
	glibã°
::
vch¨_t
 
°dîr_ªsu…
() const

160  
_°dîr_buf„r
;

163 c⁄° * 
°dîr_c_°r
() const

165  &
	g_°dîr_buf„r
[0];

168 
size_t
 
°dîr_ªsu…_Àngth
() const

170  
	g_°dîr_buf„r
.
size
();

173 
	g°d
::
°rög
 
¥öt
();

175 
u£_vÆgröd
(
boﬁ
 
¨g
)

177 
	g_u£_vÆgröd

¨g
;

180 
boﬁ
 
check
() const;

182 
boﬁ
 
¶uΩ
();

183 
murdî
();

185 
u£_gdb
(
boﬁ
 
¨g
)

187 
	g_u£_gdb

¨g
;

190 
u£_±rcheck
(
boﬁ
 
¨g
)

192 
	g_u£_±rcheck

¨g
;

195 
	g°d
::
°rög
 
¨gumíts
();

197 
	g°d
::
°rög
 
gdb_fûíame
()

199  
_gdb_fûíame
;

202 
pid_t
 
pid
() const

204  
	g_pid
;

207 
wûl_Áû
()

209 
	g_wûl_Áû

åue
;

212 
	g¥iv©e
:

213 
¸óã_¨gv
(c⁄° *
¨gs
[]);

214 
dñëe_¨gv
();

215 
add_to_buûd_¨gv
(const *);

217 
	g¥iv©e
:

218 c⁄° 
boﬁ
 
_u£_libtoﬁ
;

219 
boﬁ
 
	g_u£_vÆgröd
;

220 
boﬁ
 
	g_u£_gdb
;

221 
boﬁ
 
	g_u£_±rcheck
;

222 
boﬁ
 
	g_wûl_Áû
;

223 
size_t
 
	g_¨gc
;

224 
	g°d
::
°rög
 
_exe˘ubÀ_«me
;

225 
	g°d
::
°rög
 
_exe˘ubÀ
;

226 
	g°d
::
°rög
 
_exe˘ubÀ_wôh_∑th
;

227 
	g°d
::
°rög
 
_gdb_fûíame
;

228 
O±i⁄s
 
	g_›ti⁄s
;

229 
Pùe
 
	g°dö_fd
;

230 
Pùe
 
	g°dout_fd
;

231 
Pùe
 
	g°dîr_fd
;

232 
	glibã°
::
vch¨_±r_t
 
buût_¨gv
;

233 
pid_t
 
	g_pid
;

234 
	glibã°
::
vch¨_t
 
_°dout_buf„r
;

235 
	glibã°
::
vch¨_t
 
_°dîr_buf„r
;

236 
	g_°©us
;

237 
±hªad_t
 
	g_thªad
;

238 
îr‹_t
 
	g_≠p_exô_°©e
;

241 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	gAµliˇti⁄
::
îr‹_t
 &
¨g
)

243  
ouçut
 << 
Aµliˇti⁄
::
toSåög
(
¨g
);

246 
exec_cmdlöe
(c⁄° 
°d
::
°rög
& 
execuèbÀ
, c⁄° *
¨gs
[], 
boﬁ
 
u£_libtoﬁ

Ál£
);

248 c⁄° *
górm™d_bö¨y
();

249 c⁄° *
drizzÀd_bö¨y
();

	@libtest/collection.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/comm⁄.h
>

42 
ã°_ªtu∫_t
 
ru¬î_code
(
libã°
::
Fømew‹k
* 
‰ame
,

43 
ã°_°
* 
run
,

44 
libã°
::
Timî
& 
_timî
)

47 
as£π
(
‰ame
->
ru¬î
());

48 
as£π
(
run
->
ã°_‚
);

50 
ã°_ªtu∫_t
 
	gªtu∫_code
;

51 
	gåy


53 
	g_timî
.
ª£t
();

54 
	gªtu∫_code

‰ame
->
ru¬î
()->
maö
(
run
->
ã°_‚
, føme->
¸ót‹s_±r
());

58 
ˇtch
 (c⁄° 
libã°
::
Áèl
& 
e
)

60 i‡(
libã°
::
Áèl
::
is_dißbÀd
())

62 
libã°
::
Áèl
::
ö¸emít_dißbÀd_cou¡î
();

63 
	gªtu∫_code

TEST_SUCCESS
;

67 
	gthrow
;

71 
	g_timî
.
ßm∂e
();

73  
	gªtu∫_code
;

76 
«me•a˚
 
	glibã°
 {

78 
	gCﬁÀ˘i⁄
::
CﬁÀ˘i⁄
(
Fømew‹k
* 
‰ame_¨g
,

79 
cﬁÀ˘i⁄_°
* 
¨g
) :

80 
_«me
(
¨g
->
«me
),

81 
_¥e
(
¨g
->
¥e
),

82 
_po°
(
¨g
->
po°
),

83 
_ã°s
(
¨g
->
ã°s
),

84 
_‰ame
(
‰ame_¨g
),

85 
_suc˚ss
(0),

86 
_skù≥d
(0),

87 
_Áûed
(0),

88 
_tŸÆ
(0),

89 
_f‹m©ãr
(
‰ame_¨g
->
«me
(), 
_«me
)

91 
Áèl_as£π
(
¨g
);

94 
ã°_ªtu∫_t
 
	gCﬁÀ˘i⁄
::
exec
()

96 i‡(
ã°_suc˚ss
(
_‰ame
->
ru¬î
()->
£tup
(
_¥e
, _‰ame->
¸ót‹s_±r
())))

98 
ã°_°
 *
	grun

_ã°s
;Ñun->
	g«me
;Ñun++)

100 
f‹m©ãr
()->
push_ã°ˇ£
(
run
->
«me
);

101 i‡(
	g_‰ame
->
m©ch
(
run
->
«me
))

103 
f‹m©ãr
()->
skù≥d
();

106 
	g_tŸÆ
++;

108 
ã°_ªtu∫_t
 
	gªtu∫_code
;

109 
	gåy


111 i‡(
	grun
->
	gªquúes_Êush
)

113 i‡(
ã°_Áûed
(
_‰ame
->
ru¬î
()->
Êush
(_‰ame->
¸ót‹s_±r
())))

115 
	gEº‹
 << "frame->runner()->flush(creators_ptr)";

116 
	g_skù≥d
++;

117 
f‹m©ãr
()->
skù≥d
();

122 
£t_Æ¨m
();

124 
	gåy


126 
	gªtu∫_code

ru¬î_code
(
_‰ame
, 
run
, 
_timî
);

128 
ˇtch
 (...)

130 
ˇn˚l_Æ¨m
();

132 
	gthrow
;

134 
	glibã°
::
ˇn˚l_Æ¨m
();

136 
ˇtch
 (c⁄° 
libã°
::
Áèl
& 
e
)

138 
°ªam
::
˚º
(
e
.
fûe
(),É.
löe
(),É.
func
()Ë<< 
	ge
.
wh©
();

139 
	g_Áûed
++;

140 
f‹m©ãr
()->
Áûed
();

141 
	gthrow
;

144 
	gªtu∫_code
)

146 
	gTEST_SUCCESS
:

147 
_suc˚ss
++;

148 
f‹m©ãr
()->
suc˚ss
(
_timî
);

151 
	gTEST_FAILURE
:

152 
_Áûed
++;

153 
f‹m©ãr
()->
Áûed
();

156 
	gTEST_SKIPPED
:

157 
_skù≥d
++;

158 
f‹m©ãr
()->
skù≥d
();

162 
FATAL
("invalidÑeturn code");

165 @
TODO
 
add
 
code
 
hîe
 
to
 
Ælow
 
a
 
cﬁÀ˘i⁄
Åÿ
deföe
á 
mëhod
Åÿ
ª£t
ÅÿÆlow 
ã°s
Åo .

169 (Ë
	g_‰ame
->
ru¬î
()->
ã¨down
(
_po°
, 
_‰ame
->
¸ót‹s_±r
());

172 i‡(
	g_Áûed
 =0 
™d
 
_skù≥d
 =0ánd 
_suc˚ss
)

174  
TEST_SUCCESS
;

177 i‡(
	g_Áûed
)

179  
	gTEST_FAILURE
;

182 
Áèl_as£π
(
_skù≥d
 
‹
 
_suc˚ss
 == 0);

184  
	gTEST_SKIPPED
;

	@libtest/collection.h

37 #¥agm®
⁄˚


39 
	~<libã°/f‹m©ãr.hµ
>

41 
	~<libã°/timî.hµ
>

43 
	g«me•a˚
 { 
˛ass
 
	gFømew‹k
; }

49 
	scﬁÀ˘i⁄_°
 {

50 c⁄° *
	m«me
;

51 
ã°_ˇŒback_‚
 *
	m¥e
;

52 
ã°_ˇŒback_‚
 *
	mpo°
;

53 
ã°_°
 *
	mã°s
;

56 
«me•a˚
 
	glibã°
 {

58 ˛as†
	cCﬁÀ˘i⁄
 {

59 
	gpublic
:

60 
CﬁÀ˘i⁄
(
libã°
::
Fømew‹k
*, 
cﬁÀ˘i⁄_°
*);

62 
ã°_ªtu∫_t
 
exec
();

64 c⁄° * 
«me
()

66  
	g_«me
.
c_°r
();

69 
uöt32_t
 
suc˚ss
()

71  
	g_suc˚ss
;

74 
uöt32_t
 
skù≥d
()

76  
	g_skù≥d
;

79 
uöt32_t
 
Áûed
()

81  
	g_Áûed
;

84 
uöt32_t
 
tŸÆ
()

86  
	g_tŸÆ
;

89 
	glibã°
::
F‹m©ãr
* 
f‹m©ãr
()

91  &
_f‹m©ãr
;

94 
	g¥iv©e
:

95 
°d
::
°rög
 
_«me
;

96 
ã°_ˇŒback_‚
 *
	g_¥e
;

97 
ã°_ˇŒback_‚
 *
	g_po°
;

98 
ã°_°
 *
	g_ã°s
;

99 
	glibã°
::
Fømew‹k
* 
_‰ame
;

100 
uöt32_t
 
	g_suc˚ss
;

101 
uöt32_t
 
	g_skù≥d
;

102 
uöt32_t
 
	g_Áûed
;

103 
uöt32_t
 
	g_tŸÆ
;

104 
	glibã°
::
Timî
 
_timî
;

105 
	glibã°
::
F‹m©ãr
 
_f‹m©ãr
;

107 
	g¥iv©e
:

108 
CﬁÀ˘i⁄
( const Collection& );

109 c⁄° 
	gCﬁÀ˘i⁄
& 
	g›î©‹
=–c⁄° 
CﬁÀ˘i⁄
& );

	@libtest/common.h

40 #¥agm®
⁄˚


42 
	~<ˇs£π
>

43 
	~<˚ºno
>

44 
	~<c°dlib
>

45 
	~<s°ªam
>

46 
	~<°rög
>

48 #ifde‡
HAVE_SYS_TYPES_H


49 
	~<sys/ty≥s.h
>

52 #ifde‡
HAVE_SYS_TIME_H


53 
	~<sys/time.h
>

56 #ifde‡
HAVE_SYS_WAIT_H


57 
	~<sys/waô.h
>

60 #ifde‡
HAVE_SYS_RESOURCE_H


61 
	~<sys/ªsour˚.h
>

64 #ifde‡
HAVE_FNMATCH_H


65 
	~<‚m©ch.h
>

68 #ifde‡
HAVE_ARPA_INET_H


69 
	~<¨∑/öë.h
>

72 #i‡
deföed
(
_WIN32
)

73 
	~"wö32/wøµîs.h
"

74 
	#gë_sockë_î∫o
(Ë
	`WSAGëLa°Eº‹
()

	)

76 #ifde‡
HAVE_UNISTD_H


77 
	~<uni°d.h
>

79 
	#INVALID_SOCKET
 -1

	)

80 
	#SOCKET_ERROR
 -1

	)

81 
	#˛o£sockë
(
a
Ë
	`˛o£
◊)

	)

82 
	#gë_sockë_î∫o
(Ë
î∫o


	)

85 
	~<libã°/ã°.hµ
>

87 
	~<libã°/is_pid.hµ
>

89 
	~<libã°/górm™d.h
>

90 
	~<libã°/blob¶≠_w‹kî.h
>

91 
	~<libã°/memˇched.h
>

92 
	~<libã°/drizzÀd.h
>

94 
	~<libã°/libtoﬁ.hµ
>

95 
	~<libã°/kûÕid.h
>

96 
	~<libã°/sig«l.h
>

97 
	~<libã°/dns.hµ
>

98 
	~<libã°/f‹m©ãr.hµ
>

100 
	sFªeFromVe˘‹


102 
	mãm∂©e
 <
˛ass
 
	mT
>

103 
›î©‹
(Ë–
T
* 
	m±r
) const

105 i‡(
	m±r
)

107 
‰ì
(
±r
);

108 
	m±r

NULL
;

113 
	sDñëeFromVe˘‹


115 
	mãm∂©e
 <
˛ass
 
	mT
>

116 
›î©‹
(Ë–
T
* 
	m±r
) const

118 
dñëe
 
	m±r
;

119 
	m±r

NULL
;

	@libtest/comparison.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
«me•a˚
 
	glibã°
 {

42 
boﬁ
 
jíkös_is_ˇŒî
()

44 i‡(
boﬁ
(
gëív
("JENKINS_HOME")))

46  
	gåue
;

49  
	gÁl£
;

52 
boﬁ
 
gdb_is_ˇŒî
()

54 i‡(
boﬁ
(
gëív
("TESTS_ENVIRONMENT")Ë
™d
 
°r°r
(getenv("TESTS_ENVIRONMENT"), "gdb"))

56  
	gåue
;

59 i‡(
boﬁ
(
gëív
("LIBTEST_IN_GDB")))

61  
	gåue
;

64  
	gÁl£
;

67 
boﬁ
 
hñgröd_is_ˇŒî
()

69 i‡(
boﬁ
(
gëív
("TESTS_ENVIRONMENT")Ë
™d
 
°r°r
(getenv("TESTS_ENVIRONMENT"), "helgrind"))

71  
	gåue
;

74  
	gÁl£
;

77 
boﬁ
 
_ö_vÆgröd
(const *, , const *)

79 i‡(
vÆgröd_is_ˇŒî
())

81  
	gåue
;

84  
	gÁl£
;

	@libtest/comparison.hpp

37 #¥agm®
⁄˚


39 
	~<ty≥öfo
>

41 #i‡
deföed
(
HAVE_LIBMEMCACHED
) && HAVE_LIBMEMCACHED

42 
	~<libmemˇched-1.0/memˇched.h
>

43 
	~<libmemˇchedutû-1.0/o°ªam.hµ
>

44 
	~<libã°/memˇched.hµ
>

47 #i‡
deföed
(
HAVE_LIBGEARMAN
) && HAVE_LIBGEARMAN

48 
	~<libgórm™-1.0/o°ªam.hµ
>

51 
«me•a˚
 
	glibã°
 {

53 
LIBTEST_API


54 
boﬁ
 
jíkös_is_ˇŒî
();

56 
LIBTEST_API


57 
boﬁ
 
gdb_is_ˇŒî
();

59 
LIBTEST_API


60 
boﬁ
 
_ö_vÆgröd
(c⁄° *
fûe
, 
löe
, c⁄° *
func
);

62 
LIBTEST_API


63 
boﬁ
 
hñgröd_is_ˇŒî
();

65 
	gãm∂©e
 <
˛ass
 
	gT_com∑øbÀ
>

66 
boﬁ
 
_com∑ª_åuth
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, 
T_com∑øbÀ
 
__ex≥˘ed
, c⁄° *
as£π©i⁄_œbñ
)

68 i‡(
	g__ex≥˘ed
 =
Ál£
)

70 
libã°
::
°ªam
::
make_˚º
(
fûe
, 
löe
, 
func
Ë<< "As£π©i⁄ \"" << 
as£π©i⁄_œbñ
 << "\"";

71  
	gÁl£
;

74  
	gåue
;

77 
	gãm∂©e
 <
˛ass
 
	gT1_com∑øbÀ
, cœs†
	gT2_com∑øbÀ
>

78 
boﬁ
 
_com∑ª
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, c⁄° 
T1_com∑øbÀ
& 
__ex≥˘ed
, c⁄° 
T2_com∑øbÀ
& 
__a˘uÆ
, boﬁ 
u£_io
)

80 i‡(
	g__ex≥˘ed
 !
__a˘uÆ
)

82 i‡(
u£_io
)

84 
libã°
::
°ªam
::
make_˚º
(
fûe
, 
löe
, 
func
Ë<< "Ex≥˘ed \"" << 
__ex≥˘ed
 << "\" gŸ \"" << 
__a˘uÆ
 << "\"";

87  
	gÁl£
;

90  
	gåue
;

93 
	gãm∂©e
 <
˛ass
 
	gT1_com∑øbÀ
, cœs†
	gT2_com∑øbÀ
>

94 
boﬁ
 
_com∑ª_°rcmp
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, c⁄° 
T1_com∑øbÀ
& 
__ex≥˘ed
, c⁄° 
T2_com∑øbÀ
& 
__a˘uÆ
)

96 i‡(
	g__ex≥˘ed
 =
NULL
)

98 
FATAL
("Expected value was NULL,ÖrogrammerÉrror");

101 i‡(
	g__a˘uÆ
 =
NULL
)

103 
libã°
::
°ªam
::
make_˚º
(
fûe
, 
löe
, 
func
Ë<< "Ex≥˘ed " << 
__ex≥˘ed
 << " but got NULL";

104  
	gÁl£
;

107 i‡(
°∫cmp
(
__ex≥˘ed
, 
__a˘uÆ
, 
°æí
(__expected)))

109 
	glibã°
::
°ªam
::
make_˚º
(
fûe
, 
löe
, 
func
Ë<< "Ex≥˘ed " << 
	g__ex≥˘ed
 << "Öas£d \"" << 
	g__a˘uÆ
 << "\"";

110  
	gÁl£
;

113  
	gåue
;

116 
	gãm∂©e
 <
˛ass
 
	gT_com∑øbÀ
>

117 
boﬁ
 
_com∑ª_zîo
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, 
T_com∑øbÀ
 
__a˘uÆ
)

119 i‡(
T_com∑øbÀ
(0Ë!
__a˘uÆ
)

121 
libã°
::
°ªam
::
make_˚º
(
fûe
, 
löe
, 
func
Ë<< "Ex≥˘ed 0 gŸ \"" << 
__a˘uÆ
 << "\"";

122  
	gÁl£
;

125  
	gåue
;

128 
	gãm∂©e
 <
˛ass
 
	gT1_com∑øbÀ
, cœs†
	gT2_com∑øbÀ
>

129 
boﬁ
 
_√_com∑ª
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, 
T1_com∑øbÀ
 
__ex≥˘ed
, 
T2_com∑øbÀ
 
__a˘uÆ
, boﬁ 
io_îr‹

åue
)

131 i‡(
__ex≥˘ed
 =
__a˘uÆ
)

133 i‡(
io_îr‹
)

135 
libã°
::
°ªam
::
make_˚º
(
fûe
, 
löe
, 
func
Ë<< "Ex≥˘ed \"" << 
__ex≥˘ed
 << "\" gŸ \"" << 
__a˘uÆ
 << "\"";

138  
	gÁl£
;

141  
	gåue
;

144 
	gãm∂©e
 <
˛ass
 
	gT_com∑øbÀ
, cœs†
	gT_ex¥essi⁄_°rög
>

145 
boﬁ
 
_as£π_åuth
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, 
T_com∑øbÀ
 
__åuth
, 
T_ex¥essi⁄_°rög
 
__ex¥essi⁄
, c⁄° * 
__ex∂aö

NULL
)

147 i‡(
__åuth
)

149  
åue
;

152 i‡(
	g__ex∂aö
)

154 
	glibã°
::
°ªam
::
make_˚º
(
fûe
, 
löe
, 
func
Ë<< "As£πi⁄ \"" << 
	g__ex¥essi⁄
 << "\" w¨nög:" << 
	g__ex∂aö
;

157  
	gÁl£
;

	@libtest/core.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

41 
«me•a˚
 
	glibã°
 {

43 
¸óã_c‹e
()

45 #i‡
deföed
(
TARGET_OS_OSX
) && TARGET_OS_OSX

46 i‡(
	gTARGET_OS_OSX
)

51 i‡(
gëív
("YATL_COREDUMP"))

53 
pid_t
 
	gpid

f‹k
();

55 i‡(
	gpid
 == 0)

57 
ab‹t
();

61 
waôpid
(
pid
, 
NULL
, 0) !=Öid) {};

	@libtest/core.h

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 
LIBTEST_API


42 
¸óã_c‹e
();

	@libtest/core_count.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<c°dlib
>

40 
	~<f˙é.h
>

41 
	~<gë›t.h
>

42 
	~<io°ªam
>

43 
	~<sys/°©.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<uni°d.h
>

47 
	~<libã°/˝u.hµ
>

49 
	$vîsi⁄_comm™d
(c⁄° *
comm™d_«me
, 
maj‹_vîsi⁄
, 
mö‹_vîsi⁄
)

51 
°d
::
cout
 << 
comm™d_«me
 << " " << 
maj‹_vîsi⁄
 << "." << 
mö‹_vîsi⁄
 << std::
ídl
;

52 
	}
}

54 
	$hñp_comm™d
(c⁄° *
comm™d_«me
,

55 
maj‹_vîsi⁄
, 
mö‹_vîsi⁄
,

56 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
)

58 
°d
::
cout
 << 
comm™d_«me
 << " " << 
maj‹_vîsi⁄
 << "." << 
mö‹_vîsi⁄
 << std::
ídl
;

59 
°d
::
cout
 << "Pröt†thênumbî o‡c‹e†found o¿thêloˇ»ho°." << std::
ídl
 << std::endl;

61 
uöt32_t
 
x
0; 
l⁄g_›ti⁄s
[x].
«me
; x++)

63 
°d
::
cout
 << "\à--" << 
l⁄g_›ti⁄s
[
x
].
«me
 << ÷⁄g_›ti⁄s[x].
has_¨g
 ? '=' : ' 'Ë<< std::
ídl
;

66 
°d
::
cout
 << std::
ídl
;

67 
	}
}

70 
	mOPT_HELP
,

71 
	mOPT_VERSION


74 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

76 
›ti⁄
 
l⁄g_›ti⁄s
[]=

78 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

79 { "hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

83 
boﬁ
 
›t_vîsi⁄

Ál£
;

84 
boﬁ
 
›t_hñp

Ál£
;

85 
›ti⁄_ödex
= 0;

89 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

90 i‡(
›ti⁄_rv
 == -1)

95 
›ti⁄_rv
)

97 
OPT_HELP
:

98 
›t_hñp

åue
;

101 
OPT_VERSION
:

102 
›t_vîsi⁄

åue
;

107 
	`exô
(
EXIT_FAILURE
);

110 
	`hñp_comm™d
(
¨gv
[0], 1, 0, 
l⁄g_›ti⁄s
);

111 
	`exô
(
EXIT_FAILURE
);

115 i‡(
›t_vîsi⁄
)

117 
	`vîsi⁄_comm™d
(
¨gv
[0], 1, 0);

118 
	`exô
(
EXIT_SUCCESS
);

121 i‡(
›t_hñp
)

123 
	`hñp_comm™d
(
¨gv
[0], 1, 0, 
l⁄g_›ti⁄s
);

124 
	`exô
(
EXIT_SUCCESS
);

126 
	}
}

128 
	$maö
(
¨gc
, *
¨gv
[])

130 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

132 
°d
::
cout
 << 
libã°
::
	`numbî_of_˝us
(Ë<< std::
ídl
;

134  
EXIT_SUCCESS
;

135 
	}
}

	@libtest/cpu.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<uni°d.h
>

42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wundef"

44 #i‡
deföed
(
HAVE_SYS_SYSCTL_H
) && HAVE_SYS_SYSCTL_H

45 
	~<sys/sys˘l.h
>

48 
«me•a˚
 
	glibã°
 {

50 
size_t
 
numbî_of_˝us
()

52 
size_t
 
	gnumbî_of_˝u
= 1;

53 #i‡
deföed
(
TARGET_OS_LINUX
) && TARGET_OS_LINUX

54 
	gnumbî_of_˝u

sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

55 #ñi‡
deföed
(
HAVE_SYS_SYSCTL_H
Ë&& deföed(
CTL_HW
Ë&& deföed(
HW_NCPU
Ë&& deföed(
HW_AVAILCPU
) && defined(HW_NCPU)

56 
	gmib
[4];

57 
size_t
 
	gÀn
(
numbî_of_˝u
);

60 
	gmib
[0] = 
CTL_HW
;

61 
	gmib
[1] = 
HW_AVAILCPU
;

64 
sys˘l
(
mib
, 2, &
numbî_of_˝u
, &
Àn
, 
NULL
, 0);

66 i‡(
	gnumbî_of_˝u
 < 1)

68 
	gmib
[1]
HW_NCPU
;

69 
sys˘l
(
mib
, 2, &
numbî_of_˝u
, &
Àn
, 
NULL
, 0 );

71 i‡(
	gnumbî_of_˝u
 < 1 )

73 
	gnumbî_of_˝u
 = 1;

80  
	gnumbî_of_˝u
;

	@libtest/cpu.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 
size_t
 
numbî_of_˝us
();

	@libtest/dns.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/sockë.h
>

42 
	~<√tdb.h
>

44 
«me•a˚
 
	glibã°
 {

46 
boﬁ
 
lookup
(c⁄° * 
ho°
)

48 
boﬁ
 
	gsuc˚ss

Ál£
;

49 i‡(
	gho°
)

51 
as£π
(
ho°
);

52 
addröfo
 *
	gaddröfo

NULL
;

54 
	glimô
= 5;

55 --
limô
 
™d
 
	gsuc˚ss
 =
Ál£
)

57 i‡(
addröfo
)

59 
‰ìaddröfo
(
addröfo
);

60 
	gaddröfo

NULL
;

63 
	gªt
;

64 i‡((
	gªt

gëaddröfo
(
ho°
, 
NULL
, NULL, &
addröfo
)) == 0)

66 
suc˚ss

åue
;

70 
	gªt
)

72 
	gEAI_AGAIN
:

75 
	gEAI_NONAME
:

83 i‡(
	gaddröfo
)

85 
‰ìaddröfo
(
addröfo
);

89  
	gsuc˚ss
;

93 
boﬁ
 
check_dns
()

95 i‡(
lookup
("exi°.górm™.öfo"Ë=
Ál£
)

97  
Ál£
;

100 i‡(
lookup
("does_not_exist.gearman.info"))

102 
Áèl_as£π
("Your serviceÖrovider sucksánd isÖroviding bogus DNS. You might be inánáirport.");

105  
	gåue
;

	@libtest/dns.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 
boﬁ
 
check_dns
();

42 
boﬁ
 
lookup
(const *);

	@libtest/dream.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
«me•a˚
 
	glibã°
 {

42 
dªam
(
time_t
 
tv_£c
, 
tv_n£c
)

44 #i‡
deföed
(
_WIN32
)

45 i‡(
	gtv_£c
 =0 
™d
 
tv_n£c
)

47 
tv_£c
++;

49 
¶ìp
(
tv_£c
);

51 
time•ec
 
	gªque°ed
;

52 
	gªque°ed
.
	gtv_£c

tv_£c
;

53 
	gªque°ed
.
	gtv_n£c

tv_n£c
;

54 
«no¶ìp
(&
ªque°ed
, 
NULL
);

	@libtest/dream.h

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 
dªam
(
time_t
 
tv_£c
, 
tv_n£c
= 0);

	@libtest/drizzled.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<libã°/drizzÀd.h
>

42 
	~"utû/ö°™˚.hµ
"

43 
	~"utû/›î©i⁄.hµ
"

45 
usög
 
«me•a˚
 
	gd©adif„ª¡ül
;

46 
usög
 
«me•a˚
 
	glibã°
;

48 
	~<ˇs£π
>

49 
	~<˚ºno
>

50 
	~<c°dio
>

51 
	~<c°dlib
>

52 
	~<c°rög
>

53 
	~<io°ªam
>

54 
	~<sig«l.h
>

55 
	~<s°ªam
>

56 
	~<sys/ty≥s.h
>

57 
	~<sys/waô.h
>

58 
	~<uni°d.h
>

60 #i‚de‡
__INTEL_COMPILER


61 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

64 #i‡
deföed
(
HAVE_LIBDRIZZLE
) && HAVE_LIBDRIZZLE

65 
	~<libdrizzÀ-5.1/drizzÀ_˛õ¡.h
>

68 
usög
 
«me•a˚
 
	glibã°
;

70 
«me•a˚
 
	glibã°
 {

71 
boﬁ
 
pög_drizzÀd
(c⁄° 
ö_p‹t_t
 
_p‹t
)

73 ()(
	g_p‹t
);

74 #i‡
deföed
(
HAVE_LIBDRIZZLE
) && HAVE_LIBDRIZZLE

75 i‡(
	gHAVE_LIBDRIZZLE
)

77 
drizzÀ_°
 *
	gdrizzÀ

drizzÀ_¸óã_t˝
(
gëív
("MYSQL_SERVER"),

78 
gëív
("MYSQL_PORT"Ë? 
©oi
("MYSQL_PORT"Ë: 
DRIZZLE_DEFAULT_TCP_PORT
,

79 
gëív
("MYSQL_USER"),

80 
gëív
("MYSQL_PASSWORD"),

81 
gëív
("MYSQL_SCHEMA"), 
drizzÀ_›ti⁄s_t
());

83 i‡(
	gdrizzÀ
 =
NULL
)

85  
Ál£
;

88 
boﬁ
 
	gsuc˚ss

Ál£
;

90 
drizzÀ_ªtu∫_t
 
	grc
;

91 i‡((
	grc

drizzÀ_c⁄√˘
(
drizzÀ
)Ë=
DRIZZLE_RETURN_OK
)

93 
drizzÀ_ªsu…_°
 *
ªsu…

drizzÀ_pög
(
drizzÀ
, &
rc
);

94 
	gsuc˚ss

boﬁ
(
ªsu…
);

95 
drizzÀ_ªsu…_‰ì
(
ªsu…
);

98 i‡(
	gsuc˚ss
 =
åue
)

100 i‡(
rc
 !
DRIZZLE_RETURN_OK
)

102 
Eº‹
 << 
drizzÀ_îr‹
(
drizzÀ
Ë<< "Üoˇlho°:" << 
_p‹t
;

105 
drizzÀ_quô
(
drizzÀ
);

107  
	gsuc˚ss
;

111  
	gÁl£
;

115 ˛as†
	cDrizzÀ
 : 
public
 
libã°
::
Sîvî


117 
¥iv©e
:

118 
public
:

119 
DrizzÀ
(c⁄° 
°d
::
°rög
& 
ho°_¨g
, 
ö_p‹t_t
 
p‹t_¨g
) :

120 
libã°
::
	$Sîvî
(
ho°_¨g
, 
p‹t_¨g
, 
DRIZZLED_BINARY
, 
Ál£
)

122 
	`£t_pid_fûe
();

125 
boﬁ
 
	$pög
()

127 
size_t
 
limô
= 5;

128 
_≠p
.
	`check
(Ë
™d
 --
limô
)

130 i‡(
	`pög_drizzÀd
(
_p‹t
))

132  
åue
;

134 
libã°
::
	`dªam
(1, 0);

137  
Ál£
;

138 
	}
}

140 c⁄° *
	$«me
()

143 
	}
};

145 
log_fûe_›ti⁄
(
Aµliˇti⁄
&, c⁄° 
°d
::
°rög
&)

149 
boﬁ
 
	$has_log_fûe_›ti⁄
() const

151  
åue
;

152 
	}
}

154 
boﬁ
 
	$brokí_pid_fûe
()

156  
åue
;

157 
	}
}

159 
boﬁ
 
	$is_libtoﬁ
()

161  
Ál£
;

162 
	}
}

164 
boﬁ
 
	$has_sy¶og
() const

166  
åue
;

167 
	}
}

169 
boﬁ
 
	$has_p‹t_›ti⁄
() const

171  
åue
;

172 
	}
}

174 
	$p‹t_›ti⁄
(
Aµliˇti⁄
& 
≠p
, 
ö_p‹t_t
 
¨g
)

176 i‡(
¨g
 > 0)

178 
libã°
::
vch¨_t
 
buf„r
;

179 
buf„r
.
	`ªsize
(1024);

180 
	`¢¥ötf
(&
buf„r
[1024], buf„r.
	`size
(), "--drizzÀ-¥Ÿocﬁ.p‹t=%d", (
¨g
));

181 
≠p
.
	`add_›ti⁄
(&
buf„r
[1024]);

183 
	}
}

185 
boﬁ
 
buûd
();

188 
boﬁ
 
	gDrizzÀ
::
	$buûd
()

190 i‡(
	`gëuid
(Ë=0 
‹
 
	`gëeuid
() == 0)

192 
	`add_›ti⁄
("--user=root");

195 
	`add_›ti⁄
("--verbose=INSPECT");

197 
	`add_›ti⁄
("--datadir=var/drizzle");

200  
åue
;

201 
	}
}

203 
«me•a˚
 
	glibã°
 {

205 
	glibã°
::
Sîvî
 *
buûd_drizzÀd
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
åy_p‹t
)

207  
√w
 
DrizzÀ
(
ho°«me
, 
åy_p‹t
);

	@libtest/drizzled.h

37 #¥agm®
⁄˚


39 
	~<¨∑/öë.h
>

41 
«me•a˚
 
	glibã°
 { 
	gSîvî
; }

43 
«me•a˚
 
	glibã°
 {

45 
	glibã°
::
Sîvî
 *
buûd_drizzÀd
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
åy_p‹t
);

47 
boﬁ
 
pög_drizzÀd
(c⁄° 
ö_p‹t_t
);

	@libtest/error.h

37 #¥agm®
⁄˚


39 
	eã°_ªtu∫_t
 {

40 
	mTEST_SUCCESS
,

41 
	mTEST_FAILURE
,

42 
	mTEST_SKIPPED


46 
ölöe
 
boﬁ
 
	$ã°_suc˚ss
(
ã°_ªtu∫_t
 
rc
)

48  (
rc
 =
TEST_SUCCESS
);

49 
	}
}

51 
ölöe
 
boﬁ
 
	$ã°_Áûed
(
ã°_ªtu∫_t
 
rc
)

53  (
rc
 !
TEST_SUCCESS
);

54 
	}
}

	@libtest/failed.h

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


43 
LIBTEST_INTERNAL_API


44 
push_Áûed_ã°
(c⁄° *
cﬁÀ˘i⁄
, c⁄° *
ã°
);

46 
LIBTEST_INTERNAL_API


47 
¥öt_Áûed_ã°
();

49 #ifde‡
__˝lu•lus


	@libtest/fatal.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

39 
	~<c°d¨g
>

41 
«me•a˚
 
	glibã°
 {

43 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wformat-nonliteral"

45 
	gÁèl
::
Áèl
(c⁄° *
fûe_¨g
, 
löe_¨g
, c⁄° *
func_¨g
, ...) :

46 
__ã°_ªsu…
(
fûe_¨g
, 
löe_¨g
, 
func_¨g
)

48 
va_li°
 
	g¨gs
;

49 
va_°¨t
(
¨gs
, 
func_¨g
);

50 
öô
(
¨gs
);

51 
va_íd
(
¨gs
);

54 
	gÁèl
::
Áèl
–c⁄° f©Æ& 
Ÿhî
 ) :

55 
__ã°_ªsu…
(
Ÿhî
)

59 
boﬁ
 
_dißbÀd

Ál£
;

60 
uöt32_t
 
	g_cou¡î
= 0;

62 
boﬁ
 
	gÁèl
::
is_dißbÀd
(Ë
throw
()

64  
_dißbÀd
;

67 
	gÁèl
::
dißbÀ
(Ë
throw
()

69 
_cou¡î
= 0;

70 
	g_dißbÀd

åue
;

73 
	gÁèl
::
íabÀ
(Ë
throw
()

75 
_cou¡î
= 0;

76 
	g_dißbÀd

Ál£
;

79 
uöt32_t
 
	gÁèl
::
dißbÀd_cou¡î
(Ë
throw
()

81  
_cou¡î
;

84 
	gÁèl
::
ö¸emít_dißbÀd_cou¡î
(Ë
throw
()

86 
_cou¡î
++;

89 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wformat-nonliteral"

90 
	gdisc⁄√˘ed
::
disc⁄√˘ed
(c⁄° *
fûe_¨g
, 
löe_¨g
, c⁄° *
func_¨g
,

91 c⁄° 
°d
::
°rög
& 
ö°™˚
, c⁄° 
ö_p‹t_t
 
p‹t
, ...) :

92 
°d
::
ru¡ime_îr‹
(
func_¨g
),

93 
_p‹t
(
p‹t
),

94 
_löe
(
löe_¨g
),

95 
_fûe
(
fûe_¨g
),

96 
_func
(
func_¨g
)

98 
va_li°
 
	g¨gs
;

99 
va_°¨t
(
¨gs
, 
p‹t
);

100 c⁄° *
	gf‹m©

va_¨g
(
¨gs
, const *);

101 
	gœ°_îr‹
[
BUFSIZ
];

102 ()
v¢¥ötf
(
œ°_îr‹
, ÷a°_îr‹), 
f‹m©
, 
¨gs
);

103 
va_íd
(
¨gs
);

105 
¢¥ötf
(
_îr‹_mesßge
, (_îr‹_mesßge), "%s:%u %s", 
ö°™˚
.
c_°r
(), 
uöt32_t
(
p‹t
), 
œ°_îr‹
);

108 
	gdisc⁄√˘ed
::
disc⁄√˘ed
(c⁄° disc⁄√˘ed& 
Ÿhî
):

109 
°d
::
ru¡ime_îr‹
(
Ÿhî
.
_func
),

110 
_p‹t
(
Ÿhî
._port),

111 
_löe
(
Ÿhî
._line),

112 
_fûe
(
Ÿhî
._file),

113 
_func
(
Ÿhî
._func)

115 
°∫˝y
(
_îr‹_mesßge
, 
Ÿhî
._îr‹_mesßge, 
BUFSIZ
);

116 
°∫˝y
(
_ö°™˚
, 
Ÿhî
._ö°™˚, 
BUFSIZ
);

	@libtest/fatal.hpp

37 #¥agm®
⁄˚


39 
	~<°dex˚±
>

41 
«me•a˚
 
	glibã°
 {

43 ˛as†
	cdisc⁄√˘ed
 : 
public
 
°d
::
ru¡ime_îr‹


45 
public
:

46 
disc⁄√˘ed
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, c⁄° 
°d
::
°rög
&, c⁄° 
ö_p‹t_t
 
p‹t
, ...);

48 c⁄° * 
wh©
(Ëc⁄° 
throw
()

50  
	g_îr‹_mesßge
;

53 
disc⁄√˘ed
(const disconnected&);

56 
boﬁ
 
is_dißbÀd
();

57 
dißbÀ
();

58 
íabÀ
();

59 
uöt32_t
 
dißbÀd_cou¡î
();

60 
ö¸emít_dißbÀd_cou¡î
();

62 
löe
() const

64  
	g_löe
;

67 c⁄° * 
fûe
() const

69  
	g_fûe
;

72 c⁄° * 
func
() const

74  
	g_func
;

77 
	g¥iv©e
:

78 
_îr‹_mesßge
[
BUFSIZ
];

79 
ö_p‹t_t
 
	g_p‹t
;

80 
	g_ö°™˚
[
BUFSIZ
];

81 
	g_löe
;

82 c⁄° * 
	g_fûe
;

83 c⁄° * 
	g_func
;

	@libtest/formatter.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/comm⁄.h
>

41 
	~<Æg‹ôhm
>

42 
	~<f°ªam
>

43 
	~<io°ªam
>

45 
«me•a˚
 
	glibã°
 {

47 ˛as†
	cTe°Ca£
 {

48 
	gpublic
:

49 
Te°Ca£
(c⁄° 
°d
::
°rög
& 
¨g
):

50 
_«me
(
¨g
),

51 
_ªsu…
(
TEST_FAILURE
)

55 c⁄° 
	g°d
::
°rög
& 
«me
() const

57  
_«me
;

60 
ã°_ªtu∫_t
 
ªsu…
() const

62  
	g_ªsu…
;

65 
ªsu…
(
ã°_ªtu∫_t
 
¨g
)

67 
	g_ªsu…

¨g
;

70 
ªsu…
(
ã°_ªtu∫_t
 
¨g
, c⁄° 
libã°
::
Timî
& 
timî_
)

72 
_ªsu…

¨g
;

73 
	g_timî

timî_
;

76 c⁄° 
	glibã°
::
Timî
& 
timî
() const

78  
_timî
;

81 
timî
(
libã°
::
Timî
& 
¨g
)

83 
_timî

¨g
;

86 
	g¥iv©e
:

87 
°d
::
°rög
 
_«me
;

88 
ã°_ªtu∫_t
 
	g_ªsu…
;

89 
	glibã°
::
Timî
 
_timî
;

92 
	gF‹m©ãr
::
F‹m©ãr
(c⁄° 
°d
::
°rög
& 
‰ame_«me
, c⁄° std::°rög& 
¨g
)

94 
_suôe_«me

‰ame_«me
;

95 
	g_suôe_«me
+= ".";

96 
	g_suôe_«me
+
¨g
;

99 
	gF‹m©ãr
::~
	$F‹m©ãr
()

101 
°d
::
	`f‹_óch
(
_ã°ˇ£s
.
	`begö
(), _ã°ˇ£s.
	`íd
(), 
	`DñëeFromVe˘‹
());

102 
_ã°ˇ£s
.
	`˛ór
();

103 
	}
}

105 
Te°Ca£
* 
	gF‹m©ãr
::
	$cuºít
()

107  
_ã°ˇ£s
.
	`back
();

108 
	}
}

110 
	gF‹m©ãr
::
	$skù≥d
()

112 
	`cuºít
()->
	`ªsu…
(
TEST_SKIPPED
);

113 
Out
 << 
	`«me
(Ë<< "." << 
	`cuºít
()->«me(Ë<< "\t\t\t\t\t" << "[ " << 
	`ã°_°ªº‹
(cuºít()->
	`ªsu…
()) << " ]";

115 
	`ª£t
();

116 
	}
}

118 
	gF‹m©ãr
::
	$Áûed
()

120 
	`as£π
(
	`cuºít
());

121 
	`cuºít
()->
	`ªsu…
(
TEST_FAILURE
);

123 
Out
 << 
	`«me
(Ë<< "." << 
	`cuºít
()->«me(Ë<< "\t\t\t\t\t" << "[ " << 
	`ã°_°ªº‹
(cuºít()->
	`ªsu…
()) << " ]";

125 
	`ª£t
();

126 
	}
}

128 
	gF‹m©ãr
::
suc˚ss
(c⁄° 
libã°
::
Timî
& 
timî_
)

130 
as£π
(
cuºít
());

131 
cuºít
()->
ªsu…
(
TEST_SUCCESS
, 
timî_
);

133 
	gOut
 << 
«me
() << "."

134 << 
cuºít
()->
«me
()

136 << 
cuºít
()->
timî
()

137 << " [ " << 
ã°_°ªº‹
(
cuºít
()->
ªsu…
()) << " ]";

139 
ª£t
();

142 
	gF‹m©ãr
::
xml
(
libã°
::
Fømew‹k
& 
‰amew‹k_
, 
°d
::
of°ªam
& 
ouçut
)

144 
ouçut
 << "<ã°suôe†«me=\"" << 
‰amew‹k_
.
«me
(Ë<< "\">" << 
°d
::
ídl
;

145 
	gSuôes
::
ôî©‹
 
‰amew‹k_ôî

‰amew‹k_
.
suôes
().
begö
();

146 
	g‰amew‹k_ôî
 !
‰amew‹k_
.
suôes
().
íd
();

147 ++
	g‰amew‹k_ôî
)

149 
	gouçut
 << "\t<ã°suôê«me=\"" << (*
	g‰amew‹k_ôî
)->
«me
(Ë<< "\" cœs¢ame=\"\"Öackage=\"\">" << 
	g°d
::
ídl
;

151 
	gTe°Ca£s
::
ôî©‹
 
ˇ£_ôî
(*
‰amew‹k_ôî
)->
f‹m©ãr
()->
ã°ˇ£s
().
begö
();

152 
	gˇ£_ôî
 !(*
‰amew‹k_ôî
)->
f‹m©ãr
()->
ã°ˇ£s
().
íd
();

153 ++
	gˇ£_ôî
)

155 
	gouçut
 << "\t\t<testcaseÇame=\""

156 << (*
	gˇ£_ôî
)->
«me
()

158 << (*
	gˇ£_ôî
)->
timî
().
ñ≠£d_mûli£c⁄ds
()

160 << 
	g°d
::
ídl
;

162 (*
	gˇ£_ôî
)->
ªsu…
())

164 
	gTEST_SKIPPED
:

165 
ouçut
 << "\t\à<skù≥d/>" << 
°d
::
ídl
;

168 
	gTEST_FAILURE
:

169 
ouçut
 << "\t\à<Áûuª mesßge=\"\"Åy≥=\"\"/>"<< 
°d
::
ídl
;

172 
	gTEST_SUCCESS
:

175 
	gouçut
 << "\t\t</ã°ˇ£>" << 
	g°d
::
ídl
;

177 
	gouçut
 << "\t</ã°suôe>" << 
	g°d
::
ídl
;

179 
	gouçut
 << "</ã°suôes>" << 
	g°d
::
ídl
;

182 
	gF‹m©ãr
::
push_ã°ˇ£
(c⁄° 
°d
::
°rög
& 
¨g
)

184 
as£π
(
_suôe_«me
.
em±y
(Ë=
Ál£
);

185 
Te°Ca£
* 
	g_cuºít_ã°ˇ£

√w
 Te°Ca£(
¨g
);

186 
	g_ã°ˇ£s
.
push_back
(
_cuºít_ã°ˇ£
);

189 
	gF‹m©ãr
::
	$ª£t
()

191 
	}
}

	@libtest/formatter.hpp

37 #¥agm®
⁄˚


39 
	~<°rög
>

41 
«me•a˚
 
	glibã°
 { 
˛ass
 
	gFømew‹k
; }

44 
«me•a˚
 
	glibã°
 {

46 
˛ass
 
	gTe°Ca£
;

47 
	g°d
::
	tve˘‹
<
	tlibã°
::
	tTe°Ca£
*> 
	tTe°Ca£s
;

49 ˛as†
	cF‹m©ãr
 {

50 
	gpublic
:

51 
F‹m©ãr
(c⁄° 
°d
::
°rög
& 
‰ame_«me
, c⁄° std::°rög& 
¨g
);

53 ~
F‹m©ãr
();

55 
skù≥d
();

57 
Áûed
();

59 
suc˚ss
(c⁄° 
libã°
::
Timî
&);

61 
push_ã°ˇ£
(c⁄° 
°d
::
°rög
&);

63 c⁄° 
	g°d
::
°rög
& 
«me
() const

65  
_suôe_«me
;

68 
	gTe°Ca£s
& 
ã°ˇ£s
()

70  
	g_ã°ˇ£s
;

73 
xml
(
libã°
::
Fømew‹k
&, 
°d
::
of°ªam
&);

75 
	g¥iv©e
:

76 
ª£t
();

78 
Te°Ca£
* 
cuºít
();

80 
	g¥iv©e
:

81 
°d
::
°rög
 
_suôe_«me
;

82 
Te°Ca£s
 
	g_ã°ˇ£s
;

	@libtest/framework.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/comm⁄.h
>

40 
	~<libã°/cﬁÀ˘i⁄.h
>

41 
	~<libã°/sig«l.h
>

43 
	~<Æg‹ôhm
>

44 
	~<‚m©ch.h
>

45 
	~<io°ªam
>

47 
«me•a˚
 
	glibã°
 {

49 
	gFømew‹k
::
Fømew‹k
(
libã°
::
Sig«lThªad
& 
sig«l_
,

50 c⁄° 
°d
::
°rög
& 
«me_
,

51 c⁄° 
°d
::
°rög
& 
⁄ly_run_¨g
,

52 c⁄° 
°d
::
°rög
& 
wûdˇrd_¨g
) :

53 
_tŸÆ
(0),

54 
_suc˚ss
(0),

55 
_skù≥d
(0),

56 
_Áûed
(0),

57 
_¸óã
(
NULL
),

58 
_de°roy
(
NULL
),

59 
_⁄_îr‹
(
NULL
),

60 
_ru¬î
(
NULL
),

61 
_sockë
(
Ál£
),

62 
_¸ót‹s_±r
(
NULL
),

63 
_sig«l
(
sig«l_
),

64 
_⁄ly_run
(
⁄ly_run_¨g
),

65 
_wûdˇrd
(
wûdˇrd_¨g
),

66 
_«me
(
«me_
)

68 
gë_w‹ld
(
this
);

71 
	gFømew‹k
::
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄_°
* 
cﬁÀ˘i⁄s_
)

73 
cﬁÀ˘i⁄_°
 *
√xt

cﬁÀ˘i⁄s_
;Çexà
™d
 
	g√xt
->
	g«me
;Çext++)

75 
	g_cﬁÀ˘i⁄
.
push_back
(
√w
 
CﬁÀ˘i⁄
(
this
, 
√xt
));

79 
	gFømew‹k
::~
Fømew‹k
()

81 i‡(
_de°roy
 
™d
 _de°roy(
_¸ót‹s_±r
))

83 
Eº‹
 << "Failure in _destroy(), someÑesources mayÇot have been cleaned up.";

86 
	g_£rvîs
.
shutdown
();

88 
dñëe
 
	g_ru¬î
;

90 
	g°d
::
f‹_óch
(
_cﬁÀ˘i⁄
.
begö
(), _cﬁÀ˘i⁄.
íd
(), 
DñëeFromVe˘‹
());

91 
	g_cﬁÀ˘i⁄
.
˛ór
();

94 
boﬁ
 
	gFømew‹k
::
m©ch
(c⁄° * 
¨g
)

96 i‡(
_wûdˇrd
.
em±y
(Ë=
Ál£
 
™d
 
‚m©ch
(_wûdˇrd.
c_°r
(), 
¨g
, 0))

98  
	gåue
;

101  
	gÁl£
;

104 
	gFømew‹k
::
exec
()

106 
°d
::
ve˘‹
<
CﬁÀ˘i⁄
*>::
ôî©‹
 
ôî

_cﬁÀ˘i⁄
.
begö
();

107 
	gôî
 !
_cﬁÀ˘i⁄
.
íd
(Ë
™d
 (
_sig«l
.
is_shutdown
(Ë=
Ál£
);

108 ++
	gôî
)

110 i‡(
	g_⁄ly_run
.
em±y
(Ë=
Ál£
 
™d


111 
‚m©ch
(
_⁄ly_run
.
c_°r
(), (*
ôî
)->
«me
(), 0))

116 
	g_tŸÆ
++;

118 
	gåy
 {

119 (*
	gôî
)->
exec
())

121 
	gTEST_FAILURE
:

122 
_Áûed
++;

125 
	gTEST_SKIPPED
:

126 
_skù≥d
++;

131 
	gTEST_SUCCESS
:

132 
_suc˚ss
++;

136 
ˇtch
 (c⁄° 
libã°
::
Áèl
& 
e
)

138 
_Áûed
++;

139 
	g°ªam
::
˚º
(
e
.
fûe
(),É.
löe
(),É.
func
()Ë<< 
	ge
.
wh©
();

141 
ˇtch
 (c⁄° 
libã°
::
disc⁄√˘ed
& 
e
)

143 
_Áûed
++;

144 
	gEº‹
 << "Unh™dÀd disc⁄√˘i⁄ occuºed:" << 
	ge
.
wh©
();

145 
	gthrow
;

147 
ˇtch
 (...)

149 
	g_Áûed
++;

150 
	gthrow
;

154 
xml
(c⁄° 
°d
::
°rög
& 
ã°suôes_«me
, std::
o°ªam
& 
ouçut
);

157 
uöt32_t
 
	gFømew‹k
::
sum_tŸÆ
()

159 
uöt32_t
 
cou¡
= 0;

160 
	g°d
::
ve˘‹
<
CﬁÀ˘i⁄
*>::
ôî©‹
 
ôî

_cﬁÀ˘i⁄
.
begö
();

161 
	gôî
 !
_cﬁÀ˘i⁄
.
íd
();

162 ++
	gôî
)

164 
	gcou¡
+(*
ôî
)->
tŸÆ
();

167  
	gcou¡
;

170 
uöt32_t
 
	gFømew‹k
::
sum_suc˚ss
()

172 
uöt32_t
 
cou¡
= 0;

173 
	g°d
::
ve˘‹
<
CﬁÀ˘i⁄
*>::
ôî©‹
 
ôî

_cﬁÀ˘i⁄
.
begö
();

174 
	gôî
 !
_cﬁÀ˘i⁄
.
íd
();

175 ++
	gôî
)

177 
	gcou¡
+(*
ôî
)->
suc˚ss
();

180  
	gcou¡
;

183 
uöt32_t
 
	gFømew‹k
::
sum_skù≥d
()

185 
uöt32_t
 
cou¡
= 0;

186 
	g°d
::
ve˘‹
<
CﬁÀ˘i⁄
*>::
ôî©‹
 
ôî

_cﬁÀ˘i⁄
.
begö
();

187 
	gôî
 !
_cﬁÀ˘i⁄
.
íd
();

188 ++
	gôî
)

190 
	gcou¡
+(*
ôî
)->
skù≥d
();

193  
	gcou¡
;

196 
uöt32_t
 
	gFømew‹k
::
sum_Áûed
()

198 
uöt32_t
 
cou¡
= 0;

199 
	g°d
::
ve˘‹
<
CﬁÀ˘i⁄
*>::
ôî©‹
 
ôî

_cﬁÀ˘i⁄
.
begö
();

200 
	gôî
 !
_cﬁÀ˘i⁄
.
íd
();

201 ++
	gôî
)

203 
	gcou¡
+(*
ôî
)->
Áûed
();

206  
	gcou¡
;

209 
	glibã°
::
Ru¬î
 *
Fømew‹k
::
ru¬î
()

211 i‡(
_ru¬î
 =
NULL
)

213 
_ru¬î

√w
 
Ru¬î
;

215 
	g_ru¬î
->
£t_£rvîs
(
_£rvîs
);

217  
	g_ru¬î
;

220 
ã°_ªtu∫_t
 
	gFømew‹k
::
¸óã
()

222 
ã°_ªtu∫_t
 
rc

TEST_SUCCESS
;

223 i‡(
	g_¸óã
)

225 
	g_¸ót‹s_±r

_¸óã
(
_£rvîs
, 
rc
);

228  
	grc
;

	@libtest/framework.h

37 #¥agm®
⁄˚


39 
	~<libã°/sig«l.h
>

47 
	~<ve˘‹
>

49 
	g«me•a˚
 { 
˛ass
 
	gCﬁÀ˘i⁄
; }

50 
	g°d
::
	tve˘‹
<
	tlibã°
::
	tCﬁÀ˘i⁄
*> 
	tSuôes
;

52 
«me•a˚
 
	glibã°
 {

54 ˛as†
	cFømew‹k
 {

55 
	gpublic
:

57 
public
:

58 
ã°_ªtu∫_t
 
¸óã
();

60 c⁄° 
	g°d
::
°rög
& 
«me
() const

62  
_«me
;

65 
¸óã
(
ã°_ˇŒback_¸óã_‚
* 
¨g
)

67 
	g_¸óã

¨g
;

70 
de°roy
(
ã°_ˇŒback_de°roy_‚
* 
¨g
)

72 
	g_de°roy

¨g
;

75 
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄_°
* 
¨g
);

77 
£t_⁄_îr‹
(
ã°_ˇŒback_îr‹_‚
 *
¨g
)

79 
	g_⁄_îr‹

¨g
;

82 
ã°_ªtu∫_t
 
⁄_îr‹
(const test_return_t, *);

84 
£t_sockë
()

86 
	g_£rvîs
.
£t_sockë
();

89 
£t_ß¶
(c⁄° 
°d
::
°rög
& 
u£∫ame_¨g
, c⁄° std::°rög& 
∑ssw‹d_¨g
)

91 
_£rvîs
.
£t_ß¶
(
u£∫ame_¨g
, 
∑ssw‹d_¨g
);

94 
	glibã°
::
£rvî_°¨tup_°
& 
£rvîs
()

96  
_£rvîs
;

99 
£t_ru¬î
(
libã°
::
Ru¬î
 *
¨g
)

101 
_ru¬î

¨g
;

104 
	glibã°
::
Ru¬î
 *
ru¬î
();

106 
exec
();

108 
	glibã°
::
CﬁÀ˘i⁄
& 
cﬁÀ˘i⁄
();

110 
	gvútuÆ
 ~
Fømew‹k
();

112 
Fømew‹k
(
libã°
::
Sig«lThªad
&,

113 c⁄° 
°d
::
°rög
&,

114 c⁄° 
°d
::
°rög
&,

115 c⁄° 
°d
::
°rög
&);

117 
boﬁ
 
m©ch
(c⁄° * 
¨g
);

119 *
¸ót‹s_±r
()

121  
	g_¸ót‹s_±r
;

124 
	glibã°
::
Sig«lThªad
& 
sig«l
()

126  
_sig«l
;

129 
uöt32_t
 
sum_tŸÆ
();

130 
uöt32_t
 
sum_suc˚ss
();

131 
uöt32_t
 
sum_skù≥d
();

132 
uöt32_t
 
sum_Áûed
();

134 
size_t
 
size
()

136  
	g_cﬁÀ˘i⁄
.
size
();

139 
uöt32_t
 
tŸÆ
() const

141  
	g_tŸÆ
;

144 
uöt32_t
 
suc˚ss
() const

146  
	g_suc˚ss
;

149 
uöt32_t
 
skù≥d
() const

151  
	g_skù≥d
;

154 
uöt32_t
 
Áûed
() const

156  
	g_Áûed
;

159 
	gSuôes
& 
suôes
()

161  
	g_cﬁÀ˘i⁄
;

164 
	g¥iv©e
:

165 
uöt32_t
 
_tŸÆ
;

166 
uöt32_t
 
	g_suc˚ss
;

167 
uöt32_t
 
	g_skù≥d
;

168 
uöt32_t
 
	g_Áûed
;

171 
ã°_ˇŒback_¸óã_‚
 *
	g_¸óã
;

172 
ã°_ˇŒback_de°roy_‚
 *
	g_de°roy
;

177 
ã°_ˇŒback_îr‹_‚
 *
	g_⁄_îr‹
;

183 
	glibã°
::
Ru¬î
 *
_ru¬î
;

185 
	glibã°
::
£rvî_°¨tup_°
 
_£rvîs
;

186 
boﬁ
 
	g_sockë
;

187 *
	g_¸ót‹s_±r
;

188 
	g_£rvîs_to_run
;

189 
Suôes
 
	g_cﬁÀ˘i⁄
;

190 
	glibã°
::
Sig«lThªad
& 
_sig«l
;

191 
	g°d
::
°rög
 
_⁄ly_run
;

192 
	g°d
::
°rög
 
_wûdˇrd
;

193 
	g°d
::
°rög
 
_«me
;

195 
	g¥iv©e
:

196 
Fømew‹k
( const Framework& );

197 c⁄° 
	gFømew‹k
& 
	g›î©‹
=–c⁄° 
Fømew‹k
& );

	@libtest/gearmand.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<libã°/górm™d.h
>

42 
usög
 
«me•a˚
 
	glibã°
;

44 
	~<ˇs£π
>

45 
	~<˚ºno
>

46 
	~<c°dio
>

47 
	~<c°dlib
>

48 
	~<c°rög
>

49 
	~<io°ªam
>

50 
	~<sig«l.h
>

51 
	~<s°ªam
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/waô.h
>

54 
	~<uni°d.h
>

56 #i‚de‡
__INTEL_COMPILER


57 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

60 
usög
 
«me•a˚
 
	glibã°
;

62 ˛as†
	cGórm™d
 : 
public
 
libã°
::
Sîvî


64 
¥iv©e
:

65 
public
:

66 
Górm™d
(c⁄° 
°d
::
°rög
& 
ho°_¨g
, 
ö_p‹t_t
 
p‹t_¨g
, 
boﬁ
 
libtoﬁ_
, c⁄° * 
bö¨y
);

68 
boﬁ
 
	$pög
()

70 
	`ª£t_îr‹
();

72 i‡(
	`out_of_b™_kûÀd
())

74  
Ál£
;

77 
Sim∂eClõ¡
 
	`˛õ¡
(
_ho°«me
, 
_p‹t
);

79 
°d
::
°rög
 
ª•⁄£
;

80 
boﬁ
 
ªt

˛õ¡
.
	`£nd_mesßge
("vîsi⁄", 
ª•⁄£
);

82 i‡(
˛õ¡
.
	`is_îr‹
())

84 
	`îr‹
(
˛õ¡
.error());

87  
ªt
;

90 c⁄° *
	$«me
()

93 
	}
};

95 
log_fûe_›ti⁄
(
Aµliˇti⁄
& 
≠p
, c⁄° 
°d
::
°rög
& 
¨g
)

97 i‡(
¨g
.
em±y
(Ë=
Ál£
)

99 
°d
::
°rög
 
buf„r
("--log-file=");

100 
	gbuf„r
+
¨g
;

101 
	g≠p
.
add_›ti⁄
("--verbose=DEBUG");

102 
	g≠p
.
add_›ti⁄
(
buf„r
);

106 
boﬁ
 
	$has_log_fûe_›ti⁄
() const

108  
åue
;

109 
	}
}

111 
boﬁ
 
	$is_libtoﬁ
()

113  
åue
;

114 
	}
}

116 
boﬁ
 
	$has_sy¶og
() const

118  
Ál£
;

119 
	}
}

121 
boﬁ
 
	$has_p‹t_›ti⁄
() const

123  
åue
;

124 
	}
}

126 
boﬁ
 
buûd
();

129 
	gGórm™d
::
Górm™d
(c⁄° 
°d
::
°rög
& 
ho°_¨g
, 
ö_p‹t_t
 
p‹t_¨g
, 
boﬁ
 
libtoﬁ_
, c⁄° * 
bö¨y_¨g
) :

130 
libã°
::
	$Sîvî
(
ho°_¨g
, 
p‹t_¨g
, 
bö¨y_¨g
, 
libtoﬁ_
)

132 
	`£t_pid_fûe
();

133 
	}
}

135 
boﬁ
 
	gGórm™d
::
	$buûd
()

137 i‡(
	`gëuid
(Ë=0 
‹
 
	`gëeuid
() == 0)

139 
	`add_›ti⁄
("-u", "root");

142 
	`add_›ti⁄
("--listen=localhost");

144  
åue
;

145 
	}
}

147 
«me•a˚
 
	glibã°
 {

149 
	glibã°
::
Sîvî
 *
buûd_górm™d
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
åy_p‹t
, c⁄° * 
bö¨y
)

151 i‡(
	gbö¨y
 =
NULL
)

153 #i‡
deföed
(
HAVE_GEARMAND_BINARY
)

154 #i‡
deföed
(
GEARMAND_BINARY
)

155 i‡(
HAVE_GEARMAND_BINARY
)

157 
bö¨y

GEARMAND_BINARY
;

163 i‡(
	gbö¨y
 =
NULL
)

165  
NULL
;

168 
boﬁ
 
	gis_libtoﬁ_s¸ùt

åue
;

170 i‡(
	gbö¨y
[0] == '/')

172 
is_libtoﬁ_s¸ùt

Ál£
;

175  
√w
 
Górm™d
(
ho°«me
, 
åy_p‹t
, 
is_libtoﬁ_s¸ùt
, 
bö¨y
);

	@libtest/gearmand.h

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 { 
	gSîvî
; }

41 
«me•a˚
 
	glibã°
 {

43 
	glibã°
::
Sîvî
 *
buûd_górm™d
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
åy_p‹t
, c⁄° * 
bö¨y

NULL
);

	@libtest/get.h

37 #¥agm®
⁄˚


39 #ifdef 
__˝lu•lus


44 
LIBTEST_API


45 
gë_w‹ld
(
libã°
::
Fømew‹k
 *
w‹ld
);

47 #ifdef 
__˝lu•lus


	@libtest/has.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<c°dlib
>

41 
	~<uni°d.h
>

43 
«me•a˚
 
	glibã°
 {

45 
boﬁ
 
has_libmemˇched
()

47 #i‡
deföed
(
HAVE_LIBMEMCACHED
) && HAVE_LIBMEMCACHED

48 i‡(
	gHAVE_LIBMEMCACHED
)

50  
	gåue
;

54  
	gÁl£
;

57 
boﬁ
 
has_libdrizzÀ
()

59 #i‡
deföed
(
HAVE_LIBDRIZZLE
) && HAVE_LIBDRIZZLE

60 i‡(
	gHAVE_LIBDRIZZLE
)

62  
	gåue
;

66  
	gÁl£
;

69 
boﬁ
 
has_po°gªs_suµ‹t
()

71 *
	ggëív_±r
;

72 i‡(
boﬁ
((
gëív_±r

gëív
("POSTGES_IS_RUNNING_AND_SETUP"))))

74 ()(
gëív_±r
);

75 i‡(
	gHAVE_LIBPQ
)

77  
	gåue
;

81  
	gÁl£
;

85 
boﬁ
 
has_górm™d
()

87 #i‡
deföed
(
HAVE_GEARMAND_BINARY
) && HAVE_GEARMAND_BINARY

88 i‡(
	gHAVE_GEARMAND_BINARY
)

90 
	g°d
::
°rög°ªam
 
¨g_buf„r
;

92 *
	ggëív_±r
;

93 i‡(
boﬁ
((
gëív_±r

gëív
("PWD"))Ë
™d


94 ((
°rcmp
(
GEARMAND_BINARY
, "./górm™d/górm™d"Ë=0Ë
‹
 (strcmp(GEARMAND_BINARY, "gearmand/gearmand") == 0)))

96 
¨g_buf„r
 << 
gëív_±r
;

97 
	g¨g_buf„r
 << "/";

99 
	g¨g_buf„r
 << 
	gGEARMAND_BINARY
;

101 i‡(
ac˚ss
(
¨g_buf„r
.
°r
().
c_°r
(), 
X_OK
) == 0)

103  
åue
;

108  
	gÁl£
;

111 
boﬁ
 
has_drizzÀd
()

113 #i‡
deföed
(
HAVE_DRIZZLED_BINARY
) && HAVE_DRIZZLED_BINARY

114 i‡(
	gHAVE_DRIZZLED_BINARY
)

116 i‡(
ac˚ss
(
DRIZZLED_BINARY
, 
X_OK
) == 0)

118  
åue
;

123  
	gÁl£
;

126 
boﬁ
 
has_mysqld
()

128 #i‡
deföed
(
HAVE_MYSQLD_BUILD
) && HAVE_MYSQLD_BUILD

129 i‡(
	gHAVE_MYSQLD_BUILD
)

131 i‡(
ac˚ss
(
MYSQLD_BINARY
, 
X_OK
) == 0)

133  
åue
;

138  
	gÁl£
;

141 
boﬁ
 
has_memˇched
()

143 #i‡
deföed
(
HAVE_MEMCACHED_BINARY
) && HAVE_MEMCACHED_BINARY

144 i‡(
	gHAVE_MEMCACHED_BINARY
)

146 
	g°d
::
°rög°ªam
 
¨g_buf„r
;

149 *
	ggëív_±r
;

150 i‡(
boﬁ
((
gëív_±r

gëív
("PWD"))Ë
™d
 
°rcmp
(
MEMCACHED_BINARY
, "memcached/memcached") == 0)

152 
¨g_buf„r
 << 
gëív_±r
;

153 
	g¨g_buf„r
 << "/";

155 
	g¨g_buf„r
 << 
	gMEMCACHED_BINARY
;

157 i‡(
ac˚ss
(
¨g_buf„r
.
°r
().
c_°r
(), 
X_OK
) == 0)

159  
åue
;

164  
	gÁl£
;

167 
boﬁ
 
has_memˇched_ß¶
()

169 #i‡
deföed
(
HAVE_MEMCACHED_SASL_BINARY
) && HAVE_MEMCACHED_SASL_BINARY

170 i‡(
	gHAVE_MEMCACHED_SASL_BINARY
)

172 i‡(
ac˚ss
(
MEMCACHED_SASL_BINARY
, 
X_OK
) == 0)

174  
åue
;

179  
	gÁl£
;

	@libtest/has.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 
LIBTEST_API


42 
boﬁ
 
has_libmemˇched
();

44 
LIBTEST_API


45 
boﬁ
 
has_libdrizzÀ
();

47 
LIBTEST_API


48 
boﬁ
 
has_po°gªs_suµ‹t
();

50 
LIBTEST_API


51 
boﬁ
 
has_memˇched
();

53 
LIBTEST_API


54 
boﬁ
 
has_memˇched_ß¶
();

56 
LIBTEST_API


57 
boﬁ
 
has_górm™d
();

59 
LIBTEST_API


60 
boﬁ
 
has_drizzÀd
();

62 
LIBTEST_API


63 
boﬁ
 
has_mysqld
();

	@libtest/http.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/comm⁄.h
>

41 #i‡
deföed
(
HAVE_LIBCURL
) && HAVE_LIBCURL

42 
	~<cuæ/cuæ.h
>

44 
˛ass
 
	gCURL
;

48 
	$˛ónup_cuæ
()

50 #i‡
	`deföed
(
HAVE_LIBCURL
) && HAVE_LIBCURL

51 
	`cuæ_globÆ_˛ónup
();

53 
	}
}

55 
	$öôülize_cuæ_°¨tup
()

57 #i‡
	`deföed
(
HAVE_LIBCURL
) && HAVE_LIBCURL

58 i‡(
	`cuæ_globÆ_öô
(
CURL_GLOBAL_ALL
))

60 
	`FATAL
("curl_global_init(CURL_GLOBAL_ALL) failed");

64 i‡(
	`©exô
(
˛ónup_cuæ
))

66 
	`FATAL
("atexit() failed");

68 
	}
}

70 
±hªad_⁄˚_t
 
	g°¨t_key_⁄˚

PTHREAD_ONCE_INIT
;

71 
	$öôülize_cuæ
()

73 
ªt
;

74 i‡((
ªt

	`±hªad_⁄˚
(&
°¨t_key_⁄˚
, 
öôülize_cuæ_°¨tup
)) != 0)

76 
	`FATAL
(
	`°ªº‹
(
ªt
));

78 
	}
}

80 
«me•a˚
 
	glibã°
 {

81 
«me•a˚
 
	ghâp
 {

83 
	#YATL_USERAGENT
 "YATL/1.0"

	)

85 
size_t
 
hâp_gë_ªsu…_ˇŒback
(*
±r
, size_à
size
, size_à
nmemb
, *
d©a
)

87 
vch¨_t
 *
	g_body
(vch¨_t*)
d©a
;

89 
	g_body
->
ªsize
(
size
 * 
nmemb
);

90 
mem˝y
(&
_body
[0], 
±r
, _body->
size
());

92  
	g_body
->
size
();

95 
öô
(
CURL
 *
cuæ
, c⁄° 
°d
::
°rög
& 
uæ
)

97 ()
hâp_gë_ªsu…_ˇŒback
;

98 ()
	gcuæ
;

99 ()
	guæ
;

100 i‡(
	gHAVE_LIBCURL
)

102 #i‡
deföed
(
HAVE_LIBCURL
) && HAVE_LIBCURL

103 
as£π
(
cuæ
);

104 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_URL
, 
uæ
.
c_°r
());

105 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_USERAGENT
, 
YATL_USERAGENT
);

110 
	gHTTP
::
HTTP
(c⁄° 
°d
::
°rög
& 
uæ_¨g
) :

111 
_uæ
(
uæ_¨g
),

112 
_ª•⁄£
(0)

114 
öôülize_cuæ
();

117 
boﬁ
 
	gGET
::
execuã
()

119 ()
öô
;

121 i‡(
	gHAVE_LIBCURL
)

123 #i‡
deföed
(
HAVE_LIBCURL
) && HAVE_LIBCURL

124 
CURL
 *
	gcuæ

cuæ_ósy_öô
();

126 
öô
(
cuæ
, 
uæ
());

128 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEFUNCTION
, 
hâp_gë_ªsu…_ˇŒback
);

129 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEDATA
, (*)&
_body
);

131 
CURLcode
 
	gªåef

cuæ_ósy_≥rf‹m
(
cuæ
);

132 
cuæ_ósy_gëöfo
(
cuæ
, 
CURLINFO_RESPONSE_CODE
, 
_ª•⁄£
);

134 
cuæ_ósy_˛ónup
(
cuæ
);

136  
boﬁ
(
ªåef
 =
CURLE_OK
);

140  
	gÁl£
;

143 
boﬁ
 
	gPOST
::
execuã
()

145 i‡(
HAVE_LIBCURL
)

147 #i‡
deföed
(
HAVE_LIBCURL
) && HAVE_LIBCURL

148 
CURL
 *
cuæ

cuæ_ósy_öô
();;

150 
öô
(
cuæ
, 
uæ
());

152 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_POSTFIELDSIZE
, 
_body
.
size
());

153 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_POSTFIELDS
, (*)&
_body
[0]);

155 
CURLcode
 
	gªåef

cuæ_ósy_≥rf‹m
(
cuæ
);

156 
cuæ_ósy_gëöfo
(
cuæ
, 
CURLINFO_RESPONSE_CODE
, 
_ª•⁄£
);

158 
cuæ_ósy_˛ónup
(
cuæ
);

160  
boﬁ
(
ªåef
 =
CURLE_OK
);

164  
	gÁl£
;

167 
boﬁ
 
	gTRACE
::
execuã
()

169 i‡(
HAVE_LIBCURL
)

171 #i‡
deföed
(
HAVE_LIBCURL
) && HAVE_LIBCURL

172 
CURL
 *
cuæ

cuæ_ósy_öô
();;

174 
öô
(
cuæ
, 
uæ
());

176 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_CUSTOMREQUEST
, "TRACE");

177 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEFUNCTION
, 
hâp_gë_ªsu…_ˇŒback
);

178 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEDATA
, (*)&
_body
[0]);

180 
CURLcode
 
	gªåef

cuæ_ósy_≥rf‹m
(
cuæ
);

181 
cuæ_ósy_gëöfo
(
cuæ
, 
CURLINFO_RESPONSE_CODE
, 
_ª•⁄£
);

183 
cuæ_ósy_˛ónup
(
cuæ
);

185  
	gªåef
 =
CURLE_OK
;

189  
	gÁl£
;

192 
boﬁ
 
	gHEAD
::
execuã
()

194 i‡(
HAVE_LIBCURL
)

196 #i‡
deföed
(
HAVE_LIBCURL
) && HAVE_LIBCURL

197 
CURL
 *
cuæ

cuæ_ósy_öô
();;

199 
öô
(
cuæ
, 
uæ
());

201 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_CUSTOMREQUEST
, "HEAD");

202 
cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEFUNCTION
, 
hâp_gë_ªsu…_ˇŒback
);

204 
CURLcode
 
	gªåef

cuæ_ósy_≥rf‹m
(
cuæ
);

205 
cuæ_ósy_gëöfo
(
cuæ
, 
CURLINFO_RESPONSE_CODE
, 
_ª•⁄£
);

207 
cuæ_ósy_˛ónup
(
cuæ
);

209  
	gªåef
 =
CURLE_OK
;

213  
	gÁl£
;

	@libtest/http.hpp

37 #¥agm®
⁄˚


39 
	~<libã°/vch¨.hµ
>

41 
«me•a˚
 
	glibã°
 {

42 
«me•a˚
 
	ghâp
 {

44 ˛as†
	cHTTP
 {

45 
	gpublic
:

47 
HTTP
(c⁄° 
°d
::
°rög
& 
uæ_¨g
);

49 
vútuÆ
 
boﬁ
 
execuã
()= 0;

51 
	gvútuÆ
 ~
HTTP
()

54 c⁄° 
	g°d
::
°rög
& 
uæ
() const

56  
_uæ
;

59 
ª•⁄£
()

61  
	g_ª•⁄£
;

64 
	g¥iv©e
:

65 
°d
::
°rög
 
_uæ
;

67 
	g¥Ÿe˘ed
:

68 
_ª•⁄£
;

71 ˛as†
	cGET
: 
public
 
HTTP
 {

72 
public
:

74 
GET
(c⁄° 
°d
::
°rög
& 
uæ_¨g
) :

75 
HTTP
(
uæ_¨g
)

79 
boﬁ
 
execuã
();

81 
	g¥iv©e
:

82 
libã°
::
vch¨_t
 
_body
;

85 ˛as†
	cPOST
: 
public
 
HTTP
 {

86 
public
:

88 
POST
(c⁄° 
°d
::
°rög
& 
uæ_¨g
,

89 c⁄° 
vch¨_t
& 
po°_¨g
) :

90 
HTTP
(
uæ_¨g
),

91 
_po°
(
po°_¨g
)

95 
boﬁ
 
execuã
();

97 
	g¥iv©e
:

98 
libã°
::
vch¨_t
 
_po°
;

99 
	glibã°
::
vch¨_t
 
_body
;

102 ˛as†
	cTRACE
: 
public
 
HTTP
 {

103 
public
:

105 
TRACE
(c⁄° 
°d
::
°rög
& 
uæ_¨g
,

106 c⁄° 
vch¨_t
& 
body_¨g
) :

107 
HTTP
(
uæ_¨g
),

108 
_body
(
body_¨g
)

112 
boﬁ
 
execuã
();

114 
	g¥iv©e
:

115 
libã°
::
vch¨_t
 
_body
;

118 ˛as†
	cHEAD
: 
public
 
HTTP
 {

119 
public
:

121 
HEAD
(c⁄° 
°d
::
°rög
& 
uæ_¨g
) :

122 
HTTP
(
uæ_¨g
)

126 
boﬁ
 
execuã
();

128 
	g¥iv©e
:

	@libtest/is_local.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

41 
«me•a˚
 
	glibã°
 {

43 
boﬁ
 
ã°_is_loˇl
()

45  (
gëív
("LIBTEST_LOCAL"));

48 
boﬁ
 
	g_is_massive

Ál£
;

49 
is_massive
(
boﬁ
 
¨g
)

51 
	g_is_massive

¨g
;

54 
boﬁ
 
is_massive
()

56  
	g_is_massive
;

	@libtest/is_local.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 
LIBTEST_API


42 
boﬁ
 
ã°_is_loˇl
();

44 
LIBTEST_API


45 
is_massive
(
boﬁ
);

47 
LIBTEST_API


48 
boﬁ
 
is_massive
();

	@libtest/is_pid.hpp

37 #¥agm®
⁄˚


39 
ölöe
 
boﬁ
 
	$is_pid_vÆid
(c⁄° 
pid_t
 
pid
)

41  (
pid
 > 1Ë? 
åue
 : 
Ál£
;

42 
	}
}

	@libtest/killpid.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<c°dlib
>

41 
	~<c°rög
>

42 
	~<io°ªam
>

43 
	~<s°ªam
>

44 
	~<sig«l.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/waô.h
>

50 
	~<libã°/kûÕid.h
>

51 
	~<libã°/°ªam.h
>

53 
usög
 
«me•a˚
 
	glibã°
;

55 
boﬁ
 
	$kûl_pid
(
pid_t
 
pid_¨g
)

57 
	`as£π
(
pid_¨g
 > 0);

58 i‡(
pid_¨g
 < 1)

60 
Eº‹
 << "InvÆidÖid:" << 
pid_¨g
;

61  
Ál£
;

64 i‡((::
	`kûl
(
pid_¨g
, 
SIGTERM
) == -1))

66 
î∫o
)

68 
EPERM
:

69 
Eº‹
 << "D€†some⁄êñ£ havê®¥o˚s†ru¬ögÜoˇŒy f‹ " << (
pid_¨g
) << "?";

70  
Ál£
;

72 
ESRCH
:

73 
Eº‹
 << "Pro˚s†" << (
pid_¨g
) << "Çot found.";

74  
Ál£
;

77 
EINVAL
:

78 
Eº‹
 << "kûl(Ë" << 
	`°ªº‹
(
î∫o
);

79  
Ál£
;

84 
uöt32_t
 
this_waô
= 0;

85 
uöt32_t
 
timeout
= 20;

86 
uöt32_t
 
waôed
;

87 
uöt32_t
 
ªåy
;

89 
waôed
0, 
ªåy
1; ;Ñëry++, waôed+
this_waô
)

91 
°©us
= 0;

92 i‡(
	`waôpid
(
pid_¨g
, &
°©us
, 
WNOHANG
) == 0)

96 i‡(
î∫o
 =
ECHILD
)

101 i‡(
waôed
 >
timeout
)

104 
	`kûl
(
pid_¨g
, 
SIGKILL
);

108 
this_waô

ªåy
 *Ñetry / 3 + 1;

109 
libã°
::
	`dªam
(
this_waô
, 0);

113  
åue
;

114 
	}
}

116 
boﬁ
 
check_pid
(c⁄° 
°d
::
°rög
 &
fûíame
)

118 i‡(
fûíame
.
em±y
())

120  
Ál£
;

123 
FILE
 *
	gÂ
;

124 i‡((
	gÂ

f›í
(
fûíame
.
c_°r
(), "r")))

126 
	glibã°
::
vch¨_t
 
pid_buf„r
;

127 
	gpid_buf„r
.
ªsize
(1024);

129 *
	g±r

fgës
(&
pid_buf„r
[0], ’id_buf„r.
size
()), 
Â
);

130 
f˛o£
(
Â
);

132 i‡(
	g±r
)

134 
pid_t
 
	gpid
’id_t)
©oi
(&
pid_buf„r
[0]);

135 i‡(
	gpid
 > 0)

137  (::
kûl
(
pid
, 0) == 0);

142  
	gÁl£
;

146 
boﬁ
 
kûl_fûe
(c⁄° 
°d
::
°rög
 &
fûíame
)

148 i‡(
fûíame
.
em±y
())

150  
åue
;

153 
FILE
 *
	gÂ
;

154 i‡((
	gÂ

f›í
(
fûíame
.
c_°r
(), "r")))

156 
	glibã°
::
vch¨_t
 
pid_buf„r
;

157 
	gpid_buf„r
.
ªsize
(1024);

159 *
	g±r

fgës
(&
pid_buf„r
[0], ’id_buf„r.
size
()), 
Â
);

160 
f˛o£
(
Â
);

162 i‡(
	g±r
)

164 
pid_t
 
	gpid
’id_t)
©oi
(&
pid_buf„r
[0]);

165 i‡(
	gpid
 != 0)

167 
boﬁ
 
ªt

kûl_pid
(
pid
);

168 
u∆ök
(
fûíame
.
c_°r
());

170  
	gªt
;

175  
	gÁl£
;

178 
	#STRINGIFY
(
x
Ë#x

	)

179 
	#TOSTRING
(
x
Ë
	`STRINGIFY
(x)

	)

180 
	#LIBTEST_AT
 
__FILE__
 ":" 
	`TOSTRING
(
__LINE__
)

	)

182 
pid_t
 
gë_pid_‰om_fûe
(c⁄° 
°d
::
°rög
 &
fûíame
, std::
°rög°ªam
& 
îr‹_mesßge
)

184 
pid_t
 
ªt
= -1;

186 i‡(
	gfûíame
.
em±y
())

188 
	gîr‹_mesßge
 << 
	gLIBTEST_AT
 << "ÉmptyÖid file";

189  
	gªt
;

192 
FILE
 *
	gÂ
;

193 i‡((
	gÂ

f›í
(
fûíame
.
c_°r
(), "r")))

195 
	glibã°
::
vch¨_t
 
pid_buf„r
;

196 
	gpid_buf„r
.
ªsize
(1024);

198 *
	g±r

fgës
(&
pid_buf„r
[0], ’id_buf„r.
size
()), 
Â
);

199 i‡(
	g±r
)

201 
	gªt
(
pid_t
)
©oi
(&
pid_buf„r
[0]);

202 i‡(
	gªt
 < 1)

204 
	gîr‹_mesßge
 << 
	gLIBTEST_AT
 << " InvÆidÖid wa†ªad from fûê" << 
	gfûíame
;

209 
	gîr‹_mesßge
 << 
	gLIBTEST_AT
 << " Fûê" << 
	gfûíame
 << " wasÉmpty ";

212 
f˛o£
(
Â
);

214  
	gªt
;

218 
	glibã°
::
vch¨_t
 
buf„r
;

219 
	gbuf„r
.
ªsize
(1024);

220 *
	gcuºít_dúe˘‹y

gëcwd
(&
buf„r
[0], buf„r.
size
());

221 
	gîr‹_mesßge
 << "Eº‹ whûê›íög " << 
	gcuºít_dúe˘‹y
 << "/" << 
	gfûíame
 << " " << 
°ªº‹
(
î∫o
);

224  
	gªt
;

	@libtest/killpid.h

37 #¥agm®
⁄˚


40 
boﬁ
 
kûl_pid
(
pid_t
 
pid_¨g
);

42 
boﬁ
 
kûl_fûe
(c⁄° 
°d
::
°rög
 &
fûíame
);

44 
boﬁ
 
check_pid
(c⁄° 
°d
::
°rög
 &
fûíame
);

46 
pid_t
 
gë_pid_‰om_fûe
(c⁄° 
°d
::
°rög
 &
fûíame
, std::
°rög°ªam
& 
îr‹_mesßge
);

48 
ölöe
 
boﬁ
 
	$check_pid
(
pid_t
 
pid_¨g
)

50  (
pid_¨g
 > 1);

51 
	}
}

	@libtest/libtool.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

39 
	~<°rög
>

41 
	g_libtoﬁ
[1024]= { 0 };

43 
«me•a˚
 
	glibã°
 {

45 c⁄° *
libtoﬁ
()

47 i‡(
	g_libtoﬁ
[0] == 0)

49 
°d
::
°rög
 
libtoﬁ_buf„r
;

50 i‡(
gëív
("PWD"))

52 
	glibtoﬁ_buf„r
+
gëív
("PWD");

53 
	glibtoﬁ_buf„r
+= "/";

57 
	glibtoﬁ_buf„r
+= "./";

60 
	glibtoﬁ_buf„r
+= "libtool";

61 i‡(
ac˚ss
(
libtoﬁ_buf„r
.
c_°r
(), 
R_OK
 | 
W_OK
 | 
X_OK
))

63 
	gEº‹
 << "CouldÇŸ födÜibtoﬁ vüác˚ss(" << 
	glibtoﬁ_buf„r
 << "Ë:" << 
°ªº‹
(
î∫o
);

64  
	gNULL
;

67 
¢¥ötf
(
_libtoﬁ
, (_libtoﬁ), "%s", 
libtoﬁ_buf„r
.
c_°r
());

70  
	g_libtoﬁ
;

	@libtest/libtool.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 c⁄° *
libtoﬁ
();

	@libtest/lite.h

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


40 
	~<c°d¨g
>

41 
	~<c°ddef
>

42 
	~<c°dio
>

43 
	~<c°dlib
>

44 
	~<c°rög
>

46 
	~<°d¨g.h
>

47 
	~<°dboﬁ.h
>

48 
	~<°ddef.h
>

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 
	~<°rög.h
>

54 #i‡
deföed
(
_WIN32
)

55 
	~<mÆloc.h
>

57 
	~<Æloˇ.h
>

60 #i‚de‡
__PRETTY_FUNCTION__


61 
	#__PRETTY_FUNCTION__
 
__func__


	)

64 #i‚de‡
EXIT_SKIP


65 
	#EXIT_SKIP
 77

	)

68 #i‚de‡
YATL_FULL


69 
	#YATL_FULL
 0

	)

72 #i‚de‡
FAIL


73 
	#FAIL
(
__mesßge_f‹m©
, ...)

	)

76 #i‚de‡
SKIP


77 
	#SKIP
(
__mesßge_f‹m©
, ...)

	)

80 
ölöe
 
boﬁ
 
	$vÆgröd_is_ˇŒî
()

82 i‡(
	`gëív
("TESTS_ENVIRONMENT"Ë&& 
	`°r°r
(getenv("TESTS_ENVIRONMENT"), "valgrind"))

84  
åue
;

87  
Ál£
;

88 
	}
}

90 
ölöe
 
size_t
 
	$y©l_°æí
(c⁄° *
s
)

92 i‡(
s
)

94  
	`°æí
(
s
);

97  (
size_t
)(0);

98 
	}
}

100 
ölöe
 
	$y©l_°rcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 *
s1_Àngth
, size_à*
s2_Àngth
)

102 *
s1_Àngth

	`y©l_°æí
(
s1
);

103 *
s2_Àngth

	`y©l_°æí
(
s2
);

105 i‡(*
s1_Àngth
 =0 && *s1_Àngth =*
s2_Àngth
)

110 i‡(*
s1_Àngth
 =0 && *
s2_Àngth
)

115 i‡(*
s1_Àngth
 && *
s2_Àngth
 == 0)

120  
	`°rcmp
(
s1
, 
s2
);

121 
	}
}

123 
	#SKIP_IF
(
__ex¥essi⁄
) \

126 i‡((
__ex¥essi⁄
)) { \

127 i‡(
YATL_FULL
) { \

128 
	`SKIP
(#__expression); \

130 
	`Ârötf
(
°dout
, "\n%s:%d: %†SKIP '!(%s)'\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__expression); \

131 
	`exô
(
EXIT_SKIP
); \

133 } 0)

	)

135 
	#SKIP_IF_
(
__ex¥essi⁄
, ...) \

138 i‡((
__ex¥essi⁄
)) { \

139 
size_t
 
ask

	`¢¥ötf
(0, 0, 
__VA_ARGS__
); \

140 
ask
++; \

141 *
buf„r
(*)
	`Æloˇ
((Ë* 
ask
); \

142 
	`¢¥ötf
(
buf„r
, 
ask
, 
__VA_ARGS__
); \

143 i‡(
YATL_FULL
) { \

144 
	`SKIP
(#__ex¥essi⁄, 
buf„r
); \

146 
	`Ârötf
(
°dout
, "\n%s:%d: %†SKIP '%s' [ %†]\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__ex¥essi⁄, 
buf„r
); \

147 
	`exô
(
EXIT_SKIP
); \

149 } 0)

	)

151 
	#ASSERT_TRUE
(
__ex¥essi⁄
) \

154 i‡(! (
__ex¥essi⁄
)) { \

155 i‡(
YATL_FULL
) { \

156 
	`FAIL
("Assertion '%s'", #__expression); \

158 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%s'\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__expression);\

159 
	`exô
(
EXIT_FAILURE
); \

161 } 0)

	)

163 
	#ASSERT_FALSE
(
__ex¥essi⁄
) \

166 i‡((
__ex¥essi⁄
)) { \

167 i‡(
YATL_FULL
) { \

168 
	`FAIL
("Assertion '!%s'", #__expression); \

170 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '!%s'\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__expression);\

171 
	`exô
(
EXIT_FAILURE
); \

173 } 0)

	)

175 
	#ASSERT_NULL_
(
__ex¥essi⁄
, ...) \

178 i‡((
__ex¥essi⁄
Ë!
NULL
) { \

179 
size_t
 
ask

	`¢¥ötf
(0, 0, 
__VA_ARGS__
); \

180 
ask
++; \

181 *
buf„r
(*)
	`Æloˇ
((Ë* 
ask
); \

182 
	`¢¥ötf
(
buf„r
, 
ask
, 
__VA_ARGS__
); \

183 i‡(
YATL_FULL
) { \

184 
	`FAIL
("As£πi⁄ '%s' !NULL [ %†]", #__ex¥essi⁄, 
buf„r
);\

186 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%s' !NULL [ %†]\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__ex¥essi⁄, 
buf„r
);\

187 
	`exô
(
EXIT_FAILURE
); \

189 } 0)

	)

191 
	#ASSERT_NOT_NULL
(
__ex¥essi⁄
) \

194 i‡((
__ex¥essi⁄
Ë=
NULL
) { \

195 i‡(
YATL_FULL
) { \

196 
	`FAIL
("Assertion '%s' == NULL", #__expression,);\

198 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%s' =NULL\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__expression,);\

199 
	`exô
(
EXIT_FAILURE
); \

201 } 0)

	)

203 
	#ASSERT_NOT_NULL_
(
__ex¥essi⁄
, ...) \

206 i‡((
__ex¥essi⁄
Ë=
NULL
) { \

207 
size_t
 
ask

	`¢¥ötf
(0, 0, 
__VA_ARGS__
); \

208 
ask
++; \

209 *
buf„r
(*)
	`Æloˇ
((Ë* 
ask
); \

210 
	`¢¥ötf
(
buf„r
, 
ask
, 
__VA_ARGS__
); \

211 i‡(
YATL_FULL
) { \

212 
	`FAIL
("As£πi⁄ '%s' =NULL [ %†]", #__ex¥essi⁄, 
buf„r
);\

214 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%s' =NULL [ %†]\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__ex¥essi⁄, 
buf„r
);\

215 
	`exô
(
EXIT_FAILURE
); \

217 } 0)

	)

219 
	#ASSERT_TRUE_
(
__ex¥essi⁄
, ...) \

222 i‡(! (
__ex¥essi⁄
)) { \

223 
size_t
 
ask

	`¢¥ötf
(0, 0, 
__VA_ARGS__
); \

224 
ask
++; \

225 *
buf„r
(*)
	`Æloˇ
((Ë* 
ask
); \

226 
	`¢¥ötf
(
buf„r
, 
ask
, 
__VA_ARGS__
); \

227 i‡(
YATL_FULL
) { \

228 
	`FAIL
("As£πi⁄ '%s' [ %†]", #__ex¥essi⁄, 
buf„r
); \

230 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%s' [ %†]\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__ex¥essi⁄, 
buf„r
); \

231 
	`exô
(
EXIT_FAILURE
); \

233 } 0)

	)

235 
	#ASSERT_EQ
(
__ex≥˘ed
, 
__a˘uÆ
) \

238 i‡((
__ex≥˘ed
Ë!(
__a˘uÆ
)) { \

239 i‡(
YATL_FULL
) { \

240 
	`FAIL
("Assertion '%s' != '%s'", #__expected, #__actual); \

242 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%s' !'%s'\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__expected, #__actual); \

243 
	`exô
(
EXIT_FAILURE
); \

245 } 0)

	)

247 
	#ASSERT_EQ_
(
__ex≥˘ed
, 
__a˘uÆ
, ...) \

250 i‡((
__ex≥˘ed
Ë!(
__a˘uÆ
)) { \

251 
size_t
 
ask

	`¢¥ötf
(0, 0, 
__VA_ARGS__
); \

252 
ask
++; \

253 *
buf„r
(*)
	`Æloˇ
((Ë* 
ask
); \

254 
	`¢¥ötf
(
buf„r
, 
ask
, 
__VA_ARGS__
); \

255 i‡(
YATL_FULL
) { \

256 
	`FAIL
("As£πi⁄ '%s' !'%s' [ %†]", #__ex≥˘ed, #__a˘uÆ, 
buf„r
); \

258 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%s' !'%s' [ %†]\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__ex≥˘ed, #__a˘uÆ, 
buf„r
); \

259 
	`exô
(
EXIT_FAILURE
); \

261 } 0)

	)

263 
	#ASSERT_STREQ
(
__ex≥˘ed_°r
, 
__a˘uÆ_°r
) \

266 
size_t
 
__ex≥˘ed_Àngth
; \

267 
size_t
 
__a˘uÆ_Àngth
; \

268 
ªt

	`y©l_°rcmp
(
__ex≥˘ed_°r
, 
__a˘uÆ_°r
, &
__ex≥˘ed_Àngth
, &
__a˘uÆ_Àngth
); \

269 i‡(
ªt
) { \

270 i‡(
YATL_FULL
) { \

271 
	`FAIL
("Assertion '%.*s' != '%.*s'\n", \

272 ()(
__ex≥˘ed_Àngth
), (
__ex≥˘ed_°r
), \

273 ()
__a˘uÆ_Àngth
, (
__a˘uÆ_°r
)) ; \

275 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%.*s' !'%.*s'\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, \

276 ()(
__ex≥˘ed_Àngth
), (
__ex≥˘ed_°r
), \

277 ()
__a˘uÆ_Àngth
, (
__a˘uÆ_°r
)) ; \

278 
	`exô
(
EXIT_FAILURE
); \

280 } 0)

	)

282 
	#ASSERT_STREQ_
(
__ex≥˘ed_°r
, 
__a˘uÆ_°r
, ...) \

285 
size_t
 
__ex≥˘ed_Àngth
; \

286 
size_t
 
__a˘uÆ_Àngth
; \

287 
ªt

	`y©l_°rcmp
(
__ex≥˘ed_°r
, 
__a˘uÆ_°r
, &
__ex≥˘ed_Àngth
, &
__a˘uÆ_Àngth
); \

288 i‡(
ªt
) { \

289 
size_t
 
ask

	`¢¥ötf
(0, 0, 
__VA_ARGS__
); \

290 
ask
++; \

291 *
buf„r
(*)
	`Æloˇ
((Ë* 
ask
); \

292 
ask

	`¢¥ötf
(
buf„r
,ásk, 
__VA_ARGS__
); \

293 i‡(
YATL_FULL
) { \

294 
	`FAIL
("Assertion '%.*s' != '%.*s' [ %.*s ]", \

295 ()(
__ex≥˘ed_Àngth
), (
__ex≥˘ed_°r
), \

296 ()(
__a˘uÆ_Àngth
), (
__a˘uÆ_°r
), \

297 ()(
ask
), 
buf„r
); \

299 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%.*s' !'%.*s' [ %.*†]\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, \

300 ()(
__ex≥˘ed_Àngth
), (
__ex≥˘ed_°r
), \

301 ()(
__a˘uÆ_Àngth
), (
__a˘uÆ_°r
), \

302 ()(
ask
), 
buf„r
); \

303 
	`exô
(
EXIT_FAILURE
); \

305 } 0)

	)

307 
	#ASSERT_STRNE
(
__ex≥˘ed_°r
, 
__a˘uÆ_°r
) \

310 
size_t
 
__ex≥˘ed_Àngth
; \

311 
size_t
 
__a˘uÆ_Àngth
; \

312 
ªt

	`y©l_°rcmp
(
__ex≥˘ed_°r
, 
__a˘uÆ_°r
, &
__ex≥˘ed_Àngth
, &
__a˘uÆ_Àngth
); \

313 i‡(
ªt
 == 0) { \

314 i‡(
YATL_FULL
) { \

315 
	`FAIL
("Assertion '%.*s' == '%.*s'", \

316 ()(
__ex≥˘ed_Àngth
), (
__ex≥˘ed_°r
), \

317 ()
__a˘uÆ_Àngth
, (
__a˘uÆ_°r
)) ; \

319 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%.*s' ='%.*s'\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, \

320 ()(
__ex≥˘ed_Àngth
), (
__ex≥˘ed_°r
), \

321 ()
__a˘uÆ_Àngth
, (
__a˘uÆ_°r
)) ; \

322 
	`exô
(
EXIT_FAILURE
); \

324 } 0)

	)

326 
	#ASSERT_STRNE_
(
__ex≥˘ed_°r
, 
__a˘uÆ_°r
, ...) \

329 
size_t
 
__ex≥˘ed_Àngth
; \

330 
size_t
 
__a˘uÆ_Àngth
; \

331 
ªt

	`y©l_°rcmp
(
__ex≥˘ed_°r
, 
__a˘uÆ_°r
, &
__ex≥˘ed_Àngth
, &
__a˘uÆ_Àngth
); \

332 i‡(
ªt
 == 0) { \

333 
size_t
 
ask

	`¢¥ötf
(0, 0, 
__VA_ARGS__
); \

334 
ask
++; \

335 *
buf„r
(*)
	`Æloˇ
((Ë* 
ask
); \

336 
ask

	`¢¥ötf
(
buf„r
,ásk, 
__VA_ARGS__
); \

337 i‡(
YATL_FULL
) { \

338 
	`FAIL
("Assertion '%.*s' == '%.*s' [ %.*s ]", \

339 ()(
__ex≥˘ed_Àngth
), (
__ex≥˘ed_°r
), \

340 ()(
__a˘uÆ_Àngth
), (
__a˘uÆ_°r
), \

341 ()(
ask
), 
buf„r
); \

343 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%.*s' ='%.*s' [ %.*†]\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, \

344 ()(
__ex≥˘ed_Àngth
), (
__ex≥˘ed_°r
), \

345 ()(
__a˘uÆ_Àngth
), (
__a˘uÆ_°r
), \

346 ()(
ask
), 
buf„r
); \

347 
	`exô
(
EXIT_FAILURE
); \

349 } 0)

	)

351 
	#ASSERT_NEQ
(
__ex≥˘ed
, 
__a˘uÆ
) \

354 i‡((
__ex≥˘ed
Ë=(
__a˘uÆ
)) { \

355 i‡(
YATL_FULL
) { \

356 
	`FAIL
("Assertion '%s' == '%s'", #__expected, #__actual); \

358 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%s' ='%s'\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__expected, #__actual); \

359 
	`exô
(
EXIT_FAILURE
); \

361 } 0)

	)

363 
	#ASSERT_NEQ_
(
__ex≥˘ed
, 
__a˘uÆ
, ...) \

366 i‡((
__ex≥˘ed
Ë=(
__a˘uÆ
)) { \

367 
size_t
 
ask

	`¢¥ötf
(0, 0, 
__VA_ARGS__
); \

368 
ask
++; \

369 *
buf„r
(*)
	`Æloˇ
((Ë* 
ask
); \

370 
	`¢¥ötf
(
buf„r
, 
ask
, 
__VA_ARGS__
); \

371 i‡(
YATL_FULL
) { \

372 
	`FAIL
("As£πi⁄ '%s' ='%s' [ %†]", #__ex≥˘ed, #__a˘uÆ, 
buf„r
); \

374 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '%s' ='%s' [ %†]\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__ex≥˘ed, #__a˘uÆ, 
buf„r
); \

375 
	`exô
(
EXIT_FAILURE
); \

377 } 0)

	)

379 
	#ASSERT_FALSE_
(
__ex¥essi⁄
, ...) \

382 i‡((
__ex¥essi⁄
)) { \

383 
size_t
 
ask

	`¢¥ötf
(0, 0, 
__VA_ARGS__
); \

384 
ask
++; \

385 *
buf„r
(*)
	`Æloˇ
((Ë* 
ask
); \

386 
	`¢¥ötf
(
buf„r
, 
ask
, 
__VA_ARGS__
); \

387 i‡(
YATL_FULL
) { \

388 
	`FAIL
("As£πi⁄ '!%s' [ %†]", #__ex¥essi⁄, 
buf„r
); \

390 
	`Ârötf
(
°dîr
, "\n%s:%d: %†As£πi⁄ '!%s' [ %†]\n", 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #__ex¥essi⁄, 
buf„r
); \

391 
	`exô
(
EXIT_FAILURE
); \

393 } 0)

	)

	@libtest/main.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<ˇs£π
>

41 
	~<c°dlib
>

42 
	~<c°rög
>

43 
	~<˘ime
>

44 
	~<‚m©ch.h
>

45 
	~<io°ªam
>

46 
	~<f°ªam
>

47 
	~<mem‹y
>

48 
	~<sys/°©.h
>

49 
	~<sys/time.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<sys/waô.h
>

52 
	~<uni°d.h
>

54 
	~<sig«l.h
>

56 #i‚de‡
__INTEL_COMPILER


57 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

60 
usög
 
«me•a˚
 
	glibã°
;

62 
°©s_¥öt
(
libã°
::
Fømew‹k
 *
‰ame
)

64 i‡(
‰ame
->
Áûed
(Ë=0 
™d
 føme->
suc˚ss
() == 0)

69 
Ouä
();

70 
	gOut
 << "CﬁÀ˘i⁄s\t\t\t\t\t" << 
	g‰ame
->
tŸÆ
();

71 
	gOut
 << "\tFaûed\t\t\t\t\t" << 
	g‰ame
->
Áûed
();

72 
	gOut
 << "\tSkù≥d\t\t\t\t\t" << 
	g‰ame
->
skù≥d
();

73 
	gOut
 << "\tSuc˚eded\t\t\t\t" << 
	g‰ame
->
suc˚ss
();

74 
Ouä
();

75 
	gOut
 << "Te°s\t\t\t\t\t" << 
	g‰ame
->
sum_tŸÆ
();

76 
	gOut
 << "\tFaûed\t\t\t\t" << 
	g‰ame
->
sum_Áûed
();

77 
	gOut
 << "\tSkù≥d\t\t\t\t" << 
	g‰ame
->
sum_skù≥d
();

78 
	gOut
 << "\tSuc˚eded\t\t\t" << 
	g‰ame
->
sum_suc˚ss
();

81 
	~<gë›t.h
>

82 
	~<uni°d.h
>

84 
	$maö
(
¨gc
, *
¨gv
[])

86 
boﬁ
 
›t_massive

Ál£
;

87 
›t_ª≥©
= 1;

88 
boﬁ
 
›t_quõt

Ál£
;

89 
°d
::
°rög
 
cﬁÀ˘i⁄_to_run
;

90 
°d
::
°rög
 
wûdˇrd
;

91 
°d
::
°rög
 
bö¨y_«me
;

93 c⁄° *
ju°_fûíame

	`rödex
(
¨gv
[0], '/');

94 i‡(
ju°_fûíame
)

96 
ju°_fûíame
++;

100 
ju°_fûíame

¨gv
[0];

103 i‡(
ju°_fûíame
[0] ='l' 
™d
 just_filename[1] == 't'ánd just_filename[2] == '-')

105 
ju°_fûíame
+= 3;

107 
bö¨y_«me
.
	`≠≥nd
(
ju°_fûíame
);

113 #i‡
	`deföed
(
TARGET_OS_OSX
) && TARGET_OS_OSX

114 i‡(
	`vÆgröd_is_ˇŒî
())

116  
EXIT_SKIP
;

122 
	el⁄g_›ti⁄_t
 {

123 
OPT_LIBYATL_VERSION
,

124 
OPT_LIBYATL_MATCH_COLLECTION
,

125 
OPT_LIBYATL_MASSIVE
,

126 
OPT_LIBYATL_QUIET
,

127 
OPT_LIBYATL_MATCH_WILDCARD
,

128 
OPT_LIBYATL_REPEAT


131 
›ti⁄
 
l⁄g_›ti⁄s
[]=

133 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_LIBYATL_VERSION
 },

134 { "quõt", 
no_¨gumít
, 
NULL
, 
OPT_LIBYATL_QUIET
 },

135 { "ª≥©", 
ªquúed_¨gumít
, 
NULL
, 
OPT_LIBYATL_REPEAT
 },

136 { "cﬁÀ˘i⁄", 
ªquúed_¨gumít
, 
NULL
, 
OPT_LIBYATL_MATCH_COLLECTION
 },

137 { "wûdˇrd", 
ªquúed_¨gumít
, 
NULL
, 
OPT_LIBYATL_MATCH_WILDCARD
 },

138 { "massive", 
no_¨gumít
, 
NULL
, 
OPT_LIBYATL_MASSIVE
 },

142 
›ti⁄_ödex
= 0;

145 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

146 i‡(
›ti⁄_rv
 == -1)

151 
›ti⁄_rv
)

153 
OPT_LIBYATL_VERSION
:

156 
OPT_LIBYATL_QUIET
:

157 
›t_quõt

åue
;

160 
OPT_LIBYATL_REPEAT
:

161 
î∫o
= 0;

162 
›t_ª≥©

	`°πoul
(
›èrg
, (**Ë
NULL
, 10);

163 i‡(
î∫o
 != 0)

165 
Eº‹
 << "unknow¿vÆuê∑s£dÅÿ--ª≥©: `" << 
›èrg
 << "`";

166 
	`exô
(
EXIT_FAILURE
);

171 
OPT_LIBYATL_MATCH_COLLECTION
:

172 
cﬁÀ˘i⁄_to_run

›èrg
;

175 
OPT_LIBYATL_MATCH_WILDCARD
:

176 
wûdˇrd

›èrg
;

179 
OPT_LIBYATL_MASSIVE
:

180 
›t_massive

åue
;

185 
Eº‹
 << "unknown optionÅo getopt_long()";

186 
	`exô
(
EXIT_FAILURE
);

194 
	`§™dom
(()
	`time
(
NULL
));

196 
î∫o
= 0;

197 i‡(
	`boﬁ
(
	`gëív
("YATL_REPEAT")))

199 
î∫o
= 0;

200 
›t_ª≥©

	`°πoul
(
	`gëív
("YATL_REPEAT"), (**Ë
NULL
, 10);

201 i‡(
î∫o
 != 0)

203 
Eº‹
 << "ENV YATL_REPEATÖas£dá¿övÆid vÆue: `" << 
	`gëív
("YATL_REPEAT") << "`";

204 
	`exô
(
EXIT_FAILURE
);

208 i‡((
	`boﬁ
(
	`gëív
("YATL_QUIET")Ë
	`™d
 (
	`°rcmp
(gëív("YATL_QUIET"), "0"Ë=0)Ë
‹
 
›t_quõt
)

210 
›t_quõt

åue
;

212 i‡(
	`gëív
("JENKINS_URL"))

214 i‡(
	`boﬁ
(
	`gëív
("YATL_QUIET")Ë
	`™d
 (
	`°rcmp
(getenv("YATL_QUIET"), "1") == 0))

218 
›t_quõt

åue
;

222 i‡((
	`boﬁ
(
	`gëív
("YATL_RUN_MASSIVE_TESTS"))Ë
‹
 
›t_massive
)

224 
›t_massive

åue
;

227 i‡(
›t_quõt
)

229 
	`˛o£
(
STDOUT_FILENO
);

232 i‡(
›t_massive
)

234 
	`is_massive
(
›t_massive
);

237 
libã°
::
vch¨_t
 
tmp_dúe˘‹y
;

238 
tmp_dúe˘‹y
.
	`ªsize
(1024);

239 i‡(
	`gëív
("LIBTEST_TMP"))

241 
	`¢¥ötf
(&
tmp_dúe˘‹y
[0],Åmp_dúe˘‹y.
	`size
(), "%s", 
	`gëív
("LIBTEST_TMP"));

245 
	`¢¥ötf
(&
tmp_dúe˘‹y
[0],Åmp_dúe˘‹y.
	`size
(), "%s", 
LIBTEST_TEMP
);

248 i‡(
	`chdú
(&
tmp_dúe˘‹y
[0]) == -1)

250 
libã°
::
vch¨_t
 
gëcwd_buf„r
;

251 
gëcwd_buf„r
.
	`ªsize
(1024);

252 *
dú

	`gëcwd
(&
gëcwd_buf„r
[0], gëcwd_buf„r.
	`size
());

254 
Eº‹
 << "U«bÀÅÿchdú(Ë‰om " << 
dú
 << "Åÿ" << &
tmp_dúe˘‹y
[0] << "Éºno:" << 
	`°ªº‹
(
î∫o
);

255  
EXIT_FAILURE
;

258 i‡(
libã°
::
	`libtoﬁ
(Ë=
NULL
)

260 
Eº‹
 << "FailedÅoÜocateÜibtool";

261  
EXIT_FAILURE
;

264 i‡(
	`gëív
("YATL_COLLECTION_TO_RUN"))

266 i‡(
	`°æí
(
	`gëív
("YATL_COLLECTION_TO_RUN")))

268 
cﬁÀ˘i⁄_to_run

	`gëív
("YATL_COLLECTION_TO_RUN");

272 i‡(
cﬁÀ˘i⁄_to_run
.
	`com∑ª
("none") == 0)

274  
EXIT_SUCCESS
;

277 i‡(
cﬁÀ˘i⁄_to_run
.
	`em±y
(Ë=
Ál£
)

279 
Out
 << "O∆yÅe°ög " << 
cﬁÀ˘i⁄_to_run
;

282 
exô_code
;

284 
åy


288 
exô_code

EXIT_SUCCESS
;

289 
	`Áèl_as£π
(
	`sigign‹e
(
SIGPIPE
) == 0);

291 
libã°
::
Sig«lThªad
 
sig«l
;

292 i‡(
sig«l
.
	`£tup
(Ë=
Ál£
)

294 
Eº‹
 << "FailedÅo setup signals";

295  
EXIT_FAILURE
;

298 
°d
::
auto_±r
<
libã°
::
Fømew‹k
> 
	`‰ame
(
√w
Üibã°::
	`Fømew‹k
(
sig«l
, 
bö¨y_«me
, 
cﬁÀ˘i⁄_to_run
, 
wûdˇrd
));

301 
åy


303 
‰ame
->
	`¸óã
())

305 
TEST_SUCCESS
:

308 
TEST_SKIPPED
:

309  
EXIT_SKIP
;

311 
TEST_FAILURE
:

312 
°d
::
˚º
 << "CouldÇŸ cÆ»‰ame->¸óã()" << std::
ídl
;

313  
EXIT_FAILURE
;

316 
	`ˇtch
 (c⁄° 
libã°
::
__skù≥d
& 
e
)

318  
EXIT_SKIP
;

321 
‰ame
->
	`exec
();

323 i‡(
sig«l
.
	`is_shutdown
(Ë=
Ál£
)

325 
sig«l
.
	`£t_shutdown
(
SHUTDOWN_GRACEFUL
);

328 
shutdown_t
 
°©us

sig«l
.
	`gë_shutdown
();

329 i‡(
°©us
 =
SHUTDOWN_FORCED
)

331 
Out
 << "Tests wereáborted.";

332 
exô_code

EXIT_FAILURE
;

334 i‡(
‰ame
->
	`Áûed
())

336 
Out
 << "SomeÅest failed.";

337 
exô_code

EXIT_FAILURE
;

339 i‡(
‰ame
->
	`skù≥d
(Ë
™d
 føme->
	`Áûed
(Ë™d føme->
	`suc˚ss
())

341 
Out
 << "SomeÅests were skipped.";

343 i‡(
‰ame
->
	`suc˚ss
(Ë
	`™d
 (‰ame->
	`Áûed
() == 0))

345 
Out
;

346 
Out
 << "AllÅests completed successfully.";

349 
	`°©s_¥öt
(
‰ame
.
	`gë
());

351 
°d
::
of°ªam
 
xml_fûe
;

352 
°d
::
°rög
 
fûe_«me
;

353 
fûe_«me
.
	`≠≥nd
(&
tmp_dúe˘‹y
[0]);

354 
fûe_«me
.
	`≠≥nd
(
‰ame
->
	`«me
());

355 
fûe_«me
.
	`≠≥nd
(".xml");

356 
xml_fûe
.
	`›í
(
fûe_«me
.
	`c_°r
(), 
°d
::
ios
::
åunc
);

357 
libã°
::
F‹m©ãr
::
	`xml
(*
‰ame
, 
xml_fûe
);

359 
	`Ouä
();

360 } 
exô_code
 =
EXIT_SUCCESS
 
™d
 --
›t_ª≥©
);

362 
	`ˇtch
 (c⁄° 
libã°
::
__skù≥d
& 
e
)

364  
EXIT_SKIP
;

366 
	`ˇtch
 (c⁄° 
libã°
::
__Áûuª
& 
e
)

368 
libã°
::
°ªam
::
	`make_cout
(
e
.
	`fûe
(),É.
	`löe
(),É.
	`func
()Ë<<É.
	`wh©
();

369 
exô_code

EXIT_FAILURE
;

371 
	`ˇtch
 (c⁄° 
libã°
::
Áèl
& 
e
)

373 
°d
::
˚º
 << "FATAL:" << 
e
.
	`wh©
(Ë<< std::
ídl
;

374 
exô_code

EXIT_FAILURE
;

376 
	`ˇtch
 (c⁄° 
libã°
::
disc⁄√˘ed
& 
e
)

378 
°d
::
˚º
 << "Unh™dÀd disc⁄√˘i⁄ occuºed:" << 
e
.
	`wh©
(Ë<< std::
ídl
;

379 
exô_code

EXIT_FAILURE
;

381 
	`ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
e
)

383 
°d
::
˚º
 << "°d::ex˚±i⁄:" << 
e
.
	`wh©
(Ë<< std::
ídl
;

384 
exô_code

EXIT_FAILURE
;

386 
	`ˇtch
 (const*)

388 
°d
::
˚º
 << "Ex˚±i⁄:" << std::
ídl
;

389 
exô_code

EXIT_FAILURE
;

391 
	`ˇtch
 (...)

393 
°d
::
˚º
 << "Unknow¿ex˚±i⁄ hÆãdÉxecuti⁄." << std::
ídl
;

394 
exô_code

EXIT_FAILURE
;

397  
exô_code
;

398 
	}
}

	@libtest/memcached.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~"libã°/comm⁄.h
"

41 
	~<ˇs£π
>

42 
	~<˚ºno
>

43 
	~<c°dio
>

44 
	~<c°dlib
>

45 
	~<c°rög
>

46 
	~<io°ªam
>

47 
	~<sig«l.h
>

48 
	~<sys/ty≥s.h
>

49 
	~<sys/waô.h
>

50 
	~<uni°d.h
>

52 
	~<libã°/£rvî.h
>

53 
	~<libã°/waô.h
>

55 
	~<libã°/memˇched.h
>

57 #i‚de‡
__INTEL_COMPILER


58 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

61 
«me•a˚
 
	glibã°
 {

63 ˛as†
	cMemˇched
 : 
public
 
libã°
::
Sîvî


65 
°d
::
°rög
 
_u£∫ame
;

66 
	g°d
::
°rög
 
_∑ssw‹d
;

68 
	gpublic
:

69 
Memˇched
(c⁄° 
°d
::
°rög
& 
ho°_¨g
,

70 c⁄° 
ö_p‹t_t
 
p‹t_¨g
,

71 c⁄° 
boﬁ
 
is_sockë_¨g
,

72 c⁄° 
°d
::
°rög
& 
u£∫ame_¨g
,

73 c⁄° 
°d
::
°rög
& 
∑ssw‹d_¨g
) :

74 
libã°
::
Sîvî
(
ho°_¨g
, 
p‹t_¨g
,

75 
MEMCACHED_BINARY
, 
Ál£
, 
is_sockë_¨g
),

76 
_u£∫ame
(
u£∫ame_¨g
),

77 
_∑ssw‹d
(
∑ssw‹d_¨g
)

80 
Memˇched
(c⁄° 
°d
::
°rög
& 
ho°_¨g
, c⁄° 
ö_p‹t_t
 
p‹t_¨g
, c⁄° 
boﬁ
 
is_sockë_¨g
) :

81 
libã°
::
Sîvî
(
ho°_¨g
, 
p‹t_¨g
,

82 
MEMCACHED_BINARY
, 
Ál£
, 
is_sockë_¨g
)

84 
£t_pid_fûe
();

87 
vútuÆ
 c⁄° *
ß¶
() const

89  
	gNULL
;

92 c⁄° 
	g°d
::
°rög
& 
∑ssw‹d
() const

94  
_∑ssw‹d
;

97 c⁄° 
	g°d
::
°rög
& 
u£∫ame
() const

99  
_u£∫ame
;

102 
boﬁ
 
waô_f‹_pidfûe
() const

104 
Waô
 
waô
(
pid
(), 4);

106  
	gwaô
.
suc˚ssful
();

109 
boﬁ
 
pög
()

111 i‡(
out_of_b™_kûÀd
())

113  
	gÁl£
;

116 i‡(
is_sockë
())

118  
	g_≠p
.
check
();

121 
Sim∂eClõ¡
 
˛õ¡
(
_ho°«me
, 
_p‹t
);

123 
	g°d
::
°rög
 
ª•⁄£
;

124  
	g˛õ¡
.
£nd_mesßge
("vîsi⁄", 
ª•⁄£
);

127 c⁄° *
«me
()

132 c⁄° *
execuèbÀ
()

134  
	gMEMCACHED_BINARY
;

137 
boﬁ
 
is_libtoﬁ
()

139  
	gÁl£
;

142 
vútuÆ
 
pid_fûe_›ti⁄
(
Aµliˇti⁄
& 
≠p
, c⁄° 
°d
::
°rög
& 
¨g
)

144 i‡(
¨g
.
em±y
(Ë=
Ál£
)

146 
≠p
.
add_›ti⁄
("-P", 
¨g
);

150 c⁄° *
sockë_fûe_›ti⁄
() const

155 
vútuÆ
 
p‹t_›ti⁄
(
Aµliˇti⁄
& 
≠p
, 
ö_p‹t_t
 
¨g
)

157 
	gbuf„r
[30];

158 
¢¥ötf
(
buf„r
, (buf„r), "%d", (
¨g
));

159 
	g≠p
.
add_›ti⁄
("-p", 
buf„r
);

162 
boﬁ
 
has_p‹t_›ti⁄
() const

164  
	gåue
;

167 
boﬁ
 
has_sockë_fûe_›ti⁄
() const

169  
has_sockë
();

172 
sockë_fûe_›ti⁄
(
Aµliˇti⁄
& 
≠p
, c⁄° 
°d
::
°rög
& 
sockë_¨g
)

174 i‡(
sockë_¨g
.
em±y
(Ë=
Ál£
)

176 
≠p
.
add_›ti⁄
("-s", 
sockë_¨g
);

180 
boﬁ
 
brokí_sockë_˛ónup
()

182  
	gåue
;

186 
boﬁ
 
brokí_pid_fûe
()

188  
	gåue
;

191 
boﬁ
 
buûd
();

195 
	~<s°ªam
>

197 
boﬁ
 
	gMemˇched
::
	$buûd
()

199 i‡(
	`gëuid
(Ë=0 
‹
 
	`gëeuid
() == 0)

201 
	`add_›ti⁄
("-u", "root");

204 
	`add_›ti⁄
("-l", "localhost");

205 #ifde‡
__APPLE__


207 
	`add_›ti⁄
("-m", "128");

208 
	`add_›ti⁄
("-M");

211 i‡(
	`ß¶
())

213 
	`add_›ti⁄
(
	`ß¶
());

216  
åue
;

217 
	}
}

219 
	glibã°
::
Sîvî
 *
buûd_memˇched
(c⁄° 
°d
::
°rög
& 
ho°«me
, c⁄° 
ö_p‹t_t
 
åy_p‹t
)

221 i‡(
	gHAVE_MEMCACHED_BINARY
)

223  
√w
 
Memˇched
(
ho°«me
, 
åy_p‹t
, 
Ál£
);

226  
	gNULL
;

229 
	glibã°
::
Sîvî
 *
buûd_memˇched_sockë
(c⁄° 
°d
::
°rög
& 
sockë_fûe
, c⁄° 
ö_p‹t_t
 
åy_p‹t
)

231 i‡(
	gHAVE_MEMCACHED_BINARY
)

233  
√w
 
Memˇched
(
sockë_fûe
, 
åy_p‹t
, 
åue
);

236  
	gNULL
;

	@libtest/memcached.h

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 
	glibã°
::
Sîvî
 *
buûd_memˇched
(c⁄° 
°d
::
°rög
& 
ho°«me
, c⁄° 
ö_p‹t_t
 
åy_p‹t
);

43 
	glibã°
::
Sîvî
 *
buûd_memˇched_sockë
(c⁄° 
°d
::
°rög
& 
sockë_fûe
, c⁄° 
ö_p‹t_t
 
åy_p‹t
);

	@libtest/memcached.hpp

37 #¥agm®
⁄˚


39 #i‡
deföed
(
HAVE_LIBMEMCACHED
) && HAVE_LIBMEMCACHED

40 
ölöe
 
boﬁ
 
	g›î©‹
=(c⁄° 
memˇched_°
& 
memc
, c⁄° 
memˇched_ªtu∫_t
 
	grc
)

42 i‡(
memˇched_œ°_îr‹
(&
memc
Ë=
rc
)

44  
åue
;

47  
	gÁl£
;

50 
ölöe
 
boﬁ
 
	g›î©‹
!(c⁄° 
memˇched_°
& 
memc
, 
memˇched_ªtu∫_t
 
	grc
)

52 i‡(
memˇched_œ°_îr‹
(
c⁄°_ˇ°
<
memˇched_°
 *>(&
memc
)Ë!
rc
)

54  
åue
;

57  
	gÁl£
;

60 
ölöe
 
boﬁ
 
	g›î©‹
=(
memˇched_°
* c⁄° 
memc
, 
memˇched_ªtu∫_t
 
	grc
)

62 i‡(
memˇched_œ°_îr‹
(
memc
Ë=
rc
)

64  
åue
;

67  
	gÁl£
;

70 
ölöe
 
boﬁ
 
	g›î©‹
!(
memˇched_°
* c⁄° 
memc
, 
memˇched_ªtu∫_t
 
	grc
)

72 i‡(
memˇched_œ°_îr‹
(
memc
Ë!
rc
)

74  
åue
;

77  
	gÁl£
;

80 
ölöe
 
boﬁ
 
	g›î©‹
!(
memˇched_ªtu∫_t
 
rc
, c⁄° 
	gmemˇched_°
& 
	gmemc
)

82 i‡(
memˇched_œ°_îr‹
(
c⁄°_ˇ°
<
memˇched_°
 *>(&
memc
)Ë!
rc
)

84  
åue
;

87  
	gÁl£
;

90 
ölöe
 
boﬁ
 
	g›î©‹
!(
memˇched_ªtu∫_t
 
rc
, 
memˇched_°
* c⁄° 
	gmemc
)

92 i‡(
memˇched_œ°_îr‹
(
memc
Ë!
rc
)

94  
åue
;

97  
	gÁl£
;

	@libtest/poll_error.hpp

41 
	~<c°dio
>

42 
	~<pﬁl.h
>

44 
	$¥öt_pﬁl
(
pﬁlfd
& 
fds
)

46 i‡(
fds
.
ªvíts
 & 
POLLERR
)

48 
	`Ârötf
(
°dîr
, "\tPOLLERR\n");

51 i‡(
fds
.
ªvíts
 & 
POLLHUP
)

53 
	`Ârötf
(
°dîr
, "\tPOLLHUP\n");

56 i‡(
fds
.
ªvíts
 & 
POLLIN
)

58 
	`Ârötf
(
°dîr
, "\tPOLLIN\n");

61 i‡(
fds
.
ªvíts
 & 
POLLIN
)

63 
	`Ârötf
(
°dîr
, "\tPOLLIN\n");

66 i‡(
fds
.
ªvíts
 & 
POLLNVAL
)

68 
	`Ârötf
(
°dîr
, "\tPOLLNVAL\n");

71 i‡(
fds
.
ªvíts
 & 
POLLOUT
)

73 
	`Ârötf
(
°dîr
, "\tPOLLOUT\n");

76 i‡(
fds
.
ªvíts
 & 
POLLPRI
)

78 
	`Ârötf
(
°dîr
, "\tPOLLPRI\n");

81 i‡(
fds
.
ªvíts
 & 
POLLRDBAND
)

83 
	`Ârötf
(
°dîr
, "\tPOLLPRI\n");

86 i‡(
fds
.
ªvíts
 & 
POLLRDNORM
)

88 
	`Ârötf
(
°dîr
, "\tPOLLRDNORM\n");

91 i‡(
fds
.
ªvíts
 & 
POLLWRBAND
)

93 
	`Ârötf
(
°dîr
, "\tPOLLWRBAND\n");

96 i‡(
fds
.
ªvíts
 & 
POLLWRNORM
)

98 
	`Ârötf
(
°dîr
, "\tPOLLWRNORM\n");

100 
	}
}

	@libtest/port.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<ˇs£π
>

41 
	~<c°dlib
>

42 
	~<c°rög
>

43 
	~<˘ime
>

44 
	~<‚m©ch.h
>

45 
	~<io°ªam
>

46 
	~<sys/sockë.h
>

47 
	~<sys/°©.h
>

48 
	~<sys/time.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/waô.h
>

51 
	~<uni°d.h
>

53 
	~<utûôy
>

54 
	~<ve˘‹
>

56 
	~<sig«l.h
>

58 
	~<libã°/sig«l.h
>

60 #i‚de‡
SOCK_CLOEXEC


61 
	#SOCK_CLOEXEC
 0

	)

64 #i‚de‡
SOCK_NONBLOCK


65 
	#SOCK_NONBLOCK
 0

	)

68 #i‚de‡
FD_CLOEXEC


69 
	#FD_CLOEXEC
 0

	)

72 #i‚de‡
__INTEL_COMPILER


73 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

76 
usög
 
«me•a˚
 
	glibã°
;

78 
	ssockë_°
 {

79 
	m°d
::
	tve˘‹
< 
	t°d
::
	t∑ú
< , 
	tö_p‹t_t
> > 
	tsockë_p‹t_t
;

80 
sockë_p‹t_t
 
	m_∑ú
;

81 
ö_p‹t_t
 
	mœ°_p‹t
;

83 
sockë_°
():

84 
œ°_p‹t
(0)

87 
ªÀa£
(
ö_p‹t_t
 
_¨g
)

89 
sockë_p‹t_t
::
ôî©‹
 
ôî

_∑ú
.
begö
();

90 
	môî
 !
_∑ú
.
íd
();

91 ++
	môî
)

93 i‡((*
	môî
).
	m£c⁄d
 =
_¨g
)

95 
shutdown
((*
ôî
).
fú°
, 
SHUT_RDWR
);

96 
˛o£
((*
ôî
).
fú°
);

101 ~
sockë_°
()

103 
	msockë_p‹t_t
::
ôî©‹
 
ôî

_∑ú
.
begö
();

104 
	môî
 !
_∑ú
.
íd
();

105 ++
	môî
)

107 
shutdown
((*
ôî
).
fú°
, 
SHUT_RDWR
);

108 
˛o£
((*
ôî
).
fú°
);

113 
sockë_°
 
	gÆl_sockë_fd
;

115 
ö_p‹t_t
 
	gglobÆ_p‹t
= 0;

117 
«me•a˚
 
	glibã°
 {

119 
ö_p‹t_t
 
deÁu…_p‹t
()

121 i‡(
	gglobÆ_p‹t
 == 0)

123 
globÆ_p‹t

gë_‰ì_p‹t
();

126  
	gglobÆ_p‹t
;

129 
ªÀa£_p‹t
(
ö_p‹t_t
 
¨g
)

131 
	gÆl_sockë_fd
.
ªÀa£
(
¨g
);

134 
ö_p‹t_t
 
gë_‰ì_p‹t
()

136 c⁄° 
ö_p‹t_t
 
	gdeÁu…_p‹t
= in_port_t(-1);

138 
	gªåõs
= 1024;

140 
ö_p‹t_t
 
	gªt_p‹t
;

141 --
	gªåõs
)

143 
	gªt_p‹t

deÁu…_p‹t
;

144 
	gsd
;

145 i‡((
	gsd

sockë
(
AF_INET
, 
SOCK_STREAM
, 0)Ë!
SOCKET_ERROR
)

147 
›tvÆ
= 1;

148 i‡(
£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›tvÆ
, (›tvÆ)Ë!
SOCKET_ERROR
)

150 
sockaddr_ö
 
sö
;

151 
	gsö
.
	gsö_p‹t
= 0;

152 
	gsö
.
	gsö_addr
.
	gs_addr
= 0;

153 
	gsö
.
	gsö_addr
.
	gs_addr

INADDR_ANY
;

154 
	gsö
.
	gsö_Ámûy

AF_INET
;

156 
	gböd_ªt
;

159 i‡((
	gböd_ªt

böd
(
sd
, (
sockaddr
 *)&
sö
, (
sockaddr_ö
Ë)Ë!
SOCKET_ERROR
)

161 
sockÀn_t
 
addæí
(
sö
);

163 i‡(
gësock«me
(
sd
, (
sockaddr
 *)&
sö
, &
addæí
) != -1)

165 
ªt_p‹t

sö
.
sö_p‹t
;

170 i‡(
	gî∫o
 !
EADDRINUSE
)

172 
Eº‹
 << 
°ªº‹
(
î∫o
);

176 i‡(
	gî∫o
 =
EADDRINUSE
)

178 
libã°
::
dªam
(2, 0);

180 } 
	gböd_ªt
 =-1 
™d
 
î∫o
 =
EADDRINUSE
);

182 
	gÆl_sockë_fd
.
	g_∑ú
.
push_back
(
°d
::
make_∑ú
(
sd
, 
ªt_p‹t
));

186 
	gEº‹
 << 
°ªº‹
(
î∫o
);

191 
	gEº‹
 << 
°ªº‹
(
î∫o
);

194 i‡(
	gªt_p‹t
 =
deÁu…_p‹t
)

196 
Eº‹
 << "nÿªt_p‹à£t:" << 
°ªº‹
(
î∫o
);

198 i‡(
	gªt_p‹t
 > 1024 
™d
Ñë_p‹à!
Æl_sockë_fd
.
œ°_p‹t
)

205 i‡(
	gªåõs
 == 0)

207 
FATAL
("NoÖort could be found,ÉxhaustedÑetry");

210 i‡(
	gªt_p‹t
 == 0)

212 
FATAL
("NoÖort could be found");

215 i‡(
	gªt_p‹t
 =
deÁu…_p‹t
)

217 
FATAL
("NoÖort could be found");

220 i‡(
	gªt_p‹t
 <= 1024)

222 
FATAL
("NoÖort could be found,Åhough some whereávailable below orát 1024");

225 
	gÆl_sockë_fd
.
	gœ°_p‹t

ªt_p‹t
;

226 
ªÀa£_p‹t
(
ªt_p‹t
);

228  
	gªt_p‹t
;

	@libtest/port.h

41 #¥agm®
⁄˚


43 
	#LIBTEST_FAIL_PORT
 23

	)

45 
«me•a˚
 
	glibã°
 {

47 
LIBTEST_API


48 
ö_p‹t_t
 
deÁu…_p‹t
();

50 
LIBTEST_API


51 
ö_p‹t_t
 
gë_‰ì_p‹t
();

53 
LIBTEST_API


54 
ªÀa£_p‹t
(
ö_p‹t_t
 
¨g
);

	@libtest/result.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

39 
	~<c°d¨g
>

41 
«me•a˚
 
	glibã°
 {

43 
	g__ã°_ªsu…
::
__ã°_ªsu…
(c⁄° *
fûe_¨g
, 
löe_¨g
, c⁄° *
func_¨g
):

44 
_löe
(
löe_¨g
),

45 
_fûe
(
fûe_¨g
),

46 
_func
(
func_¨g
),

47 
_îr‹_mesßge
(
NULL
),

48 
_îr‹_mesßge_size
(0)

52 #i‚de‡
__INTEL_COMPILER


53 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wformat-nonliteral"

55 
	g__ã°_ªsu…
::
öô
(
va_li°
 
¨gs_
)

57 c⁄° *
f‹m©

va_¨g
(
¨gs_
, const *);

58 
	g_îr‹_mesßge_size

va•rötf
(&
_îr‹_mesßge
, 
f‹m©
, 
¨gs_
);

59 
as£π
(
_îr‹_mesßge_size
 != -1);

60 i‡(
	g_îr‹_mesßge_size
 > 0)

62 
	g_îr‹_mesßge_size
++;

66 
	g__ã°_ªsu…
::~
__ã°_ªsu…
(Ë
throw
()

68 
‰ì
(
_îr‹_mesßge
);

71 
	g__ã°_ªsu…
::
__ã°_ªsu…
(c⁄° __ã°_ªsu…& 
Ÿhî
) :

72 
_löe
(
Ÿhî
._line),

73 
_fûe
(
Ÿhî
._file),

74 
_func
(
Ÿhî
._func),

75 
_îr‹_mesßge_size
(
Ÿhî
._error_message_size)

77 i‡(
	g_îr‹_mesßge_size
 > 0)

79 
	g_îr‹_mesßge
(*Ë
mÆloc
(
_îr‹_mesßge_size
);

80 i‡(
	g_îr‹_mesßge
)

82 
mem˝y
(
_îr‹_mesßge
, 
Ÿhî
._îr‹_mesßge, 
_îr‹_mesßge_size
);

86 
	g_îr‹_mesßge_size
= -1;

91 
	g__suc˚ss
::
__suc˚ss
(c⁄° *
fûe_¨g
, 
löe_¨g
, c⁄° *
func_¨g
):

92 
__ã°_ªsu…
(
fûe_¨g
, 
löe_¨g
, 
func_¨g
)

96 
	g__skù≥d
::
__skù≥d
(c⁄° *
fûe_¨g
, 
löe_¨g
, c⁄° *
func_¨g
, ...):

97 
__ã°_ªsu…
(
fûe_¨g
, 
löe_¨g
, 
func_¨g
)

99 
va_li°
 
	g¨gs
;

100 
va_°¨t
(
¨gs
, 
func_¨g
);

101 
öô
(
¨gs
);

102 
va_íd
(
¨gs
);

105 
	g__skù≥d
::
__skù≥d
(c⁄° __skù≥d& 
Ÿhî
) :

106 
__ã°_ªsu…
(
Ÿhî
)

110 
__Áûuª
::__Áûuª(c⁄° *
fûe_¨g
, 
löe_¨g
, c⁄° *
func_¨g
, ...) :

111 
__ã°_ªsu…
(
fûe_¨g
, 
löe_¨g
, 
func_¨g
)

113 
va_li°
 
	g¨gs
;

114 
va_°¨t
(
¨gs
, 
func_¨g
);

115 
öô
(
¨gs
);

116 
va_íd
(
¨gs
);

119 
	g__Áûuª
::
__Áûuª
(c⁄° __Áûuª& 
Ÿhî
) :

120 
__ã°_ªsu…
(
Ÿhî
)

	@libtest/result.hpp

37 #¥agm®
⁄˚


39 
	~<libã°/Áèl.hµ
>

40 
	~<libã°/ªsu…/ba£.hµ
>

41 
	~<libã°/ªsu…/Áû.hµ
>

42 
	~<libã°/ªsu…/Áèl.hµ
>

43 
	~<libã°/ªsu…/skù.hµ
>

44 
	~<libã°/ªsu…/suc˚ss.hµ
>

46 
	#_SUCCESS
 
throw
 
libã°
::
	`__suc˚ss
(
LIBYATL_DEFAULT_PARAM
)

	)

48 
	#SKIP
(...) \

51 
throw
 
libã°
::
	`__skù≥d
(
LIBYATL_DEFAULT_PARAM
, 
__VA_ARGS__
); \

52 } 0)

	)

54 
	#FAIL
(...) \

57 
throw
 
libã°
::
	`__Áûuª
(
LIBYATL_DEFAULT_PARAM
, 
__VA_ARGS__
); \

58 } 0)

	)

60 
	#FATAL
(...) \

63 
throw
 
libã°
::
	`Áèl
(
LIBYATL_DEFAULT_PARAM
, 
__VA_ARGS__
); \

64 } 0)

	)

66 
	#FATAL_IF
(
__ex¥essi⁄
, ...) \

69 i‡((
__ex¥essi⁄
)) { \

70 
throw
 
libã°
::
	`Áèl
(
LIBYATL_DEFAULT_PARAM
, (#__expression)); \

72 } 0)

	)

74 
	#FATAL_IF_
(
__ex¥essi⁄
, ...) \

77 i‡((
__ex¥essi⁄
)) { \

78 
throw
 
libã°
::
	`Áèl
(
LIBYATL_DEFAULT_PARAM
, 
__VA_ARGS__
); \

80 } 0)

	)

82 
	#Áèl_as£π
(
__as£π
Ëif((__as£π)Ë{} { 
throw
 
libã°
::
	`Áèl
(
LIBYATL_DEFAULT_PARAM
, #__as£π); }

	)

	@libtest/result/base.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 ˛as†
	c__ã°_ªsu…
 : 
public
 
°d
::
ex˚±i⁄


43 
public
:

44 
__ã°_ªsu…
(c⁄° *
fûe
, 
löe
, c⁄° *
func
);

46 
__ã°_ªsu…
( const __test_result& );

48 
	gvútuÆ
 ~
__ã°_ªsu…
(Ë
throw
();

50 
vútuÆ
 c⁄° * 
wh©
(Ëc⁄° 
throw
()

52 i‡(
	g_îr‹_mesßge
)

54  
	g_îr‹_mesßge
;

60 
löe
() const

62  
	g_löe
;

65 c⁄° * 
fûe
() const

67  
	g_fûe
;

70 c⁄° * 
func
() const

72  
	g_func
;

75 
	g¥Ÿe˘ed
:

76 
öô
(
va_li°
);

78 
	g¥iv©e
:

79 
_löe
;

80 c⁄° * 
	g_fûe
;

81 c⁄° * 
	g_func
;

82 * 
	g_îr‹_mesßge
;

83 
	g_îr‹_mesßge_size
;

	@libtest/result/fail.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 ˛as†
	c__Áûuª
 : 
public
 
__ã°_ªsu…


43 
public
:

44 
__Áûuª
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, ...);

46 
__Áûuª
(const __failure&);

48 
	g¥iv©e
:

	@libtest/result/fatal.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 ˛as†
	cÁèl
 : 
public
 
__ã°_ªsu…


43 
public
:

44 
Áèl
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, ...);

46 
Áèl
(const fatal&);

49 
boﬁ
 
is_dißbÀd
(Ë
throw
();

50 
dißbÀ
(Ë
throw
();

51 
íabÀ
(Ë
throw
();

52 
uöt32_t
 
dißbÀd_cou¡î
(Ë
throw
();

53 
ö¸emít_dißbÀd_cou¡î
(Ë
throw
();

55 
	g¥iv©e
:

	@libtest/result/skip.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 ˛as†
	c__skù≥d
 : 
public
 
__ã°_ªsu…


43 
public
:

44 
__skù≥d
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, ...);

46 
__skù≥d
(const __skipped&);

	@libtest/result/success.hpp

37 #¥agm®
⁄˚


39 
«me•a˚
 
	glibã°
 {

41 ˛as†
	c__suc˚ss
 : 
public
 
__ã°_ªsu…


43 
public
:

44 
__suc˚ss
(c⁄° *
fûe
, 
löe
, c⁄° *
func
);

46 c⁄° * 
wh©
(Ëc⁄° 
throw
()

51 
	g¥iv©e
:

	@libtest/runner.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
«me•a˚
 
	glibã°
 {

42 
	gRu¬î
::
Ru¬î
() :

43 
_£rvîs
(
NULL
)

47 
ã°_ªtu∫_t
 
Ru¬î
::
maö
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
)

49 
ã°_ªtu∫_t
 
	gªt
;

50 
	gåy
 {

51 
	gªt

run
(
func
, 
obje˘
);

53 
ˇtch
 (c⁄° 
libã°
::
__skù≥d
& 
e
)

55 
ªt

TEST_SKIPPED
;

57 
ˇtch
 (c⁄° 
libã°
::
__Áûuª
& 
e
)

59 
libã°
::
°ªam
::
make_˚º
(
e
.
fûe
(),É.
löe
(),É.
func
()Ë<< 
	ge
.
wh©
();

60 
	gªt

TEST_FAILURE
;

62 
ˇtch
 (c⁄° 
libã°
::
__suc˚ss
&)

64 
ªt

TEST_SUCCESS
;

66 
ˇtch
 (c⁄° 
libã°
::
Áèl
&)

68 
throw
;

70 
ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
e
)

72 
libã°
::
°ªam
::
make_˚º
(
LIBYATL_DEFAULT_PARAM
Ë<< 
e
.
wh©
();

73 
	gthrow
;

75 
ˇtch
 (...)

77 
	glibã°
::
°ªam
::
make_˚º
(
LIBYATL_DEFAULT_PARAM
) << "UnknownÉxceptionÅhrown";

78 
	gthrow
;

81  
	gªt
;

84 
ã°_ªtu∫_t
 
	gRu¬î
::
£tup
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
)

86 
ã°_ªtu∫_t
 
	gªt
;

87 
	gåy
 {

88 
	gªt

¥e
(
func
, 
obje˘
);

90 
ˇtch
 (c⁄° 
libã°
::
__skù≥d
& 
e
)

92 
ªt

TEST_SKIPPED
;

94 
ˇtch
 (c⁄° 
libã°
::
__Áûuª
& 
e
)

96 
libã°
::
°ªam
::
make_cout
(
e
.
fûe
(),É.
löe
(),É.
func
()Ë<< 
	ge
.
wh©
();

97 
	gªt

TEST_FAILURE
;

99 
ˇtch
 (c⁄° 
libã°
::
__suc˚ss
&)

101 
ªt

TEST_SUCCESS
;

103 
ˇtch
 (c⁄° 
libã°
::
Áèl
& 
e
)

105 
throw
;

107 
ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
e
)

109 
libã°
::
°ªam
::
make_˚º
(
LIBYATL_DEFAULT_PARAM
Ë<< 
e
.
wh©
();

110 
	gthrow
;

112 
ˇtch
 (...)

114 
	glibã°
::
°ªam
::
make_˚º
(
LIBYATL_DEFAULT_PARAM
) << "UnknownÉxceptionÅhrown";

115 
	gthrow
;

118  
	gªt
;

121 
ã°_ªtu∫_t
 
	gRu¬î
::
ã¨down
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
)

123 
ã°_ªtu∫_t
 
	gªt
;

124 
	gåy
 {

125 
	gªt

po°
(
func
, 
obje˘
);

127 
ˇtch
 (c⁄° 
libã°
::
__skù≥d
& 
e
)

129 
ªt

TEST_SKIPPED
;

131 
ˇtch
 (c⁄° 
libã°
::
__Áûuª
& 
e
)

133 
libã°
::
°ªam
::
make_˚º
(
LIBYATL_DEFAULT_PARAM
Ë<< 
e
.
wh©
();

134 
	gªt

TEST_FAILURE
;

136 
ˇtch
 (c⁄° 
libã°
::
__suc˚ss
&)

138 
ªt

TEST_SUCCESS
;

140 
ˇtch
 (c⁄° 
libã°
::
Áèl
& 
e
)

142 
throw
;

144 
ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
e
)

146 
libã°
::
°ªam
::
make_˚º
(
LIBYATL_DEFAULT_PARAM
Ë<< 
e
.
wh©
();

147 
	gthrow
;

149 
ˇtch
 (...)

151 
	glibã°
::
°ªam
::
make_˚º
(
LIBYATL_DEFAULT_PARAM
) << "UnknownÉxceptionÅhrown";

152 
	gthrow
;

155  
	gªt
;

158 
ã°_ªtu∫_t
 
	gRu¬î
::
Êush
(*)

160  
TEST_SUCCESS
;

163 
ã°_ªtu∫_t
 
	gRu¬î
::
run
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
)

165 i‡(
	gfunc
)

167  
func
(
obje˘
);

170  
	gTEST_SUCCESS
;

173 
ã°_ªtu∫_t
 
	gRu¬î
::
¥e
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
)

175 i‡(
	gfunc
)

177  
func
(
obje˘
);

180  
	gTEST_SUCCESS
;

183 
ã°_ªtu∫_t
 
	gRu¬î
::
po°
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
)

185 i‡(
	gfunc
)

187  
func
(
obje˘
);

190  
	gTEST_SUCCESS
;

193 
	gRu¬î
::
£t_£rvîs
(
libã°
::
£rvî_°¨tup_°
& 
¨g
)

195 
_£rvîs
&
¨g
;

198 
boﬁ
 
	gRu¬î
::
check
()

200  
_£rvîs
 ? _£rvîs->
check
(Ë: 
åue
;

	@libtest/runner.h

37 #¥agm®
⁄˚


40 
«me•a˚
 
	glibã°
 {

46 ˛as†
	cRu¬î
 {

47 
	gpublic
:

48 
ã°_ªtu∫_t
 
maö
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
);

49 
ã°_ªtu∫_t
 
£tup
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
);

50 
ã°_ªtu∫_t
 
ã¨down
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
);

52 
Ru¬î
();

54 
£t_£rvîs
(
libã°
::
£rvî_°¨tup_°
& 
¨g
);

56 
boﬁ
 
check
();

58 
	gvútuÆ
 ~
Ru¬î
() { }

60 
vútuÆ
 
ã°_ªtu∫_t
 
Êush
(*);

61 
vútuÆ
 
ã°_ªtu∫_t
 
run
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
);

62 
vútuÆ
 
ã°_ªtu∫_t
 
¥e
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
);

63 
vútuÆ
 
ã°_ªtu∫_t
 
po°
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
);

65 
	g¥iv©e
:

66 
libã°
::
£rvî_°¨tup_°
* 
_£rvîs
;

68 
	g¥iv©e
:

69 
Ru¬î
( const Runner& );

70 c⁄° 
	gRu¬î
& 
	g›î©‹
=–c⁄° 
Ru¬î
& );

	@libtest/server.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/comm⁄.h
>

41 
	~<ˇs£π
>

42 
	~<˚ºno
>

43 
	~<˛imôs
>

44 
	~<c°dlib
>

45 
	~<io°ªam
>

47 
	~<Æg‹ôhm
>

48 
	~<fun˘i⁄Æ
>

49 
	~<loˇÀ
>

50 
	~<uni°d.h
>

53 
ölöe
 
	g°d
::
°rög
 &
πrim
(
°d
::°rög &
s
)

55 
s
.
îa£
(
°d
::
föd_if
(s.
rbegö
(), s.
ªnd
(), std::
nŸ1
(°d::
±r_fun
<, >(°d::
is•a˚
))).
ba£
(), s.
íd
());

56  
	gs
;

59 
	~<libã°/£rvî.h
>

60 
	~<libã°/°ªam.h
>

61 
	~<libã°/kûÕid.h
>

63 
«me•a˚
 
	glibã°
 {

65 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	gSîvî
 &
	g¨g
)

67 i‡(
	g¨g
.
is_sockë
())

69 
	gouçut
 << 
	g¨g
.
ho°«me
();

73 
	gouçut
 << 
	g¨g
.
ho°«me
(Ë<< ":" <<árg.
p‹t
();

76 i‡(
	g¨g
.
has_pid
())

78 
	gouçut
 << " Pid:" << 
	g¨g
.
pid
();

81 i‡(
	g¨g
.
has_sockë
())

83 
	gouçut
 << " Sockë:" << 
	g¨g
.
sockë
();

86 i‡(
	g¨g
.
ru¬ög
().
em±y
(Ë=
Ál£
)

88 
ouçut
 << " Exec:" << 
¨g
.
ru¬ög
();

91  
	gouçut
;

94 #ifde‡
__GLIBC__


95 
	g«me•a˚
 {

97 ˛as†
	cBuf„r


99 
	gpublic
:

100 
Buf„r
(*
b
Ë: 
b_
(b) {}

101 ~
Buf„r
(Ë{ i‡(
b_
Ë
‰ì
(b_); }

102 * 
buf
(Ë{  
	gb_
; }

103 
	g¥iv©e
:

104 *
b_
;

110 
	#MAGIC_MEMORY
 123570

	)

112 
	gSîvî
::
Sîvî
(c⁄° 
°d
::
°rög
& 
ho°_¨g
, c⁄° 
ö_p‹t_t
 
p‹t_¨g
,

113 c⁄° 
°d
::
°rög
& 
execuèbÀ
, c⁄° 
boﬁ
 
_is_libtoﬁ
,

114 
boﬁ
 
is_sockë_¨g
) :

115 
_magic
(
MAGIC_MEMORY
),

116 
_is_sockë
(
is_sockë_¨g
),

117 
_p‹t
(
p‹t_¨g
),

118 
_ho°«me
(
ho°_¨g
),

119 
_≠p
(
execuèbÀ
, 
_is_libtoﬁ
),

120 
out_of_b™_kûÀd_
(
Ál£
),

121 
	$_timeout
(40)

123 
	}
}

125 
	gSîvî
::~
	$Sîvî
()

127 
	`kûl
();

128 
	}
}

130 
boﬁ
 
	gSîvî
::
	$check
()

132 
_≠p
.
	`¶uΩ
();

133 
_≠p
.
	`check
();

134  
åue
;

135 
	}
}

137 
boﬁ
 
	gSîvî
::
	$vÆid©e
()

139  
_magic
 =
MAGIC_MEMORY
;

140 
	}
}

143 
boﬁ
 
	gSîvî
::
	$cy˛e
()

145 
uöt32_t
 
limô
= 3;

148 --
limô
 
™d


149 
	`is_pid_vÆid
(
_≠p
.
	`pid
()))

151 i‡(
	`kûl
())

153 
Log
 << "KûÀdÉxi°ög sîvî," << *
this
;

154 
	`dªam
(0, 50000);

160 i‡(
limô
 == 0)

162 
Eº‹
 << "ReachedÜimit, couldÇot kill server";

163  
Ál£
;

166  
åue
;

167 
	}
}

169 
boﬁ
 
	gSîvî
::
	$waô_f‹_pidfûe
() const

171 
Waô
 
	`waô
(
	`pid_fûe
(), 4);

173  
waô
.
	`suc˚ssful
();

174 
	}
}

176 
boﬁ
 
	gSîvî
::
	$öô
(c⁄° *
¨gv
[])

178 i‡(
¨gv
)

180 c⁄° **
±r

¨gv
; *ptr ; ++ptr)

182 i‡(
±r
)

184 
	`add_›ti⁄
(*
±r
);

189  
	`buûd
();

190 
	}
}

192 
boﬁ
 
	gSîvî
::
	$has_pid
() const

194  (
_≠p
.
	`pid
() > 1);

195 
	}
}

198 
boﬁ
 
	gSîvî
::
	$°¨t
()

201 i‡(
	`has_pid
(Ë=
åue
)

204 
	`Áèl_mesßge
("has_pid() failed,ÖrogramerÉrror");

208 i‡(
	`gëív
("YATL_GDB_SERVER"))

210 
_≠p
.
	`u£_gdb
(
åue
);

213 i‡(
	`p‹t
(Ë=
LIBTEST_FAIL_PORT
)

215 
throw
 
libã°
::
	`disc⁄√˘ed
(
LIBYATL_DEFAULT_PARAM
,

216 
	`ho°«me
(), 
	`p‹t
(), "Called failure");

219 i‡(
	`gëív
("YATL_PTRCHECK_SERVER"))

221 
_≠p
.
	`u£_±rcheck
(
åue
);

223 i‡(
	`gëív
("YATL_VALGRIND_SERVER"))

225 
_≠p
.
	`u£_vÆgröd
(
åue
);

228 
	`out_of_b™_kûÀd
(
Ál£
);

229 i‡(
	`¨gs
(
_≠p
Ë=
Ál£
)

231 
throw
 
libã°
::
	`disc⁄√˘ed
(
LIBYATL_DEFAULT_PARAM
,

232 
	`ho°«me
(), 
	`p‹t
(), "CouldÇot build command()");

235 
libã°
::
	`ªÀa£_p‹t
(
_p‹t
);

237 
Aµliˇti⁄
::
îr‹_t
 
ªt
;

238 i‡(
Aµliˇti⁄
::
SUCCESS
 !(
ªt

_≠p
.
	`run
()))

240 
throw
 
libã°
::
	`disc⁄√˘ed
(
LIBYATL_DEFAULT_PARAM
,

241 
	`ho°«me
(), 
	`p‹t
(), "Aµliˇti⁄::run(Ë%s", 
libã°
::
Aµliˇti⁄
::
	`toSåög
(
ªt
));

242  
Ál£
;

244 
_ru¬ög

_≠p
.
	`¥öt
();

246 i‡(
	`vÆgröd_is_ˇŒî
())

248 
	`dªam
(5, 50000);

251 
size_t
 
ª≥©
= 5;

252 
_≠p
.
	`¶uΩ
();

253 --
ª≥©
)

255 i‡(
	`pid_fûe
().
	`em±y
(Ë=
Ál£
)

257 
Waô
 
	`waô
(
	`pid_fûe
(), 8);

259 i‡(
waô
.
	`suc˚ssful
(Ë=
Ál£
)

261 i‡(
_≠p
.
	`check
())

263 
_≠p
.
	`¶uΩ
();

267 #ifde‡
__GLIBC__


268 
Buf„r
 
	`buf
–
	`gë_cuºít_dú_«me
());

269 *
gëcwd_buf

buf
.
	`buf
();

271 
libã°
::
vch¨_t
 
buf
;

272 
buf
.
	`ªsize
(
PATH_MAX
);

273 *
gëcwd_buf

	`gëcwd
(&
buf
[0], buf.
	`size
());

275 
throw
 
libã°
::
	`disc⁄√˘ed
(
LIBYATL_DEFAULT_PARAM
,

276 
	`ho°«me
(), 
	`p‹t
(),

278 
gëcwd_buf
 ? getcwd_buf : "",

279 
_ru¬ög
.
	`c_°r
(),

280 
_≠p
.
	`°dîr_c_°r
());

285 
boﬁ
 
pöged

Ál£
;

286 
uöt32_t
 
this_waô
= 0;

288 
uöt32_t
 
waôed
;

289 
uöt32_t
 
ªåy
;

291 
waôed
0, 
ªåy
1; ;Ñëry++, waôed+
this_waô
)

293 i‡(
_≠p
.
	`check
(Ë=
Ál£
)

298 i‡((
pöged

	`pög
()Ë=
åue
)

302 i‡(
waôed
 >
_timeout
)

307 
this_waô

ªåy
 *Ñetry / 3 + 1;

308 
libã°
::
	`dªam
(
this_waô
, 0);

312 i‡(
pöged
 =
Ál£
)

315 
Eº‹
 << "FaûedÅÿpög(" << 
_≠p
.
	`pid
(Ë<< "Ëwaô: " << 
this_waô
 << " " << 
	`ho°«me
(Ë<< ":" << 
	`p‹t
(Ë<< "Ñun:" << 
_ru¬ög
 << " " << 
	`îr‹
();

319 i‡((
	`pid_fûe
().
	`em±y
(Ë=
Ál£
Ë
	`™d
 (
	`ac˚ss
’id_fûe().
	`c_°r
(), 
R_OK
) == 0))

321 
_≠p
.
	`¶uΩ
();

322 i‡(
	`kûl_fûe
(
	`pid_fûe
()Ë=
Ál£
)

324 
throw
 
libã°
::
	`disc⁄√˘ed
(
LIBYATL_DEFAULT_PARAM
,

325 
	`ho°«me
(), 
	`p‹t
(),

327 
this_waô
,

328 (
_ru¬ög
.
	`size
()), _ru¬ög.
	`c_°r
(),

329 (
_≠p
.
	`°dîr_ªsu…_Àngth
()), _≠p.
	`°dîr_c_°r
());

333 
throw
 
libã°
::
	`disc⁄√˘ed
(
LIBYATL_DEFAULT_PARAM
,

334 
	`ho°«me
(), 
	`p‹t
(),

336 (
_≠p
.
	`pid
()),

337 
_≠p
.
	`check
() ? "true" : "false",

338 
this_waô
,

339 (
_ru¬ög
.
	`size
()), _ru¬ög.
	`c_°r
(),

340 (
_≠p
.
	`°dîr_ªsu…_Àngth
()), _≠p.
	`°dîr_c_°r
());

345 
throw
 
libã°
::
	`disc⁄√˘ed
(
LIBYATL_DEFAULT_PARAM
,

346 
	`ho°«me
(), 
	`p‹t
(),

348 (
_≠p
.
	`pid
()),

349 
_≠p
.
	`check
() ? "true" : "false",

350 
this_waô
,

351 (
_ru¬ög
.
	`size
()), _ru¬ög.
	`c_°r
(),

352 (
_≠p
.
	`°dîr_ªsu…_Àngth
()), _≠p.
	`°dîr_c_°r
());

354 
_ru¬ög
.
	`˛ór
();

356  
Ál£
;

359  
	`has_pid
();

360 
	}
}

362 
	gSîvî
::
	$ª£t_pid
()

364 
_ru¬ög
.
	`˛ór
();

365 
_pid_fûe
.
	`˛ór
();

366 
	}
}

368 
pid_t
 
	gSîvî
::
	$pid
() const

370  
_≠p
.
	`pid
();

371 
	}
}

373 
	gSîvî
::
add_›ti⁄
(c⁄° 
°d
::
°rög
& 
¨g
)

375 
_›ti⁄s
.
push_back
(
°d
::
make_∑ú
(
¨g
, std::
°rög
()));

378 
	gSîvî
::
add_›ti⁄
(c⁄° 
°d
::
°rög
& 
«me_
, c⁄° std::°rög& 
vÆue_
)

380 
_›ti⁄s
.
push_back
(
°d
::
make_∑ú
(
«me_
, 
vÆue_
));

383 
boﬁ
 
	gSîvî
::
	$£t_sockë_fûe
()

385 
libã°
::
vch¨_t
 
fûe_buf„r
;

386 
fûe_buf„r
.
	`ªsize
(
FILENAME_MAX
);

387 
fûe_buf„r
[0]= 0;

389 i‡(
	`brokí_pid_fûe
())

391 
	`¢¥ötf
(&
fûe_buf„r
[0], fûe_buf„r.
	`size
(), "/tmp/%s.sockëXXXXXX", 
	`«me
());

395 
	`¢¥ötf
(&
fûe_buf„r
[0], fûe_buf„r.
	`size
(), "v¨/run/%s.sockëXXXXXX", 
	`«me
());

398 
fd
;

399 i‡((
fd

	`mk°emp
(&
fûe_buf„r
[0])) == -1)

401 
	`≥º‹
(&
fûe_buf„r
[0]);

402  
Ál£
;

404 
	`˛o£
(
fd
);

405 
	`u∆ök
(&
fûe_buf„r
[0]);

407 
_sockë
&
fûe_buf„r
[0];

409  
åue
;

410 
	}
}

412 
boﬁ
 
	gSîvî
::
	$£t_pid_fûe
()

414 
libã°
::
vch¨_t
 
fûe_buf„r
;

415 
fûe_buf„r
.
	`ªsize
(
FILENAME_MAX
);

416 
fûe_buf„r
[0]= 0;

418 i‡(
	`brokí_pid_fûe
())

420 
	`¢¥ötf
(&
fûe_buf„r
[0], fûe_buf„r.
	`size
(), "/tmp/%s.pidXXXXXX", 
	`«me
());

424 
	`¢¥ötf
(&
fûe_buf„r
[0], fûe_buf„r.
	`size
(), "v¨/run/%s.pidXXXXXX", 
	`«me
());

427 
fd
;

428 i‡((
fd

	`mk°emp
(&
fûe_buf„r
[0])) == -1)

430 
throw
 
libã°
::
	`Áèl
(
LIBYATL_DEFAULT_PARAM
, "mk°emp(ËÁûed o¿%†wôh %s", &
fûe_buf„r
[0], 
	`°ªº‹
(
î∫o
));

432 
	`˛o£
(
fd
);

433 
	`u∆ök
(&
fûe_buf„r
[0]);

435 
_pid_fûe
&
fûe_buf„r
[0];

437  
åue
;

438 
	}
}

440 
boﬁ
 
	gSîvî
::
	$£t_log_fûe
()

442 
libã°
::
vch¨_t
 
fûe_buf„r
;

443 
fûe_buf„r
.
	`ªsize
(
FILENAME_MAX
);

444 
fûe_buf„r
[0]= 0;

446 
	`¢¥ötf
(&
fûe_buf„r
[0], fûe_buf„r.
	`size
(), "v¨/log/%s.logXXXXXX", 
	`«me
());

447 
fd
;

448 i‡((
fd

	`mk°emp
(&
fûe_buf„r
[0])) == -1)

450 
throw
 
libã°
::
	`Áèl
(
LIBYATL_DEFAULT_PARAM
, "mk°emp(ËÁûed o¿%†wôh %s", &
fûe_buf„r
[0], 
	`°ªº‹
(
î∫o
));

452 
	`˛o£
(
fd
);

454 
_log_fûe
&
fûe_buf„r
[0];

456  
åue
;

457 
	}
}

459 
boﬁ
 
	gSîvî
::
	$¨gs
(
Aµliˇti⁄
& 
≠p
)

463 i‡(
	`has_log_fûe_›ti⁄
())

465 
	`£t_log_fûe
();

466 
	`log_fûe_›ti⁄
(
≠p
, 
_log_fûe
);

469 i‡(
	`gëív
("LIBTEST_SYSLOG"Ë
™d
 
	`has_sy¶og
())

471 
≠p
.
	`add_›ti⁄
("--syslog");

476 i‡(
_pid_fûe
.
	`em±y
(Ë
™d
 
	`£t_pid_fûe
(Ë=
Ál£
)

478  
Ál£
;

481 
	`pid_fûe_›ti⁄
(
≠p
, 
	`pid_fûe
());

484 i‡(
	`has_sockë_fûe_›ti⁄
())

486 i‡(
	`£t_sockë_fûe
(Ë=
Ál£
)

488  
Ál£
;

491 
	`sockë_fûe_›ti⁄
(
≠p
, 
_sockë
);

494 i‡(
	`has_p‹t_›ti⁄
())

496 
	`p‹t_›ti⁄
(
≠p
, 
_p‹t
);

499 
O±i⁄s
::
c⁄°_ôî©‹
 
ôî

_›ti⁄s
.
	`begö
(); iã∏!_›ti⁄s.
	`íd
(); ++iter)

501 i‡((*
ôî
).
fú°
.
	`em±y
(Ë=
Ál£
)

503 i‡((*
ôî
).
£c⁄d
.
	`em±y
(Ë=
Ál£
)

505 
≠p
.
	`add_›ti⁄
((*
ôî
).
fú°
, (*ôî).
£c⁄d
);

509 
≠p
.
	`add_›ti⁄
((*
ôî
).
fú°
);

514  
åue
;

515 
	}
}

517 
boﬁ
 
	gSîvî
::
	$kûl
()

519 i‡(
	`check_pid
(
_≠p
.
	`pid
()))

521 
_≠p
.
	`murdî
();

522 i‡(
	`brokí_pid_fûe
(Ë
™d
 
	`pid_fûe
().
	`em±y
(Ë=
Ál£
)

524 
	`u∆ök
(
	`pid_fûe
().
	`c_°r
());

527 i‡(
	`brokí_sockë_˛ónup
(Ë
™d
 
	`has_sockë
(Ë™d 
nŸ
 
	`sockë
().
	`em±y
())

529 
	`u∆ök
(
	`sockë
().
	`c_°r
());

532 
	`ª£t_pid
();

534  
åue
;

537  
Ál£
;

538 
	}
}

	@libtest/server.h

37 #¥agm®
⁄˚


39 
	~<libã°/cmdlöe.h
>

41 
	~<ˇs£π
>

42 
	~<c°dio
>

43 
	~<c°rög
>

44 
	~<√tdb.h
>

45 
	~<√töë/ö.h
>

46 
	~<°rög
>

47 
	~<uni°d.h
>

48 
	~<ve˘‹
>

50 
«me•a˚
 
	glibã°
 {

52 
	sSîvî
 {

53 
	g¥iv©e
:

54 
°d
::
	tve˘‹
< 
	t°d
::
	t∑ú
<°d::
	t°rög
, std::°rög> > 
	tO±i⁄s
;

56 
	g¥iv©e
:

57 
uöt64_t
 
_magic
;

58 
boﬁ
 
	g_is_sockë
;

59 
	g°d
::
°rög
 
_sockë
;

60 
	g°d
::
°rög
 
_ß¶
;

61 
	g°d
::
°rög
 
_pid_fûe
;

62 
	g°d
::
°rög
 
_log_fûe
;

63 
	g°d
::
°rög
 
_ba£_comm™d
;

64 
	g°d
::
°rög
 
_ru¬ög
;

66 
	g¥Ÿe˘ed
:

67 
ö_p‹t_t
 
_p‹t
;

68 
	g°d
::
°rög
 
_ho°«me
;

69 
	g°d
::
°rög
 
_exåa_¨gs
;

71 
	gpublic
:

72 
Sîvî
(c⁄° 
°d
::
°rög
& 
ho°«me
, c⁄° 
ö_p‹t_t
 
p‹t_¨g
,

73 c⁄° 
°d
::
°rög
& 
execuèbÀ
, c⁄° 
boﬁ
 
_is_libtoﬁ
,

74 c⁄° 
boﬁ
 
is_sockë_¨g

Ál£
);

76 
	gvútuÆ
 ~
Sîvî
();

78 
vútuÆ
 c⁄° *
«me
()= 0;

79 
vútuÆ
 
boﬁ
 
is_libtoﬁ
()= 0;

81 
vútuÆ
 
boﬁ
 
has_sockë_fûe_›ti⁄
() const

83  
	gÁl£
;

86 
vútuÆ
 
sockë_fûe_›ti⁄
(
Aµliˇti⁄
& 
≠p
, c⁄° 
°d
::
°rög
& 
sockë_¨g
)

88 i‡(
sockë_¨g
.
em±y
(Ë=
Ál£
)

90 
°d
::
°rög
 
buf„r
("--socket=");

91 
	gbuf„r
+
sockë_¨g
;

92 
	g≠p
.
add_›ti⁄
(
buf„r
);

96 
vútuÆ
 
boﬁ
 
has_log_fûe_›ti⁄
() const

98  
	gÁl£
;

101 
vútuÆ
 
log_fûe_›ti⁄
(
Aµliˇti⁄
& 
≠p
, c⁄° 
°d
::
°rög
& 
¨g
)

103 i‡(
¨g
.
em±y
(Ë=
Ál£
)

105 
°d
::
°rög
 
buf„r
("--log-file=");

106 
	gbuf„r
+
¨g
;

107 
	g≠p
.
add_›ti⁄
(
buf„r
);

111 
vútuÆ
 
pid_fûe_›ti⁄
(
Aµliˇti⁄
& 
≠p
, c⁄° 
°d
::
°rög
& 
¨g
)

113 i‡(
¨g
.
em±y
(Ë=
Ál£
)

115 
°d
::
°rög
 
buf„r
("--pid-file=");

116 
	gbuf„r
+
¨g
;

117 
	g≠p
.
add_›ti⁄
(
buf„r
);

121 
vútuÆ
 
boﬁ
 
has_p‹t_›ti⁄
() const

123  
	gÁl£
;

126 
vútuÆ
 
p‹t_›ti⁄
(
Aµliˇti⁄
& 
≠p
, 
ö_p‹t_t
 
¨g
)

128 i‡(
	g¨g
 > 0)

130 
	gbuf„r
[1024];

131 
¢¥ötf
(
buf„r
, (buf„r), "--p‹t=%d", (
¨g
));

132 
	g≠p
.
add_›ti⁄
(
buf„r
);

136 
vútuÆ
 
boﬁ
 
brokí_sockë_˛ónup
()

138  
	gÁl£
;

141 
vútuÆ
 
boﬁ
 
brokí_pid_fûe
()

143  
	gÁl£
;

146 c⁄° 
	g°d
::
°rög
& 
pid_fûe
() const

148  
_pid_fûe
;

151 c⁄° 
	g°d
::
°rög
& 
ba£_comm™d
() const

153  
_ba£_comm™d
;

156 c⁄° 
	g°d
::
°rög
& 
log_fûe
() const

158  
_log_fûe
;

161 c⁄° 
	g°d
::
°rög
& 
ho°«me
() const

163  
_ho°«me
;

166 c⁄° 
	g°d
::
°rög
& 
sockë
() const

168  
_sockë
;

171 
boﬁ
 
has_sockë
() const

173  
	g_is_sockë
;

176 
boﬁ
 
cy˛e
();

178 
vútuÆ
 
boﬁ
 
pög
()= 0;

180 
boﬁ
 
öô
(c⁄° *
¨gv
[]);

181 
vútuÆ
 
boﬁ
 
buûd
()= 0;

183 
add_›ti⁄
(c⁄° 
°d
::
°rög
&);

184 
add_›ti⁄
(c⁄° 
°d
::
°rög
&, const std::string&);

186 
ö_p‹t_t
 
p‹t
() const

188  
	g_p‹t
;

191 
boﬁ
 
has_p‹t
() const

193  (
	g_p‹t
 != 0);

196 
vútuÆ
 
boﬁ
 
has_sy¶og
() const

198  
	gÁl£
;

202 
ª£t
()

204 
	g_pid_fûe
.
˛ór
();

205 
	g_log_fûe
.
˛ór
();

208 
pid_t
 
pid
() const;

210 
boﬁ
 
has_pid
() const;

212 
vútuÆ
 
boﬁ
 
has_pid_fûe
() const

214  
	gåue
;

217 c⁄° 
	g°d
::
°rög
& 
îr‹
()

219  
_îr‹
;

222 
îr‹
(
°d
::
°rög
 
¨g
)

224 
_îr‹

¨g
;

227 
ª£t_îr‹
()

229 
	g_îr‹
.
˛ór
();

232 
vútuÆ
 
boﬁ
 
waô_f‹_pidfûe
() const;

234 
boﬁ
 
check_pid
(
pid_t
 
pid_¨g
) const

236  (
	gpid_¨g
 > 1);

239 
boﬁ
 
is_sockë
() const

241  
	g_is_sockë
;

244 c⁄° 
	g°d
::
°rög
 
ru¬ög
() const

246  
_ru¬ög
;

249 
boﬁ
 
check
();

251 
	g°d
::
°rög
 
log_™d_pid
();

253 
boﬁ
 
kûl
();

254 
boﬁ
 
°¨t
();

255 
boﬁ
 
comm™d
(
libã°
::
Aµliˇti⁄
& 
≠p
);

257 
boﬁ
 
vÆid©e
();

259 
out_of_b™_kûÀd
(
boﬁ
 
¨g
)

261 
	gout_of_b™_kûÀd_

¨g
;

264 
boﬁ
 
out_of_b™_kûÀd
()

266  
	gout_of_b™_kûÀd_
;

269 
timeout
(
uöt32_t
 
timeout_
)

271 
	g_timeout

timeout_
;

274 
	g¥Ÿe˘ed
:

275 
boﬁ
 
£t_pid_fûe
();

276 
O±i⁄s
 
	g_›ti⁄s
;

277 
Aµliˇti⁄
 
	g_≠p
;

279 
	g¥iv©e
:

280 
boﬁ
 
is_hñgröd
() const;

281 
boﬁ
 
is_vÆgröd
() const;

282 
boﬁ
 
is_debug
() const;

283 
boﬁ
 
£t_log_fûe
();

284 
boﬁ
 
£t_sockë_fûe
();

285 
ª£t_pid
();

286 
boﬁ
 
	gout_of_b™_kûÀd_
;

287 
boﬁ
 
¨gs
(
Aµliˇti⁄
&);

289 
	g°d
::
°rög
 
_îr‹
;

290 
uöt32_t
 
	g_timeout
;

293 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	glibã°
::
Sîvî
 &
¨g
);

	@libtest/server_container.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~"libã°/comm⁄.h
"

41 
	~<˚ºno
>

42 
	~<c°dlib
>

43 
	~<io°ªam
>

45 
	~<Æg‹ôhm
>

46 
	~<fun˘i⁄Æ
>

47 
	~<loˇÀ
>

50 
ölöe
 
	g°d
::
°rög
 &
πrim
(
°d
::°rög &
s
)

52 
s
.
îa£
(
°d
::
föd_if
(s.
rbegö
(), s.
ªnd
(), std::
nŸ1
(°d::
±r_fun
<, >(°d::
is•a˚
))).
ba£
(), s.
íd
());

53  
	gs
;

56 
«me•a˚
 
	glibã°
 {

58 
Sîvî
* 
	g£rvî_°¨tup_°
::
œ°
()

60  
£rvîs
.
back
();

63 
	g£rvî_°¨tup_°
::
push_£rvî
(
Sîvî
 *
¨g
)

65 
£rvîs
.
push_back
(
¨g
);

67 
	g°d
::
°rög
 
£rvî_c⁄fig_°rög
;

68 i‡(
	g¨g
->
has_sockë
())

70 
	g£rvî_c⁄fig_°rög
+= "--socket=";

71 
	g£rvî_c⁄fig_°rög
+= '"';

72 
	g£rvî_c⁄fig_°rög
+
¨g
->
sockë
();

73 
	g£rvî_c⁄fig_°rög
+= '"';

74 
	g£rvî_c⁄fig_°rög
+= " ";

78 
	glibã°
::
vch¨_t
 
p‹t_°r
;

79 
	gp‹t_°r
.
ªsize
(
NI_MAXSERV
);

80 
¢¥ötf
(&
p‹t_°r
[0],Ö‹t_°r.
size
(), "%u", (
¨g
->
p‹t
()));

82 
	g£rvî_c⁄fig_°rög
+= "--server=";

83 
	g£rvî_c⁄fig_°rög
+
¨g
->
ho°«me
();

84 
	g£rvî_c⁄fig_°rög
+= ":";

85 
	g£rvî_c⁄fig_°rög
+&
p‹t_°r
[0];

86 
	g£rvî_c⁄fig_°rög
+= " ";

89 
	g£rvî_li°
+
£rvî_c⁄fig_°rög
;

92 
Sîvî
* 
	g£rvî_°¨tup_°
::
p›_£rvî
()

94 
Sîvî
 *
tmp

£rvîs
.
back
();

95 
	g£rvîs
.
p›_back
();

96  
	gtmp
;

100 
boﬁ
 
	g£rvî_°¨tup_°
::
shutdown
(
uöt32_t
 
ho°_to_shutdown
)

102 i‡(
£rvîs
.
size
(Ë> 
ho°_to_shutdown
)

104 
Sîvî
* 
tmp

£rvîs
[
ho°_to_shutdown
];

106 i‡(
tmp
 
™d
 
	gtmp
->
kûl
(Ë=
Ál£
)

110  
åue
;

114  
	gÁl£
;

117 
	g£rvî_°¨tup_°
::
˛ór
()

119 
°d
::
f‹_óch
(
£rvîs
.
begö
(), sîvîs.
íd
(), 
DñëeFromVe˘‹
());

120 
	g£rvîs
.
˛ór
();

123 
boﬁ
 
	g£rvî_°¨tup_°
::
check
() const

125 
boﬁ
 
suc˚ss

åue
;

126 
	g°d
::
ve˘‹
<
Sîvî
 *>::
c⁄°_ôî©‹
 
ôî

£rvîs
.
begö
(); 
	gôî
 !£rvîs.
íd
(); ++iter)

128 i‡((*
	gôî
)->
check
(Ë=
Ál£
)

130 
suc˚ss

Ál£
;

134  
	gsuc˚ss
;

137 
boﬁ
 
	g£rvî_°¨tup_°
::
shutdown
()

139 
boﬁ
 
suc˚ss

åue
;

140 
	g°d
::
ve˘‹
<
Sîvî
 *>::
ôî©‹
 
ôî

£rvîs
.
begö
(); 
	gôî
 !£rvîs.
íd
(); ++iter)

142 i‡((*
	gôî
)->
has_pid
(Ë
™d
 (*
ôî
)->
kûl
(Ë=
Ál£
)

144 
Eº‹
 << "U«bÀÅÿkûl:" << *(*
ôî
);

145 
	gsuc˚ss

Ál£
;

149  
	gsuc˚ss
;

152 
	g£rvî_°¨tup_°
::
ª°¨t
()

154 
°d
::
ve˘‹
<
Sîvî
 *>::
ôî©‹
 
ôî

£rvîs
.
begö
(); 
	gôî
 !£rvîs.
íd
(); ++iter)

156 (*
	gôî
)->
°¨t
();

160 
	#MAGIC_MEMORY
 123575

	)

161 
	g£rvî_°¨tup_°
::
£rvî_°¨tup_°
() :

162 
_magic
(
MAGIC_MEMORY
),

163 
_sockë
(
Ál£
),

164 
_ß¶
(
Ál£
),

165 
udp
(0),

166 
_£rvîs_to_run
(5)

169 
	g£rvî_°¨tup_°
::~
£rvî_°¨tup_°
()

171 
˛ór
();

174 
boﬁ
 
	g£rvî_°¨tup_°
::
vÆid©e
()

176  
_magic
 =
MAGIC_MEMORY
;

179 
boﬁ
 
£rvî_°¨tup
(
£rvî_°¨tup_°
& 
c⁄°ru˘
, c⁄° 
°d
::
°rög
& 
£rvî_ty≥
, 
ö_p‹t_t
 
åy_p‹t
, c⁄° *
¨gv
[])

181  
	gc⁄°ru˘
.
°¨t_£rvî
(
£rvî_ty≥
, 
åy_p‹t
, 
¨gv
);

184 
	glibã°
::
Sîvî
* 
£rvî_°¨tup_°
::
¸óã
(c⁄° 
°d
::
°rög
& 
£rvî_ty≥
, 
ö_p‹t_t
 
åy_p‹t
, c⁄° 
boﬁ
 
is_sockë
)

186 
	glibã°
::
Sîvî
 *
£rvî

NULL
;

188 i‡(
	gis_sockë
 =
Ál£
)

190 i‡(
åy_p‹t
 <= 0)

192 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "wa†∑s£dÅhêövÆidÖ‹ànumbî %d", (
åy_p‹t
));

196 i‡(
	gis_sockë
)

198 i‡(
	g£rvî_ty≥
.
com∑ª
("memcached") == 0)

200 
£rvî

buûd_memˇched_sockë
("loˇlho°", 
åy_p‹t
);

204 
	gEº‹
 << "Sockë i†nŸ suµ‹àf‹ sîvî: " << 
	g£rvî_ty≥
;

205  
	gNULL
;

208 i‡(
	g£rvî_ty≥
.
com∑ª
("gearmand") == 0)

210 
£rvî

buûd_górm™d
("loˇlho°", 
åy_p‹t
);

212 i‡(
	g£rvî_ty≥
.
com∑ª
("hostile-gearmand") == 0)

214 
£rvî

buûd_górm™d
("loˇlho°", 
åy_p‹t
, "gearmand/hostile_gearmand");

216 i‡(
	g£rvî_ty≥
.
com∑ª
("drizzled") == 0)

218 i‡(
DRIZZLED_BINARY
)

220 i‡(
HAVE_LIBDRIZZLE
)

222 
£rvî

buûd_drizzÀd
("loˇlho°", 
åy_p‹t
);

226 i‡(
	g£rvî_ty≥
.
com∑ª
("blobslap_worker") == 0)

228 i‡(
GEARMAND_BINARY
)

230 i‡(
GEARMAND_BLOBSLAP_WORKER
)

232 i‡(
HAVE_LIBGEARMAN
)

234 
£rvî

buûd_blob¶≠_w‹kî
(
åy_p‹t
);

239 i‡(
	g£rvî_ty≥
.
com∑ª
("memcached") == 0)

241 i‡(
HAVE_MEMCACHED_BINARY
)

243 
£rvî

buûd_memˇched
("loˇlho°", 
åy_p‹t
);

247  
	g£rvî
;

250 ˛as†
	cSîvîPå
 {

251 
	gpublic
:

252 
SîvîPå
(
libã°
::
Sîvî
* 
£rvî_
):

253 
_£rvî
(
£rvî_
)

256 ~
SîvîPå
()

258 
dñëe
 
_£rvî
;

261 
ª£t
()

263 
dñëe
 
	g_£rvî
;

264 
	g_£rvî

NULL
;

267 
	glibã°
::
Sîvî
* 
ªÀa£
(
libã°
::Sîvî* 
£rvî_

NULL
)

269 
libã°
::
Sîvî
* 
tmp

_£rvî
;

270 
	g_£rvî

£rvî_
;

271  
	gtmp
;

274 
	glibã°
::
Sîvî
* 
›î©‹
->() const

276  
_£rvî
;

279 
	glibã°
::
Sîvî
* 
›î©‹
&() const

281  
_£rvî
;

284 
	g¥iv©e
:

285 
libã°
::
Sîvî
* 
_£rvî
;

288 
boﬁ
 
	g£rvî_°¨tup_°
::
_°¨t_£rvî
(c⁄° boﬁ 
is_sockë
,

289 c⁄° 
°d
::
°rög
& 
£rvî_ty≥
,

290 
ö_p‹t_t
 
åy_p‹t
,

291 c⁄° *
¨gv
[])

293 
	gåy
 {

294 
SîvîPå
 
£rvî
(
¸óã
(
£rvî_ty≥
, 
åy_p‹t
, 
is_sockë
));

296 i‡(&
	g£rvî
 =
NULL
)

298 
Eº‹
 << "CouldÇŸáŒoˇã sîvî: " << 
£rvî_ty≥
;

299  
	gÁl£
;

305 i‡(
	g£rvî
->
cy˛e
(Ë=
Ál£
)

307 
Eº‹
 << "CouldÇŸ sèπ u∞£rvî " << &
£rvî
;

308  
	gÁl£
;

311 
	g£rvî
->
öô
(
¨gv
);

314 i‡(
	gÁl£
)

316 
	gOut
 << "Pausing for startup, hitÑeturn whenÑeady.";

317 
	g°d
::
°rög
 
gdb_comm™d

£rvî
->
ba£_comm™d
();

318 
gëch¨
();

323 i‡(
	g£rvî
->
°¨t
(Ë=
Ál£
)

325  
Ál£
;

330 #i‡
deföed
(
DEBUG
)

331 i‡(
	gDEBUG
)

333 
Ouä
();

334 
	gOut
 << "STARTING SERVER’id:" << 
	g£rvî
->
pid
(Ë<< "): " << sîvî->
ru¬ög
();

335 
Ouä
();

341 
push_£rvî
(
£rvî
.
ªÀa£
());

343 i‡(
is_sockë
 
	g™d
 &
	g£rvî
)

345 
£t_deÁu…_sockë
(
£rvî
->
sockë
().
c_°r
());

348 
ˇtch
 (c⁄° 
libã°
::
disc⁄√˘ed
& 
îr
)

350 i‡(
Áèl
::
is_dißbÀd
(Ë=
Ál£
 
™d
 
åy_p‹t
 !
LIBTEST_FAIL_PORT
)

352 
°ªam
::
˚º
(
îr
.
fûe
(),Éº.
löe
(),Éº.
func
()Ë<<Éº.
wh©
();

353  
	gÁl£
;

356 
ˇtch
 (c⁄° 
libã°
::
__ã°_ªsu…
& 
îr
)

358 
°ªam
::
˚º
(
îr
.
fûe
(),Éº.
löe
(),Éº.
func
()Ë<< 
	gîr
.
wh©
();

359  
	gÁl£
;

361 
ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
îr
)

363 
Eº‹
 << 
îr
.
wh©
();

364  
	gÁl£
;

366 
ˇtch
 (...)

368 
	gEº‹
 << "îr‹ occuªd whûê¸ótög sîvî: " << 
	g£rvî_ty≥
;

369  
	gÁl£
;

372  
	gåue
;

375 
boﬁ
 
	g£rvî_°¨tup_°
::
°¨t_£rvî
(c⁄° 
°d
::
°rög
& 
£rvî_ty≥
, 
ö_p‹t_t
 
åy_p‹t
, c⁄° *
¨gv
[])

377  
_°¨t_£rvî
(
Ál£
, 
£rvî_ty≥
, 
åy_p‹t
, 
¨gv
);

380 
boﬁ
 
	g£rvî_°¨tup_°
::
°¨t_sockë_£rvî
(c⁄° 
°d
::
°rög
& 
£rvî_ty≥
, c⁄° 
ö_p‹t_t
 
åy_p‹t
, c⁄° *
¨gv
[])

382  
_°¨t_£rvî
(
åue
, 
£rvî_ty≥
, 
åy_p‹t
, 
¨gv
);

385 
	g°d
::
°rög
 
£rvî_°¨tup_°
::
	$›ti⁄_°rög
() const

387 
°d
::
°rög
 
ãmp

£rvî_li°
;

388 
	`πrim
(
ãmp
);

389  
ãmp
;

390 
	}
}

	@libtest/server_container.h

37 #¥agm®
⁄˚


39 
	~<ˇs£π
>

40 
	~<c°dio
>

41 
	~<c°rög
>

42 
	~<√tdb.h
>

43 
	~<√töë/ö.h
>

44 
	~<°rög
>

45 
	~<uni°d.h
>

46 
	~<ve˘‹
>

48 
«me•a˚
 
	glibã°
 {

50 ˛as†
	c£rvî_°¨tup_°


52 
	g¥iv©e
:

53 
uöt64_t
 
_magic
;

54 
	g°d
::
°rög
 
£rvî_li°
;

55 
boﬁ
 
	g_sockë
;

56 
boﬁ
 
	g_ß¶
;

57 
	g°d
::
°rög
 
_u£∫ame
;

58 
	g°d
::
°rög
 
_∑ssw‹d
;

60 
	gpublic
:

62 
uöt8_t
 
udp
;

63 
	g°d
::
ve˘‹
<
Sîvî
 *> 
£rvîs
;

65 
£rvî_°¨tup_°
();

66 ~
£rvî_°¨tup_°
();

68 
boﬁ
 
vÆid©e
();

70 
boﬁ
 
°¨t_sockë_£rvî
(c⁄° 
°d
::
°rög
& 
£rvî_ty≥
, c⁄° 
ö_p‹t_t
 
åy_p‹t
, c⁄° *
¨gv
[]);

71 
boﬁ
 
°¨t_£rvî
(c⁄° 
°d
::
°rög
& 
£rvî_ty≥
, c⁄° 
ö_p‹t_t
 
åy_p‹t
, c⁄° *
¨gv
[]);

73 
uöt32_t
 
cou¡
() const

75  
uöt32_t
(
£rvîs
.
size
());

78 
ª°¨t
();

80 
	g°d
::
°rög
 
›ti⁄_°rög
() const;

82 c⁄° 
	g°d
::
°rög
& 
∑ssw‹d
() const

84  
_∑ssw‹d
;

87 c⁄° 
	g°d
::
°rög
& 
u£∫ame
() const

89  
_u£∫ame
;

92 
boﬁ
 
sockë
()

94  
	g_sockë
;

97 
boﬁ
 
ß¶
()

99  
	g_ß¶
;

102 
£t_sockë
()

104 
	g_sockë

åue
;

107 
£t_ß¶
(c⁄° 
°d
::
°rög
& 
u£∫ame_¨g
, c⁄° std::°rög& 
∑ssw‹d_¨g
)

109 
_ß¶

åue
;

110 
	g_u£∫ame

u£∫ame_¨g
;

111 
	g_∑ssw‹d

∑ssw‹d_¨g
;

116 
˛ór
();

118 
boﬁ
 
shutdown
();

119 
boﬁ
 
shutdown
(
uöt32_t
 
numbî_of_ho°
);

121 
boﬁ
 
check
() const;

123 
push_£rvî
(
Sîvî
 *);

124 
Sîvî
* 
œ°
();

125 
Sîvî
 *
p›_£rvî
();

127 
Sîvî
* 
¸óã
(c⁄° 
°d
::
°rög
& 
£rvî_ty≥
, 
ö_p‹t_t
 
åy_p‹t
, c⁄° 
boﬁ
 
is_sockë
);

129 
£rvîs_to_run
() const

131  
	g_£rvîs_to_run
;

134 
£t_£rvîs_to_run
(
¨g
)

136 
	g_£rvîs_to_run

¨g
;

139 
	g¥iv©e
:

140 
boﬁ
 
_°¨t_£rvî
(c⁄° boﬁ 
is_sockë
,

141 c⁄° 
°d
::
°rög
& 
£rvî_ty≥
,

142 c⁄° 
ö_p‹t_t
 
åy_p‹t
,

143 c⁄° *
¨gv
[]);

145 
	g¥iv©e
:

146 
_£rvîs_to_run
;

149 
boﬁ
 
£rvî_°¨tup
(
£rvî_°¨tup_°
&, c⁄° 
°d
::
°rög
&, 
ö_p‹t_t
 
åy_p‹t
, c⁄° *
¨gv
[]);

	@libtest/signal.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	~<csig«l
>

42 
	~<libã°/sig«l.h
>

44 
usög
 
«me•a˚
 
	glibã°
;

46 
	#MAGIC_MEMORY
 123569

	)

48 
boﬁ
 
	gSig«lThªad
::
	$is_shutdown
()

50 
boﬁ
 
ªt
;

51 
	`±hªad_muãx_lock
(&
shutdown_muãx
);

52 
ªt

	`boﬁ
(
__shutdown
 !
SHUTDOWN_RUNNING
);

53 
	`±hªad_muãx_u∆ock
(&
shutdown_muãx
);

55  
ªt
;

56 
	}
}

58 
	gSig«lThªad
::
	$£t_shutdown
(
shutdown_t
 
¨g
)

60 
	`±hªad_muãx_lock
(&
shutdown_muãx
);

61 
__shutdown

¨g
;

62 
	`±hªad_muãx_u∆ock
(&
shutdown_muãx
);

64 i‡(
¨g
 =
SHUTDOWN_GRACEFUL
)

66 i‡(
	`±hªad_kûl
(
thªad
, 
SIGUSR2
) == 0)

68 *
ªtvÆ
;

69 
	`±hªad_joö
(
thªad
, &
ªtvÆ
);

72 
	}
}

74 
shutdown_t
 
	gSig«lThªad
::
	$gë_shutdown
()

76 
shutdown_t
 
loˇl
;

77 
	`±hªad_muãx_lock
(&
shutdown_muãx
);

78 
loˇl

__shutdown
;

79 
	`±hªad_muãx_u∆ock
(&
shutdown_muãx
);

81  
loˇl
;

82 
	}
}

84 
	gSig«lThªad
::
	$po°
()

86 
	`£m_po°
(&
lock
);

87 
	}
}

89 
	gSig«lThªad
::
	$ã°
()

91 
	`as£π
(
magic_mem‹y
 =
MAGIC_MEMORY
);

92 i‡(
	`boﬁ
(
	`gëív
("LIBTEST_IN_GDB")Ë=
Ál£
)

94 
	`as£π
(
	`sigismembî
(&
£t
, 
SIGALRM
));

95 
	`as£π
(
	`sigismembî
(&
£t
, 
SIGABRT
));

96 
	`as£π
(
	`sigismembî
(&
£t
, 
SIGQUIT
));

97 
	`as£π
(
	`sigismembî
(&
£t
, 
SIGINT
));

98 
	`as£π
(
	`sigismembî
(&
£t
, 
SIGVTALRM
));

100 
	`as£π
(
	`sigismembî
(&
£t
, 
SIGUSR2
));

101 
	}
}

103 
boﬁ
 
	gSig«lThªad
::
	$unblock
()

105 
îr‹
;

106 i‡((
îr‹

	`±hªad_sigmask
(
SIG_UNBLOCK
, &
£t
, 
NULL
)) != 0)

108 
Eº‹
 << "WhûêåyögÅÿª£àsig«»maskÅÿ‹igöÆ së,Öthªad_sigmask(Ëdõd durögÖthªad_sigmask(" << 
	`°ªº‹
(
îr‹
) << ")";

109  
Ál£
;

112  
åue
;

113 
	}
}

115 
	gSig«lThªad
::~
	$Sig«lThªad
()

117 i‡(
	`is_shutdown
(Ë=
Ál£
)

119 
	`£t_shutdown
(
SHUTDOWN_GRACEFUL
);

123 i‡(
	`±hªad_equÆ
(
thªad
, 
	`±hªad_£lf
()Ë!0 
	`™d
 (
	`±hªad_kûl
—hªad, 0Ë=
ESRCH
Ë=
åue
)

125 *
ªtvÆ
;

126 
	`±hªad_joö
(
thªad
, &
ªtvÆ
);

129 
	`£m_de°roy
(&
lock
);

131 
	`unblock
();

132 
	}
}

136 *
sig_thªad
(*
¨g
)

138 
Sig«lThªad
 *
c⁄ãxt
(Sig«lThªad*)
¨g
;

140 
c⁄ãxt
->
ã°
();

141 
c⁄ãxt
->
po°
();

143 
c⁄ãxt
->
gë_shutdown
(Ë=
SHUTDOWN_RUNNING
)

145 
sig
;

147 i‡(
c⁄ãxt
->
waô
(
sig
) == -1)

149 
Eº‹
 << "sigwaô(Ëªtu∫edÉºno:" << 
°ªº‹
(
î∫o
);

153 
sig
)

155 
SIGALRM
:

156 
Eº‹
 << "SIGALRM";

157 i‡(
gdb_is_ˇŒî
())

159 
ab‹t
();

161 
exô
(
EXIT_SKIP
);

163 
SIGVTALRM
:

164 
Eº‹
 << "SIGVTALRM was called";

165 
c⁄ãxt
->
unblock
();

166 
øi£
(
SIGVTALRM
);

168 
SIGABRT
:

169 
SIGUSR2
:

170 
SIGINT
:

171 
SIGQUIT
:

172 i‡(
c⁄ãxt
->
is_shutdown
(Ë=
Ál£
)

174 
c⁄ãxt
->
£t_shutdown
(
SHUTDOWN_FORCED
);

177 
SIGPIPE
:

179 
Eº‹
 << "Ignoring SIGPIPE";

184 
Eº‹
 << "Inside of gdb";

188 
Eº‹
 << "Sig«»h™dlögÅhªad gŸ u√x≥˘ed sig«»" << 
°rsig«l
(
sig
);

193  
NULL
;

198 
Sig«lThªad
::
	$Sig«lThªad
() :

199 
	`magic_mem‹y
(
MAGIC_MEMORY
),

200 
	`thªad
(
	$±hªad_£lf
())

202 
	`±hªad_muãx_öô
(&
shutdown_muãx
, 
NULL
);

203 
	`sigem±y£t
(&
£t
);

204 i‡(
	`boﬁ
(
	`gëív
("LIBTEST_IN_GDB")Ë=
Ál£
)

206 
	`sigadd£t
(&
£t
, 
SIGALRM
);

207 
	`sigadd£t
(&
£t
, 
SIGABRT
);

208 
	`sigadd£t
(&
£t
, 
SIGQUIT
);

209 
	`sigadd£t
(&
£t
, 
SIGINT
);

210 
	`sigadd£t
(&
£t
, 
SIGVTALRM
);

212 
	`sigadd£t
(&
£t
, 
SIGPIPE
);

214 
	`sigadd£t
(&
£t
, 
SIGUSR2
);

216 
	`£m_öô
(&
lock
, 0, 0);

218 
	`sigem±y£t
(&
‹igöÆ_£t
);

219 
	`±hªad_sigmask
(
SIG_BLOCK
, 
NULL
, &
‹igöÆ_£t
);

220 
	}
}

223 
boﬁ
 
Sig«lThªad
::
	$£tup
()

225 
	`£t_shutdown
(
SHUTDOWN_RUNNING
);

227 i‡(
	`sigismembî
(&
‹igöÆ_£t
, 
SIGQUIT
))

229 
Eº‹
 << 
	`°rsig«l
(
SIGQUIT
) << " has beenÖreviously set.";

232 i‡(
	`sigismembî
(&
‹igöÆ_£t
, 
SIGINT
))

234 
Eº‹
 << 
	`°rsig«l
(
SIGINT
) << " has beenÖreviously set.";

237 i‡(
	`sigismembî
(&
‹igöÆ_£t
, 
SIGVTALRM
))

239 
Eº‹
 << 
	`°rsig«l
(
SIGVTALRM
) << " has beenÖreviously set.";

242 i‡(
	`sigismembî
(&
‹igöÆ_£t
, 
SIGUSR2
))

244 
Eº‹
 << 
	`°rsig«l
(
SIGUSR2
) << " has beenÖreviously set.";

247 
îr‹
;

248 i‡((
îr‹

	`±hªad_sigmask
(
SIG_BLOCK
, &
£t
, 
NULL
)) != 0)

250 
Eº‹
 << "±hªad_sigmask(Ëdõd durögÖthªad_sigmask(" << 
	`°ªº‹
(
îr‹
) << ")";

251  
Ál£
;

254 i‡((
îr‹

	`±hªad_¸óã
(&
thªad
, 
NULL
, &
sig_thªad
, 
this
)) != 0)

256 
Eº‹
 << "±hªad_¸óã(Ëdõd durögÖthªad_¸óã(" << 
	`°ªº‹
(
îr‹
) << ")";

257  
Ál£
;

260 
	`£m_waô
(&
lock
);

262  
åue
;

263 
	}
}

	@libtest/signal.h

37 #¥agm®
⁄˚


39 
	~<±hªad.h
>

40 
	~<£m≠h‹e.h
>

41 
	~<sig«l.h
>

43 
	eshutdown_t
 {

44 
	mSHUTDOWN_RUNNING
,

45 
	mSHUTDOWN_GRACEFUL
,

46 
	mSHUTDOWN_FORCED


49 
«me•a˚
 
	glibã°
 {

51 ˛as†
	cSig«lThªad
 {

52 
sig£t_t
 
	g£t
;

53 
£m_t
 
	glock
;

54 
uöt64_t
 
	gmagic_mem‹y
;

55 vﬁ©ûê
shutdown_t
 
	g__shutdown
;

56 
±hªad_muãx_t
 
	gshutdown_muãx
;

57 
±hªad_t
 
	gthªad
;

58 
sig£t_t
 
	g‹igöÆ_£t
;

60 
	gpublic
:

62 
Sig«lThªad
();

63 ~
Sig«lThªad
();

65 
ã°
();

66 
po°
();

67 
boﬁ
 
£tup
();

68 
boﬁ
 
unblock
();

70 
waô
(& 
sig
)

72  
sigwaô
(&
£t
, &
sig
);

75 
£t_shutdown
(
shutdown_t
 
¨g
);

76 
boﬁ
 
is_shutdown
();

77 
shutdown_t
 
gë_shutdown
();

	@libtest/skiptest.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/ã°.hµ
>

41 
	~<c°dlib
>

42 
	~<uni°d.h
>

44 
usög
 
«me•a˚
 
	glibã°
;

47 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
&, 
ã°_ªtu∫_t
& 
rc
)

49 
rc

TEST_SKIPPED
;

51  
NULL
;

52 
	}
}

54 
gë_w‹ld
(
libã°
::
Fømew‹k
 *
w‹ld
)

56 
w‹ld
->
¸óã
(
w‹ld_¸óã
);

	@libtest/socket.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
	gglobÆ_sockë
[1024]= { 0 };

42 
«me•a˚
 
	glibã°
 {

44 c⁄° *
deÁu…_sockë
()

46 i‡(
	gglobÆ_sockë
[0] == 0)

48  
NULL
;

51  
	gglobÆ_sockë
;

54 
£t_deÁu…_sockë
(c⁄° *
sockë
)

56 i‡(
	gsockë
)

58 
°∫˝y
(
globÆ_sockë
, 
sockë
, 
°æí
(socket));

	@libtest/socket.hpp

38 #¥agm®
⁄˚


40 
«me•a˚
 
	glibã°
 {

42 c⁄° *
deÁu…_sockë
();

44 
£t_deÁu…_sockë
(c⁄° *
sockë
);

	@libtest/stream.h

37 #¥agm®
⁄˚


39 
	~<io°ªam
>

40 
	~<ˇs£π
>

41 
	~<s°ªam
>

42 
	~<˘ime
>

43 
	~<o°ªam
>

45 
«me•a˚
 
	glibã°
 {

46 
«me•a˚
 
	g°ªam
 {

48 
«me•a˚
 
	gdëaû
 {

50 
	gãm∂©e
<
˛ass
 
	gCh
, cœs†
	gTr
, cœs†
	gA
>

51 ˛as†
	cch™√l
 {

52 
	g¥iv©e
:

54 
public
:

55 
°d
::
	tbasic_o°rög°ªam
<
	tCh
, 
	tTr
, 
	tA
> 
	t°ªam_buf„r
;

57 
	gpublic
:

58 
›î©‹
()(c⁄° 
°ªam_buf„r
& 
s
, 
	g°d
::
o°ªam
& 
_out
,

59 c⁄° * 
	gfûíame
, 
	glöe_numbî
, c⁄° * 
	gfunc
)

61 i‡(
	gfûíame
)

63 
	g_out


64 << 
	gfûíame


66 << 
	glöe_numbî


68 << 
	gfunc
 << "() "

69 << 
	gs
.
°r
()

70 << 
	g°d
::
ídl
;

74 
	g_out


75 << 
	gs
.
°r
()

76 << 
	g°d
::
ídl
;

81 
	gãm∂©e
<
˛ass
 
	gCh
, cœs†
	gTr
, cœs†
	gA
>

82 ˛as†
	cch™√Œn
 {

83 
	g¥iv©e
:

85 
public
:

86 
°d
::
	tbasic_o°rög°ªam
<
	tCh
, 
	tTr
, 
	tA
> 
	t°ªam_buf„r
;

88 
	gpublic
:

89 
›î©‹
()(c⁄° 
°ªam_buf„r
& 
s
, 
	g°d
::
o°ªam
& 
_out
,

90 c⁄° * 
	gfûíame
, 
	glöe_numbî
, c⁄° * 
	gfunc
)

92 i‡(
	gfûíame
)

94 
	g_out


95 << 
	g°d
::
ídl


96 << 
fûíame


98 << 
löe_numbî


100 << 
func
 << "() "

101 << 
s
.
°r
()

102 << 
°d
::
ídl
;

106 
	g_out


107 << 
	g°d
::
ídl


108 << 
s
.
°r
()

109 << 
°d
::
ídl
;

114 
	gãm∂©e
<ãm∂©ê<
˛ass
 
	gCh
, cœs†
	gTr
, cœs†
	gA
> cœs†
	gOuçutPﬁicy
, cœs†Ch = , cœs†T∏
°d
::
ch¨_åaôs
<
Ch
>, cœs†A = std::
Æloˇt‹
<Ch> >

115 ˛as†
	clog
 {

116 
¥iv©e
:

117 
OuçutPﬁicy
<
	tCh
, 
	tTr
, 
	tA
> 
	touçut_pﬁicy
;

119 
	g¥iv©e
:

120 
°d
::
o°ªam
& 
_out
;

121 c⁄° *
	g_fûíame
;

122 
	g_löe_numbî
;

123 c⁄° *
	g_func
;

125 
	gpublic
:

126 
log
(
°d
::
o°ªam
& 
out_¨g
, c⁄° * 
fûíame
, 
löe_numbî
, c⁄° * 
func
) :

127 
_out
(
out_¨g
),

128 
_fûíame
(
fûíame
),

129 
_löe_numbî
(
löe_numbî
),

130 
_func
(
func
)

133 
	gvútuÆ
 ~
log
()

135 
ouçut_pﬁicy
()(
	g¨g
, 
	g_out
, 
	g_fûíame
, 
	g_löe_numbî
, 
	g_func
);

138 
	gpublic
:

139 
ãm∂©e
<
˛ass
 
T
>

140 
log
 &
›î©‹
<<(c⁄° 
T
 &
x
)

142 
¨g
 << 
x
;

143  *
	gthis
;

146 
	g¥iv©e
:

147 
ty≥«me
 
ouçut_pﬁicy
::
°ªam_buf„r
 
¨g
;

149 
	g¥iv©e
:

150 
log
( constÜog& );

151 c⁄° 
	glog
& 
	g›î©‹
=–c⁄° 
log
& );

155 
˛ass
 
	gmake_˚º
 : 
public
 
dëaû
::
log
<dëaû::
ch™√Œn
> {

156 
public
:

157 
make_˚º
(c⁄° * 
fûíame
, 
löe_numbî
, c⁄° * 
func
) :

158 
dëaû
::
log
<dëaû::
ch™√Œn
>(
°d
::
˚º
, 
	gfûíame
, 
	glöe_numbî
, 
	gfunc
)

161 
	g¥iv©e
:

162 
make_˚º
( const make_cerr& );

163 c⁄° 
	gmake_˚º
& 
	g›î©‹
=–c⁄° 
make_˚º
& );

166 
˛ass
 
	g˚º
 : 
public
 
dëaû
::
log
<dëaû::
ch™√l
> {

167 
public
:

168 
˚º
(c⁄° * 
fûíame
, 
löe_numbî
, c⁄° * 
func
) :

169 
dëaû
::
log
<dëaû::
ch™√l
>(
°d
::
cout
, 
	gfûíame
, 
	glöe_numbî
, 
	gfunc
)

172 
	g¥iv©e
:

173 
˚º
( const cerr& );

174 c⁄° 
	g˚º
& 
	g›î©‹
=–c⁄° 
˚º
& );

177 
˛ass
 
	g˛og
 : 
public
 
dëaû
::
log
<dëaû::
ch™√l
> {

178 
public
:

179 
˛og
(c⁄° * 
fûíame
, 
löe_numbî
, c⁄° * 
func
) :

180 
dëaû
::
log
<dëaû::
ch™√l
>(
°d
::
˛og
, 
	gfûíame
, 
	glöe_numbî
, 
	gfunc
)

183 
	g¥iv©e
:

184 
˛og
( const clog& );

185 c⁄° 
	g˛og
& 
	g›î©‹
=–c⁄° 
˛og
& );

188 
˛ass
 
	gmake_cout
 : 
public
 
dëaû
::
log
<dëaû::
ch™√Œn
> {

189 
public
:

190 
make_cout
(c⁄° * 
fûíame
, 
löe_numbî
, c⁄° * 
func
) :

191 
dëaû
::
log
<dëaû::
ch™√Œn
>(
°d
::
cout
, 
	gfûíame
, 
	glöe_numbî
, 
	gfunc
)

194 
	g¥iv©e
:

195 
make_cout
( const make_cout& );

196 c⁄° 
	gmake_cout
& 
	g›î©‹
=–c⁄° 
make_cout
& );

199 
˛ass
 
	gcout
 : 
public
 
dëaû
::
log
<dëaû::
ch™√l
> {

200 
public
:

201 
cout
(c⁄° * 
fûíame
, 
löe_numbî
, c⁄° * 
func
) :

202 
dëaû
::
log
<dëaû::
ch™√l
>(
°d
::
cout
, 
	gfûíame
, 
	glöe_numbî
, 
	gfunc
)

205 
	g¥iv©e
:

206 
cout
( const cout& );

207 c⁄° 
	gcout
& 
	g›î©‹
=–c⁄° 
cout
& );

213 
	#Eº‹
 
°ªam
::
	$˚º
(
__FILE__
, 
__LINE__
, 
__func__
)

	)

215 
	#Out
 
°ªam
::
	$cout
(
NULL
, 
__LINE__
, 
__func__
)

	)

217 
	#Ouä
(Ë
°ªam
::
	`cout
(
NULL
, 
__LINE__
, 
__func__
Ë<< " "

	)

219 
	#Log
 
°ªam
::
	$˛og
(
NULL
, 
__LINE__
, 
__func__
)

	)

221 
	#Logn
(Ë
°ªam
::
	`˛og
(
NULL
, 
__LINE__
, 
__func__
Ë<< " "

	)

223 
	}
}

	@libtest/strerror.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

40 
«me•a˚
 
	glibã°
 {

42 c⁄° *
ã°_°ªº‹
(
ã°_ªtu∫_t
 
code
)

44 
	gcode
) {

45 
	gTEST_SUCCESS
:

48 
	gTEST_FAILURE
:

51 
	gTEST_SKIPPED
:

55 
FATAL
("NoÖort could be found");

61 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	gã°_ªtu∫_t
 &
	g¨g
)

63 
	gouçut
 << 
	glibã°
::
ã°_°ªº‹
(
¨g
);

64  
	gouçut
;

67 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° std::
ve˘‹
<> &
¨g
)

69 
ouçut
 << "°d::ve˘‹<ch¨>:" << 
¨g
.
size
();

70  
	gouçut
;

	@libtest/strerror.h

37 #¥agm®
⁄˚


39 
	~<ve˘‹
>

40 
	~<io°ªam
>

42 
«me•a˚
 
	glibã°
 {

47 
LIBTEST_API


48 c⁄° *
ã°_°ªº‹
(
ã°_ªtu∫_t
 
code
);

52 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	gã°_ªtu∫_t
 &
	g¨g
);

53 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° std::
ve˘‹
<> &
¨g
);

	@libtest/string.hpp

37 #¥agm®
⁄˚


39 
	~"utû/°rög.hµ
"

41 
	#ã°_lôîÆ_∑øm
 
utû_lôîÆ_∑øm


	)

42 
	#ã°_lôîÆ_com∑ª_∑øm
 
utû_lôîÆ_com∑ª_∑øm


	)

43 
	#ã°_lôîÆ_∑øm_size
 
utû_lôîÆ_∑øm_size


	)

44 
	#ã°_°rög_make_‰om_c°r
 
utû_°rög_make_‰om_c°r


	)

45 
	#ã°_°rög_make_‰om_¨øy
 
utû_°rög_make_‰om_¨øy


	)

46 
	#ã°_¨øy_Àngth
 
utû_¨øy_Àngth


	)

	@libtest/test.h

37 #¥agm®
⁄˚


39 #i‚de‡
__INTEL_COMPILER


40 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

43 
	~<libã°/lôe.h
>

48 
	sã°_°
 {

49 c⁄° *
	m«me
;

50 
boﬁ
 
	mªquúes_Êush
;

51 
ã°_ˇŒback_‚
 *
	mã°_‚
;

54 
	#ã°_as£π_î∫o
(
A
) \

57 i‡((
A
)) { \

58 
	`Ârötf
(
°dîr
, "\n%s:%d: As£πi⁄ faûed f‹ %s: ", 
__FILE__
, 
__LINE__
, 
__func__
);\

59 
	`≥º‹
(#A); \

60 
	`Ârötf
(
°dîr
, "\n"); \

61 
libã°
::
	`¸óã_c‹e
(); \

62 
	`as£π
((
A
)); \

64 } 0)

	)

66 
	#ã°_åuth
(
A
) \

69 i‡(! (
A
)) { \

70 
	`Ârötf
(
°dîr
, "\n%s:%d: As£πi⁄ \"%s\" faûed, i¿%s\n", 
__FILE__
, 
__LINE__
, #A, 
__func__
);\

71 
libã°
::
	`¸óã_c‹e
(); \

72  
TEST_FAILURE
; \

74 } 0)

	)

76 
	#ã°_åue
(
A
) \

79 i‡(! (
A
)) { \

80 
	`Ârötf
(
°dîr
, "\n%s:%d: As£πi⁄ \"%s\" faûed, i¿%s\n", 
__FILE__
, 
__LINE__
, #A, 
__func__
);\

81 
libã°
::
	`¸óã_c‹e
(); \

82  
TEST_FAILURE
; \

84 } 0)

	)

86 
	#ã°_åue_gŸ
(
A
, 
B
Ë
	`ã°_åue
(A);

	)

87 
	#ã°_åue_höt
(
A
, 
B
Ë
	`ã°_åue
(A);

	)

89 
	#ã°_com∑ª_höt
(
A
, 
B
, 
C
Ë
	`ã°_com∑ª
(A, B);

	)

90 
	#ã°_com∑ª_gŸ
(
A
, 
B
, 
C
Ë
	`ã°_com∑ª
(A, B);

	)

92 
	#ã°_skù
(
__ex≥˘ed
, 
__a˘uÆ
) \

95 i‡(
libã°
::
	`_com∑ª
(
__FILE__
, 
__LINE__
, 
__func__
, ((
__ex≥˘ed
)), ((
__a˘uÆ
)), 
Ál£
) == false) \

97  
TEST_SKIPPED
; \

99 } 0)

	)

101 
	#ã°_skù_vÆgröd
() \

104 i‡(
libã°
::
	`_ö_vÆgröd
(
__FILE__
, 
__LINE__
, 
__func__
)) \

106  
TEST_SKIPPED
; \

108 } 0)

	)

110 
	#ã°_Áû
(
A
) \

114 
	`Ârötf
(
°dîr
, "\n%s:%d: Faûed wôh %s, i¿%s\n", 
__FILE__
, 
__LINE__
, #A, 
__func__
);\

115 
libã°
::
	`¸óã_c‹e
(); \

116  
TEST_FAILURE
; \

118 } 0)

	)

121 
	#ã°_Ál£
(
A
) \

124 i‡((
A
)) { \

125 
	`Ârötf
(
°dîr
, "\n%s:%d: As£πi⁄ faûed %s, i¿%s\n", 
__FILE__
, 
__LINE__
, #A, 
__func__
);\

126 
libã°
::
	`¸óã_c‹e
(); \

127  
TEST_FAILURE
; \

129 } 0)

	)

131 
	#ã°_Ál£_wôh
(
A
,
B
) \

134 i‡((
A
)) { \

135 
	`Ârötf
(
°dîr
, "\n%s:%d: As£πi⁄ faûed %†wôh %s\n", 
__FILE__
, 
__LINE__
, #A, (
B
));\

136 
libã°
::
	`¸óã_c‹e
(); \

137  
TEST_FAILURE
; \

139 } 0)

	)

141 
	#ã°_√_com∑ª
(
__ex≥˘ed
, 
__a˘uÆ
) \

144 i‡(
libã°
::
	`_√_com∑ª
(
__FILE__
, 
__LINE__
, 
__func__
, ((
__ex≥˘ed
)), ((
__a˘uÆ
)), 
åue
Ë=
Ál£
) \

146 
libã°
::
	`¸óã_c‹e
(); \

147  
TEST_FAILURE
; \

149 } 0)

	)

151 
	#ã°_com∑ª
(
__ex≥˘ed
, 
__a˘uÆ
) \

154 i‡(
libã°
::
	`_com∑ª
(
__FILE__
, 
__LINE__
, 
__func__
, ((
__ex≥˘ed
)), ((
__a˘uÆ
)), 
åue
Ë=
Ál£
) \

156 
libã°
::
	`¸óã_c‹e
(); \

157  
TEST_FAILURE
; \

159 } 0)

	)

161 
	#ã°_zîo
(
__a˘uÆ
) \

164 i‡(
libã°
::
	`_com∑ª_zîo
(
__FILE__
, 
__LINE__
, 
__func__
, ((
__a˘uÆ
))Ë=
Ál£
) \

166 
libã°
::
	`¸óã_c‹e
(); \

167  
TEST_FAILURE
; \

169 } 0)

	)

171 
	#ã°_nuŒ
 
ã°_zîo


	)

173 
	#ã°_com∑ª_w¨n
(
__ex≥˘ed
, 
__a˘uÆ
) \

176 (
libã°
::
	`_com∑ª
(
__FILE__
, 
__LINE__
, 
__func__
, (
__ex≥˘ed
), (
__a˘uÆ
)), 
åue
); \

177 } 0)

	)

179 
	#ã°_w¨n
(
__åuth
, 
__ex∂aö
) \

182 (
libã°
::
	`_as£π_åuth
(
__FILE__
, 
__LINE__
, 
__func__
, 
	`boﬁ
((
__åuth
)), #__åuth, 
__ex∂aö
)); \

183 } 0)

	)

185 
	#ã°_°rcmp
(
__ex≥˘ed
, 
__a˘uÆ
) \

188 (
libã°
::
	`_com∑ª_°rcmp
(
__FILE__
, 
__LINE__
, 
__func__
, (
__ex≥˘ed
), (
__a˘uÆ
))); \

189 } 0)

	)

191 
	#ã°_memcmp
(
A
,
B
,
C
) \

194 i‡((
A
Ë=
NULL
 
	`‹
 (
B
Ë=NULL 
‹
 
	`memcmp
((A), (B), (
C
))) \

196 
	`Ârötf
(
°dîr
, "\n%s:%d: %.*†-> %.*s\n", 
__FILE__
, 
__LINE__
, ()(
C
), (*)(
A
), ()(C), (*)(
B
)); \

197 
libã°
::
	`¸óã_c‹e
(); \

198  
TEST_FAILURE
; \

200 } 0)

	)

202 
	#ã°_ªtu∫_if
(
__ã°_ªtu∫_t
) \

205 i‡((
__ã°_ªtu∫_t
Ë!
TEST_SUCCESS
) \

207  
__ã°_ªtu∫_t
; \

209 } 0)

	)

	@libtest/test.hpp

41 #¥agm®
⁄˚


43 #i‚de‡
YATL_FULL


44 
	#YATL_FULL
 1

	)

47 #i‚de‡
__PRETTY_FUNCTION__


48 
	#__PRETTY_FUNCTION__
 
__func__


	)

51 
	#YATL_STRINGIFY
(
x
Ë#x

	)

52 
	#YATL_TOSTRING
(
x
Ë
	`YATL_STRINGIFY
(x)

	)

53 
	#YATL_AT
 
__FILE__
 ":" 
	`YATL_TOSTRING
(
__LINE__
)

	)

54 
	#YATL_AT_PARAM
 
__func__
, 
AT


	)

55 
	#YATL_UNIQUE
 
__FILE__
 ":" 
	`YATL_TOSTRING
(
__LINE__
Ë"_unique"

	)

56 
	#YATL_UNIQUE_FUNC_NAME
 
__FILE__
 ":" 
	`YATL_TOSTRING
(
__LINE__
Ë"_unique_func"

	)

58 
	#LIBYATL_DEFAULT_PARAM
 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__


	)

60 
	~<c°dio
>

61 
	~<c°dlib
>

62 
	~<¨∑/öë.h
>

64 
	~<libã°/visibûôy.h
>

65 
	~<libã°/vîsi⁄.h
>

67 
	~<libã°/vch¨.hµ
>

68 
	~<libã°/Áèl.hµ
>

69 
	~<libã°/ªsu….hµ
>

71 
	~<libã°/has.hµ
>

72 
	~<libã°/îr‹.h
>

73 
	~<libã°/°ªº‹.h
>

74 
	~<libã°/timî.hµ
>

75 
	~<libã°/Æ¨m.h
>

76 
	~<libã°/°ªam.h
>

77 
	~<libã°/com∑ris⁄.hµ
>

78 
	~<libã°/£rvî.h
>

79 
	~<libã°/£rvî_c⁄èöî.h
>

80 
	~<libã°/waô.h
>

81 
	~<libã°/ˇŒbacks.h
>

82 
	~<libã°/ã°.h
>

83 
	~<libã°/dªam.h
>

84 
	~<libã°/c‹e.h
>

85 
	~<libã°/ru¬î.h
>

86 
	~<libã°/p‹t.h
>

87 
	~<libã°/is_loˇl.hµ
>

88 
	~<libã°/sockë.hµ
>

89 
	~<libã°/cﬁÀ˘i⁄.h
>

90 
	~<libã°/‰amew‹k.h
>

91 
	~<libã°/gë.h
>

92 
	~<libã°/cmdlöe.h
>

93 
	~<libã°/°rög.hµ
>

94 
	~<libã°/bö¨õs.h
>

95 
	~<libã°/hâp.hµ
>

96 
	~<libã°/˝u.hµ
>

97 
	~<libã°/tmpfûe.hµ
>

98 
	~<libã°/˛õ¡.hµ
>

99 
	~<libã°/thªad.hµ
>

	@libtest/thread.hpp

37 #¥agm®
⁄˚


39 
	~<±hªad.h
>

41 
«me•a˚
 
	glibã°


43 
«me•a˚
 
	gthªad


46 ˛as†
	cMuãx


48 
	gpublic
:

49 
Muãx
() :

50 
_îr
(0)

52 
_îr

±hªad_muãx_öô
(&
_muãx
, 
NULL
);

55 ~
Muãx
()

57 i‡((
	g_îr

±hªad_muãx_de°roy
(&
_muãx
)))

59 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_c⁄d_de°roy: %s", 
°ªº‹
(
_îr
));

63 
±hªad_muãx_t
* 
h™dÀ
()

65 i‡(
	g_îr
 != 0)

67 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_muãx_öô: %s", 
°ªº‹
(
_îr
));

70  &
	g_muãx
;

73 
	g¥iv©e
:

74 
_îr
;

75 
±hªad_muãx_t
 
	g_muãx
;

78 ˛as†
	cSc›edLock


80 
	gpublic
:

81 
Sc›edLock
(
Muãx
& 
muãx_
) :

82 
_muãx
(
muãx_
)

84 
öô
();

87 ~
Sc›edLock
()

89 
	gîr
;

90 i‡((
	gîr

±hªad_muãx_u∆ock
(
_muãx
.
h™dÀ
())))

92 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_muãx_u∆ock: %s", 
°ªº‹
(
îr
));

96 
Muãx
* 
h™dÀ
()

98  &
	g_muãx
;

101 
	g¥iv©e
:

102 
öô
()

104 
îr
;

105 i‡((
	gîr

±hªad_muãx_lock
(
_muãx
.
h™dÀ
())))

107 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_muãx_lock: %s", 
°ªº‹
(
îr
));

111 
	g¥iv©e
:

112 
Muãx
& 
_muãx
;

115 ˛as†
	cC⁄dôi⁄


117 
	gpublic
:

118 
C⁄dôi⁄
()

120 
îr
;

121 i‡((
	gîr

±hªad_c⁄d_öô
(&
_c⁄d
, 
NULL
)))

123 
throw
 
	glibã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_muãx_öô: %s", 
°ªº‹
(
îr
));

127 ~
C⁄dôi⁄
()

129 
	gîr
;

130 i‡((
	gîr

±hªad_c⁄d_de°roy
(&
_c⁄d
)))

132 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_c⁄d_de°roy: %s", 
°ªº‹
(
îr
));

136 
brﬂdˇ°
()

138 
	gîr
;

139 i‡((
	gîr

±hªad_c⁄d_brﬂdˇ°
(&
_c⁄d
)))

141 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_c⁄d_brﬂdˇ°: %s", 
°ªº‹
(
îr
));

145 
sig«l
()

147 
	gîr
;

148 i‡((
	gîr

±hªad_c⁄d_sig«l
(&
_c⁄d
)))

150 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_c⁄d_brﬂdˇ°: %s", 
°ªº‹
(
îr
));

154 
waô
(
Sc›edLock
& 
lock_
)

156 
	gîr
;

157 i‡((
	gîr

±hªad_c⁄d_waô
(&
_c⁄d
, 
lock_
.
h™dÀ
()->handle())))

159 
throw
 
	glibã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_c⁄d_waô: %s", 
°ªº‹
(
îr
));

163 
	g¥iv©e
:

164 
±hªad_c⁄d_t
 
_c⁄d
;

167 ˛as†
	cB¨rõr


169 
	gpublic
:

170 
ex∂icô
 
B¨rõr
(
uöt32_t
 
cou¡
):

171 
_thªshﬁd
(
cou¡
),

172 
_cou¡
(
cou¡
),

173 
_gíî©i⁄
(0)

175 i‡(
	g_cou¡
 == 0)

177 
Áèl_as£π
("Zero isán invalid value");

181 ~
B¨rõr
()

185 
boﬁ
 
waô
()

187 
Sc›edLock
 
l
(
_muãx
);

188 
uöt32_t
 
	ggí
 = 
_gíî©i⁄
;

190 i‡(--
	g_cou¡
 == 0)

192 
_gíî©i⁄
++;

193 
	g_cou¡
 = 
_thªshﬁd
;

194 
	g_c⁄d
.
brﬂdˇ°
();

196  
	gåue
;

199 
	ggí
 =
_gíî©i⁄
)

201 
_c⁄d
.
waô
(
l
);

204  
	gÁl£
;

207 
	g¥iv©e
:

208 
Muãx
 
_muãx
;

209 
C⁄dôi⁄
 
	g_c⁄d
;

210 
uöt32_t
 
	g_thªshﬁd
;

211 
uöt32_t
 
	g_cou¡
;

212 
uöt32_t
 
	g_gíî©i⁄
;

215 ˛as†
	cThªad


217 
	g¥iv©e
:

218 *(*
	t°¨t_routöe_‚
) (*);

220 
	gpublic
:

221 
ãm∂©e
 <
˛ass
 
Fun˘i⁄
,˛as†
	gArg1
>

222 
Thªad
(
Fun˘i⁄
 
func
, 
Arg1
 
¨g
):

223 
_joöed
(
Ál£
),

224 
_func
((
°¨t_routöe_‚
)
func
),

225 
_c⁄ãxt
(
¨g
)

227 
	gîr
;

228 i‡((
	gîr

±hªad_¸óã
(&
_thªad
, 
NULL
, 
íåy_func
, (*)
this
)))

230 
throw
 
	glibã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_¸óã: %s", 
°ªº‹
(
îr
));

232 
	g_ow√r

±hªad_£lf
();

235 
boﬁ
 
ru¬ög
() const

237  (
±hªad_kûl
(
_thªad
, 0) == 0);

240 
boﬁ
 
dëached
()

242 i‡(
	gEDEADLK
 =
±hªad_joö
(
_thªad
, 
NULL
))

244  
	gåue
;

248  
	gÁl£
;

251 
boﬁ
 
joö
()

253 i‡(
	g_thªad
 =
±hªad_£lf
())

255 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "Thread cannot join on itself");

258 i‡(
	g_ow√r
 !
±hªad_£lf
())

260 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "Attempt made byáÇon-ownerÅheadÅo join onÅhread");

263 
boﬁ
 
	gªt

Ál£
;

265 
Sc›edLock
 
l
(
_joö_muãx
);

266 i‡(
	g_joöed
 =
Ál£
)

268 
îr
;

269 i‡((
	gîr

±hªad_joö
(
_thªad
, 
NULL
)))

271 
	gîr
)

273 
	gEINVAL
:

276 
	gESRCH
:

277 
ªt

åue
;

280 
	gEDEADLK
:

282 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "±hªad_joö: %s", 
°ªº‹
(
îr
));

287 
	gªt

åue
;

290 
	g_joöed

åue
;

294  
	gªt
;

297 ~
Thªad
()

299 
joö
();

302 
	g¥Ÿe˘ed
:

303 
run
()

305 
_func
(
_c⁄ãxt
);

308 
	g¥iv©e
:

309 * 
íåy_func
(* 
This
)

311 ((
Thªad
 *)
This
)->
run
();

312  
	gNULL
;

315 
	g¥iv©e
:

316 
boﬁ
 
_joöed
;

317 
±hªad_t
 
	g_thªad
;

318 
±hªad_t
 
	g_ow√r
;

319 
°¨t_routöe_‚
 
	g_func
;

320 * 
	g_c⁄ãxt
;

321 
Muãx
 
	g_joö_muãx
;

	@libtest/timer.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/timî.hµ
>

41 
	~<˘ime
>

42 
	~<iom™ù
>

44 #ifde‡
__MACH__


45 
	~<mach/˛ock.h
>

46 
	~<mach/mach.h
>

48 
	~<sys/time.h
>

51 
«me•a˚
 
	glibã°
 {

53 
	gTimî
::
Timî
()

55 
_begö
.
tv_£c
= 0;

56 
	g_begö
.
	gtv_n£c
= 0;

57 
	g_íd
.
	gtv_£c
= 0;

58 
	g_íd
.
	gtv_n£c
= 0;

61 
	gTimî
::
ª£t
()

63 
_íd
.
tv_£c
= 0;

64 
	g_íd
.
	gtv_n£c
= 0;

65 
_time
(
_begö
);

68 
	gTimî
::
ßm∂e
()

70 
_time
(
_íd
);

73 
	gTimî
::
off£t
(
öt64_t
 
möuãs_¨g
, i¡64_à
£c⁄ds_¨g
, i¡64_à
«no£c⁄ds
)

75 
ª£t
();

76 
	g_íd

_begö
;

77 
	g_íd
.
	gtv_£c
+(
möuãs_¨g
 * 60Ë+
£c⁄ds_¨g
;

78 
	g_íd
.
	gtv_n£c
+
«no£c⁄ds
;

81 
öt64_t
 
	gTimî
::
möuãs
()

83 
time•ec
 
ªsu…
;

84 
dif„ªn˚
(
ªsu…
);

85  
öt64_t
(
ªsu…
.
tv_£c
 / 60);

88 
uöt64_t
 
	gTimî
::
ñ≠£d_mûli£c⁄ds
() const

90 
time•ec
 
ãmp
;

91 
dif„ªn˚
(
ãmp
);

93  
	gãmp
.
	gtv_£c
*1000 +ãmp.
	gtv_n£c
/1000000;

96 
	gTimî
::
dif„ªn˚
(
time•ec
& 
¨g
) const

98 i‡((
_íd
.
tv_n£c
 -
_begö
.tv_nsec) < 0)

100 
¨g
.
tv_£c

_íd
.tv_£¯-
_begö
.tv_sec -1;

101 
	g¨g
.
	gtv_n£c
1000000000 +
_íd
.
tv_n£c
 -
_begö
.tv_nsec;

106 
	g¨g
.
	gtv_£c

_íd
.
tv_£c
 -
_begö
.tv_sec;

107 
	g¨g
.
	gtv_n£c

_íd
.
tv_n£c
 -
_begö
.tv_nsec;

111 
	gTimî
::
_time
(
time•ec
& 
ts
)

113 #ifde‡
__MACH__


114 
˛ock_£rv_t
 
_˛ock_£rv
;

115 
mach_time•ec_t
 
	g_mach_time•ec
;

116 
ho°_gë_˛ock_£rvi˚
(
mach_ho°_£lf
(), 
CALENDAR_CLOCK
, &
_˛ock_£rv
);

117 
˛ock_gë_time
(
_˛ock_£rv
, &
_mach_time•ec
);

118 
mach_p‹t_dóŒoˇã
(
mach_èsk_£lf
(), 
_˛ock_£rv
);

119 
	gts
.
	gtv_£c

_mach_time•ec
.
tv_£c
;

120 
	gts
.
	gtv_n£c

_mach_time•ec
.
tv_n£c
;

121 #ñi‡
deföed
(
_WIN32
)

122 
	gts
.
	gtv_£c

time
(
NULL
);

123 
	gts
.
	gtv_n£c
= 0;

125 
˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

129 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	glibã°
::
Timî
& 
¨g
)

131 
time•ec
 
ãmp
;

132 
	g¨g
.
dif„ªn˚
(
ãmp
);

134 i‡(
	gãmp
.
	gtv_£c
 > 60)

136 
	gouçut
 << 
	gãmp
.
	gtv_£c
 / 60;

137 
	gouçut
 << "." << 
	gãmp
.
	gtv_£c
 % 60;

141 
	gouçut
 << 
	gãmp
.
	gtv_£c
;

144 
	gouçut
 << ":";

145 
	gouçut
 << 
	g°d
::
£tfûl
('0'Ë<< 
°d
::
£tw
(9Ë<< 
ãmp
.
tv_n£c
;

147  
	gouçut
;

	@libtest/timer.hpp

37 #¥agm®
⁄˚


39 
	~<c°dlib
>

40 
	~<˘ime
>

41 
	~<io°ªam
>

44 
«me•a˚
 
	glibã°
 {

46 ˛as†
	cTimî
 {

47 
	gpublic
:

49 
Timî
();

51 
ª£t
();

53 
ßm∂e
();

55 
off£t
(
öt64_t
 
möuãs_¨g
, i¡64_à
£c⁄ds_¨g
, i¡64_à
«no£c⁄ds
);

57 
öt64_t
 
möuãs
();

59 
uöt64_t
 
ñ≠£d_mûli£c⁄ds
() const;

61 
dif„ªn˚
(
time•ec
& 
¨g
) const;

63 
	g¥iv©e
:

64 
_time
(
time•ec
& 
ts
);

66 
	g¥iv©e
:

67 
time•ec
 
_begö
;

68 
time•ec
 
	g_íd
;

71 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	glibã°
::
Timî
& 
¨g
);

	@libtest/tmpfile.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/comm⁄.h
>

41 
«me•a˚
 
	glibã°
 {

43 
	g°d
::
°rög
 
¸óã_tmpfûe
(c⁄° 
°d
::°rög& 
«me
)

45 
libã°
::
vch¨_t
 
fûe_buf„r
;

46 
	gfûe_buf„r
.
ªsize
(
FILENAME_MAX
);

47 
	gfûe_buf„r
[0]= 0;

49 
	gÀngth

¢¥ötf
(&
fûe_buf„r
[0], fûe_buf„r.
size
(), "v¨/tmp/%s.XXXXXX", 
«me
.
c_°r
());

50 
Áèl_as£π
(
Àngth
 > 0);

52 
	gfd
;

53 i‡((
	gfd

mk°emp
(&
fûe_buf„r
[0])) == -1)

55 
throw
 
libã°
::
Áèl
(
LIBYATL_DEFAULT_PARAM
, "mk°emp(ËÁûed o¿%†wôh %s", &
fûe_buf„r
[0], 
°ªº‹
(
î∫o
));

57 
˛o£
(
fd
);

58 
u∆ök
(&
fûe_buf„r
[0]);

60  &
	gfûe_buf„r
[0];

	@libtest/tmpfile.hpp

37 #¥agm®
⁄˚


39 
	~<libã°/comm⁄.h
>

41 
«me•a˚
 
	glibã°
 {

43 
	g°d
::
°rög
 
¸óã_tmpfûe
(c⁄° 
°d
::string&);

	@libtest/unittest.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<libã°/y©l.h
>

41 #i‡
deföed
(
HAVE_LIBMEMCACHED_1_0_TYPES_RETURN_H
) && HAVE_LIBMEMCACHED_1_0_TYPES_RETURN_H

42 
	~<libmemˇched-1.0/ty≥s/ªtu∫.h
>

45 #i‡
deföed
(
HAVE_LIBGEARMAN_1_0_RETURN_H
) && HAVE_LIBGEARMAN_1_0_RETURN_H

46 
	~<libgórm™-1.0/ªtu∫.h
>

49 
	~<c°dlib
>

50 
	~<uni°d.h
>

52 
usög
 
«me•a˚
 
	glibã°
;

54 
	g°d
::
°rög
 
ã°ög_£rvi˚
;

57 
uöt32_t
 
	gÁèl_ˇŒs
= 0;

59 
ã°_ªtu∫_t
 
	$gëív_TEST
(*)

62 **
±r

ívú⁄
; *ptr;Ötr++)

64 
Eº‹
 << *
±r
;

68  
TEST_SUCCESS
;

69 
	}
}

71 
ã°_ªtu∫_t
 
	$LIBTOOL_COMMAND_ã°
(*)

73 
	`ã°_åue
(
	`gëív
("LIBTOOL_COMMAND"));

74  
TEST_SUCCESS
;

75 
	}
}

77 
ã°_ªtu∫_t
 
	$VALGRIND_COMMAND_ã°
(*)

79 
	`ã°_åue
(
	`gëív
("VALGRIND_COMMAND"));

80  
TEST_SUCCESS
;

81 
	}
}

83 
ã°_ªtu∫_t
 
	$HELGRIND_COMMAND_ã°
(*)

85 
	`ã°_åue
(
	`gëív
("HELGRIND_COMMAND"));

86  
TEST_SUCCESS
;

87 
	}
}

89 
ã°_ªtu∫_t
 
	$GDB_COMMAND_ã°
(*)

91 
	`ã°_åue
(
	`gëív
("GDB_COMMAND"));

92  
TEST_SUCCESS
;

93 
	}
}

95 
ã°_ªtu∫_t
 
	$ã°_suc˚ss_equÆs_⁄e_ã°
(*)

97 
	`ã°_skù
(
HAVE_LIBMEMCACHED
, 1);

98 #i‡
	`deföed
(
HAVE_LIBMEMCACHED_1_0_TYPES_RETURN_H
) && HAVE_LIBMEMCACHED_1_0_TYPES_RETURN_H

99 
	`ã°_zîo
(
MEMCACHED_SUCCESS
);

101  
TEST_SUCCESS
;

102 
	}
}

104 
ã°_ªtu∫_t
 
	$ã°_suc˚ss_ã°
(*)

106  
TEST_SUCCESS
;

107 
	}
}

109 
ã°_ªtu∫_t
 
	$ã°_throw_suc˚ss_TEST
(*)

111 
åy
 {

112 
_SUCCESS
;

114 
	`ˇtch
 (c⁄° 
libã°
::
__suc˚ss
&)

116  
TEST_SUCCESS
;

118 
	`ˇtch
 (...)

120  
TEST_FAILURE
;

123  
TEST_FAILURE
;

124 
	}
}

126 
ã°_ªtu∫_t
 
	$ã°_throw_skù_ma¸o_TEST
(*)

128 
åy
 {

129 
	`SKIP_IF
(
åue
);

131 
	`ˇtch
 (c⁄° 
libã°
::
__skù≥d
&)

133  
TEST_SUCCESS
;

135 
	`ˇtch
 (...)

137 
	`FAIL
("SLIP_IF() failedÅoÅhrowÜibtest::_skipped");

140 
	`FAIL
("SLIP_IF() failedÅoÅhrow");

142  
TEST_FAILURE
;

143 
	}
}

145 
ã°_ªtu∫_t
 
	$ã°_throw_skù_TEST
(*)

147 
åy
 {

148 
throw
 
libã°
::
	`__skù≥d
(
LIBYATL_DEFAULT_PARAM
, "basicÅest");

150 
	`ˇtch
 (c⁄° 
libã°
::
__skù≥d
&)

152  
TEST_SUCCESS
;

154 
	`ˇtch
 (...)

156 
	`FAIL
("SLIP_IF() failedÅoÅhrowÜibtest::_skipped");

159 
	`FAIL
("SLIP_IF() failedÅoÅhrow");

161  
TEST_FAILURE
;

162 
	}
}

164 
ã°_ªtu∫_t
 
	$ã°_throw_Áû_TEST
(*)

166 
åy
 {

167 
	`FAIL
("test message!");

169 
	`ˇtch
 (c⁄° 
libã°
::
__Áûuª
& 
e
)

171 
°d
::
°rög
 
	`com∑ª_mesßge
("test message!");

172 
	`ã°_zîo
(
com∑ª_mesßge
.
	`com∑ª
(
e
.
	`wh©
()));

173  
TEST_SUCCESS
;

175 
	`ˇtch
 (...)

177  
TEST_FAILURE
;

180  
TEST_FAILURE
;

181 
	}
}

182 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstack-protector"

184 
ã°_ªtu∫_t
 
	$ASSERT_FALSE__TEST
(*)

186 
åy
 {

187 
	`ASSERT_FALSE
(
åue
);

189 
	`ˇtch
 (c⁄° 
libã°
::
__Áûuª
& 
e
)

191 
	`ASSERT_STREQ
(
e
.
	`wh©
(), "Assertion '!true'");

192  
TEST_SUCCESS
;

194 
	`ˇtch
 (...)

196  
TEST_FAILURE
;

199  
TEST_FAILURE
;

200 
	}
}

202 
ã°_ªtu∫_t
 
	$ASSERT_NEQ_FAIL_TEST
(*)

204 
åy
 {

205 
	`ASSERT_NEQ
(1,1);

207 
	`ˇtch
 (c⁄° 
libã°
::
__Áûuª
& 
e
)

209 
	`ASSERT_STREQ
(
e
.
	`wh©
(), "Assertion '1' == '1'");

210  
TEST_SUCCESS
;

212 
	`ˇtch
 (...)

214  
TEST_FAILURE
;

217  
TEST_FAILURE
;

218 
	}
}

220 
ã°_ªtu∫_t
 
	$ASSERT_NEQ_TEST
(*)

222 
	`ASSERT_NEQ
(1,0);

224  
TEST_SUCCESS
;

225 
	}
}

227 
ã°_ªtu∫_t
 
	$ASSERT_FALSE_TEST
(*)

229 
åy
 {

230 
	`FAIL
(
__func__
);

232 
	`ˇtch
 (c⁄° 
libã°
::
__Áûuª
& 
e
)

234 
	`ASSERT_STREQ
(
e
.
	`wh©
(), 
__func__
);

235  
TEST_SUCCESS
;

237 
	`ˇtch
 (...)

239  
TEST_FAILURE
;

242  
TEST_FAILURE
;

243 
	}
}

245 
ã°_ªtu∫_t
 
	$ã°_Áûuª_ã°
(*)

247  
TEST_SKIPPED
;

249 
	`ASSERT_EQ
(1, 2);

250  
TEST_SUCCESS
;

251 
	}
}

253 
ã°_ªtu∫_t
 
	$loˇl_ã°
(*)

255 i‡(
	`gëív
("LIBTEST_LOCAL"))

257 
	`ã°_åue
(
	`ã°_is_loˇl
());

261 
	`ã°_Ál£
(
	`ã°_is_loˇl
());

264  
TEST_SUCCESS
;

265 
	}
}

267 
ã°_ªtu∫_t
 
	$loˇl_nŸ_ã°
(*)

269  
TEST_SKIPPED
;

271 
°d
::
°rög
 
ãmp
;

273 c⁄° *
±r
;

274 i‡((
±r

	`gëív
("LIBTEST_LOCAL")Ë=
NULL
)

276 
ãmp
.
	`≠≥nd
(
±r
);

280 
	`_com∑ª
(
__FILE__
, 
__LINE__
, 
__func__
, 0, 
	`un£ãnv
("LIBTEST_LOCAL"), 
åue
);

281 
	`ASSERT_EQ
(0, 
	`un£ãnv
("LIBTEST_LOCAL"));

282 
	`ã°_Ál£
(
	`ã°_is_loˇl
());

284 
	`ASSERT_EQ
(0, 
	`£ãnv
("LIBTEST_LOCAL", "1", 1));

285 
	`ã°_åue
(
	`ã°_is_loˇl
());

287 i‡(
ãmp
.
	`em±y
())

289 
	`ASSERT_EQ
(0, 
	`un£ãnv
("LIBTEST_LOCAL"));

293 *
ﬁd_°rög

	`°rdup
(
ãmp
.
	`c_°r
());

294 
	`ASSERT_EQ
(0, 
	`£ãnv
("LIBTEST_LOCAL", 
ﬁd_°rög
, 1));

297  
TEST_SUCCESS
;

298 
	}
}

300 
ã°_ªtu∫_t
 
	$v¨_exi°s_ã°
(*)

302 
	`ASSERT_EQ
(0, 
	`ac˚ss
("v¨", 
R_OK
 | 
W_OK
 | 
X_OK
));

303  
TEST_SUCCESS
;

304 
	}
}

306 
ã°_ªtu∫_t
 
	$v¨_tmp_exi°s_ã°
(*)

308 
	`ASSERT_EQ
(0, 
	`ac˚ss
("v¨/tmp", 
R_OK
 | 
W_OK
 | 
X_OK
));

309  
TEST_SUCCESS
;

310 
	}
}

312 
ã°_ªtu∫_t
 
	$v¨_run_exi°s_ã°
(*)

314 
	`ASSERT_EQ
(0, 
	`ac˚ss
("v¨/run", 
R_OK
 | 
W_OK
 | 
X_OK
));

315  
TEST_SUCCESS
;

316 
	}
}

318 
ã°_ªtu∫_t
 
	$v¨_log_exi°s_ã°
(*)

320 
	`ASSERT_EQ
(0, 
	`ac˚ss
("v¨/log", 
R_OK
 | 
W_OK
 | 
X_OK
));

321  
TEST_SUCCESS
;

322 
	}
}

324 
ã°_ªtu∫_t
 
	$v¨_drizzÀ_exi°s_ã°
(*)

326 
	`ASSERT_EQ
(0, 
	`ac˚ss
("v¨/drizzÀ", 
R_OK
 | 
W_OK
 | 
X_OK
));

327  
TEST_SUCCESS
;

328 
	}
}

330 
ã°_ªtu∫_t
 
	$v¨_tmp_ã°
(*)

332 
FILE
 *
fûe

	`f›í
("var/tmp/junk", "w+");

333 
	`ã°_åue
(
fûe
);

334 
	`f˛o£
(
fûe
);

335  
TEST_SUCCESS
;

336 
	}
}

338 
ã°_ªtu∫_t
 
	$v¨_run_ã°
(*)

340 
FILE
 *
fûe

	`f›í
("var/run/junk", "w+");

341 
	`ã°_åue
(
fûe
);

342 
	`f˛o£
(
fûe
);

343  
TEST_SUCCESS
;

344 
	}
}

346 
ã°_ªtu∫_t
 
	$v¨_log_ã°
(*)

348 
FILE
 *
fûe

	`f›í
("var/log/junk", "w+");

349 
	`ã°_åue
(
fûe
);

350 
	`f˛o£
(
fûe
);

351  
TEST_SUCCESS
;

352 
	}
}

354 
ã°_ªtu∫_t
 
	$v¨_drizzÀ_ã°
(*)

356 
FILE
 *
fûe

	`f›í
("var/drizzle/junk", "w+");

357 
	`ã°_åue
(
fûe
);

358 
	`f˛o£
(
fûe
);

359  
TEST_SUCCESS
;

360 
	}
}

362 
ã°_ªtu∫_t
 
	$v¨_tmp_rm_ã°
(*)

364 
	`ã°_åue
(
	`u∆ök
("var/tmp/junk") == 0);

365  
TEST_SUCCESS
;

366 
	}
}

368 
ã°_ªtu∫_t
 
	$v¨_run_rm_ã°
(*)

370 
	`ã°_åue
(
	`u∆ök
("var/run/junk") == 0);

371  
TEST_SUCCESS
;

372 
	}
}

374 
ã°_ªtu∫_t
 
	$v¨_log_rm_ã°
(*)

376 
	`ã°_åue
(
	`u∆ök
("var/log/junk") == 0);

377  
TEST_SUCCESS
;

378 
	}
}

380 
ã°_ªtu∫_t
 
	$v¨_drizzÀ_rm_ã°
(*)

382 
	`ã°_åue
(
	`u∆ök
("var/drizzle/junk") == 0);

383  
TEST_SUCCESS
;

384 
	}
}

386 
ã°_ªtu∫_t
 
	$_com∑ª_ã°_ªtu∫_t_ã°
(*)

388 
	`ASSERT_EQ
(
TEST_SUCCESS
, TEST_SUCCESS);

390  
TEST_SUCCESS
;

391 
	}
}

393 
ã°_ªtu∫_t
 
	$_com∑ª_memˇched_ªtu∫_t_ã°
(*)

395 
	`ã°_skù
(
HAVE_LIBMEMCACHED
, 
åue
);

396 #i‡
	`deföed
(
HAVE_LIBMEMCACHED_1_0_TYPES_RETURN_H
) && HAVE_LIBMEMCACHED_1_0_TYPES_RETURN_H

397 
	`ASSERT_EQ
(
MEMCACHED_SUCCESS
, MEMCACHED_SUCCESS);

400  
TEST_SUCCESS
;

401 
	}
}

403 
ã°_ªtu∫_t
 
	$_com∑ª_górm™_ªtu∫_t_ã°
(*)

405 
	`ã°_skù
(
HAVE_LIBGEARMAN
, 
åue
);

406 #i‡
	`deföed
(
HAVE_LIBGEARMAN_1_0_RETURN_H
) && HAVE_LIBGEARMAN_1_0_RETURN_H

407 
	`ASSERT_EQ
(
GEARMAN_SUCCESS
, GEARMAN_SUCCESS);

410  
TEST_SUCCESS
;

411 
	}
}

413 
ã°_ªtu∫_t
 
	$drizzÀd_cy˛e_ã°
(*
obje˘
)

415 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

416 
	`ã°_åue
(
£rvîs
 
™d
 sîvîs->
	`vÆid©e
());

418 #i‡
	`deföed
(
HAVE_GEARMAND_BINARY
) && HAVE_GEARMAND_BINARY

419 
	`ã°_åue
(
	`has_drizzÀd
());

422 
	`ã°_skù
(
åue
, 
	`has_drizzÀd
());

424 
	`ã°_skù
(
åue
, 
	`£rvî_°¨tup
(*
£rvîs
, "drizzÀd", 
	`gë_‰ì_p‹t
(), 
NULL
));

426  
TEST_SUCCESS
;

427 
	}
}

429 
ã°_ªtu∫_t
 
	$górm™d_cy˛e_ã°
(*
obje˘
)

431 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

432 
	`ã°_åue
(
£rvîs
 
™d
 sîvîs->
	`vÆid©e
());

434 
	`ã°_skù
(
åue
, 
	`has_górm™d
());

435 
	`ã°_skù
(
åue
, 
	`£rvî_°¨tup
(*
£rvîs
, "górm™d", 
	`gë_‰ì_p‹t
(), 
NULL
));

436 
£rvîs
->
	`˛ór
();

438  
TEST_SUCCESS
;

439 
	}
}

441 
ã°_ªtu∫_t
 
	$skù_shim
(
boﬁ
 
a
, boﬁ 
b
)

443 
	`ã°_skù
(
a
, 
b
);

444  
TEST_SUCCESS
;

445 
	}
}

447 
ã°_ªtu∫_t
 
	$ã°_skù_åue_TEST
(*)

449 
	`ASSERT_EQ
(
åue
,Årue);

450 
	`ASSERT_EQ
(
Ál£
, false);

451 
	`ASSERT_EQ
(
TEST_SUCCESS
, 
	`skù_shim
(
åue
,Årue));

452 
	`ASSERT_EQ
(
TEST_SUCCESS
, 
	`skù_shim
(
Ál£
, false));

454  
TEST_SUCCESS
;

455 
	}
}

457 
ã°_ªtu∫_t
 
	$ã°_skù_Ál£_TEST
(*)

459 
	`ASSERT_EQ
(
TEST_SKIPPED
, 
	`skù_shim
(
åue
, 
Ál£
));

460 
	`ASSERT_EQ
(
TEST_SKIPPED
, 
	`skù_shim
(
Ál£
, 
åue
));

461  
TEST_SUCCESS
;

462 
	}
}

464 
ã°_ªtu∫_t
 
	$£rvî_°¨tup_Áû_TEST
(*
obje˘
)

466 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

467 
	`ã°_åue
(
£rvîs
);

469 
Áèl
::
	`dißbÀ
();

470 
	`ASSERT_EQ
(
£rvîs
->
	`°¨t_£rvî
(
ã°ög_£rvi˚
, 
LIBTEST_FAIL_PORT
, 
NULL
), 
åue
);

471 
Áèl
::
	`íabÀ
();

473  
TEST_SUCCESS
;

474 
	}
}

476 
ã°_ªtu∫_t
 
	$£rvî_°¨tup_TEST
(*
obje˘
)

478 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

479 
	`ã°_åue
(
£rvîs
);

481 
	`ASSERT_EQ
(
£rvîs
->
	`°¨t_£rvî
(
ã°ög_£rvi˚
, 
	`gë_‰ì_p‹t
(), 
NULL
), 
åue
);

483 
	`ã°_åue
(
£rvîs
->
	`œ°
());

484 
pid_t
 
œ°_pid

£rvîs
->
	`œ°
()->
	`pid
();

486 
	`ASSERT_EQ
(
£rvîs
->
	`œ°
()->
	`pid
(), 
œ°_pid
);

487 
	`ã°_åue
(
œ°_pid
 > 1);

488 
	`ASSERT_EQ
(
	`kûl
(
œ°_pid
, 0), 0);

490 
	`ã°_åue
(
£rvîs
->
	`shutdown
());

492 
	`ASSERT_EQ
(
£rvîs
->
	`œ°
()->
	`pid
(), -1);

493 
	`ASSERT_EQ
(
	`kûl
(
œ°_pid
, 0), -1);

496  
TEST_SUCCESS
;

497 
	}
}

499 
ã°_ªtu∫_t
 
	$sockë_£rvî_°¨tup_TEST
(*
obje˘
)

501 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

502 
	`ã°_åue
(
£rvîs
);

504 
	`ã°_åue
(
£rvîs
->
	`°¨t_sockë_£rvî
(
ã°ög_£rvi˚
, 
	`gë_‰ì_p‹t
(), 
NULL
));

506  
TEST_SUCCESS
;

507 
	}
}

510 
ã°_ªtu∫_t
 
	$memˇched_ß¶_ã°
(*
obje˘
)

512 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

513 
	`ã°_åue
(
£rvîs
);

515 
	`ã°_skù
(
Ál£
, 
	`boﬁ
(
	`gëív
("TESTS_ENVIRONMENT")));

517 i‡(
MEMCACHED_SASL_BINARY
)

519 i‡(
HAVE_LIBMEMCACHED
)

521 
	`ã°_åue
(
	`has_memˇched_ß¶
());

522 
	`ã°_åue
(
	`£rvî_°¨tup
(*
£rvîs
, "memˇched-ß¶", 
	`gë_‰ì_p‹t
(), 
NULL
));

524  
TEST_SUCCESS
;

528  
TEST_SKIPPED
;

529 
	}
}

532 
ã°_ªtu∫_t
 
	$≠∂iˇti⁄_åue_BINARY
(*)

534 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/åue", 
X_OK
 ));

535 
Aµliˇti⁄
 
	`åue_≠p
("/usr/bin/true");

537 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`run
());

538 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`joö
());

540  
TEST_SUCCESS
;

541 
	}
}

543 
ã°_ªtu∫_t
 
	$≠∂iˇti⁄_gdb_åue_BINARY2
(*)

545 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/gdb", 
X_OK
 ));

546 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/åue", 
X_OK
 ));

548 
Aµliˇti⁄
 
	`åue_≠p
("/usr/bin/true");

549 
åue_≠p
.
	`u£_gdb
(
åue
);

551 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`run
());

552 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`joö
());

554  
TEST_SUCCESS
;

555 
	}
}

557 
ã°_ªtu∫_t
 
	$≠∂iˇti⁄_gdb_åue_BINARY
(*)

559 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/gdb", 
X_OK
 ));

560 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/åue", 
X_OK
 ));

562 
Aµliˇti⁄
 
	`åue_≠p
("/usr/bin/true");

563 
åue_≠p
.
	`u£_gdb
(
åue
);

565 c⁄° *
¨gs
[]= { "--fubar", 0 };

566 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`run
(
¨gs
));

567 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`joö
());

569  
TEST_SUCCESS
;

570 
	}
}

572 
ã°_ªtu∫_t
 
	$≠∂iˇti⁄_åue_fub¨_BINARY
(*)

574 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/åue", 
X_OK
 ));

575 
Aµliˇti⁄
 
	`åue_≠p
("/usr/bin/true");

577 c⁄° *
¨gs
[]= { "--fubar", 0 };

578 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`run
(
¨gs
));

579 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`joö
());

580 
	`ã°_zîo
(
åue_≠p
.
	`°dout_ªsu…
().
	`size
());

582  
TEST_SUCCESS
;

583 
	}
}

585 
ã°_ªtu∫_t
 
	$≠∂iˇti⁄_d€¢Ÿexi°_BINARY
(*)

588 
	`ã°_skù_vÆgröd
();

589 
Aµliˇti⁄
 
	`åue_≠p
("doesnotexist");

590 
åue_≠p
.
	`wûl_Áû
();

592 c⁄° *
¨gs
[]= { "--fubar", 0 };

593 #i‡
	`deföed
(
TARGET_OS_OSX
) && TARGET_OS_OSX

594 
	`ASSERT_EQ
(
Aµliˇti⁄
::
INVALID_POSIX_SPAWN
, 
åue_≠p
.
	`run
(
¨gs
));

595 #ñi‡
	`deföed
(
TARGET_OS_FREEBSD
) && TARGET_OS_FREEBSD

596 
	`ASSERT_EQ
(
Aµliˇti⁄
::
INVALID_POSIX_SPAWN
, 
åue_≠p
.
	`run
(
¨gs
));

598 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`run
(
¨gs
));

599 
	`ASSERT_EQ
(
Aµliˇti⁄
::
INVALID_POSIX_SPAWN
, 
åue_≠p
.
	`joö
());

602 
	`ã°_zîo
(
åue_≠p
.
	`°dout_ªsu…
().
	`size
());

604  
TEST_SUCCESS
;

605 
	}
}

607 
ã°_ªtu∫_t
 
	$GET_TEST
(*)

609 
libã°
::
hâp
::
GET
 
	`gë
("http://foo.example.com/");

611 
	`ASSERT_EQ
(
Ál£
, 
gë
.
	`execuã
());

613  
TEST_SUCCESS
;

614 
	}
}

616 
ã°_ªtu∫_t
 
	$POST_TEST
(*)

618 
libã°
::
vch¨_t
 
body
;

619 
libã°
::
hâp
::
POST
 
	`po°
("hâp://foo.exam∂e.com/", 
body
);

621 
	`ASSERT_EQ
(
Ál£
, 
po°
.
	`execuã
());

623  
TEST_SUCCESS
;

624 
	}
}

626 
ã°_ªtu∫_t
 
	$TRACE_TEST
(*)

628 
libã°
::
vch¨_t
 
body
;

629 
libã°
::
hâp
::
TRACE
 
	`åa˚
("hâp://foo.exam∂e.com/", 
body
);

631 
	`ASSERT_EQ
(
Ál£
, 
åa˚
.
	`execuã
());

633  
TEST_SUCCESS
;

634 
	}
}

637 
ã°_ªtu∫_t
 
	$vch¨_t_TEST
(*)

639 
libã°
::
vch¨_t
 
ª•⁄£
;

640 
libã°
::
	`make_ve˘‹
(
ª•⁄£
, 
	`ã°_lôîÆ_∑øm
("fubar\n"));

641 
	`ASSERT_EQ
(
ª•⁄£
,Ñesponse);

643  
TEST_SUCCESS
;

644 
	}
}

646 
ã°_ªtu∫_t
 
	$vch¨_t_make_≠≥nd_TEST
(*)

648 
libã°
::
vch¨_t
 
ho°«me
;

649 
libã°
::
vch¨
::
	`make
(
ho°«me
, 23);

650 
libã°
::
vch¨
::
	`≠≥nd
(
ho°«me
, ".com");

651 
	`ASSERT_EQ
(28, 
ho°«me
.
	`size
());

652 
	`ASSERT_EQ
(0, 
ho°«me
[27]);

654  
TEST_SUCCESS
;

655 
	}
}

657 
ã°_ªtu∫_t
 
	$vch¨_t_com∑ª_√g_TEST
(*)

659 
libã°
::
vch¨_t
 
ª•⁄£
;

660 
libã°
::
vch¨_t
 
ª•⁄£2
;

661 
libã°
::
	`make_ve˘‹
(
ª•⁄£
, 
	`ã°_lôîÆ_∑øm
("fubar\n"));

662 
libã°
::
	`make_ve˘‹
(
ª•⁄£2
, 
	`ã°_lôîÆ_∑øm
(
__func__
));

663 
	`ã°_åue
(
ª•⁄£
 !
ª•⁄£2
);

665  
TEST_SUCCESS
;

666 
	}
}

668 
ã°_ªtu∫_t
 
	$≠∂iˇti⁄_echo_fub¨_BINARY
(*)

672 
	`ã°_skù
(0, 
	`ac˚ss
("/bö/echo", 
X_OK
 ));

673 
Aµliˇti⁄
 
	`åue_≠p
("/bin/echo");

675 c⁄° *
¨gs
[]= { "fubar", 0 };

676 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`run
(
¨gs
));

678 
åue_≠p
.
	`¶uΩ
(Ë=
Ál£
) {} ;

680 
libã°
::
vch¨_t
 
ª•⁄£
;

681 
	`make_ve˘‹
(
ª•⁄£
, 
	`ã°_lôîÆ_∑øm
("fubar\n"));

682 
	`ASSERT_EQ
(
ª•⁄£
, 
åue_≠p
.
	`°dout_ªsu…
());

685  
TEST_SUCCESS
;

686 
	}
}

688 
ã°_ªtu∫_t
 
	$≠∂iˇti⁄_echo_fub¨_BINARY2
(*)

692 
	`ã°_skù
(0, 
	`ac˚ss
("/bö/echo", 
X_OK
 ));

693 
Aµliˇti⁄
 
	`åue_≠p
("/bin/echo");

695 
åue_≠p
.
	`add_›ti⁄
("fubar");

697 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`run
());

698 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
åue_≠p
.
	`joö
());

700 
libã°
::
vch¨_t
 
ª•⁄£
;

701 
	`make_ve˘‹
(
ª•⁄£
, 
	`ã°_lôîÆ_∑øm
("fubar\n"));

702 
	`ASSERT_EQ
(
ª•⁄£
, 
åue_≠p
.
	`°dout_ªsu…
());

705  
TEST_SUCCESS
;

706 
	}
}

708 
ã°_ªtu∫_t
 
	$echo_fub¨_BINARY
(*)

710 c⁄° *
¨gs
[]= { "fubar", 0 };

711 
	`ASSERT_EQ
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
("/bö/echo", 
¨gs
));

713  
TEST_SUCCESS
;

714 
	}
}

716 
ã°_ªtu∫_t
 
	$c‹e_cou¡_BINARY
(*)

718 c⁄° *
¨gs
[]= { 0 };

720 
	`ASSERT_EQ
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
("libã°/c‹e-cou¡", 
¨gs
, 
åue
));

722  
TEST_SUCCESS
;

723 
	}
}

725 
ã°_ªtu∫_t
 
	$waô_BINARY
(*)

727 c⁄° *
¨gs
[]= { "--quiet", 0 };

729 
	`ASSERT_EQ
(
EXIT_FAILURE
, 
	`exec_cmdlöe
("libã°/waô", 
¨gs
, 
åue
));

731  
TEST_SUCCESS
;

732 
	}
}

734 
ã°_ªtu∫_t
 
	$waô_hñp_BINARY
(*)

736 c⁄° *
¨gs
[]= { "--quiet", "--help", 0 };

738 
	`ASSERT_EQ
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
("libã°/waô", 
¨gs
, 
åue
));

740  
TEST_SUCCESS
;

741 
	}
}

743 
ã°_ªtu∫_t
 
	$waô_vîsi⁄_BINARY
(*)

745 c⁄° *
¨gs
[]= { "--quiet", "--version", 0 };

747 
	`ASSERT_EQ
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
("libã°/waô", 
¨gs
, 
åue
));

749  
TEST_SUCCESS
;

750 
	}
}

752 
ã°_ªtu∫_t
 
	$waô_£rvi˚s_BINARY
(*)

754 
	`ã°_skù
(0, 
	`ac˚ss
("/ëc/£rvi˚s", 
R_OK
 ));

756 c⁄° *
¨gs
[]= { "--quiet", "/etc/services", 0 };

758 
	`ASSERT_EQ
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
("libã°/waô", 
¨gs
, 
åue
));

760  
TEST_SUCCESS
;

761 
	}
}

763 
ã°_ªtu∫_t
 
	$waô_£rvi˚s_BINARY2
(*)

765 
	`ã°_skù
(0, 
	`ac˚ss
("/ëc/£rvi˚s", 
R_OK
 ));

767 c⁄° *
¨gs
[]= { "/etc/services", 0 };

769 
	`ASSERT_EQ
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
("libã°/waô", 
¨gs
, 
åue
));

771  
TEST_SUCCESS
;

772 
	}
}

774 
ã°_ªtu∫_t
 
	$waô_£rvi˚s_≠∂i˘i⁄_TEST
(*)

776 
	`ã°_skù
(0, 
	`ac˚ss
("/ëc/£rvi˚s", 
R_OK
 ));

777 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/gdb", 
X_OK
 ));

778 
	`ã°_skù
(0, 
	`ac˚ss
("libã°/waô", 
X_OK
 ));

780 
libã°
::
Aµliˇti⁄
 
	`waô_≠p
("libã°/waô", 
åue
);

781 
waô_≠p
.
	`u£_gdb
(
åue
);

783 c⁄° *
¨gs
[]= { "/etc/services", 0 };

784 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
waô_≠p
.
	`run
(
¨gs
));

785 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
waô_≠p
.
	`joö
());

787  
TEST_SUCCESS
;

788 
	}
}

790 
ã°_ªtu∫_t
 
	$gdb_waô_£rvi˚s_≠∂i˘i⁄_TEST
(*)

792 
	`ã°_skù
(
åue
, 
Ál£
);

793 #i‡
	`deföed
(
TARGET_OS_OSX
) && TARGET_OS_OSX

794 
	`ã°_skù
(0, 
TARGET_OS_OSX
);

797 
	`ã°_skù
(0, 
	`ac˚ss
("/ëc/£rvi˚s", 
R_OK
 ));

798 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/gdb", 
X_OK
 ));

799 
	`ã°_skù
(0, 
	`ac˚ss
("libã°/waô", 
X_OK
 ));

801 
libã°
::
Aµliˇti⁄
 
	`waô_≠p
("libã°/waô", 
åue
);

802 
waô_≠p
.
	`u£_gdb
(
åue
);

804 c⁄° *
¨gs
[]= { "/etc/services", 0 };

805 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
waô_≠p
.
	`run
(
¨gs
));

806 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
waô_≠p
.
	`joö
());

808  
TEST_SUCCESS
;

809 
	}
}

811 
ã°_ªtu∫_t
 
	$gdb_ab‹t_£rvi˚s_≠∂i˘i⁄_TEST
(*)

813 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/gdb", 
X_OK
 ));

814 
	`ã°_skù
(0, 
	`ac˚ss
("libã°/ab‹t", 
X_OK
 ));

815 
	`ã°_skù
(
åue
, 
Ál£
);

817 #i‡
	`deföed
(
TARGET_OS_OSX
) && TARGET_OS_OSX

818 
	`ã°_skù
(0, 
TARGET_OS_OSX
);

821 
libã°
::
Aµliˇti⁄
 
	`ab‹t_≠p
("libã°/ab‹t", 
åue
);

822 
ab‹t_≠p
.
	`u£_gdb
(
åue
);

824 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
ab‹t_≠p
.
	`run
());

825 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
ab‹t_≠p
.
	`joö
());

827 
°d
::
°rög
 
gdb_fûíame

ab‹t_≠p
.
	`gdb_fûíame
();

828 
	`ã°_skù
(0, 
	`ac˚ss
(
gdb_fûíame
.
	`c_°r
(), 
R_OK
 ));

829 c⁄° *
¨gs
[]{ "SIGABRT", 
gdb_fûíame
.
	`c_°r
(), 0 };

830 
	`ASSERT_EQ
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
("gªp", 
¨gs
));

833 
¨gs
[0]= "THIS_WILL_NOT_BE_FOUND";

834 
	`ASSERT_EQ
(
EXIT_FAILURE
, 
	`exec_cmdlöe
("gªp", 
¨gs
));

836  
TEST_SUCCESS
;

837 
	}
}

839 
ã°_ªtu∫_t
 
	$gë_‰ì_p‹t_TEST
(*)

841 
ö_p‹t_t
 
ªt_p‹t
;

842 
	`ã°_åue
((
ªt_p‹t

	`gë_‰ì_p‹t
()));

843 
	`ã°_åue
(
	`gë_‰ì_p‹t
(Ë!
	`deÁu…_p‹t
());

844 
	`ã°_åue
(
	`gë_‰ì_p‹t
() != get_free_port());

846  
TEST_SUCCESS
;

847 
	}
}

849 
ã°_ªtu∫_t
 
	$Áèl_TEST
(*)

851 
	`ASSERT_EQ
(
Áèl_ˇŒs
++, 
Áèl
::
	`dißbÀd_cou¡î
());

852 
throw
 
libã°
::
	`Áèl
(
LIBYATL_DEFAULT_PARAM
, "Testing va_args based fatal(): %d", 10);

854  
TEST_SUCCESS
;

855 
	}
}

857 
ã°_ªtu∫_t
 
	$numbî_of_˝us_TEST
(*)

859 
	`ã°_åue
(
	`numbî_of_˝us
() >= 1);

861  
TEST_SUCCESS
;

862 
	}
}

864 
ã°_ªtu∫_t
 
	$check_dns_TEST
(*)

866 
	`ã°_w¨n
(
libã°
::
	`check_dns
(), "Broken DNS server/no DNS server found");

868  
TEST_SUCCESS
;

869 
	}
}

871 
ã°_ªtu∫_t
 
	$Timî_TEST
(*)

873 
öt64_t
 
möuãs

	`øndom
() % 50;

874 
möuãs
++;

876 
Timî
 
check
;

878 
check
.
	`ª£t
();

879 
check
.
	`off£t
(
möuãs
, 2, 200);

881 
	`ASSERT_EQ
(
check
.
	`möuãs
(), 
möuãs
);

883  
TEST_SUCCESS
;

884 
	}
}

886 
ã°_ªtu∫_t
 
	$lookup_åue_TEST
(*)

888 
	`ã°_w¨n
(
libã°
::
	`lookup
("exist.gearman.info"), "dns isÇot currently working");

889  
TEST_SUCCESS
;

890 
	}
}

892 
ã°_ªtu∫_t
 
	$lookup_Ál£_TEST
(*)

894 
	`SKIP_IF_
(
libã°
::
	`lookup
("does_not_exist.gearman.info"),

897  
TEST_SUCCESS
;

898 
	}
}

900 
ã°_ªtu∫_t
 
	$¸óã_tmpfûe_TEST
(*)

902 
	`ã°_skù
(0, 
	`ac˚ss
("/u§/bö/touch", 
X_OK
 ));

903 
°d
::
°rög
 
tmp

	`¸óã_tmpfûe
(
__func__
);

904 
	`ASSERT_EQ
(-1, 
	`ac˚ss
(
tmp
.
	`c_°r
(), 
R_OK
));

905 
	`ASSERT_EQ
(-1, 
	`ac˚ss
(
tmp
.
	`c_°r
(), 
F_OK
));

907 
Aµliˇti⁄
 
	`touch_≠p
("/usr/bin/touch");

908 c⁄° *
¨gs
[]{ 
tmp
.
	`c_°r
(), 0 };

909 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
touch_≠p
.
	`run
(
¨gs
));

910 
	`ASSERT_EQ
(
Aµliˇti⁄
::
SUCCESS
, 
touch_≠p
.
	`joö
());

912 
	`ASSERT_EQ
(0, 
	`ac˚ss
(
tmp
.
	`c_°r
(), 
R_OK
));

913 
	`ASSERT_EQ
(0, 
	`u∆ök
(
tmp
.
	`c_°r
()));

915  
TEST_SUCCESS
;

916 
	}
}

918 
ã°_ªtu∫_t
 
	$Áèl_mesßge_TEST
(*)

920 
	`ASSERT_EQ
(
Áèl_ˇŒs
++, 
Áèl
::
	`dißbÀd_cou¡î
());

921 
	`FATAL
("FatalÅest");

923  
TEST_SUCCESS
;

924 
	}
}

926 
ã°_ªtu∫_t
 
	$deÁu…_p‹t_TEST
(*)

928 
ö_p‹t_t
 
ªt_p‹t

	`deÁu…_p‹t
();

929 
	`ASSERT_EQ
(
ªt_p‹t
, 
libã°
::
	`deÁu…_p‹t
());

930 
	`ASSERT_EQ
(
ªt_p‹t
, 
libã°
::
	`deÁu…_p‹t
());

932  
TEST_SUCCESS
;

933 
	}
}

935 
ã°_ªtu∫_t
 
	$check_f‹_górm™
(*)

937 
	`ã°_skù
(
åue
, 
HAVE_LIBGEARMAN
);

938 
	`ã°_skù
(
åue
, 
	`has_górm™d
());

939 #i‡
	`deföed
(
HAVE_GEARMAND_BINARY
) && HAVE_GEARMAND_BINARY

940 i‡(
GEARMAND_BINARY
)

942 i‡(
	`°rcmp
(
GEARMAND_BINARY
, "./gearmand/gearmand"))

944 
	`ã°_zîo
(
	`ac˚ss
(
GEARMAND_BINARY
, 
X_OK
 ));

949  
TEST_SKIPPED
;

953 
ã°ög_£rvi˚
= "gearmand";

955  
TEST_SUCCESS
;

956 
	}
}

958 
ã°_ªtu∫_t
 
	$check_f‹_drizzÀ
(*)

960 
	`ã°_skù
(
åue
, 
	`has_drizzÀd
());

962 
ã°ög_£rvi˚
= "drizzled";

964  
TEST_SUCCESS
;

965 
	}
}

968 
ã°_°
 
	gdrizzÀd_ã°s
[] ={

969 {"drizzÀd sèπup-shutdown", 0, 
drizzÀd_cy˛e_ã°
 },

973 
ã°_°
 
	ggórm™d_ã°s
[] ={

975 {"∑u£", 0, 
∑u£_ã°
 },

977 {"górm™d sèπup-shutdown", 0, 
górm™d_cy˛e_ã°
 },

978 {"_com∑ª(górm™_ªtu∫_t)", 0, 
_com∑ª_górm™_ªtu∫_t_ã°
 },

979 {"£rvî_°¨tup(Áû)", 0, 
£rvî_°¨tup_Áû_TEST
 },

983 
ã°_ªtu∫_t
 
	$˛ór_£rvîs
(* 
obje˘
)

985 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

986 
	`ã°_åue
(
£rvîs
);

987 
£rvîs
->
	`˛ór
();

989 
ã°ög_£rvi˚
.
	`˛ór
();

991  
TEST_SUCCESS
;

992 
	}
}

994 
ã°_ªtu∫_t
 
	$check_f‹_memˇched
(* 
obje˘
)

996 
	`ã°_skù
(
åue
, 
	`has_memˇched
());

998 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

999 
	`ã°_åue
(
£rvîs
);

1000 
£rvîs
->
	`˛ór
();

1002 
ã°ög_£rvi˚
= "memcached";

1004  
TEST_SUCCESS
;

1005 
	}
}

1007 
ã°_°
 
	gmemˇched_TESTS
[] ={

1008 {"memˇched sèπup-shutdown", 0, 
£rvî_°¨tup_TEST
 },

1009 {"memˇched(sockë fûeË°¨tup-shutdown", 0, 
sockë_£rvî_°¨tup_TEST
 },

1010 {"_com∑ª(memˇched_ªtu∫_t)", 0, 
_com∑ª_memˇched_ªtu∫_t_ã°
 },

1011 {"£rvî_°¨tup(Áû)", 0, 
£rvî_°¨tup_Áû_TEST
 },

1015 
ã°_°
 
	gã°_skù_TESTS
[] ={

1016 {"åue,Årue", 0, 
ã°_skù_åue_TEST
 },

1017 {"åue, fÆ£", 0, 
ã°_skù_Ál£_TEST
 },

1021 
ã°_°
 
	gívú⁄mít_ã°s
[] ={

1022 {"gëív()", 0, 
gëív_TEST
 },

1023 {"LIBTOOL_COMMAND", 0, 
LIBTOOL_COMMAND_ã°
 },

1024 {"VALGRIND_COMMAND", 0, 
VALGRIND_COMMAND_ã°
 },

1025 {"HELGRIND_COMMAND", 0, 
HELGRIND_COMMAND_ã°
 },

1026 {"GDB_COMMAND", 0, 
GDB_COMMAND_ã°
 },

1030 
ã°_°
 
	gã°s_log
[] ={

1031 {"TEST_SUCCESS", 
Ál£
, 
ã°_suc˚ss_ã°
 },

1032 {"TEST_FAILURE", 
Ál£
, 
ã°_Áûuª_ã°
 },

1033 {"TEST_SUCCESS =0", 
Ál£
, 
ã°_suc˚ss_equÆs_⁄e_ã°
 },

1034 {"SUCCESS", 
Ál£
, 
ã°_throw_suc˚ss_TEST
 },

1035 {"libã°::__skù≥d", 
Ál£
, 
ã°_throw_skù_TEST
 },

1036 {"SKIP_IF", 
Ál£
, 
ã°_throw_skù_ma¸o_TEST
 },

1037 {"FAIL", 
Ál£
, 
ã°_throw_Áû_TEST
 },

1038 {"ASSERT_FALSE_", 
Ál£
, 
ASSERT_FALSE__TEST
 },

1039 {"ASSERT_FALSE", 
Ál£
, 
ASSERT_FALSE_TEST
 },

1040 {"ASSERT_NEQ", 
Ál£
, 
ASSERT_NEQ_TEST
 },

1041 {"ASSERT_NEQ FAIL", 
Ál£
, 
ASSERT_NEQ_FAIL_TEST
 },

1045 
ã°_°
 
	gloˇl_log
[] ={

1046 {"ã°_is_loˇl()", 0, 
loˇl_ã°
 },

1047 {"ã°_is_loˇl(NOT)", 0, 
loˇl_nŸ_ã°
 },

1051 
ã°_°
 
	gdúe˘‹õs_ã°s
[] ={

1052 {"v¨Éxi°s", 0, 
v¨_exi°s_ã°
 },

1053 {"v¨/tm∞exi°s", 0, 
v¨_tmp_exi°s_ã°
 },

1054 {"v¨/ru¿exi°s", 0, 
v¨_run_exi°s_ã°
 },

1055 {"v¨/logÉxi°s", 0, 
v¨_log_exi°s_ã°
 },

1056 {"v¨/drizzÀÉxi°s", 0, 
v¨_drizzÀ_exi°s_ã°
 },

1057 {"v¨/tmp", 0, 
v¨_tmp_ã°
 },

1058 {"v¨/run", 0, 
v¨_run_ã°
 },

1059 {"v¨/log", 0, 
v¨_log_ã°
 },

1060 {"v¨/drizzÀ", 0, 
v¨_drizzÀ_ã°
 },

1061 {"v¨/tm∞rm", 0, 
v¨_tmp_rm_ã°
 },

1062 {"v¨/ru¿rm", 0, 
v¨_run_rm_ã°
 },

1063 {"v¨/logÑm", 0, 
v¨_log_rm_ã°
 },

1064 {"v¨/drizzÀÑm", 0, 
v¨_drizzÀ_rm_ã°
 },

1068 
ã°_°
 
	gcom∑ris⁄_ã°s
[] ={

1069 {"_com∑ª—e°_ªtu∫_t)", 0, 
_com∑ª_ã°_ªtu∫_t_ã°
 },

1073 
ã°_°
 
	gcmdlöe_ã°s
[] ={

1074 {"echÿfub¨", 0, 
echo_fub¨_BINARY
 },

1075 {"c‹e-cou¡", 0, 
c‹e_cou¡_BINARY
 },

1076 {"waô --quõt", 0, 
waô_BINARY
 },

1077 {"waô --quõà--hñp", 0, 
waô_hñp_BINARY
 },

1078 {"waô --quõà--vîsi⁄", 0, 
waô_vîsi⁄_BINARY
 },

1079 {"waô --quõà/ëc/£rvi˚s", 0, 
waô_£rvi˚s_BINARY
 },

1080 {"waô /ëc/£rvi˚s", 0, 
waô_£rvi˚s_BINARY2
 },

1081 {"waô /ëc/£rvi˚s", 0, 
waô_£rvi˚s_≠∂i˘i⁄_TEST
 },

1082 {"gdb waô /ëc/£rvi˚s", 0, 
gdb_waô_£rvi˚s_≠∂i˘i⁄_TEST
 },

1083 {"gdbáb‹t", 0, 
gdb_ab‹t_£rvi˚s_≠∂i˘i⁄_TEST
 },

1087 
ã°_°
 
	ggë_‰ì_p‹t_TESTS
[] ={

1088 {"gë_‰ì_p‹t()", 0, 
gë_‰ì_p‹t_TEST
 },

1089 {"deÁu…_p‹t()", 0, 
deÁu…_p‹t_TEST
 },

1093 
ã°_°
 
	gÁèl_mesßge_TESTS
[] ={

1094 {"libã°::Áèl", 0, 
Áèl_TEST
 },

1095 {"Áèl_mesßge()", 0, 
Áèl_mesßge_TEST
 },

1099 
ã°_°
 
	gnumbî_of_˝us_TESTS
[] ={

1100 {"libã°::numbî_of_˝us()", 0, 
numbî_of_˝us_TEST
 },

1104 
ã°_°
 
	g¸óã_tmpfûe_TESTS
[] ={

1105 {"libã°::¸óã_tmpfûe()", 0, 
¸óã_tmpfûe_TEST
 },

1109 
ã°_°
 
	gtimî_TESTS
[] ={

1110 {"libã°::Timî", 0, 
Timî_TEST
 },

1114 
ã°_°
 
	gdns_TESTS
[] ={

1115 {"libã°::lookup—rue)", 0, 
lookup_åue_TEST
 },

1116 {"libã°::lookup(Ál£)", 0, 
lookup_Ál£_TEST
 },

1117 {"libã°::check_dns()", 0, 
check_dns_TEST
 },

1121 
ã°_°
 
	g≠∂iˇti⁄_ã°s
[] ={

1122 {"vch¨_t", 0, 
vch¨_t_TEST
 },

1123 {"vch¨_àmake(Ë≠≥nd()", 0, 
vch¨_t_make_≠≥nd_TEST
 },

1124 {"vch¨_àcom∑ª()", 0, 
vch¨_t_com∑ª_√g_TEST
 },

1125 {"åue", 0, 
≠∂iˇti⁄_åue_BINARY
 },

1126 {"gbdÅruê--fub¨", 0, 
≠∂iˇti⁄_gdb_åue_BINARY
 },

1127 {"gbdÅrue", 0, 
≠∂iˇti⁄_gdb_åue_BINARY2
 },

1128 {"åuê--fub¨", 0, 
≠∂iˇti⁄_åue_fub¨_BINARY
 },

1129 {"d€¢Ÿexi° --fub¨", 0, 
≠∂iˇti⁄_d€¢Ÿexi°_BINARY
 },

1130 {"echÿfub¨", 0, 
≠∂iˇti⁄_echo_fub¨_BINARY
 },

1131 {"echÿfub¨ (a†›ti⁄)", 0, 
≠∂iˇti⁄_echo_fub¨_BINARY2
 },

1135 
ã°_ªtu∫_t
 
	$check_f‹_cuæ
(*)

1137 
	`ã°_skù_vÆgröd
();

1138 
	`ã°_skù
(
åue
, 
HAVE_LIBCURL
);

1139  
TEST_SUCCESS
;

1140 
	}
}

1142 
ã°_ªtu∫_t
 
	$dißbÀ_Áèl_ex˚±i⁄
(*)

1144 
Áèl_ˇŒs
= 0;

1145 
Áèl
::
	`dißbÀ
();

1146  
TEST_SUCCESS
;

1147 
	}
}

1149 
ã°_ªtu∫_t
 
	$íabÀ_Áèl_ex˚±i⁄
(*)

1151 
Áèl
::
	`íabÀ
();

1152  
TEST_SUCCESS
;

1153 
	}
}

1155 
ã°_°
 
	ghâp_ã°s
[] ={

1156 {"GET", 0, 
GET_TEST
 },

1157 {"POST", 0, 
POST_TEST
 },

1158 {"TRACE", 0, 
TRACE_TEST
 },

1162 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

1163 {"ívú⁄mít", 0, 0, 
ívú⁄mít_ã°s
},

1164 {"ªtu∫ vÆues", 0, 0, 
ã°s_log
},

1165 {"ã°_skù()", 0, 0, 
ã°_skù_TESTS
 },

1166 {"loˇl", 0, 0, 
loˇl_log
},

1167 {"dúe˘‹õs", 0, 0, 
dúe˘‹õs_ã°s
},

1168 {"com∑ris⁄", 0, 0, 
com∑ris⁄_ã°s
},

1169 {"górm™d", 
check_f‹_górm™
, 
˛ór_£rvîs
, 
górm™d_ã°s
},

1170 {"memˇched", 
check_f‹_memˇched
, 
˛ór_£rvîs
, 
memˇched_TESTS
 },

1171 {"drizzÀd", 
check_f‹_drizzÀ
, 
˛ór_£rvîs
, 
drizzÀd_ã°s
},

1172 {"cmdlöe", 0, 0, 
cmdlöe_ã°s
},

1173 {"≠∂iˇti⁄", 0, 0, 
≠∂iˇti⁄_ã°s
},

1174 {"hâp", 
check_f‹_cuæ
, 0, 
hâp_ã°s
},

1175 {"hâp", 
check_f‹_cuæ
, 0, 
hâp_ã°s
},

1176 {"gë_‰ì_p‹t()", 0, 0, 
gë_‰ì_p‹t_TESTS
 },

1177 {"Áèl", 
dißbÀ_Áèl_ex˚±i⁄
, 
íabÀ_Áèl_ex˚±i⁄
, 
Áèl_mesßge_TESTS
 },

1178 {"numbî_of_˝us()", 0, 0, 
numbî_of_˝us_TESTS
 },

1179 {"¸óã_tmpfûe()", 0, 0, 
¸óã_tmpfûe_TESTS
 },

1180 {"dns", 0, 0, 
dns_TESTS
 },

1181 {"libã°::Timî", 0, 0, 
timî_TESTS
 },

1185 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
&)

1187  &
£rvîs
;

1188 
	}
}

1190 
gë_w‹ld
(
libã°
::
Fømew‹k
 *
w‹ld
)

1192 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

1193 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@libtest/vchar.cc

37 
	~"libã°/y©lc⁄.h
"

38 
	~<libã°/comm⁄.h
>

41 c⁄° 
	gALPHANUMERICS
[]=

44 
	#ALPHANUMERICS_SIZE
 ((
ALPHANUMERICS
)-1)

	)

46 
size_t
 
	$gë_Æpha_num
()

48  (
size_t
)
	`øndom
(Ë% 
ALPHANUMERICS_SIZE
;

49 
	}
}

51 
«me•a˚
 
	glibã°
 {

53 
	g°d
::
°rög
 
¥öãr
(c⁄° *
°r
, 
size_t
 
Àngth
)

55 
	g°d
::
o°rög°ªam
 
buf
;

56 
size_t
 
	gx
0; x < 
	gÀngth
; x++)

58 i‡(
i•röt
(
°r
[
x
]))

60 
	gbuf
 << 
	g°r
[
x
];

64 
	gbuf
 << "(" << (
	g°r
[
x
]) << ")";

68  
	gbuf
.
°r
();

71 
«me•a˚
 
	gvch¨
 {

73 
com∑ª
(
libã°
::
vch¨_t
& 
¨g
, c⁄° *
°r
, 
size_t
 
Àngth
)

75 i‡(
	g¨g
.
size
(Ë=
Àngth
 
™d
 (
memcmp
(&
¨g
[0], 
°r
,Üength) == 0))

79 i‡(
	g¨g
.
size
(Ë> 
	gÀngth
)

87 
make
(
libã°
::
vch¨_t
& 
¨g
)

89 
size_t
 
Àngth

ønd
() % 1024;

90 
make
(
¨g
, 
Àngth
);

93 
make
(
libã°
::
vch¨_t
& 
¨g
, 
size_t
 
Àngth
)

95 
	g¨g
.
ª£rve
(
Àngth
);

96 
uöt32_t
 
	gx
0; x < 
	gÀngth
; ++x)

98 
	g¨g
.
push_back
(
ALPHANUMERICS
[
gë_Æpha_num
()]);

102 
chomp
(
libã°
::
vch¨_t
& 
¨g
)

104 
¨g
.
size
())

106 i‡(
¨g
.
back
() == 0)

108 
¨g
.
p›_back
();

117 
≠≥nd
(
libã°
::
vch¨_±r_t
& 
¨g
, c⁄° * 
±r
)

119 i‡(
	g±r
)

121 * 
	g√w_±r

°rdup
(
±r
);

122 i‡(
	g√w_±r
 =
NULL
)

124 
FATAL
("UNABLEÅÿÆloˇã %s(%p)", 
±r
,Ötr);

127 
	g¨g
.
push_back
(
√w_±r
);

131 
≠≥nd
(
libã°
::
vch¨_t
& 
¨g
, c⁄° * 
±r
)

133 i‡(
	g±r
)

135 
size_t
 
	gÀngth

°æí
(
±r
);

136 
ASSERT_TRUE
(
Àngth
);

137 
	g¨g
.
ª£rve
(
Àngth
);

140 
	g¨g
.
push_back
(*
±r
);

141 ++
	g±r
;

142 } *
	g±r
);

144 
	g¨g
.
push_back
(0);

150 
make_ve˘‹
(
libã°
::
vch¨_t
& 
¨g
, c⁄° *
°r
, 
size_t
 
Àngth
)

152 
	g¨g
.
ªsize
(
Àngth
);

153 
mem˝y
(&
¨g
[0], 
°r
, 
Àngth
);

156 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	glibã°
::
vch¨_t
& 
¨g
)

158 
°d
::
°rög
 
tmp

libã°
::
¥öãr
(&
¨g
[0],árg.
size
());

159 
	gouçut
 << 
	gtmp
 << "[" << 
	g¨g
.
size
() << "]";

161  
	gouçut
;

	@libtest/vchar.hpp

37 #¥agm®
⁄˚


39 
	~<c°rög
>

40 
	~<io°ªam
>

41 
	~<o°ªam
>

42 
	~<s°ªam
>

43 
	~<ve˘‹
>

45 
«me•a˚
 
	glibã°
 {

47 
	g°d
::
	tve˘‹
<*> 
	tvch¨_±r_t
;

48 
	g°d
::
	tve˘‹
<> 
	tvch¨_t
;

50 
make_ve˘‹
(
libã°
::
vch¨_t
& 
¨g
, c⁄° *
°r
, 
size_t
 
Àngth
);

52 
«me•a˚
 
	gvch¨
 {

54 
com∑ª
(
libã°
::
vch¨_t
& 
¨g
, c⁄° *
°r
, 
size_t
 
Àngth
);

55 
chomp
(
libã°
::
vch¨_t
& 
¨g
);

56 
make
(
libã°
::
vch¨_t
& 
¨g
);

57 
make
(
libã°
::
vch¨_t
& 
¨g
, 
size_t
 
Àngth
);

58 
≠≥nd
(
libã°
::
vch¨_±r_t
& 
¨g
, const *);

59 
≠≥nd
(
libã°
::
vch¨_t
& 
¨g
, const *);

63 
	#vch¨_∑øm
(
__¨g
Ë(&__¨g[0]), (__¨g.
	`size
())

	)

65 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	glibã°
::
vch¨_t
& 
¨g
);

	@libtest/version.h

39 #¥agm®
⁄˚


41 
	#LIBTEST_VERSION
 1.0

	)

42 
	#LIBTEST_VERSION_STRING
 "1.0"

	)

	@libtest/visibility.h

37 #¥agm®
⁄˚


39 #i‡
deföed
(
BUILDING_LIBTEST
)

40 #i‡
deföed
(
HAVE_VISIBILITY
) && HAVE_VISIBILITY

41 
	#LIBTEST_API
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

42 
	#LIBTEST_LOCAL
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

43 #ñi‡
deföed
 (
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

44 
	#LIBTEST_API
 
__globÆ


	)

45 
	#LIBTEST_LOCAL
 
__globÆ


	)

46 #ñi‡
deföed
(
_MSC_VER
)

47 
	#LIBTEST_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

48 
	#LIBTEST_LOCAL
 
	`__de˛•ec
(
dŒexp‹t
)

	)

50 
	#LIBTEST_API


	)

51 
	#LIBTEST_LOCAL


	)

54 #i‡
deföed
(
BUILDING_LIBTEST
)

55 #i‡
deföed
(
HAVE_VISIBILITY
) && HAVE_VISIBILITY

56 
	#LIBTEST_API
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

57 
	#LIBTEST_LOCAL
 
	`__©åibuã__
 ((
	`visibûôy
("hiddí")))

	)

58 #ñi‡
deföed
 (
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

59 
	#LIBTEST_API
 
__globÆ


	)

60 
	#LIBTEST_LOCAL
 
__hiddí


	)

61 #ñi‡
deföed
(
_MSC_VER
)

62 
	#LIBTEST_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

63 
	#LIBTEST_LOCAL


	)

65 
	#LIBTEST_API


	)

66 
	#LIBTEST_LOCAL


	)

69 #i‡
deföed
(
_MSC_VER
)

70 
	#LIBTEST_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

71 
	#LIBTEST_LOCAL


	)

73 
	#LIBTEST_API


	)

74 
	#LIBTEST_LOCAL


	)

	@libtest/wait.cc

37 
	~"libã°/y©lc⁄.h
"

39 
	~<c°dlib
>

40 
	~<f˙é.h
>

41 
	~<gë›t.h
>

42 
	~<io°ªam
>

43 
	~<sys/°©.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<uni°d.h
>

47 
	~<libã°/waô.h
>

49 
	$vîsi⁄_comm™d
(c⁄° *
comm™d_«me
, 
maj‹_vîsi⁄
, 
mö‹_vîsi⁄
)

51 
°d
::
cout
 << 
comm™d_«me
 << " " << 
maj‹_vîsi⁄
 << "." << 
mö‹_vîsi⁄
 << std::
ídl
;

52 
	}
}

54 
	$hñp_comm™d
(c⁄° *
comm™d_«me
,

55 
maj‹_vîsi⁄
, 
mö‹_vîsi⁄
,

56 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
)

58 
°d
::
cout
 << 
comm™d_«me
 << " " << 
maj‹_vîsi⁄
 << "." << 
mö‹_vîsi⁄
 << std::
ídl
;

59 
°d
::
cout
 << "Cuºíà›ti⁄s. A '=' món†thê›ti⁄Åake†®vÆue." << std::
ídl
 << std::endl;

61 
uöt32_t
 
x
0; 
l⁄g_›ti⁄s
[x].
«me
; x++)

63 
°d
::
cout
 << "\à--" << 
l⁄g_›ti⁄s
[
x
].
«me
 << ÷⁄g_›ti⁄s[x].
has_¨g
 ? '=' : ' 'Ë<< std::
ídl
;

66 
°d
::
cout
 << std::
ídl
;

67 
	}
}

69 
	$˛o£_°dio
()

71 
fd
;

72 i‡((
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0)) < 0)

78 i‡(
	`dup2
(
fd
, 
STDIN_FILENO
) < 0)

83 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) < 0)

88 i‡(
	`dup2
(
fd
, 
STDERR_FILENO
) < 0)

93 i‡(
fd
 > 
STDERR_FILENO
)

95 
	`˛o£
(
fd
);

98 
	}
}

101 
	mOPT_HELP
,

102 
	mOPT_QUIET
,

103 
	mOPT_VERSION


106 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

108 
›ti⁄
 
l⁄g_›ti⁄s
[]=

110 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

111 { "hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

112 { "quõt", 
no_¨gumít
, 
NULL
, 
OPT_QUIET
},

116 
boﬁ
 
›t_vîsi⁄

Ál£
;

117 
boﬁ
 
›t_hñp

Ál£
;

118 
boﬁ
 
›t_quõt

Ál£
;

119 
›ti⁄_ödex
= 0;

123 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

124 i‡(
›ti⁄_rv
 == -1)

129 
›ti⁄_rv
)

131 
OPT_HELP
:

132 
›t_hñp

åue
;

135 
OPT_VERSION
:

136 
›t_vîsi⁄

åue
;

139 
OPT_QUIET
:

140 
›t_quõt

åue
;

145 
	`exô
(
EXIT_FAILURE
);

148 
	`hñp_comm™d
(
¨gv
[0], 1, 0, 
l⁄g_›ti⁄s
);

149 
	`exô
(
EXIT_FAILURE
);

153 i‡(
›t_quõt
)

155 
	`˛o£_°dio
();

158 i‡(
›t_vîsi⁄
)

160 
	`vîsi⁄_comm™d
(
¨gv
[0], 1, 0);

161 
	`exô
(
EXIT_SUCCESS
);

164 i‡(
›t_hñp
)

166 
	`hñp_comm™d
(
¨gv
[0], 1, 0, 
l⁄g_›ti⁄s
);

167 
	`exô
(
EXIT_SUCCESS
);

169 
	}
}

171 
	$maö
(
¨gc
, *
¨gv
[])

173 i‡(
¨gc
 == 1)

175  
EXIT_FAILURE
;

178 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

180 
ªt

EXIT_FAILURE
;

181 
›töd
 < 
¨gc
)

183 
libã°
::
Waô
 
	`waô
(
¨gv
[
›töd
++]);

185 i‡(
waô
.
	`suc˚ssful
(Ë=
Ál£
)

187  
EXIT_FAILURE
;

190 
ªt

EXIT_SUCCESS
;

193  
ªt
;

194 
	}
}

	@libtest/wait.h

37 #¥agm®
⁄˚


39 
	~<uni°d.h
>

40 
	~<°rög
>

41 
	~<sig«l.h
>

43 
	~<libã°/dªam.h
>

45 
«me•a˚
 
	glibã°
 {

47 ˛as†
	cWaô


49 
	gpublic
:

51 
Waô
(c⁄° 
°d
::
°rög
 &
fûíame
, 
uöt32_t
 
timeout
= 6) :

52 
_suc˚ssful
(
Ál£
)

54 
uöt32_t
 
waôed
;

55 
uöt32_t
 
	gthis_waô
;

56 
uöt32_t
 
	gªåy
;

58 i‡(
	gfûíame
.
em±y
())

60 
	g_suc˚ssful

Ál£
;

64 
	gwaôed
0, 
	gªåy
1; ;Ñëry++, waôed+
this_waô
)

66 i‡(
ac˚ss
(
fûíame
.
c_°r
(), 
R_OK
) == 0)

68 
_suc˚ssful

åue
;

71 i‡(
	gwaôed
 >
timeout
)

76 
	gthis_waô

ªåy
 *Ñetry / 3 + 1;

77 
	glibã°
::
dªam
(
this_waô
, 0);

81 
Waô
(c⁄° 
pid_t
 &
_pid_¨g
, 
uöt32_t
 
timeout
= 6) :

82 
_suc˚ssful
(
Ál£
)

84 
uöt32_t
 
waôed
;

85 
uöt32_t
 
	gthis_waô
;

86 
uöt32_t
 
	gªåy
;

88 
	gwaôed
0, 
	gªåy
1; ;Ñëry++, waôed+
this_waô
)

90 i‡(
kûl
(
_pid_¨g
, 0) == 0)

92 
_suc˚ssful

åue
;

95 i‡(
	gwaôed
 >
timeout
)

100 
	gthis_waô

ªåy
 *Ñetry / 3 + 1;

101 
	glibã°
::
dªam
(
this_waô
, 0);

105 
boﬁ
 
suc˚ssful
() const

107  
	g_suc˚ssful
;

110 
	g¥iv©e
:

111 
boﬁ
 
_suc˚ssful
;

	@libtest/yatl.h

37 #¥agm®
⁄˚


39 #i‚de‡
YATL_FULL


40 
	#YATL_FULL
 1

	)

43 
	~<libã°/ã°.hµ
>

	@libtest/yatlcon.h

39 #¥agm®
⁄˚


41 
	~"mem_c⁄fig.h
"

	@mem_config.h

5 #¥agm®
⁄˚


8 #i‡
deföed
–
_SYS_FEATURE_TESTS_H
Ë|| deföed(
_FEATURES_H
)

18 
	#CINTTYPES_H
 <
å1
/
cöây≥s
>

	)

26 
	#CSTDINT_H
 <
å1
/
c°döt
>

	)

32 
	#DEBUG
 0

	)

35 
	#DRIZZLED_BINARY
 0

	)

47 
	#GEARMAND_BINARY
 0

	)

50 
	#GEARMAND_BLOBSLAP_WORKER
 0

	)

53 
	#HAVE_ALARM
 1

	)

56 
	#HAVE_ALLOCA
 1

	)

60 
	#HAVE_ALLOCA_H
 1

	)

63 
	#HAVE_ARPA_INET_H
 1

	)

66 
	#HAVE_ATEXIT
 1

	)

78 
	#HAVE_CLOCK_GETTIME
 1

	)

82 
	#HAVE_DECL_STRERROR_R
 1

	)

85 
	#HAVE_DL
 1

	)

88 
	#HAVE_DLADDR
 1

	)

91 
	#HAVE_DLFCN_H
 1

	)

94 
	#HAVE_DLOPEN
 1

	)

97 
	#HAVE_DRIZZLED_BINARY
 0

	)

106 
	#HAVE_DUP2
 1

	)

109 
	#HAVE_ERRNO_H
 1

	)

112 
	#HAVE_EXECINFO_H
 1

	)

115 
	#HAVE_FCNTL
 1

	)

118 
	#HAVE_FCNTL_H
 1

	)

121 
	#HAVE_FEATURES_H
 1

	)

127 
	#HAVE_FNMATCH_H
 1

	)

130 
	#HAVE_FNV64_HASH
 1

	)

133 
	#HAVE_FORK
 1

	)

136 
	#HAVE_GCC_ABI_DEMANGLE
 1

	)

139 
	#HAVE_GCC_ATOMIC_BUILTINS
 1

	)

142 
	#HAVE_GEARMAND_BINARY
 0

	)

145 
	#HAVE_GETCWD
 1

	)

148 
	#HAVE_GETLINE
 1

	)

151 
	#HAVE_GETTIMEOFDAY
 1

	)

160 
	#HAVE_INET_NTOA
 1

	)

163 
	#HAVE_INTTYPES_H
 1

	)

166 
	#HAVE_IN_PORT_T
 1

	)

169 
	#HAVE_LIBCURL
 0

	)

172 
	#HAVE_LIBDL
 1

	)

175 
	#HAVE_LIBDRIZZLE
 0

	)

178 
	#HAVE_LIBEVENT
 0

	)

181 
	#HAVE_LIBGEARMAN
 0

	)

184 
	#HAVE_LIBINTL_H
 1

	)

187 
	#HAVE_LIBMEMCACHED
 1

	)

190 
	#HAVE_LIBMYSQL_BUILD
 0

	)

193 
	#HAVE_LIBPQ
 0

	)

199 
	#HAVE_LIMITS_H
 1

	)

205 
	#HAVE_MALLOC_H
 1

	)

208 
	#HAVE_MATH_H
 1

	)

214 
	#HAVE_MEMCACHED_BINARY
 1

	)

217 
	#HAVE_MEMCACHED_SASL_BINARY
 0

	)

220 
	#HAVE_MEMCHR
 1

	)

223 
	#HAVE_MEMMOVE
 1

	)

226 
	#HAVE_MEMORY_H
 1

	)

229 
	#HAVE_MEMSET
 1

	)

232 
	#HAVE_MSG_DONTWAIT
 1

	)

235 
	#HAVE_MSG_MORE
 1

	)

238 
	#HAVE_MSG_NOSIGNAL
 1

	)

241 
	#HAVE_MURMUR_HASH
 1

	)

247 
	#HAVE_MYSQLD_BUILD
 0

	)

250 
	#HAVE_NETDB_H
 1

	)

253 
	#HAVE_NETINET_IN_H
 1

	)

256 
	#HAVE_NETINET_TCP_H
 1

	)

259 
	#HAVE_PIPE2
 1

	)

262 
	#HAVE_POLL_H
 1

	)

265 
	#HAVE_PTHREAD
 1

	)

268 
	#HAVE_PTHREAD_H
 1

	)

271 
	#HAVE_PTHREAD_PRIO_INHERIT
 1

	)

274 
	#HAVE_PTHREAD_TIMEDJOIN_NP
 1

	)

277 
	#HAVE_PTRDIFF_T
 1

	)

280 
	#HAVE_PUTENV
 1

	)

283 
	#HAVE_RCVTIMEO
 1

	)

286 
	#HAVE_SELECT
 1

	)

289 
	#HAVE_SETENV
 1

	)

295 
	#HAVE_SIGIGNORE
 1

	)

298 
	#HAVE_SNDTIMEO
 1

	)

301 
	#HAVE_SOCKET
 1

	)

304 
	#HAVE_SPAWN_H
 1

	)

310 
	#HAVE_STDARG_H
 1

	)

313 
	#HAVE_STDBOOL_H
 1

	)

316 
	#HAVE_STDDEF_H
 1

	)

319 
	#HAVE_STDINT_H
 1

	)

322 
	#HAVE_STDIO_H
 1

	)

325 
	#HAVE_STDLIB_H
 1

	)

328 
	#HAVE_STRCASECMP
 1

	)

331 
	#HAVE_STRCHR
 1

	)

334 
	#HAVE_STRDUP
 1

	)

337 
	#HAVE_STRERROR
 1

	)

340 
	#HAVE_STRERROR_R
 1

	)

343 
	#HAVE_STRINGS_H
 1

	)

346 
	#HAVE_STRING_H
 1

	)

349 
	#HAVE_STRSTR
 1

	)

352 
	#HAVE_STRTOL
 1

	)

355 
	#HAVE_STRTOUL
 1

	)

358 
	#HAVE_STRTOULL
 1

	)

361 
	#HAVE_SYSLOG_H
 1

	)

367 
	#HAVE_SYS_SOCKET_H
 1

	)

370 
	#HAVE_SYS_STAT_H
 1

	)

373 
	#HAVE_SYS_SYSCTL_H
 1

	)

376 
	#HAVE_SYS_TIME_H
 1

	)

379 
	#HAVE_SYS_TYPES_H
 1

	)

382 
	#HAVE_SYS_UN_H
 1

	)

385 
	#HAVE_SYS_WAIT_H
 1

	)

388 
	#HAVE_TIME_H
 1

	)

394 
	#HAVE_UNISTD_H
 1

	)

397 
	#HAVE_UUID_GENERATE_TIME_SAFE
 0

	)

400 
	#HAVE_UUID_UUID_H
 0

	)

403 
	#HAVE_VFORK
 1

	)

410 
	#HAVE_VISIBILITY
 1

	)

416 
	#HAVE_WORKING_FORK
 1

	)

419 
	#HAVE_WORKING_VFORK
 1

	)

425 
	#HAVE__BOOL
 1

	)

428 
	#HOST_CPU
 "x86_64"

	)

431 
	#HOST_OS
 "löux-gnu"

	)

434 
	#HOST_VENDOR
 "unknown"

	)

438 
	#LT_OBJDIR
 ".libs/"

	)

441 
	#MEMCACHED_BINARY
 "/u§/bö/memˇched"

	)

444 
	#MEMCACHED_VERSION
 "1.4.13"

	)

447 
	#MYSQLD_BINARY
 0

	)

450 
	#NDEBUG
 1

	)

453 
	#PACKAGE
 "libmemˇched"

	)

456 
	#PACKAGE_BUGREPORT
 "hâp://libmemˇched.‹g/"

	)

459 
	#PACKAGE_NAME
 "libmemˇched"

	)

462 
	#PACKAGE_STRING
 "libmemˇched 1.0.17"

	)

465 
	#PACKAGE_TARNAME
 "libmemˇched"

	)

468 
	#PACKAGE_URL
 ""

	)

471 
	#PACKAGE_VERSION
 "1.0.17"

	)

489 
	#STDC_HEADERS
 1

	)

492 
	#STRERROR_R_CHAR_P
 1

	)

495 
	#TARGET_CPU
 "x86_64"

	)

498 
	#TARGET_OS
 "löux-gnu"

	)

504 
	#TARGET_OS_LINUX
 1

	)

513 
	#TARGET_VENDOR
 "unknown"

	)

519 #i‚de‡
_ALL_SOURCE


520 
	#_ALL_SOURCE
 1

	)

523 #i‚de‡
_GNU_SOURCE


524 
	#_GNU_SOURCE
 1

	)

527 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


528 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

531 #i‚de‡
_TANDEM_SOURCE


532 
	#_TANDEM_SOURCE
 1

	)

535 #i‚de‡
__EXTENSIONS__


536 
	#__EXTENSIONS__
 1

	)

541 
	#VCS_CHECKOUT
 0

	)

544 
	#VCS_SYSTEM
 "n⁄e"

	)

547 
	#VERSION
 "1.0.17"

	)

581 
	#__STDC_LIMIT_MACROS
 1

	)

588 #i‚de‡
__˝lu•lus


617 
	#ª°ri˘
 
__ª°ri˘


	)

623 #i‡
deföed
 
__SUNPRO_CC
 && !deföed 
__RESTRICT


624 
	#_Re°ri˘


	)

625 
	#__ª°ri˘__


	)

658 #i‚de‡
HAVE_SYS_SOCKET_H


659 
	#SHUT_RD
 
SD_RECEIVE


	)

660 
	#SHUT_WR
 
SD_SEND


	)

661 
	#SHUT_RDWR
 
SD_BOTH


	)

667 #i‚de‡
__STDC_FORMAT_MACROS


668 
	#__STDC_FORMAT_MACROS


	)

671 #i‡
deföed
(
__˝lu•lus
)

672 #ö˛udê
CINTTYPES_H


674 
	~<öây≥s.h
>

677 #i‡!
deföed
(
HAVE_ULONG
Ë&& !deföed(
__USE_MISC
)

678 
	#HAVE_ULONG
 1

	)

679 
	tul⁄g
;

	@tests/basic.h

38 #¥agm®
⁄˚


40 
	~<libã°/visibûôy.h
>

42 #ifdef 
__˝lu•lus


46 
LIBTEST_LOCAL


47 
ã°_ªtu∫_t
 
basic_öô_ã°
(
memˇched_°
 *
junk
);

49 
LIBTEST_LOCAL


50 
ã°_ªtu∫_t
 
basic_˛⁄e_ã°
(
memˇched_°
 *
memc
);

52 
LIBTEST_LOCAL


53 
ã°_ªtu∫_t
 
basic_ª£t_°ack_ã°
(
memˇched_°
 *
junk
);

55 
LIBTEST_LOCAL


56 
ã°_ªtu∫_t
 
basic_ª£t_hóp_ã°
(
memˇched_°
 *
junk
);

58 
LIBTEST_LOCAL


59 
ã°_ªtu∫_t
 
basic_ª£t_°ack_˛⁄e_ã°
(
memˇched_°
 *
memc
);

61 
LIBTEST_LOCAL


62 
ã°_ªtu∫_t
 
basic_ª£t_hóp_˛⁄e_ã°
(
memˇched_°
 *
memc
);

64 #ifdef 
__˝lu•lus


	@tests/callbacks.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
ã°_MEMCACHED_CALLBACK_DELETE_TRIGGER_™d_MEMCACHED_BEHAVIOR_NOREPLY
(
memˇched_°
 *);

41 
ã°_ªtu∫_t
 
ã°_MEMCACHED_CALLBACK_DELETE_TRIGGER
(
memˇched_°
 *);

	@tests/cpp_example.cc

4 
	~<mem_c⁄fig.h
>

6 
	~<ve˘‹
>

7 
	~<°rög
>

8 
	~<io°ªam
>

9 
	~<Æg‹ôhm
>

10 
	~<m≠
>

12 
	~<°rög.h
>

14 
	~<libmemˇched/memˇched.hµ
>

16 
usög
 
«me•a˚
 
	g°d
;

17 
usög
 
«me•a˚
 
	gmemˇche
;

19 ˛as†
	cDñëePås


21 
	mpublic
:

22 
ãm∂©e
<
ty≥«me
 
T
>

23 
ölöe
 
	$›î©‹
()(c⁄° 
T
 *
±r
) const

25 
dñëe
 
±r
;

27 
	}
};

29 ˛as†
	cMyCache


31 
	mpublic
:

33 c⁄° 
uöt32_t
 
num_of_˛õ¡s
= 10;

35 
	mMyCache
 &
	$sögÀt⁄
()

37 
MyCache
 
ö°™˚
;

38  
ö°™˚
;

41 
	`£t
(c⁄° 
°rög
 &
key
,

42 c⁄° 
ve˘‹
<> &
vÆue
)

44 
time_t
 
expúy
= 0;

45 
uöt32_t
 
Êags
= 0;

46 
	`gëCache
()->
	`£t
(
key
, 
vÆue
, 
expúy
, 
Êags
);

47 
	}
}

49 
	gve˘‹
<> 
	$gë
(c⁄° 
°rög
 &
key
)

51 
ve˘‹
<> 
ªt_vÆue
;

52 
	`gëCache
()->
	`gë
(
key
, 
ªt_vÆue
);

53  
ªt_vÆue
;

54 
	}
}

56 
	$ªmove
(c⁄° 
°rög
 &
key
)

58 
	`gëCache
()->
	`ªmove
(
key
);

59 
	}
}

61 
Memˇche
 *
	$gëCache
()

67 
uöt32_t
 
ödex

	`ønd
(Ë% 
num_of_˛õ¡s
;

68  
˛õ¡s
[
ödex
];

69 
	}
}

71 
	g¥iv©e
:

76 
°d
::
ve˘‹
<
Memˇche
 *> 
˛õ¡s
;

78 
	$MyCache
()

80 
	$˛õ¡s
()

83 
uöt32_t
 
i
0; i < 
num_of_˛õ¡s
; i++)

85 
Memˇche
 *
˛õ¡

√w
 
	`Memˇche
("127.0.0.1:11211");

86 
˛õ¡s
.
	`push_back
(
˛õ¡
);

88 
	}
}

90 ~
	$MyCache
()

92 
	`f‹_óch
(
˛õ¡s
.
	`begö
(), clõ¡s.
	`íd
(), 
	`DñëePås
());

93 
˛õ¡s
.
	`˛ór
();

94 
	}
}

96 
MyCache
(const MyCache&);

100 ˛as†
	cProdu˘


102 
	mpublic
:

104 
	$Produ˘
(
ö_id
, 
ö_¥i˚
)

106 
	`id
(
ö_id
),

107 
	$¥i˚
(
ö_¥i˚
)

110 
	$Produ˘
()

112 
	`id
(0),

113 
	$¥i˚
(0.0)

114 {
	}
}

116 
	$gëId
() const

118  
id
;

119 
	}
}

121 
	$gëPri˚
() const

123  
¥i˚
;

124 
	}
}

126 
	g¥iv©e
:

128 
id
;

129 
	g¥i˚
;

133 
£tAŒProdu˘s
(
ve˘‹
<
Produ˘
> &
¥odu˘s
)

135 
	gve˘‹
<> 
øw_¥odu˘s
(
¥odu˘s
.
size
(Ë* (
Produ˘
));

136 
mem˝y
(&
øw_¥odu˘s
[0], &
¥odu˘s
[0],Örodu˘s.
size
(Ë* (
Produ˘
));

137 
	gMyCache
::
sögÀt⁄
().
£t
("AŒProdu˘s", 
øw_¥odu˘s
);

140 
	gve˘‹
<
	gProdu˘
> 
	$gëAŒProdu˘s
()

142 
ve˘‹
<> 
øw_¥odu˘s
 = 
MyCache
::
	`sögÀt⁄
().
	`gë
("AllProducts");

143 
ve˘‹
<
Produ˘
> 
	`¥odu˘s
(
øw_¥odu˘s
.
	`size
() / (Product));

144 
	`mem˝y
(&
¥odu˘s
[0], &
øw_¥odu˘s
[0],Ñaw_¥odu˘s.
	`size
());

145  
¥odu˘s
;

146 
	}
}

148 
Produ˘
 
	$gëProdu˘
(c⁄° 
°rög
 &
key
)

150 
ve˘‹
<> 
øw_¥odu˘

MyCache
::
	`sögÀt⁄
().
	`gë
(
key
);

151 
Produ˘
 
ªt
;

152 i‡(! 
øw_¥odu˘
.
	`em±y
())

154 
	`mem˝y
(&
ªt
, &
øw_¥odu˘
[0], (
Produ˘
));

160  
ªt
;

161 
	}
}

163 
	$£tProdu˘
(c⁄° 
°rög
 &
key
, c⁄° 
Produ˘
 &
¥odu˘
)

165 
ve˘‹
<> 
	`øw_¥odu˘
((
Produ˘
));

166 
	`mem˝y
(&
øw_¥odu˘
[0], &
¥odu˘
, (
Produ˘
));

167 
MyCache
::
	`sögÀt⁄
().
	`£t
(
key
, 
øw_¥odu˘
);

168 
	}
}

170 
	$maö
()

172 
Memˇche
 
	`fú°_˛õ¡
("127.0.0.1:19191");

173 
m≠
< 
°rög
, m≠<°rög, såög> > 
my_°©s
;

174 
fú°_˛õ¡
.
	`gëSèts
(
my_°©s
);

179 
m≠
< 
°rög
, m≠<°rög, såög> >::
ôî©‹
 
ô
=

180 
my_°©s
.
	`begö
();

181 
ô
 !
my_°©s
.
	`íd
())

183 
cout
 << "w‹kög wôh sîvî: " << (*
ô
).
fú°
 << 
ídl
;

184 
m≠
<
°rög
, såög> 
£rv_°©s
(*
ô
).
£c⁄d
;

185 
m≠
<
°rög
, såög>::
ôî©‹
 
ôî

£rv_°©s
.
	`begö
();

186 
ôî
 !
£rv_°©s
.
	`íd
())

188 
cout
 << (*
ôî
).
fú°
 << ":" << (*ôî).
£c⁄d
 << 
ídl
;

189 ++
ôî
;

191 ++
ô
;

194  
EXIT_SUCCESS
;

195 
	}
}

	@tests/cycle.cc

42 
	~<mem_c⁄fig.h
>

43 
	~<libã°/ã°.hµ
>

45 
usög
 
«me•a˚
 
	glibã°
;

46 
	~<libmemˇched-1.0/memˇched.h
>

48 
ã°_ªtu∫_t
 
	$£rvî_°¨tup_sögÀ_TEST
(*
obj
)

50 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obj
;

51 
	`ã°_com∑ª
(
åue
, 
	`£rvî_°¨tup
(*
£rvîs
, "memˇched", 
libã°
::
	`gë_‰ì_p‹t
(), 
NULL
));

52 
	`ã°_com∑ª
(
åue
, 
£rvîs
->
	`shutdown
());

55  
TEST_SUCCESS
;

56 
	}
}

58 
ã°_ªtu∫_t
 
	$£rvî_°¨tup_mu…ùÀ_TEST
(*
obj
)

60 
	`ã°_skù
(
åue
, 
	`jíkös_is_ˇŒî
());

62 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obj
;

63 
size_t
 
x
= 0; x < 10; ++x)

65 
	`ã°_com∑ª
(
åue
, 
	`£rvî_°¨tup
(*
£rvîs
, "memˇched", 
libã°
::
	`gë_‰ì_p‹t
(), 
NULL
));

67 
	`ã°_com∑ª
(
åue
, 
£rvîs
->
	`shutdown
());

69  
TEST_SUCCESS
;

70 
	}
}

72 
ã°_ªtu∫_t
 
	$shutdown_™d_ªmove_TEST
(*
obj
)

74 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obj
;

75 
£rvîs
->
	`˛ór
();

77  
TEST_SUCCESS
;

78 
	}
}

80 
ã°_°
 
	g£rvî_°¨tup_TESTS
[] ={

81 {"£rvî_°¨tup(1)", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvî_°¨tup_sögÀ_TEST
 },

82 {"£rvî_°¨tup(10)", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvî_°¨tup_mu…ùÀ_TEST
 },

83 {"shutdown_™d_ªmove()", 
Ál£
, (
ã°_ˇŒback_‚
*)
shutdown_™d_ªmove_TEST
 },

84 {"£rvî_°¨tup(10)", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvî_°¨tup_mu…ùÀ_TEST
 },

89 
ã°_ªtu∫_t
 
	$cﬁÀ˘i⁄_INIT
(*
obje˘
)

91 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

92 
	`ã°_zîo
(
£rvîs
->
	`cou¡
());

93 
	`ã°_com∑ª
(
åue
, 
	`£rvî_°¨tup
(*
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 0, 
NULL
));

95  
TEST_SUCCESS
;

96 
	}
}

99 
ã°_ªtu∫_t
 
	$vÆid©e_ßnôy_INIT
(*
obje˘
)

101 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

103 
	`ã°_zîo
(
£rvîs
->
	`cou¡
());

105  
TEST_SUCCESS
;

106 
	}
}

108 
ã°_ªtu∫_t
 
	$cﬁÀ˘i⁄_FINAL
(*
obje˘
)

110 
£rvî_°¨tup_°
 *
£rvîs
(£rvî_°¨tup_°*)
obje˘
;

111 
£rvîs
->
	`˛ór
();

113  
TEST_SUCCESS
;

114 
	}
}

116 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

117 {"£rvî_°¨tup()", 
vÆid©e_ßnôy_INIT
, 
cﬁÀ˘i⁄_FINAL
, 
£rvî_°¨tup_TESTS
 },

121 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

123 i‡(
	`jíkös_is_ˇŒî
())

125 
îr‹

TEST_SKIPPED
;

126  
NULL
;

129 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

131 
îr‹

TEST_SKIPPED
;

132  
NULL
;

135  &
£rvîs
;

136 
	}
}

138 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

140 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

141 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/debug.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
c⁄fúm_keys_exi°
(
memˇched_°
 *
memc
, c⁄° * c⁄° *
keys
, c⁄° 
size_t
 
numbî_of_keys
, 
boﬁ
 
key_m©ches_vÆue

Ál£
, boﬁ 
ªquúe_Æl
= false);

42 
ã°_ªtu∫_t
 
c⁄fúm_keys_d⁄t_exi°
(
memˇched_°
 *
memc
, c⁄° * c⁄° *
keys
, c⁄° 
size_t
 
numbî_of_keys
);

44 
ã°_ªtu∫_t
 
¥öt_keys_by_£rvî
(
memˇched_°
 *
memc
);

46 
size_t
 
c⁄fúm_key_cou¡
(
memˇched_°
 *
memc
);

48 
¥öt_£rvîs
(
memˇched_°
 *);

	@tests/deprecated.h

38 #¥agm®
⁄˚


40 #ifdef 
__˝lu•lus


44 
ã°_ªtu∫_t
 
£rvî_li°_nuŒ_ã°
(
memˇched_°
 *
±r
);

45 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_728286
(
memˇched_°
 *);

47 #ifdef 
__˝lu•lus


	@tests/error_conditions.h

38 #¥agm®
⁄˚


40 #ifdef 
__˝lu•lus


44 
ã°_ªtu∫_t
 
memˇched_ö¸emít_MEMCACHED_NO_SERVERS
(
memˇched_°
 *
junk
);

46 #ifdef 
__˝lu•lus


	@tests/exist.h

37 #¥agm®
⁄˚


39 
ã°_ªtu∫_t
 
memˇched_exi°_NOTFOUND
(
memˇched_°
 *);

40 
ã°_ªtu∫_t
 
memˇched_exi°_SUCCESS
(
memˇched_°
 *);

41 
ã°_ªtu∫_t
 
memˇched_exi°_by_key_NOTFOUND
(
memˇched_°
 *);

42 
ã°_ªtu∫_t
 
memˇched_exi°_by_key_SUCCESS
(
memˇched_°
 *);

	@tests/failure.cc

37 
	~<mem_c⁄fig.h
>

42 
	~<libmemˇched-1.0/memˇched.hµ
>

43 
	~<libmemˇched/£rvî_ö°™˚.h
>

44 
	~<libã°/ã°.hµ
>

46 
	~<c°dio
>

47 
	~<c°dlib
>

48 
	~<c°rög
>

49 
	~<sys/time.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<sys/°©.h
>

52 
	~<uni°d.h
>

53 
	~<˘ime
>

55 
	~<°rög
>

56 
	~<io°ªam
>

58 
usög
 
«me•a˚
 
	g°d
;

59 
usög
 
«me•a˚
 
	gmemˇche
;

60 
usög
 
«me•a˚
 
	glibã°
;

62 
	glibã°
::
Fømew‹k
 *
globÆ_‰amew‹k

NULL
;

64 
ã°_ªtu∫_t
 
	$shutdown_£rvîs
(
memˇched_°
 *
memc
)

66  
TEST_SKIPPED
;

68 
	`ã°_skù_vÆgröd
();

70 
	`ã°_com∑ª
(
	`memˇched_£rvî_cou¡
(
memc
), 1U);

73 
globÆ_‰amew‹k
->
	`£rvîs
().
	`shutdown
(0);

75  
TEST_SUCCESS
;

76 
	}
}

78 
ã°_ªtu∫_t
 
	$add_shutdown_£rvîs
(
memˇched_°
 *
memc
)

80  
TEST_SKIPPED
;

82 
	`ã°_skù_vÆgröd
();

84 
	`memˇched_£rvî_cou¡
(
memc
) < 2)

86 c⁄° *
¨gv
[1]= { "add_shutdown_server" };

87 
	`ã°_åue
(
globÆ_‰amew‹k
->
	`£rvîs
().
	`°¨t_sockë_£rvî
("memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
¨gv
));

88 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_add
(
memc
, "loˇlho°", 
libã°
::
	`deÁu…_p‹t
()));

92 
globÆ_‰amew‹k
->
	`£rvîs
().
	`shutdown
(0);

94  
TEST_SUCCESS
;

95 
	}
}

97 
ã°_ªtu∫_t
 
	$ª°¨t_£rvîs
(
memˇched_°
 *)

100 
globÆ_‰amew‹k
->
	`£rvîs
().
	`ª°¨t
();

102  
TEST_SUCCESS
;

103 
	}
}

105 
	~"libmemˇched/ö°™˚.hµ
"

106 
ã°_ªtu∫_t
 
	$cuŒ_TEST
(
memˇched_°
 *
memc
)

108 
uöt32_t
 
cou¡

	`memˇched_£rvî_cou¡
(
memc
);

111 
memc
->
£rvîs
[0].
›ti⁄s
.
is_dód

åue
;

112 
memc
->
°©e
.
is_time_f‹_ªbuûd

åue
;

114 
uöt32_t
 
√w_cou¡

	`memˇched_£rvî_cou¡
(
memc
);

115 
	`ã°_com∑ª
(
cou¡
, 
√w_cou¡
);

117  
TEST_SUCCESS
;

118 
	}
}

120 
ã°_ªtu∫_t
 
	$MEMCACHED_SERVER_TEMPORARILY_DISABLED_TEST
(
memˇched_°
 *
memc
)

122 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
, 30));

123 
	`ã°_com∑ª_gŸ
(
MEMCACHED_CONNECTION_FAILURE
,

124 
	`memˇched_£t
(
memc
,

125 
	`ã°_lôîÆ_∑øm
("foo"),

126 
NULL
, 0, 
	`time_t
(0), 
	`uöt32_t
(0)),

127 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

134 
	`ã°_com∑ª
(
MEMCACHED_SERVER_TEMPORARILY_DISABLED
,

135 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 
NULL
, 0, 
	`time_t
(0), 
	`uöt32_t
(0)));

137  
TEST_SUCCESS
;

138 
	}
}

140 
ã°_ªtu∫_t
 
	$MEMCACHED_SERVER_TEMPORARILY_DISABLED_to_suc˚ss_TEST
(
memˇched_°
 *
memc
)

142  
TEST_SKIPPED
;

144 
	`ã°_com∑ª_gŸ
(
MEMCACHED_CONNECTION_FAILURE
,

145 
	`memˇched_£t
(
memc
,

146 
	`ã°_lôîÆ_∑øm
("foo"),

147 
NULL
, 0, 
	`time_t
(0), 
	`uöt32_t
(0)),

148 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

155 
	`ã°_com∑ª
(
MEMCACHED_SERVER_TEMPORARILY_DISABLED
,

156 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 
NULL
, 0, 
	`time_t
(0), 
	`uöt32_t
(0)));

158 
globÆ_‰amew‹k
->
	`£rvîs
().
	`ª°¨t
();

160 
limô
= 5;

161 
memˇched_ªtu∫_t
 
ªt
;

163 
libã°
::
	`dªam
(3, 0);

164 
ªt

	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 
NULL
, 0, 
	`time_t
(0), 
	`uöt32_t
(0));

165 } 
ªt
 =
MEMCACHED_SERVER_TEMPORARILY_DISABLED
 
™d
 --
limô
);

167 
	`ã°_åue
(
limô
);

169 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
, 
ªt
, 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

171  
TEST_SUCCESS
;

172 
	}
}

174 
ã°_ªtu∫_t
 
	$MEMCACHED_SERVER_MARKED_DEAD_TEST
(
memˇched_°
 *
memc
)

176  
TEST_SKIPPED
;

178 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
, 30));

179 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
, 
åue
));

181 
memˇched_ªtu∫_t
 
ªt
;

183 
ªt

	`memˇched_£t
(
memc
,

184 
	`ã°_lôîÆ_∑øm
("foo"),

185 
NULL
, 0, 
	`time_t
(0), 
	`uöt32_t
(0));

186 } 
ªt
 =
MEMCACHED_SUCCESS
 
‹
Ñë =
MEMCACHED_CONNECTION_FAILURE
);

187 
	`ã°_com∑ª
(
MEMCACHED_SERVER_TEMPORARILY_DISABLED
, 
ªt
);

189 
limô
= 5;

191 
libã°
::
	`dªam
(3, 0);

192 
ªt

	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 
NULL
, 0, 
	`time_t
(0), 
	`uöt32_t
(0));

193 } (
ªt
 =
MEMCACHED_SERVER_TEMPORARILY_DISABLED
 
‹
Ñë =
MEMCACHED_SUCCESS
Ë
™d
 --
limô
);

195 
	`ã°_åue
(
limô
);

197 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SERVER_MARKED_DEAD
, 
ªt
, 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

199  
TEST_SUCCESS
;

200 
	}
}

202 
ã°_°
 
	gcuŒ_TESTS
[] ={

203 { "cuŒ sîvîs", 
åue
, (
ã°_ˇŒback_‚
*)
cuŒ_TEST
 },

207 
ã°_°
 
	g£rvî_ãmp‹¨ûy_dißbÀd_TESTS
[] ={

208 { "memˇched_£t(MEMCACHED_SERVER_TEMPORARILY_DISABLED -> MEMCACHED_SUCCESS)", 
åue
, (
ã°_ˇŒback_‚
*)
MEMCACHED_SERVER_TEMPORARILY_DISABLED_to_suc˚ss_TEST
 },

209 { "memˇched_£t(MEMCACHED_SERVER_TEMPORARILY_DISABLED)", 
åue
, (
ã°_ˇŒback_‚
*)
MEMCACHED_SERVER_TEMPORARILY_DISABLED_TEST
 },

213 
ã°_°
 
	g£rvî_≥rm™íéy_dißbÀd_TESTS
[] ={

214 { "memˇched_£t(MEMCACHED_SERVER_MARKED_DEAD)", 
åue
, (
ã°_ˇŒback_‚
*)
MEMCACHED_SERVER_MARKED_DEAD_TEST
 },

218 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

219 { "cuŒ", (
ã°_ˇŒback_‚
*)
shutdown_£rvîs
, (ã°_ˇŒback_‚*)
ª°¨t_£rvîs
, 
cuŒ_TESTS
 },

220 { "£rvî faûed", (
ã°_ˇŒback_‚
*)
shutdown_£rvîs
, (ã°_ˇŒback_‚*)
ª°¨t_£rvîs
, 
£rvî_ãmp‹¨ûy_dißbÀd_TESTS
 },

221 { "£rvîÉje˘", (
ã°_ˇŒback_‚
*)
add_shutdown_£rvîs
, (ã°_ˇŒback_‚*)
ª°¨t_£rvîs
, 
£rvî_≥rm™íéy_dißbÀd_TESTS
 },

225 
	~"ã°s/libmemˇched_w‹ld.h
"

227 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

229 
w‹ld
->
£rvîs
().
£t_£rvîs_to_run
(1);

231 
	gw‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

233 
	gw‹ld
->
¸óã
((
ã°_ˇŒback_¸óã_‚
*)
w‹ld_¸óã
);

234 
	gw‹ld
->
de°roy
((
ã°_ˇŒback_de°roy_‚
*)
w‹ld_de°roy
);

236 
	gw‹ld
->
£t_ru¬î
(
√w
 
LibmemˇchedRu¬î
);

238 
	gglobÆ_‰amew‹k

w‹ld
;

	@tests/hash_plus.cc

5 
	~<mem_c⁄fig.h
>

7 
	~<libã°/ã°.hµ
>

9 
	~<c°dio
>

10 
	~<c°dlib
>

11 
	~<c°rög
>

13 
	~<libhashkô-1.0/hashkô.hµ
>

15 
usög
 
«me•a˚
 
	glibã°
;

17 
	~"ã°s/hash_ªsu…s.h
"

19 
ã°_ªtu∫_t
 
	$exi°s_ã°
(*)

21 
Hashkô
 
hashk
;

22 ()
hashk
;

24  
TEST_SUCCESS
;

25 
	}
}

27 
ã°_ªtu∫_t
 
	$√w_ã°
(*)

29 
Hashkô
 *
hashk

√w
 Hashkit;

31 ()
hashk
;

33 
dñëe
 
hashk
;

35  
TEST_SUCCESS
;

36 
	}
}

38 
ã°_ªtu∫_t
 
	$c›y_ã°
(*)

40 
Hashkô
 *
hashk

√w
 Hashkit;

41 
Hashkô
 *
	`c›y
(
hashk
);

43 ()
c›y
;

45 
dñëe
 
hashk
;

47  
TEST_SUCCESS
;

48 
	}
}

50 
ã°_ªtu∫_t
 
	$assign_ã°
(*)

52 
Hashkô
 
hashk
;

53 
Hashkô
 
c›y
;

55 
c›y

hashk
;

57 ()
c›y
;

59  
TEST_SUCCESS
;

60 
	}
}

62 
ã°_ªtu∫_t
 
	$dige°_ã°
(*)

64 
Hashkô
 
hashk
;

65 
	`ã°_åue
(
hashk
.
	`dige°
("Foo", ("Foo")));

67  
TEST_SUCCESS
;

68 
	}
}

70 
ã°_ªtu∫_t
 
	$£t_fun˘i⁄_ã°
(*)

72 
Hashkô
 
hashk
;

73 
hashkô_hash_Æg‹ôhm_t
 
Ægo_li°
[]= {

74 
HASHKIT_HASH_DEFAULT
,

75 
HASHKIT_HASH_MD5
,

76 
HASHKIT_HASH_CRC
,

77 
HASHKIT_HASH_FNV1_64
,

78 
HASHKIT_HASH_FNV1A_64
,

79 
HASHKIT_HASH_FNV1_32
,

80 
HASHKIT_HASH_FNV1A_32
,

81 
HASHKIT_HASH_MURMUR
,

82 
HASHKIT_HASH_JENKINS
,

83 
HASHKIT_HASH_MAX


87 
hashkô_hash_Æg‹ôhm_t
 *
Ægo

Ægo_li°
; *Ægÿ!
HASHKIT_HASH_MAX
;álgo++)

89 
hashkô_ªtu∫_t
 
rc

hashk
.
	`£t_fun˘i⁄
(*
Ægo
);

91 i‡(
rc
 =
HASHKIT_INVALID_ARGUMENT
)

96 
	`ã°_com∑ª
(
HASHKIT_SUCCESS
, 
rc
);

98 
uöt32_t
 *
li°
;

99 *
Ægo
)

101 
HASHKIT_HASH_DEFAULT
:

102 
li°

⁄e_©_a_time_vÆues
;

105 
HASHKIT_HASH_MD5
:

106 
li°

md5_vÆues
;

109 
HASHKIT_HASH_CRC
:

110 
li°

¸c_vÆues
;

113 
HASHKIT_HASH_FNV1_64
:

114 
li°

‚v1_64_vÆues
;

117 
HASHKIT_HASH_FNV1A_64
:

118 
li°

‚v1a_64_vÆues
;

121 
HASHKIT_HASH_FNV1_32
:

122 
li°

‚v1_32_vÆues
;

125 
HASHKIT_HASH_FNV1A_32
:

126 
li°

‚v1a_32_vÆues
;

129 
HASHKIT_HASH_HSIEH
:

130 
li°

hsõh_vÆues
;

133 
HASHKIT_HASH_MURMUR3
:

134 #ifde‡
WORDS_BIGENDIAN


137 
li°

murmur3_vÆues
;

139 
HASHKIT_HASH_MURMUR
:

140 #ifde‡
WORDS_BIGENDIAN


143 
li°

murmur_vÆues
;

146 
HASHKIT_HASH_JENKINS
:

147 
li°

jíkös_vÆues
;

150 
HASHKIT_HASH_CUSTOM
:

151 
HASHKIT_HASH_MAX
:

153 
li°

NULL
;

154 
	`ã°_Áû
("WeÉnded up onáÇon-existent hash");

158 
uöt32_t
 
x
;

159 c⁄° **
±r
;

160 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

162 
uöt32_t
 
hash_vÆ
;

164 
hash_vÆ

hashk
.
	`dige°
(*
±r
, 
	`°æí
(*ptr));

165 
buf„r
[1024];

166 
	`¢¥ötf
(
buf„r
, (buf„r), "%lu %lu†%s", ()
li°
[
x
], ()
hash_vÆ
, 
	`libhashkô_°rög_hash
(*
Ægo
));

167 
	`ã°_com∑ª
(
li°
[
x
], 
hash_vÆ
);

171  
TEST_SUCCESS
;

172 
	}
}

174 
ã°_ªtu∫_t
 
	$£t_di°ributi⁄_fun˘i⁄_ã°
(*)

176 
Hashkô
 
hashk
;

177 
hashkô_ªtu∫_t
 
rc
;

179 
rc

hashk
.
	`£t_di°ributi⁄_fun˘i⁄
(
HASHKIT_HASH_CUSTOM
);

180 
	`ã°_åue
(
rc
 =
HASHKIT_FAILURE
 
‹
Ñ¯=
HASHKIT_INVALID_ARGUMENT
);

182 
	`ã°_com∑ª
(
HASHKIT_SUCCESS
,

183 
hashk
.
	`£t_di°ributi⁄_fun˘i⁄
(
HASHKIT_HASH_JENKINS
));

185  
TEST_SUCCESS
;

186 
	}
}

188 
ã°_ªtu∫_t
 
	$com∑ª_fun˘i⁄_ã°
(*)

190 
Hashkô
 
a
, 
b
;

192 
b

a
;

194 
	`ã°_åue
(
a
 =
b
);

196 
b
.
	`£t_fun˘i⁄
(
HASHKIT_HASH_MURMUR
);

198 
	`ã°_Ál£
(
a
 =
b
);

199 
	`ã°_åue
(
b
 == b);

200 
	`ã°_åue
(
a
 ==á);

202  
TEST_SUCCESS
;

203 
	}
}

205 
ã°_°
 
	gbasic
[] ={

206 { "exi°s", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
exi°s_ã°
) },

207 { "√w", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
√w_ã°
) },

208 { "c›y", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
c›y_ã°
) },

209 { "assign", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
assign_ã°
) },

210 { "dige°", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
dige°_ã°
) },

211 { "£t_fun˘i⁄", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
£t_fun˘i⁄_ã°
) },

212 { "£t_di°ributi⁄_fun˘i⁄", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
£t_di°ributi⁄_fun˘i⁄_ã°
) },

213 { "com∑ª", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
com∑ª_fun˘i⁄_ã°
) },

217 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

218 {"basic", 0, 0, 
basic
},

222 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

224 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

	@tests/hash_results.h

15 c⁄° *
	gli°_to_hash
[]=

42 
NULL


45 
uöt32_t
 
	g⁄e_©_a_time_vÆues
[]= { 2297466611U, 3902465932U, 469785835U, 1937308741U,

53 
uöt32_t
 
	gmd5_vÆues
[]= { 3195025439U, 2556848621U, 3724893440U, 3332385401U,

61 
uöt32_t
 
	g¸c_vÆues
[]= { 10542U, 22009U, 14526U, 19510U, 19432U, 10199U, 20634U,

66 
uöt32_t
 
	g‚v1_64_vÆues
[]= { 473199127U, 4148981457U, 3971873300U, 3257986707U,

74 
uöt32_t
 
	g‚v1a_64_vÆues
[]= { 1488911807U, 2500855813U, 1510099634U, 1390325195U,

82 
uöt32_t
 
	g‚v1_32_vÆues
[]= { 67176023U, 1190179409U, 2043204404U, 3221866419U,

90 
uöt32_t
 
	g‚v1a_32_vÆues
[]= { 280767167U, 2421315013U, 3072375666U, 855001899U,

98 #ifde‡
HAVE_HSIEH_HASH


99 
uöt32_t
 
	ghsõh_vÆues
[]= { 3738850110U, 3636226060U, 3821074029U, 3489929160U, 3485772682U, 80540287U,

105 
uöt32_t
 
	ghsõh_vÆues
[]= { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

108 #ifde‡
HAVE_MURMUR_HASH


109 
uöt32_t
 
	gmurmur_vÆues
[]= { 4142305122U, 734504955U, 3802834688U, 4076891445U,

117 
uöt32_t
 
	gmurmur3_vÆues
[]= { 1120212521U, 1448785489U, 4186307405U, 2686268514U,

125 
uöt32_t
 
	gmurmur_vÆues
[]= { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

126 
uöt32_t
 
	gmurmur3_vÆues
[]= { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

129 
uöt32_t
 
	gjíkös_vÆues
[]= { 1442444624U, 4253821186U, 1885058256U, 2120131735U,

	@tests/hashkit_functions.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
usög
 
«me•a˚
 
	glibã°
;

43 
	~<c°dio
>

44 
	~<c°dlib
>

45 
	~<c°rög
>

47 
	~<libhashkô-1.0/hashkô.h
>

48 
	~<libhashkô/is.h
>

50 
	~"ã°s/hash_ªsu…s.h
"

52 
hashkô_°
 
	gglobÆ_hashk
;

57 
hash_ã°_°
 
	thash_ã°_°
;

59 
	shash_ã°_°


61 
boﬁ
 
	m_unu£d
;

64 
ã°_ªtu∫_t
 
	$öô_ã°
(*)

66 
hashkô_°
 
hashk
;

67 
hashkô_°
 *
hashk_±r
;

69 
hashk_±r

	`hashkô_¸óã
(&
hashk
);

70 
	`ã°_åue
(
hashk_±r
);

71 
	`ã°_åue
(
hashk_±r
 =&
hashk
);

72 
	`ã°_Ál£
(
	`hashkô_is_Æloˇãd
(
hashk_±r
));

74 
	`hashkô_‰ì
(
hashk_±r
);

76  
TEST_SUCCESS
;

77 
	}
}

79 
ã°_ªtu∫_t
 
	$Æloˇti⁄_ã°
(*)

81 
hashkô_°
 *
hashk_±r
;

83 
hashk_±r

	`hashkô_¸óã
(
NULL
);

84 
	`ã°_åue
(
hashk_±r
);

85 
	`ã°_åue
(
	`hashkô_is_Æloˇãd
(
hashk_±r
));

86 
	`hashkô_‰ì
(
hashk_±r
);

88  
TEST_SUCCESS
;

89 
	}
}

91 
ã°_ªtu∫_t
 
	$˛⁄e_ã°
(
hashkô_°
 *
hashk
)

94 
	`ã°_åue
(&
globÆ_hashk
 =
hashk
);

100 
hashkô_°
 *
hashk_±r
;

101 
hashk_±r

	`hashkô_˛⁄e
(
NULL
, NULL);

102 
	`ã°_åue
(
hashk_±r
);

103 
	`ã°_åue
(
	`hashkô_is_Æloˇãd
(
hashk_±r
));

104 
	`hashkô_‰ì
(
hashk_±r
);

109 
hashkô_°
 *
hashk_±r
;

111 
hashk_±r

	`hashkô_˛⁄e
(
NULL
, 
hashk
);

113 
	`ã°_åue
(
hashk_±r
);

114 
	`ã°_åue
(
	`hashkô_is_Æloˇãd
(
hashk_±r
));

116 
	`hashkô_‰ì
(
hashk_±r
);

121 
hashkô_°
 
de˛¨ed_˛⁄e
;

122 
hashkô_°
 *
hash_˛⁄e
;

124 
hash_˛⁄e

	`hashkô_˛⁄e
(&
de˛¨ed_˛⁄e
, 
NULL
);

125 
	`ã°_åue
(
hash_˛⁄e
);

126 
	`ã°_åue
(
hash_˛⁄e
 =&
de˛¨ed_˛⁄e
);

127 
	`ã°_Ál£
(
	`hashkô_is_Æloˇãd
(
hash_˛⁄e
));

129 
	`hashkô_‰ì
(
hash_˛⁄e
);

134 
hashkô_°
 
de˛¨ed_˛⁄e
;

135 
hashkô_°
 *
hash_˛⁄e
;

137 
hash_˛⁄e

	`hashkô_˛⁄e
(&
de˛¨ed_˛⁄e
, 
hashk
);

138 
	`ã°_åue
(
hash_˛⁄e
);

139 
	`ã°_åue
(
hash_˛⁄e
 =&
de˛¨ed_˛⁄e
);

140 
	`ã°_Ál£
(
	`hashkô_is_Æloˇãd
(
hash_˛⁄e
));

142 
	`hashkô_‰ì
(
hash_˛⁄e
);

145  
TEST_SUCCESS
;

146 
	}
}

148 
ã°_ªtu∫_t
 
	$⁄e_©_a_time_run
 (
hashkô_°
 *)

150 
uöt32_t
 
x
;

151 c⁄° **
±r
;

153 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

155 
	`ã°_com∑ª
(
⁄e_©_a_time_vÆues
[
x
],

156 
	`libhashkô_⁄e_©_a_time
(*
±r
, 
	`°æí
(*ptr)));

159  
TEST_SUCCESS
;

160 
	}
}

162 
ã°_ªtu∫_t
 
	$md5_run
 (
hashkô_°
 *)

164 
uöt32_t
 
x
;

165 c⁄° **
±r
;

167 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

169 
	`ã°_com∑ª
(
md5_vÆues
[
x
],

170 
	`libhashkô_md5
(*
±r
, 
	`°æí
(*ptr)));

173  
TEST_SUCCESS
;

174 
	}
}

176 
ã°_ªtu∫_t
 
	$¸c_run
 (
hashkô_°
 *)

178 
uöt32_t
 
x
;

179 c⁄° **
±r
;

181 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

183 
	`ã°_com∑ª
(
¸c_vÆues
[
x
],

184 
	`libhashkô_¸c32
(*
±r
, 
	`°æí
(*ptr)));

187  
TEST_SUCCESS
;

188 
	}
}

190 
ã°_ªtu∫_t
 
	$‚v1_64_run
 (
hashkô_°
 *)

192 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_FNV1_64
));

194 
uöt32_t
 
x
;

195 c⁄° **
±r
;

197 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

199 
	`ã°_com∑ª
(
‚v1_64_vÆues
[
x
],

200 
	`libhashkô_‚v1_64
(*
±r
, 
	`°æí
(*ptr)));

203  
TEST_SUCCESS
;

204 
	}
}

206 
ã°_ªtu∫_t
 
	$‚v1a_64_run
 (
hashkô_°
 *)

208 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_FNV1A_64
));

209 
uöt32_t
 
x
;

210 c⁄° **
±r
;

212 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

214 
	`ã°_com∑ª
(
‚v1a_64_vÆues
[
x
],

215 
	`libhashkô_‚v1a_64
(*
±r
, 
	`°æí
(*ptr)));

218  
TEST_SUCCESS
;

219 
	}
}

221 
ã°_ªtu∫_t
 
	$‚v1_32_run
 (
hashkô_°
 *)

223 
uöt32_t
 
x
;

224 c⁄° **
±r
;

226 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

228 
	`ã°_com∑ª
(
‚v1_32_vÆues
[
x
],

229 
	`libhashkô_‚v1_32
(*
±r
, 
	`°æí
(*ptr)));

232  
TEST_SUCCESS
;

233 
	}
}

235 
ã°_ªtu∫_t
 
	$‚v1a_32_run
 (
hashkô_°
 *)

237 
uöt32_t
 
x
;

238 c⁄° **
±r
;

240 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

242 
	`ã°_com∑ª
(
‚v1a_32_vÆues
[
x
],

243 
	`libhashkô_‚v1a_32
(*
±r
, 
	`°æí
(*ptr)));

246  
TEST_SUCCESS
;

247 
	}
}

249 
ã°_ªtu∫_t
 
	$hsõh_run
 (
hashkô_°
 *)

251 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_HSIEH
));

253 
uöt32_t
 
x
;

254 c⁄° **
±r
;

256 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

258 
	`ã°_com∑ª
(
hsõh_vÆues
[
x
],

259 
	`libhashkô_hsõh
(*
±r
, 
	`°æí
(*ptr)));

262  
TEST_SUCCESS
;

263 
	}
}

265 
ã°_ªtu∫_t
 
	$murmur3_TEST
(
hashkô_°
 *)

267 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_MURMUR3
));

269 #ifde‡
WORDS_BIGENDIAN


270 ()
murmur3_vÆues
;

271  
TEST_SKIPPED
;

273 
uöt32_t
 
x
;

274 c⁄° **
±r
;

276 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

278 
	`ã°_com∑ª
(
murmur3_vÆues
[
x
],

279 
	`libhashkô_murmur3
(*
±r
, 
	`°æí
(*ptr)));

282  
TEST_SUCCESS
;

284 
	}
}

286 
ã°_ªtu∫_t
 
	$murmur_run
 (
hashkô_°
 *)

288 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_MURMUR
));

290 #ifde‡
WORDS_BIGENDIAN


291 ()
murmur_vÆues
;

292  
TEST_SKIPPED
;

294 
uöt32_t
 
x
;

295 c⁄° **
±r
;

297 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

299 
	`ã°_com∑ª
(
murmur_vÆues
[
x
],

300 
	`libhashkô_murmur
(*
±r
, 
	`°æí
(*ptr)));

303  
TEST_SUCCESS
;

305 
	}
}

307 
ã°_ªtu∫_t
 
	$jíkös_run
 (
hashkô_°
 *)

309 
uöt32_t
 
x
;

310 c⁄° **
±r
;

312 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

314 
	`ã°_com∑ª
(
jíkös_vÆues
[
x
],

315 
	`libhashkô_jíkös
(*
±r
, 
	`°æí
(*ptr)));

318  
TEST_SUCCESS
;

319 
	}
}

328 
ã°_°
 
	gÆloˇti⁄
[]= {

329 {"öô", 0, (
ã°_ˇŒback_‚
*)
öô_ã°
},

330 {"¸óãánd fªe", 0, (
ã°_ˇŒback_‚
*)
Æloˇti⁄_ã°
},

331 {"˛⁄e", 0, (
ã°_ˇŒback_‚
*)
˛⁄e_ã°
},

335 
ã°_ªtu∫_t
 
	$hashkô_dige°_ã°
(
hashkô_°
 *
hashk
)

337 
	`ã°_åue
(
	`hashkô_dige°
(
hashk
, "a", ("a")));

339  
TEST_SUCCESS
;

340 
	}
}

342 
ã°_ªtu∫_t
 
	$hashkô_£t_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

344 
Ægo
(
HASHKIT_HASH_DEFAULT
);álgÿ< (
HASHKIT_HASH_MAX
);álgo++)

346 
uöt32_t
 
x
;

347 c⁄° **
±r
;

348 
uöt32_t
 *
li°
;

350 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
°©ic_ˇ°
<
hashkô_hash_Æg‹ôhm_t
>(
Ægo
)));

352 
hashkô_ªtu∫_t
 
rc

	`hashkô_£t_fun˘i⁄
(
hashk
, 
°©ic_ˇ°
<
hashkô_hash_Æg‹ôhm_t
>(
Ægo
));

354 
	`ã°_com∑ª_gŸ
(
HASHKIT_SUCCESS
, 
rc
, 
	`hashkô_°ªº‹
(
NULL
,Ñc));

356 
Ægo
)

358 
HASHKIT_HASH_DEFAULT
:

359 
li°

⁄e_©_a_time_vÆues
;

362 
HASHKIT_HASH_MD5
:

363 
li°

md5_vÆues
;

366 
HASHKIT_HASH_CRC
:

367 
li°

¸c_vÆues
;

370 
HASHKIT_HASH_FNV1_64
:

371 
li°

‚v1_64_vÆues
;

374 
HASHKIT_HASH_FNV1A_64
:

375 
li°

‚v1a_64_vÆues
;

378 
HASHKIT_HASH_FNV1_32
:

379 
li°

‚v1_32_vÆues
;

382 
HASHKIT_HASH_FNV1A_32
:

383 
li°

‚v1a_32_vÆues
;

386 
HASHKIT_HASH_HSIEH
:

387 
li°

hsõh_vÆues
;

390 
HASHKIT_HASH_MURMUR
:

391 
li°

murmur_vÆues
;

394 
HASHKIT_HASH_JENKINS
:

395 
li°

jíkös_vÆues
;

398 
HASHKIT_HASH_CUSTOM
:

399 
HASHKIT_HASH_MAX
:

401 
li°

NULL
;

406 i‡(
li°
)

408 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

410 
	`ã°_com∑ª
(
li°
[
x
],

411 
	`hashkô_dige°
(
hashk
, *
±r
, 
	`°æí
(*ptr)));

416  
TEST_FAILURE
;

420  
TEST_SUCCESS
;

421 
	}
}

423 
uöt32_t
 
	$hash_ã°_fun˘i⁄
(c⁄° *
°rög
, 
size_t
 
°rög_Àngth
, *)

425  
	`libhashkô_md5
(
°rög
, 
°rög_Àngth
);

426 
	}
}

428 
ã°_ªtu∫_t
 
	$hashkô_£t_cu°om_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

430 
uöt32_t
 
x
;

431 c⁄° **
±r
;

434 
	`ã°_com∑ª
(
HASHKIT_SUCCESS
,

435 
	`hashkô_£t_cu°om_fun˘i⁄
(
hashk
, 
hash_ã°_fun˘i⁄
, 
NULL
));

437 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

439 
	`ã°_com∑ª
(
md5_vÆues
[
x
],

440 
	`hashkô_dige°
(
hashk
, *
±r
, 
	`°æí
(*ptr)));

443  
TEST_SUCCESS
;

444 
	}
}

446 
ã°_ªtu∫_t
 
	$hashkô_£t_di°ributi⁄_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

448 
Ægo
(
HASHKIT_HASH_DEFAULT
);álgÿ< (
HASHKIT_HASH_MAX
);álgo++)

450 
hashkô_ªtu∫_t
 
rc

	`hashkô_£t_di°ributi⁄_fun˘i⁄
(
hashk
, 
°©ic_ˇ°
<
hashkô_hash_Æg‹ôhm_t
>(
Ægo
));

453 i‡(
rc
 =
HASHKIT_INVALID_ARGUMENT
)

456 
	`ã°_com∑ª
(
HASHKIT_SUCCESS
, 
rc
);

459  
TEST_SUCCESS
;

460 
	}
}

462 
ã°_ªtu∫_t
 
	$hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

464 
	`ã°_com∑ª
(
HASHKIT_SUCCESS
,

465 
	`hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄
(
hashk
, 
hash_ã°_fun˘i⁄
, 
NULL
));

467  
TEST_SUCCESS
;

468 
	}
}

471 
ã°_ªtu∫_t
 
	$hashkô_gë_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

473 
Ægo
(
HASHKIT_HASH_DEFAULT
);álgÿ< (
HASHKIT_HASH_MAX
);álgo++)

476 i‡(
HASHKIT_HASH_CUSTOM
)

480 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
°©ic_ˇ°
<
hashkô_hash_Æg‹ôhm_t
>(
Ægo
)));

482 
	`ã°_com∑ª
(
HASHKIT_SUCCESS
,

483 
	`hashkô_£t_fun˘i⁄
(
hashk
, 
°©ic_ˇ°
<
hashkô_hash_Æg‹ôhm_t
>(
Ægo
)));

485 
	`ã°_com∑ª
(
	`hashkô_gë_fun˘i⁄
(
hashk
), 
Ægo
);

487  
TEST_SUCCESS
;

488 
	}
}

490 
ã°_ªtu∫_t
 
	$hashkô_com∑ª_ã°
(
hashkô_°
 *
hashk
)

492 
hashkô_°
 *
˛⁄e

	`hashkô_˛⁄e
(
NULL
, 
hashk
);

494 
	`ã°_åue
(
	`hashkô_com∑ª
(
˛⁄e
, 
hashk
));

495 
	`hashkô_‰ì
(
˛⁄e
);

497  
TEST_SUCCESS
;

498 
	}
}

500 
ã°_°
 
	ghashkô_°_fun˘i⁄s
[] ={

501 {"hashkô_dige°", 0, (
ã°_ˇŒback_‚
*)
hashkô_dige°_ã°
},

502 {"hashkô_£t_fun˘i⁄", 0, (
ã°_ˇŒback_‚
*)
hashkô_£t_fun˘i⁄_ã°
},

503 {"hashkô_£t_cu°om_fun˘i⁄", 0, (
ã°_ˇŒback_‚
*)
hashkô_£t_cu°om_fun˘i⁄_ã°
},

504 {"hashkô_gë_fun˘i⁄", 0, (
ã°_ˇŒback_‚
*)
hashkô_gë_fun˘i⁄_ã°
},

505 {"hashkô_£t_di°ributi⁄_fun˘i⁄", 0, (
ã°_ˇŒback_‚
*)
hashkô_£t_di°ributi⁄_fun˘i⁄_ã°
},

506 {"hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄", 0, (
ã°_ˇŒback_‚
*)
hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄_ã°
},

507 {"hashkô_com∑ª", 0, (
ã°_ˇŒback_‚
*)
hashkô_com∑ª_ã°
},

511 
ã°_ªtu∫_t
 
	$libhashkô_dige°_ã°
(
hashkô_°
 *)

513 
	`ã°_åue
(
	`libhashkô_dige°
("a", ("a"), 
HASHKIT_HASH_DEFAULT
));

515  
TEST_SUCCESS
;

516 
	}
}

518 
ã°_°
 
	glibøry_fun˘i⁄s
[] ={

519 {"libhashkô_dige°", 0, (
ã°_ˇŒback_‚
*)
libhashkô_dige°_ã°
},

523 
ã°_°
 
	ghash_ã°s
[] ={

524 {"⁄e_©_a_time", 0, (
ã°_ˇŒback_‚
*)
⁄e_©_a_time_run
 },

525 {"md5", 0, (
ã°_ˇŒback_‚
*)
md5_run
 },

526 {"¸c", 0, (
ã°_ˇŒback_‚
*)
¸c_run
 },

527 {"‚v1_64", 0, (
ã°_ˇŒback_‚
*)
‚v1_64_run
 },

528 {"‚v1a_64", 0, (
ã°_ˇŒback_‚
*)
‚v1a_64_run
 },

529 {"‚v1_32", 0, (
ã°_ˇŒback_‚
*)
‚v1_32_run
 },

530 {"‚v1a_32", 0, (
ã°_ˇŒback_‚
*)
‚v1a_32_run
 },

531 {"hsõh", 0, (
ã°_ˇŒback_‚
*)
hsõh_run
 },

532 {"murmur", 0, (
ã°_ˇŒback_‚
*)
murmur_run
 },

533 {"murmur3", 0, (
ã°_ˇŒback_‚
*)
murmur3_TEST
 },

534 {"jíkis", 0, (
ã°_ˇŒback_‚
*)
jíkös_run
 },

535 {0, 0, (
ã°_ˇŒback_‚
*)0}

544 
ã°_°
 
	gªgªssi⁄
[]= {

548 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

549 {"Æloˇti⁄", 0, 0, 
Æloˇti⁄
},

550 {"hashkô_°_fun˘i⁄s", 0, 0, 
hashkô_°_fun˘i⁄s
},

551 {"libøry_fun˘i⁄s", 0, 0, 
libøry_fun˘i⁄s
},

552 {"hashög", 0, 0, 
hash_ã°s
},

553 {"ªgªssi⁄", 0, 0, 
ªgªssi⁄
},

557 *
w‹ld_¸óã
(
libã°
::
£rvî_°¨tup_°
&, 
ã°_ªtu∫_t
& 
îr‹
)

559 
hashkô_°
 *
	ghashk_±r

hashkô_¸óã
(&
globÆ_hashk
);

561 i‡(
	ghashk_±r
 !&
globÆ_hashk
)

563 
îr‹

TEST_FAILURE
;

564  
	gNULL
;

567 i‡(
hashkô_is_Æloˇãd
(
hashk_±r
Ë=
åue
)

569 
îr‹

TEST_FAILURE
;

570  
	gNULL
;

573  
	ghashk_±r
;

577 
boﬁ
 
	$w‹ld_de°roy
(*
obje˘
)

579 
hashkô_°
 *
hashk
(hashkô_° *)
obje˘
;

581 
	`ã°_åue
(
	`hashkô_is_Æloˇãd
(
hashk
Ë=
Ál£
);

582 
	`hashkô_‰ì
(&
globÆ_hashk
);

584  
TEST_SUCCESS
;

585 
	}
}

587 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

589 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

590 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

591 
	gw‹ld
->
de°roy
(
w‹ld_de°roy
);

	@tests/ketama.h

37 #¥agm®
⁄˚


39 
ã°_ªtu∫_t
 
auto_eje˘_ho°s
(
memˇched_°
 *);

40 
ã°_ªtu∫_t
 
këama_com∑tibûôy_libmemˇched
(
memˇched_°
 *);

41 
ã°_ªtu∫_t
 
këama_com∑tibûôy_•ymemˇched
(
memˇched_°
 *);

42 
ã°_ªtu∫_t
 
u£r_suµlõd_bug18
(
memˇched_°
 *);

	@tests/ketama_test_cases.h

9 #¥agm®
⁄˚


12 c⁄° *
	mkey
;

13 
	mhash1
;

14 
	mhash2
;

15 c⁄° *
	m£rvî
;

16 } 
	gkëama_ã°_ˇ£s
[99]= {

118 
	~"këama_ã°_ˇ£s_•y.h
"

	@tests/ketama_test_cases_spy.h

9 #¥agm®
⁄˚


12 c⁄° *
	mkey
;

13 
	mhash1
;

14 
	mhash2
;

15 c⁄° *
	m£rvî
;

16 } 
	gkëama_ã°_ˇ£s_•y
[99]= {

	@tests/keys.hpp

38 #i‡
deföed
(
HAVE_UUID_UUID_H
) && HAVE_UUID_UUID_H

39 
	~<uuid/uuid.h
>

42 
	skeys_°
 {

43 
	mpublic
:

44 
keys_°
(
size_t
 
¨g
)

46 
öô
(
¨g
, 
UUID_STRING_MAXLENGTH
);

49 
keys_°
(
size_t
 
¨g
, size_à
∑ddög
)

51 
öô
(
¨g
, 
∑ddög
);

54 
öô
(
size_t
 
¨g
, size_à
∑ddög
)

56 
	m_Àngths
.
ªsize
(
¨g
);

57 
	m_keys
.
ªsize
(
¨g
);

59 
size_t
 
	mx
0; x < 
	m_keys
.
size
(); x++)

61 
	mlibã°
::
vch¨_t
 
key_buf„r
;

62 
	mkey_buf„r
.
ªsize
(
∑ddög
 +1);

63 
mem£t
(&
key_buf„r
[0], 'x', 
∑ddög
);

65 i‡(
	mHAVE_UUID_UUID_H
)

67 #i‡
deföed
(
HAVE_UUID_UUID_H
) && HAVE_UUID_UUID_H

68 
uuid_t
 
	mout
;

69 
uuid_gíî©e
(
out
);

71 
uuid_u≈¨£
(
out
, &
key_buf„r
[0]);

72 
	m_keys
[
x
]
°rdup
(&
key_buf„r
[0]);

73 (
	m_keys
[
x
])[
UUID_STRING_MAXLENGTH
]= 'x';

78 
	möt_buf„r
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

79 
	mkey_Àngth

¢¥ötf
(
öt_buf„r
, (öt_buf„r), "%u", 
uöt32_t
(
x
));

80 
mem˝y
(&
key_buf„r
[0], 
öt_buf„r
, 
key_Àngth
);

81 
	m_keys
[
x
]
°rdup
(&
key_buf„r
[0]);

83 
	m_Àngths
[
x
]
∑ddög
;

87 ~
keys_°
()

89 
	mlibã°
::
vch¨_±r_t
::
ôî©‹
 
ôî

_keys
.
begö
();

90 
	môî
 !
_keys
.
íd
();

91 ++
	môî
)

93 ::
‰ì
(*
ôî
);

97 
	mlibã°
::
vch¨_±r_t
::
ôî©‹
 
begö
()

99  
_keys
.
begö
();

102 
	mlibã°
::
vch¨_±r_t
::
ôî©‹
 
íd
()

104  
_keys
.
íd
();

107 
size_t
 
size
() const

109  
	m_keys
.
size
();

112 
	m°d
::
ve˘‹
<
size_t
>& 
Àngths
()

114  
_Àngths
;

117 
	mlibã°
::
vch¨_±r_t
& 
keys
()

119  
_keys
;

122 
size_t
* 
Àngths_±r
()

124  &
	m_Àngths
[0];

127 ** 
keys_±r
()

129  &
	m_keys
[0];

132 * 
key_©
(
size_t
 
¨g
)

134  
	m_keys
[
¨g
];

137 
size_t
 
Àngth_©
(size_à
¨g
)

139  
	m_Àngths
[
¨g
];

142 
	m¥iv©e
:

143 
libã°
::
vch¨_±r_t
 
_keys
;

144 
	m°d
::
ve˘‹
<
size_t
> 
_Àngths
;

	@tests/libmemcached-1.0/all_tests.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~"ã°s/basic.h
"

42 
	~"ã°s/debug.h
"

43 
	~"ã°s/dïªˇãd.h
"

44 
	~"ã°s/îr‹_c⁄dôi⁄s.h
"

45 
	~"ã°s/exi°.h
"

46 
	~"ã°s/këama.h
"

47 
	~"ã°s/«me•a˚.h
"

48 
	~"ã°s/libmemˇched-1.0/dump.h
"

49 
	~"ã°s/libmemˇched-1.0/gíî©e.h
"

50 
	~"ã°s/libmemˇched-1.0/hÆdíbønd.h
"

51 
	~"ã°s/libmemˇched-1.0/∑r£r.h
"

52 
	~"ã°s/libmemˇched-1.0/°©.h
"

53 
	~"ã°s/touch.h
"

54 
	~"ã°s/ˇŒbacks.h
"

55 
	~"ã°s/poﬁ.h
"

56 
	~"ã°s/¥öt.h
"

57 
	~"ã°s/ª∂iˇti⁄.h
"

58 
	~"ã°s/£rvî_add.h
"

59 
	~"ã°s/vútuÆ_buckës.h
"

61 
	~"ã°s/libmemˇched-1.0/£tup_™d_ã¨downs.h
"

64 
	~"ã°s/libmemˇched-1.0/mem_fun˘i⁄s.h
"

65 
	~"ã°s/libmemˇched-1.0/ícodög_key.h
"

68 
	~"ã°s/libmemˇched-1.0/Æl_ã°s.h
"

70 
	~"ã°s/libmemˇched_w‹ld.h
"

72 
	~<Æg‹ôhm
>

74 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

76 i‡(
gëív
("LIBMEMCACHED_SERVER_NUMBER"))

78 
£t_cou¡

°πoul
(
gëív
("LIBMEMCACHED_SERVER_NUMBER"), (**Ë
NULL
, 10);

79 
Áèl_as£π
(
£t_cou¡
 >= 1);

80 
	gw‹ld
->
£rvîs
().
£t_£rvîs_to_run
(
£t_cou¡
);

85 
	gw‹ld
->
£rvîs
().
£t_£rvîs_to_run
((
libã°
::
numbî_of_˝us
() > 3) ?

86 
°d
::
mö
(
libã°
::
numbî_of_˝us
(), 
size_t
(8)) : 3);

89 
	gw‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

91 
	gw‹ld
->
¸óã
((
ã°_ˇŒback_¸óã_‚
*)
w‹ld_¸óã
);

92 
	gw‹ld
->
de°roy
((
ã°_ˇŒback_de°roy_‚
*)
w‹ld_de°roy
);

94 
	gw‹ld
->
£t_ru¬î
(
√w
 
LibmemˇchedRu¬î
);

96 
	gw‹ld
->
£t_sockë
();

	@tests/libmemcached-1.0/all_tests.h

38 #¥agm®
⁄˚


40 
	~"ã°s/libmemˇched-1.0/memˇched_gë.h
"

44 
ã°_°
 
	gã°s
[] ={

45 {"utû_vîsi⁄", 
åue
, (
ã°_ˇŒback_‚
*)
utû_vîsi⁄_ã°
 },

46 {"Êush", 
Ál£
, (
ã°_ˇŒback_‚
*)
Êush_ã°
 },

47 {"öô", 
Ál£
, (
ã°_ˇŒback_‚
*)
öô_ã°
 },

48 {"Æloˇti⁄", 
Ál£
, (
ã°_ˇŒback_‚
*)
Æloˇti⁄_ã°
 },

49 {"£rvî_li°_nuŒ_ã°", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvî_li°_nuŒ_ã°
},

50 {"£rvî_uns‹t", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvî_uns‹t_ã°
},

51 {"£rvî_s‹t", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvî_s‹t_ã°
},

52 {"£rvî_s‹t2", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvî_s‹t2_ã°
},

53 {"memˇched_£rvî_ªmove", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_£rvî_ªmove_ã°
},

54 {"˛⁄e_ã°", 
Ál£
, (
ã°_ˇŒback_‚
*)
˛⁄e_ã°
 },

55 {"c⁄√˘i⁄_ã°", 
Ál£
, (
ã°_ˇŒback_‚
*)
c⁄√˘i⁄_ã°
},

56 {"ˇŒback_ã°", 
Ál£
, (
ã°_ˇŒback_‚
*)
ˇŒback_ã°
},

57 {"u£rd©a_ã°", 
Ál£
, (
ã°_ˇŒback_‚
*)
u£rd©a_ã°
},

58 {"memˇched_£t()", 
Ál£
, (
ã°_ˇŒback_‚
*)
£t_ã°
 },

59 {"memˇched_£t(Ë2", 
Ál£
, (
ã°_ˇŒback_‚
*)
£t_ã°2
 },

60 {"memˇched_£t(Ë3", 
Ál£
, (
ã°_ˇŒback_‚
*)
£t_ã°3
 },

61 {"memˇched_add(SUCCESS)", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_add_SUCCESS_TEST
 },

62 {"add", 
åue
, (
ã°_ˇŒback_‚
*)
add_ã°
 },

63 {"memˇched_„tch_ªsu…(MEMCACHED_NOTFOUND)", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_„tch_ªsu…_NOT_FOUND
 },

64 {"ª∂a˚", 
åue
, (
ã°_ˇŒback_‚
*)
ª∂a˚_ã°
 },

65 {"dñëe", 
åue
, (
ã°_ˇŒback_‚
*)
dñëe_ã°
 },

66 {"memˇched_gë()", 
åue
, (
ã°_ˇŒback_‚
*)
gë_ã°
 },

67 {"gë2", 
Ál£
, (
ã°_ˇŒback_‚
*)
gë_ã°2
 },

68 {"gë3", 
Ál£
, (
ã°_ˇŒback_‚
*)
gë_ã°3
 },

69 {"gë4", 
Ál£
, (
ã°_ˇŒback_‚
*)
gë_ã°4
 },

70 {"∑πü»mgë", 
Ál£
, (
ã°_ˇŒback_‚
*)
gë_ã°5
 },

71 {"°©s_£rvî«me", 
Ál£
, (
ã°_ˇŒback_‚
*)
°©s_£rvî«me_ã°
 },

72 {"ö¸emít", 
Ál£
, (
ã°_ˇŒback_‚
*)
ö¸emít_ã°
 },

73 {"ö¸emít_wôh_öôül", 
åue
, (
ã°_ˇŒback_‚
*)
ö¸emít_wôh_öôül_ã°
 },

74 {"de¸emít", 
Ál£
, (
ã°_ˇŒback_‚
*)
de¸emít_ã°
 },

75 {"de¸emít_wôh_öôül", 
åue
, (
ã°_ˇŒback_‚
*)
de¸emít_wôh_öôül_ã°
 },

76 {"ö¸emít_by_key", 
Ál£
, (
ã°_ˇŒback_‚
*)
ö¸emít_by_key_ã°
 },

77 {"ö¸emít_wôh_öôül_by_key", 
åue
, (
ã°_ˇŒback_‚
*)
ö¸emít_wôh_öôül_by_key_ã°
 },

78 {"de¸emít_by_key", 
Ál£
, (
ã°_ˇŒback_‚
*)
de¸emít_by_key_ã°
 },

79 {"de¸emít_wôh_öôül_by_key", 
åue
, (
ã°_ˇŒback_‚
*)
de¸emít_wôh_öôül_by_key_ã°
 },

80 {"bö¨y_ö¸emít_wôh_¥efix", 
åue
, (
ã°_ˇŒback_‚
*)
bö¨y_ö¸emít_wôh_¥efix_ã°
 },

81 {"quô", 
Ál£
, (
ã°_ˇŒback_‚
*)
quô_ã°
 },

82 {"mgë", 
åue
, (
ã°_ˇŒback_‚
*)
mgë_ã°
 },

83 {"mgë_ªsu…", 
åue
, (
ã°_ˇŒback_‚
*)
mgë_ªsu…_ã°
 },

84 {"mgë_ªsu…_Æloc", 
åue
, (
ã°_ˇŒback_‚
*)
mgë_ªsu…_Æloc_ã°
 },

85 {"mgë_ªsu…_fun˘i⁄", 
åue
, (
ã°_ˇŒback_‚
*)
mgë_ªsu…_fun˘i⁄
 },

86 {"mgë_execuã", 
åue
, (
ã°_ˇŒback_‚
*)
mgë_execuã
 },

87 {"mgë_íd", 
Ál£
, (
ã°_ˇŒback_‚
*)
mgë_íd
 },

88 {"gë_°©s", 
Ál£
, (
ã°_ˇŒback_‚
*)
gë_°©s
 },

89 {"add_ho°_ã°", 
Ál£
, (
ã°_ˇŒback_‚
*)
add_ho°_ã°
 },

90 {"add_ho°_ã°_1", 
Ál£
, (
ã°_ˇŒback_‚
*)
add_ho°_ã°1
 },

91 {"gë_°©s_keys", 
Ál£
, (
ã°_ˇŒback_‚
*)
gë_°©s_keys
 },

92 {"vîsi⁄_°rög_ã°", 
åue
, (
ã°_ˇŒback_‚
*)
vîsi⁄_°rög_ã°
},

93 {"memˇched_mgë(Ëmixed memˇched_gë()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_mgë_mixed_memˇched_gë_TEST
},

94 {"bad_key", 
åue
, (
ã°_ˇŒback_‚
*)
bad_key_ã°
 },

95 {"memˇched_£rvî_curs‹", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£rvî_curs‹_ã°
 },

96 {"ªad_through", 
åue
, (
ã°_ˇŒback_‚
*)
ªad_through
 },

97 {"dñëe_through", 
åue
, (
ã°_ˇŒback_‚
*)
ã°_MEMCACHED_CALLBACK_DELETE_TRIGGER
 },

98 {"n‹ïly", 
åue
, (
ã°_ˇŒback_‚
*)
n‹ïly_ã°
},

99 {"™Æyzî", 
åue
, (
ã°_ˇŒback_‚
*)
™Æyzî_ã°
},

100 {"memˇched_poﬁ_°", 
åue
, (
ã°_ˇŒback_‚
*)
c⁄√˘i⁄_poﬁ_ã°
 },

101 {"memˇched_poﬁ_° #2", 
åue
, (
ã°_ˇŒback_‚
*)
c⁄√˘i⁄_poﬁ2_ã°
 },

103 {"memˇched_poﬁ_° #3", 
åue
, (
ã°_ˇŒback_‚
*)
c⁄√˘i⁄_poﬁ3_ã°
 },

105 {"memˇched_poﬁ_ã°", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_poﬁ_ã°
 },

106 {"ã°_gë_œ°_disc⁄√˘", 
åue
, (
ã°_ˇŒback_‚
*)
ã°_gë_œ°_disc⁄√˘
},

107 {"vîbosôy", 
åue
, (
ã°_ˇŒback_‚
*)
ã°_vîbosôy
},

108 {"memˇched_°©_execuã", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_°©_execuã_ã°
},

109 {"memˇched_exi°(MEMCACHED_NOTFOUND)", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_exi°_NOTFOUND
 },

110 {"memˇched_exi°(MEMCACHED_SUCCESS)", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_exi°_SUCCESS
 },

111 {"memˇched_exi°_by_key(MEMCACHED_NOTFOUND)", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_exi°_by_key_NOTFOUND
 },

112 {"memˇched_exi°_by_key(MEMCACHED_SUCCESS)", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_exi°_by_key_SUCCESS
 },

113 {"memˇched_touch", 0, (
ã°_ˇŒback_‚
*)
ã°_memˇched_touch
},

114 {"memˇched_touch_wôh_¥efix", 0, (
ã°_ˇŒback_‚
*)
ã°_memˇched_touch_by_key
},

116 {"memˇched_dump(Ënÿd©a", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_dump_TEST
 },

118 {"memˇched_dump(Ëwôh d©a", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_dump_TEST2
 },

122 
ã°_°
 
	gtouch_ã°s
[] ={

123 {"memˇched_touch", 0, (
ã°_ˇŒback_‚
*)
ã°_memˇched_touch
},

124 {"memˇched_touch_wôh_¥efix", 0, (
ã°_ˇŒback_‚
*)
ã°_memˇched_touch_by_key
},

128 
ã°_°
 
	gkûl_TESTS
[] ={

129 {"kûl(HUP)", 0, (
ã°_ˇŒback_‚
*)
kûl_HUP_TEST
},

133 
ã°_°
 
	gmemˇched_°©_ã°s
[] ={

134 {"memˇched_°©(ËINVALID ARG", 0, (
ã°_ˇŒback_‚
*)
memˇched_°©_TEST
},

135 {"memˇched_°©()", 0, (
ã°_ˇŒback_‚
*)
memˇched_°©_TEST2
},

139 
ã°_°
 
	gbehavi‹_ã°s
[] ={

140 {"libmemˇched_°rög_behavi‹()", 
Ál£
, (
ã°_ˇŒback_‚
*)
libmemˇched_°rög_behavi‹_ã°
},

141 {"libmemˇched_°rög_di°ributi⁄()", 
Ál£
, (
ã°_ˇŒback_‚
*)
libmemˇched_°rög_di°ributi⁄_ã°
},

142 {"behavi‹_ã°", 
Ál£
, (
ã°_ˇŒback_‚
*)
behavi‹_ã°
},

143 {"MEMCACHED_BEHAVIOR_CORK", 
Ál£
, (
ã°_ˇŒback_‚
*)
MEMCACHED_BEHAVIOR_CORK_ã°
},

144 {"MEMCACHED_BEHAVIOR_TCP_KEEPALIVE", 
Ál£
, (
ã°_ˇŒback_‚
*)
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE_ã°
},

145 {"MEMCACHED_BEHAVIOR_TCP_KEEPIDLE", 
Ál£
, (
ã°_ˇŒback_‚
*)
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE_ã°
},

146 {"MEMCACHED_BEHAVIOR_POLL_TIMEOUT", 
Ál£
, (
ã°_ˇŒback_‚
*)
MEMCACHED_BEHAVIOR_POLL_TIMEOUT_ã°
},

147 {"MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH_TEST", 
åue
, (
ã°_ˇŒback_‚
*)
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH_TEST
 },

148 {"MEMCACHED_CALLBACK_DELETE_TRIGGER_™d_MEMCACHED_BEHAVIOR_NOREPLY", 
Ál£
, (
ã°_ˇŒback_‚
*)
ã°_MEMCACHED_CALLBACK_DELETE_TRIGGER_™d_MEMCACHED_BEHAVIOR_NOREPLY
},

152 
ã°_°
 
	glibmemˇchedutû_ã°s
[] ={

153 {"libmemˇched_utû_pög()", 
åue
, (
ã°_ˇŒback_‚
*)
libmemˇched_utû_pög_TEST
 },

154 {"libmemˇched_utû_gëpid()", 
åue
, (
ã°_ˇŒback_‚
*)
gëpid_ã°
 },

155 {"libmemˇched_utû_gëpid(MEMCACHED_CONNECTION_FAILURE)", 
åue
, (
ã°_ˇŒback_‚
*)
gëpid_c⁄√˘i⁄_Áûuª_ã°
 },

159 
ã°_°
 
	gbasic_ã°s
[] ={

160 {"öô", 
åue
, (
ã°_ˇŒback_‚
*)
basic_öô_ã°
},

161 {"˛⁄e", 
åue
, (
ã°_ˇŒback_‚
*)
basic_˛⁄e_ã°
},

162 {"ª£t", 
åue
, (
ã°_ˇŒback_‚
*)
basic_ª£t_°ack_ã°
},

163 {"ª£àhóp", 
åue
, (
ã°_ˇŒback_‚
*)
basic_ª£t_hóp_ã°
},

164 {"ª£à°ack cl⁄e", 
åue
, (
ã°_ˇŒback_‚
*)
basic_ª£t_°ack_˛⁄e_ã°
},

165 {"ª£àhó∞˛⁄e", 
åue
, (
ã°_ˇŒback_‚
*)
basic_ª£t_hóp_˛⁄e_ã°
},

166 {"memˇched_ªtu∫_t", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_ªtu∫_t_TEST
 },

167 {"c++ memˇched_° =memˇched_ªtu∫_t", 
Ál£
, (
ã°_ˇŒback_‚
*)
com∑ris⁄_›î©‹_memˇched_°_™d__memˇched_ªtu∫_t_TEST
 },

171 
ã°_°
 
	gªgªssi⁄_bö¨y_vs_block
[] ={

172 {"blockádd", 
åue
, (
ã°_ˇŒback_‚
*)
block_add_ªgªssi⁄
},

173 {"bö¨yádd", 
åue
, (
ã°_ˇŒback_‚
*)
bö¨y_add_ªgªssi⁄
},

177 
ã°_°
 
	gasync_ã°s
[] ={

178 {"add", 
åue
, (
ã°_ˇŒback_‚
*)
add_wøµî
 },

182 
ã°_°
 
	gmemˇched_£rvî_gë_œ°_disc⁄√˘_ã°s
[] ={

183 {"memˇched_£rvî_gë_œ°_disc⁄√˘()", 
Ál£
, (
ã°_ˇŒback_‚
*)
ã°_mu…ùÀ_gë_œ°_disc⁄√˘
},

184 {0, 0, (
ã°_ˇŒback_‚
*)0}

188 
ã°_°
 
	gªsu…_ã°s
[] ={

189 {"ªsu… sètic", 
Ál£
, (
ã°_ˇŒback_‚
*)
ªsu…_°©ic
},

190 {"ªsu…áŒoc", 
Ál£
, (
ã°_ˇŒback_‚
*)
ªsu…_Æloc
},

191 {0, 0, (
ã°_ˇŒback_‚
*)0}

194 
ã°_°
 
	gvîsi⁄_1_2_3
[] ={

195 {"≠≥nd", 
Ál£
, (
ã°_ˇŒback_‚
*)
≠≥nd_ã°
 },

196 {"¥ïíd", 
Ál£
, (
ã°_ˇŒback_‚
*)
¥ïíd_ã°
 },

197 {"ˇs", 
Ál£
, (
ã°_ˇŒback_‚
*)
ˇs_ã°
 },

198 {"ˇs2", 
Ál£
, (
ã°_ˇŒback_‚
*)
ˇs2_ã°
 },

199 {"≠≥nd_bö¨y", 
Ál£
, (
ã°_ˇŒback_‚
*)
≠≥nd_bö¨y_ã°
 },

200 {0, 0, (
ã°_ˇŒback_‚
*)0}

203 
ã°_°
 
	ghÆdíbønd_TESTS
[] ={

204 {"memˇched_£t", 
Ál£
, (
ã°_ˇŒback_‚
*)
hÆdíbønd_TEST1
 },

205 {"memˇched_gë()", 
Ál£
, (
ã°_ˇŒback_‚
*)
hÆdíbønd_TEST2
 },

206 {"memˇched_mgë()", 
Ál£
, (
ã°_ˇŒback_‚
*)
hÆdíbønd_TEST3
 },

207 {0, 0, (
ã°_ˇŒback_‚
*)0}

210 
ã°_°
 
	gu£r_ã°s
[] ={

211 {"u£r_suµlõd_bug4", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug4
 },

212 {"u£r_suµlõd_bug5", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug5
 },

213 {"u£r_suµlõd_bug6", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug6
 },

214 {"u£r_suµlõd_bug7", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug7
 },

215 {"u£r_suµlõd_bug8", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug8
 },

216 {"u£r_suµlõd_bug9", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug9
 },

217 {"u£r_suµlõd_bug10", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug10
 },

218 {"u£r_suµlõd_bug11", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug11
 },

219 {"u£r_suµlõd_bug12", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug12
 },

220 {"u£r_suµlõd_bug13", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug13
 },

221 {"u£r_suµlõd_bug14", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug14
 },

222 {"u£r_suµlõd_bug15", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug15
 },

223 {"u£r_suµlõd_bug16", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug16
 },

224 #i‡!
deföed
(
__sun
Ë&& !deföed(
__O≥nBSD__
)

232 {"u£r_suµlõd_bug17", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug17
 },

234 {"u£r_suµlõd_bug18", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug18
 },

235 {"u£r_suµlõd_bug19", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug19
 },

236 {"u£r_suµlõd_bug20", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug20
 },

237 {"u£r_suµlõd_bug21", 
åue
, (
ã°_ˇŒback_‚
*)
u£r_suµlõd_bug21
 },

238 {"wr⁄g_Áûuª_cou¡î_ã°", 
åue
, (
ã°_ˇŒback_‚
*)
wr⁄g_Áûuª_cou¡î_ã°
},

239 {"wr⁄g_Áûuª_cou¡î_two_ã°", 
åue
, (
ã°_ˇŒback_‚
*)
wr⁄g_Áûuª_cou¡î_two_ã°
},

240 {0, 0, (
ã°_ˇŒback_‚
*)0}

243 
ã°_°
 
	gª∂iˇti⁄_ã°s
[]= {

244 {"vÆid©êª∂iˇti⁄ sëup", 
åue
, (
ã°_ˇŒback_‚
*)
check_ª∂iˇti⁄_ßnôy_TEST
 },

245 {"£t", 
åue
, (
ã°_ˇŒback_‚
*)
ª∂iˇti⁄_£t_ã°
 },

246 {"gë", 
Ál£
, (
ã°_ˇŒback_‚
*)
ª∂iˇti⁄_gë_ã°
 },

247 {"mgë", 
Ál£
, (
ã°_ˇŒback_‚
*)
ª∂iˇti⁄_mgë_ã°
 },

248 {"dñëe", 
åue
, (
ã°_ˇŒback_‚
*)
ª∂iˇti⁄_dñëe_ã°
 },

249 {"ønd_mgë", 
Ál£
, (
ã°_ˇŒback_‚
*)
ª∂iˇti⁄_øndomize_mgë_ã°
 },

250 {"miss", 
Ál£
, (
ã°_ˇŒback_‚
*)
ª∂iˇti⁄_miss_ã°
 },

251 {"Áû", 
Ál£
, (
ã°_ˇŒback_‚
*)
ª∂iˇti⁄_øndomize_mgë_Áû_ã°
 },

252 {0, 0, (
ã°_ˇŒback_‚
*)0}

261 
ã°_°
 
	gªgªssi⁄_ã°s
[]= {

262 {"Õ:434484", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_434484
 },

263 {"Õ:434843", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_434843
 },

264 {"Õ:434843-buf„ªd", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_434843_buf„ªd
 },

265 {"Õ:421108", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_421108
 },

266 {"Õ:442914", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_442914
 },

267 {"Õ:447342", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_447342
 },

268 {"Õ:463297", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_463297
 },

269 {"Õ:490486", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_490486
 },

270 {"Õ:583031", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_583031
 },

271 {"Õ:?", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_
 },

272 {"Õ:728286", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_728286
 },

273 {"Õ:581030", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_581030
 },

274 {"Õ:71231153 c⁄√˘()", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_71231153_c⁄√˘
 },

275 {"Õ:71231153Öﬁl()", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_71231153_pﬁl
 },

276 {"Õ:655423", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_655423
 },

277 {"Õ:490520", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_490520
 },

278 {"Õ:854604", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_854604
 },

279 {"Õ:996813", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_996813_TEST
 },

280 {"Õ:994772", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_994772_TEST
 },

281 {"Õ:1009493", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_1009493_TEST
 },

282 {"Õ:1021819", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_1021819_TEST
 },

283 {"Õ:1048945", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_1048945_TEST
 },

284 {"Õ:1067242", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_1067242_TEST
 },

285 {0, 
Ál£
, (
ã°_ˇŒback_‚
*)0}

288 
ã°_°
 
	gkëama_com∑tibûôy
[]= {

289 {"libmemˇched", 
åue
, (
ã°_ˇŒback_‚
*)
këama_com∑tibûôy_libmemˇched
 },

290 {"•ymemˇched", 
åue
, (
ã°_ˇŒback_‚
*)
këama_com∑tibûôy_•ymemˇched
 },

291 {0, 0, (
ã°_ˇŒback_‚
*)0}

294 
ã°_°
 
	ggíî©e_ã°s
[] ={

295 {"gíî©e_d©a", 
åue
, (
ã°_ˇŒback_‚
*)
gíî©e_d©a
 },

296 {"gë_ªad", 
Ál£
, (
ã°_ˇŒback_‚
*)
gë_ªad
 },

297 {"dñëe_gíî©e", 
Ál£
, (
ã°_ˇŒback_‚
*)
dñëe_gíî©e
 },

298 {"˛ónup", 
åue
, (
ã°_ˇŒback_‚
*)
˛ónup_∑ús
 },

299 {0, 0, (
ã°_ˇŒback_‚
*)0}

302 
ã°_°
 
	ggíî©e_mgë_TESTS
[] ={

303 {"gíî©e_d©a", 
åue
, (
ã°_ˇŒback_‚
*)
gíî©e_d©a
 },

304 {"mgë_ªad", 
Ál£
, (
ã°_ˇŒback_‚
*)
mgë_ªad
 },

305 {"mgë_ªad_ªsu…", 
Ál£
, (
ã°_ˇŒback_‚
*)
mgë_ªad_ªsu…
 },

306 {"memˇched_„tch_ªsu…(Ëu£ i¡î«»ªsu…", 
Ál£
, (
ã°_ˇŒback_‚
*)
mgë_ªad_öã∫Æ_ªsu…
 },

307 {"memˇched_„tch_ªsu…(Ë∑πü»ªad", 
Ál£
, (
ã°_ˇŒback_‚
*)
mgë_ªad_∑πül_ªsu…
 },

308 {"mgë_ªad_fun˘i⁄", 
Ál£
, (
ã°_ˇŒback_‚
*)
mgë_ªad_fun˘i⁄
 },

309 {"˛ónup", 
åue
, (
ã°_ˇŒback_‚
*)
˛ónup_∑ús
 },

310 {0, 0, (
ã°_ˇŒback_‚
*)0}

313 
ã°_°
 
	ggíî©e_œrge_TESTS
[] ={

314 {"gíî©e_œrge_∑ús", 
åue
, (
ã°_ˇŒback_‚
*)
gíî©e_œrge_∑ús
 },

315 {"˛ónup", 
åue
, (
ã°_ˇŒback_‚
*)
˛ónup_∑ús
 },

316 {0, 0, (
ã°_ˇŒback_‚
*)0}

319 
ã°_°
 
	gc⁄si°ít_ã°s
[] ={

320 {"gíî©e_d©a", 
åue
, (
ã°_ˇŒback_‚
*)
gíî©e_d©a
 },

321 {"gë_ªad", 0, (
ã°_ˇŒback_‚
*)
gë_ªad_cou¡
 },

322 {"˛ónup", 
åue
, (
ã°_ˇŒback_‚
*)
˛ónup_∑ús
 },

323 {0, 0, (
ã°_ˇŒback_‚
*)0}

326 
ã°_°
 
	gc⁄si°ít_weighãd_ã°s
[] ={

327 {"gíî©e_d©a", 
åue
, (
ã°_ˇŒback_‚
*)
gíî©e_d©a_wôh_°©s
 },

328 {"gë_ªad", 
Ál£
, (
ã°_ˇŒback_‚
*)
gë_ªad_cou¡
 },

329 {"˛ónup", 
åue
, (
ã°_ˇŒback_‚
*)
˛ónup_∑ús
 },

330 {0, 0, (
ã°_ˇŒback_‚
*)0}

333 
ã°_°
 
	ghsõh_avaûabûôy
[] ={

334 {"hsõh_avaibûôy_ã°", 
Ál£
, (
ã°_ˇŒback_‚
*)
hsõh_avaibûôy_ã°
},

335 {0, 0, (
ã°_ˇŒback_‚
*)0}

338 
ã°_°
 
	gmurmur_avaûabûôy
[] ={

339 {"murmur_avaibûôy_ã°", 
Ál£
, (
ã°_ˇŒback_‚
*)
murmur_avaibûôy_ã°
},

340 {0, 0, (
ã°_ˇŒback_‚
*)0}

344 
ã°_°
 
	ghash_ßnôy
[] ={

345 {"hash s™ôy", 0, (
ã°_ˇŒback_‚
*)
hash_ßnôy_ã°
},

346 {0, 0, (
ã°_ˇŒback_‚
*)0}

350 
ã°_°
 
	gkëama_auto_eje˘_ho°s
[] ={

351 {"basi¯këam®ã°", 
åue
, (
ã°_ˇŒback_‚
*)
këama_TEST
 },

352 {"auto_eje˘_ho°s", 
åue
, (
ã°_ˇŒback_‚
*)
auto_eje˘_ho°s
 },

353 {"ouçut_këama_weighãd_keys", 
åue
, (
ã°_ˇŒback_‚
*)
ouçut_këama_weighãd_keys
 },

354 {0, 0, (
ã°_ˇŒback_‚
*)0}

357 
ã°_°
 
	ghash_ã°s
[] ={

358 {"⁄e_©_a_time_run", 
Ál£
, (
ã°_ˇŒback_‚
*)
⁄e_©_a_time_run
 },

359 {"md5", 
Ál£
, (
ã°_ˇŒback_‚
*)
md5_run
 },

360 {"¸c", 
Ál£
, (
ã°_ˇŒback_‚
*)
¸c_run
 },

361 {"‚v1_64", 
Ál£
, (
ã°_ˇŒback_‚
*)
‚v1_64_run
 },

362 {"‚v1a_64", 
Ál£
, (
ã°_ˇŒback_‚
*)
‚v1a_64_run
 },

363 {"‚v1_32", 
Ál£
, (
ã°_ˇŒback_‚
*)
‚v1_32_run
 },

364 {"‚v1a_32", 
Ál£
, (
ã°_ˇŒback_‚
*)
‚v1a_32_run
 },

365 {"hsõh", 
Ál£
, (
ã°_ˇŒback_‚
*)
hsõh_run
 },

366 {"murmur", 
Ál£
, (
ã°_ˇŒback_‚
*)
murmur_run
 },

367 {"murmur3", 
Ál£
, (
ã°_ˇŒback_‚
*)
murmur3_TEST
 },

368 {"jíkis", 
Ál£
, (
ã°_ˇŒback_‚
*)
jíkös_run
 },

369 {"memˇched_gë_hashkô", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_gë_hashkô_ã°
 },

370 {0, 0, (
ã°_ˇŒback_‚
*)0}

373 
ã°_°
 
	gîr‹_c⁄dôi⁄s
[] ={

374 {"memˇched_gë(MEMCACHED_ERRNO)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_gë_MEMCACHED_ERRNO
 },

375 {"memˇched_gë(MEMCACHED_NOTFOUND)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_gë_MEMCACHED_NOTFOUND
 },

376 {"memˇched_gë_by_key(MEMCACHED_ERRNO)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_gë_by_key_MEMCACHED_ERRNO
 },

377 {"memˇched_gë_by_key(MEMCACHED_NOTFOUND)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_gë_by_key_MEMCACHED_NOTFOUND
 },

378 {"memˇched_gë_by_key(MEMCACHED_NOTFOUND)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_gë_by_key_MEMCACHED_NOTFOUND
 },

379 {"memˇched_ö¸emít(MEMCACHED_NO_SERVERS)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_ö¸emít_MEMCACHED_NO_SERVERS
 },

380 {0, 0, (
ã°_ˇŒback_‚
*)0}

383 
ã°_°
 
	g∑r£r_ã°s
[] ={

384 {"behavi‹", 
Ál£
, (
ã°_ˇŒback_‚
*)
behavi‹_∑r£r_ã°
 },

385 {"boﬁón_›ti⁄s", 
Ál£
, (
ã°_ˇŒback_‚
*)
∑r£r_boﬁón_›ti⁄s_ã°
 },

386 {"c⁄figuª_fûe", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_¸óã_wôh_›ti⁄s_wôh_fûíame
 },

387 {"di°ribti⁄s", 
Ál£
, (
ã°_ˇŒback_‚
*)
∑r£r_di°ributi⁄_ã°
 },

388 {"hash", 
Ál£
, (
ã°_ˇŒback_‚
*)
∑r£r_hash_ã°
 },

389 {"libmemˇched_check_c⁄figuøti⁄", 
Ál£
, (
ã°_ˇŒback_‚
*)
libmemˇched_check_c⁄figuøti⁄_ã°
 },

390 {"libmemˇched_check_c⁄figuøti⁄_wôh_fûíame", 
Ál£
, (
ã°_ˇŒback_‚
*)
libmemˇched_check_c⁄figuøti⁄_wôh_fûíame_ã°
 },

391 {"numbî_›ti⁄s", 
Ál£
, (
ã°_ˇŒback_‚
*)
∑r£r_numbî_›ti⁄s_ã°
 },

392 {"øndomly gíî©ed o±i⁄s", 
Ál£
, (
ã°_ˇŒback_‚
*)
øndom_°©emít_buûd_ã°
 },

393 {"«me•a˚", 
Ál£
, (
ã°_ˇŒback_‚
*)
∑r£r_key_¥efix_ã°
 },

394 {"£rvî", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvî_ã°
 },

395 {"bad sîvî såögs", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvîs_bad_ã°
 },

396 {"£rvî wôh weights", 
Ál£
, (
ã°_ˇŒback_‚
*)
£rvî_wôh_weight_ã°
 },

397 {"∑rsög sîvî«me,Ö‹t,ánd weight", 
Ál£
, (
ã°_ˇŒback_‚
*)
ã°_ho°«me_p‹t_weight
 },

398 {"--sockë=", 
Ál£
, (
ã°_ˇŒback_‚
*)
ã°_∑r£_sockë
 },

399 {"--«me•a˚=", 
Ál£
, (
ã°_ˇŒback_‚
*)
ã°_«me•a˚_keyw‹d
 },

400 {0, 0, (
ã°_ˇŒback_‚
*)0}

403 
ã°_°
 
	gvútuÆ_buckë_ã°s
[] ={

404 {"basic", 
Ál£
, (
ã°_ˇŒback_‚
*)
vútuÆ_back_m≠
 },

405 {0, 0, (
ã°_ˇŒback_‚
*)0}

408 
ã°_°
 
	gmemˇched_£rvî_add_TESTS
[] ={

409 {"memˇched_£rvî_add(\"\")", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_£rvî_add_em±y_ã°
 },

410 {"memˇched_£rvî_add(NULL)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_£rvî_add_nuŒ_ã°
 },

411 {"memˇched_£rvî_add(m™y)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_£rvî_m™y_TEST
 },

412 {"memˇched_£rvî_add(m™y weighãd)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_£rvî_m™y_weighãd_TEST
 },

413 {0, 0, (
ã°_ˇŒback_‚
*)0}

416 
ã°_°
 
	gpoﬁ_TESTS
[] ={

417 {"Õ:962815", 
åue
, (
ã°_ˇŒback_‚
*)
ªgªssi⁄_bug_962815
 },

418 {0, 0, (
ã°_ˇŒback_‚
*)0}

421 
ã°_°
 
	gmemˇched_£t_ícodög_key_TESTS
[] ={

422 {"memˇched_£t_ícodög_key()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_TEST
 },

423 {"memˇched_£t_ícodög_key(Ë+£t(Ë+ gë()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_£t_gë_TEST
 },

424 {"memˇched_£t_ícodög_key(Ë+add(Ë+ gë()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_add_gë_TEST
 },

425 {"memˇched_£t_ícodög_key(Ë+ª∂a˚(Ë+ gë()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_ª∂a˚_gë_TEST
 },

426 {"memˇched_£t_ícodög_key(Ë+¥ïíd()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_¥ïíd_TEST
 },

427 {"memˇched_£t_ícodög_key(Ë+≠≥nd()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_≠≥nd_TEST
 },

428 {"memˇched_£t_ícodög_key(Ë+ö¸emít()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_ö¸emít_TEST
 },

429 {"memˇched_£t_ícodög_key(Ë+de¸emít()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_ö¸emít_TEST
 },

430 {"memˇched_£t_ícodög_key(Ë+ö¸emít_wôh_öôül()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_ö¸emít_wôh_öôül_TEST
 },

431 {"memˇched_£t_ícodög_key(Ë+de¸emít_wôh_öôül()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_de¸emít_wôh_öôül_TEST
 },

432 {"memˇched_£t_ícodög_key(Ë+£t(Ë+gë(Ë+˛€n()", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_£t_gë_˛⁄e_TEST
 },

433 {"memˇched_£t_ícodög_key(Ë+£t(Ë+gë(Ëö¸ó£ vÆuêsize", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_£t_ícodög_key_£t_grow_key_TEST
 },

434 {0, 0, (
ã°_ˇŒback_‚
*)0}

437 
ã°_°
 
	g«me•a˚_ã°s
[] ={

438 {"basi¯ã°s", 
åue
, (
ã°_ˇŒback_‚
*)
£À˘i⁄_of_«me•a˚_ã°s
 },

439 {"ö¸emít", 
åue
, (
ã°_ˇŒback_‚
*)
memˇched_ö¸emít_«me•a˚
 },

440 {0, 0, (
ã°_ˇŒback_‚
*)0}

443 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

445 {"hash_ßnôy", 0, 0, 
hash_ßnôy
},

447 {"libmemˇchedutû", 0, 0, 
libmemˇchedutû_ã°s
},

448 {"basic", 0, 0, 
basic_ã°s
},

449 {"hsõh_avaûabûôy", 0, 0, 
hsõh_avaûabûôy
},

450 {"murmur_avaûabûôy", 0, 0, 
murmur_avaûabûôy
},

451 {"memˇched_£rvî_add", (
ã°_ˇŒback_‚
*)
memˇched_£rvîs_ª£t_SETUP
, 0, 
memˇched_£rvî_add_TESTS
},

452 {"memˇched_£rvî_add(MEMCACHED_DISTRIBUTION_CONSISTENT)", (
ã°_ˇŒback_‚
*)
memˇched_£rvîs_ª£t_MEMCACHED_DISTRIBUTION_CONSISTENT_SETUP
, 0, 
memˇched_£rvî_add_TESTS
},

453 {"memˇched_£rvî_add(MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED)", (
ã°_ˇŒback_‚
*)
memˇched_£rvîs_ª£t_MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED_SETUP
, 0, 
memˇched_£rvî_add_TESTS
},

454 {"block", 0, 0, 
ã°s
},

455 {"bö¨y", (
ã°_ˇŒback_‚
*)
¥e_bö¨y
, 0, 
ã°s
},

456 {"n⁄block", (
ã°_ˇŒback_‚
*)
¥e_n⁄block
, 0, 
ã°s
},

457 {"nodñay", (
ã°_ˇŒback_‚
*)
¥e_nodñay
, 0, 
ã°s
},

458 {"£âimî", (
ã°_ˇŒback_‚
*)
¥e_£âimî
, 0, 
ã°s
},

459 {"md5", (
ã°_ˇŒback_‚
*)
¥e_md5
, 0, 
ã°s
},

460 {"¸c", (
ã°_ˇŒback_‚
*)
¥e_¸c
, 0, 
ã°s
},

461 {"hsõh", (
ã°_ˇŒback_‚
*)
¥e_hsõh
, 0, 
ã°s
},

462 {"jíkös", (
ã°_ˇŒback_‚
*)
¥e_jíkös
, 0, 
ã°s
},

463 {"‚v1_64", (
ã°_ˇŒback_‚
*)
¥e_hash_‚v1_64
, 0, 
ã°s
},

464 {"‚v1a_64", (
ã°_ˇŒback_‚
*)
¥e_hash_‚v1a_64
, 0, 
ã°s
},

465 {"‚v1_32", (
ã°_ˇŒback_‚
*)
¥e_hash_‚v1_32
, 0, 
ã°s
},

466 {"‚v1a_32", (
ã°_ˇŒback_‚
*)
¥e_hash_‚v1a_32
, 0, 
ã°s
},

467 {"këama", (
ã°_ˇŒback_‚
*)
¥e_behavi‹_këama
, 0, 
ã°s
},

468 {"këama_auto_eje˘_ho°s", (
ã°_ˇŒback_‚
*)
¥e_behavi‹_këama
, 0, 
këama_auto_eje˘_ho°s
},

469 {"unix_sockë", (
ã°_ˇŒback_‚
*)
¥e_unix_sockë
, 0, 
ã°s
},

470 {"unix_sockë_nodñay", (
ã°_ˇŒback_‚
*)
¥e_nodñay
, 0, 
ã°s
},

471 {"gës", (
ã°_ˇŒback_‚
*)
íabÀ_ˇs
, 0, 
ã°s
},

472 {"c⁄si°ít_¸c", (
ã°_ˇŒback_‚
*)
íabÀ_c⁄si°ít_¸c
, 0, 
ã°s
},

473 {"c⁄si°ít_hsõh", (
ã°_ˇŒback_‚
*)
íabÀ_c⁄si°ít_hsõh
, 0, 
ã°s
},

474 #ifde‡
MEMCACHED_ENABLE_DEPRECATED


475 {"dïªˇãd_mem‹y_Æloˇt‹s", (
ã°_ˇŒback_‚
*)
dïªˇãd_£t_mem‹y_Æloc
, 0, 
ã°s
},

477 {"mem‹y_Æloˇt‹s", (
ã°_ˇŒback_‚
*)
£t_mem‹y_Æloc
, 0, 
ã°s
},

478 {"«me•a˚", (
ã°_ˇŒback_‚
*)
£t_«me•a˚
, 0, 
ã°s
},

479 {"«me•a˚(BINARY)", (
ã°_ˇŒback_‚
*)
£t_«me•a˚_™d_bö¨y
, 0, 
ã°s
},

480 {"•ecifi¯«me•a˚", 0, 0, 
«me•a˚_ã°s
},

481 {"•ecifi¯«me•a˚(BINARY)", (
ã°_ˇŒback_‚
*)
¥e_bö¨y
, 0, 
«me•a˚_ã°s
},

482 {"vîsi⁄_1_2_3", (
ã°_ˇŒback_‚
*)
check_f‹_1_2_3
, 0, 
vîsi⁄_1_2_3
},

483 {"ªsu…", 0, 0, 
ªsu…_ã°s
},

484 {"async", (
ã°_ˇŒback_‚
*)
¥e_n⁄block
, 0, 
async_ã°s
},

485 {"async(BINARY)", (
ã°_ˇŒback_‚
*)
¥e_n⁄block_bö¨y
, 0, 
async_ã°s
},

486 {"CÆ HÆdíbønd'†ã°s", 0, 0, 
hÆdíbønd_TESTS
},

487 {"u£∏wrôã¿ã°s", 0, 0, 
u£r_ã°s
},

488 {"gíî©e", 0, 0, 
gíî©e_ã°s
},

489 {"gíî©êMEMCACHED_BEHAVIOR_BUFFER_REQUESTS", (
ã°_ˇŒback_‚
*)
¥e_buf„r
, 0, 
gíî©e_ã°s
},

490 {"mgë gíî©êMEMCACHED_BEHAVIOR_BUFFER_REQUESTS", (
ã°_ˇŒback_‚
*)
¥e_buf„r
, 0, 
gíî©e_mgë_TESTS
},

491 {"gíî©êœrge", 0, 0, 
gíî©e_œrge_TESTS
},

492 {"gíî©e_hsõh", (
ã°_ˇŒback_‚
*)
¥e_hsõh
, 0, 
gíî©e_ã°s
},

493 {"gíî©e_këama", (
ã°_ˇŒback_‚
*)
¥e_behavi‹_këama
, 0, 
gíî©e_ã°s
},

494 {"gíî©e_hsõh_c⁄si°ít", (
ã°_ˇŒback_‚
*)
íabÀ_c⁄si°ít_hsõh
, 0, 
gíî©e_ã°s
},

495 {"gíî©e_md5", (
ã°_ˇŒback_‚
*)
¥e_md5
, 0, 
gíî©e_ã°s
},

496 {"gíî©e_murmur", (
ã°_ˇŒback_‚
*)
¥e_murmur
, 0, 
gíî©e_ã°s
},

497 {"gíî©e_jíkös", (
ã°_ˇŒback_‚
*)
¥e_jíkös
, 0, 
gíî©e_ã°s
},

498 {"gíî©e_n⁄block", (
ã°_ˇŒback_‚
*)
¥e_n⁄block
, 0, 
gíî©e_ã°s
},

499 {"mgë gíî©e_n⁄block", (
ã°_ˇŒback_‚
*)
¥e_n⁄block
, 0, 
gíî©e_mgë_TESTS
},

500 {"c⁄si°ít_nŸ", 0, 0, 
c⁄si°ít_ã°s
},

501 {"c⁄si°ít_këama", (
ã°_ˇŒback_‚
*)
¥e_behavi‹_këama
, 0, 
c⁄si°ít_ã°s
},

502 {"c⁄si°ít_këama_weighãd", (
ã°_ˇŒback_‚
*)
¥e_behavi‹_këama_weighãd
, 0, 
c⁄si°ít_weighãd_ã°s
},

503 {"këama_com∑t", 0, 0, 
këama_com∑tibûôy
},

504 {"ã°_hashes", 0, 0, 
hash_ã°s
},

505 {"ª∂iˇti⁄", (
ã°_ˇŒback_‚
*)
¥e_ª∂iˇti⁄
, 0, 
ª∂iˇti⁄_ã°s
},

506 {"ª∂iˇti⁄_noblock", (
ã°_ˇŒback_‚
*)
¥e_ª∂iˇti⁄_noblock
, 0, 
ª∂iˇti⁄_ã°s
},

507 {"ªgªssi⁄", 0, 0, 
ªgªssi⁄_ã°s
},

508 {"behavi‹s", 0, 0, 
behavi‹_ã°s
},

509 {"ªgªssi⁄_bö¨y_vs_block", (
ã°_ˇŒback_‚
*)
key_£tup
, (ã°_ˇŒback_‚*)
key_ã¨down
, 
ªgªssi⁄_bö¨y_vs_block
},

510 {"îr‹_c⁄dôi⁄s", 0, 0, 
îr‹_c⁄dôi⁄s
},

511 {"∑r£r", 0, 0, 
∑r£r_ã°s
},

512 {"vútuÆ buckës", 0, 0, 
vútuÆ_buckë_ã°s
},

513 {"memˇched_£rvî_gë_œ°_disc⁄√˘", 0, 0, 
memˇched_£rvî_gë_œ°_disc⁄√˘_ã°s
},

514 {"touch", 0, 0, 
touch_ã°s
},

515 {"touch", (
ã°_ˇŒback_‚
*)
¥e_bö¨y
, 0, 
touch_ã°s
},

516 {"memˇched_°©()", 0, 0, 
memˇched_°©_ã°s
},

517 {"memˇched_poﬁ_¸óã()", 0, 0, 
poﬁ_TESTS
},

518 {"memˇched_£t_ícodög_key()", 0, 0, 
memˇched_£t_ícodög_key_TESTS
},

519 {"kûl()", 0, 0, 
kûl_TESTS
},

	@tests/libmemcached-1.0/all_tests_socket.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~"ã°s/basic.h
"

42 
	~"ã°s/debug.h
"

43 
	~"ã°s/dïªˇãd.h
"

44 
	~"ã°s/îr‹_c⁄dôi⁄s.h
"

45 
	~"ã°s/exi°.h
"

46 
	~"ã°s/këama.h
"

47 
	~"ã°s/«me•a˚.h
"

48 
	~"ã°s/libmemˇched-1.0/∑r£r.h
"

49 
	~"ã°s/libmemˇched-1.0/dump.h
"

50 
	~"ã°s/libmemˇched-1.0/gíî©e.h
"

51 
	~"ã°s/libmemˇched-1.0/hÆdíbønd.h
"

52 
	~"ã°s/libmemˇched-1.0/°©.h
"

53 
	~"ã°s/touch.h
"

54 
	~"ã°s/ˇŒbacks.h
"

55 
	~"ã°s/poﬁ.h
"

56 
	~"ã°s/¥öt.h
"

57 
	~"ã°s/ª∂iˇti⁄.h
"

58 
	~"ã°s/£rvî_add.h
"

59 
	~"ã°s/vútuÆ_buckës.h
"

61 
	~"ã°s/libmemˇched-1.0/£tup_™d_ã¨downs.h
"

64 
	~"ã°s/libmemˇched-1.0/mem_fun˘i⁄s.h
"

65 
	~"ã°s/libmemˇched-1.0/ícodög_key.h
"

68 
	~"ã°s/libmemˇched-1.0/Æl_ã°s.h
"

70 
	~"ã°s/libmemˇched_w‹ld_sockë.h
"

72 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

74 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

76 
	gw‹ld
->
¸óã
((
ã°_ˇŒback_¸óã_‚
*)
w‹ld_¸óã
);

77 
	gw‹ld
->
de°roy
((
ã°_ˇŒback_de°roy_‚
*)
w‹ld_de°roy
);

79 
	gw‹ld
->
£t_ru¬î
(
√w
 
LibmemˇchedRu¬î
);

	@tests/libmemcached-1.0/atomsmasher.cc

15 
	~<mem_c⁄fig.h
>

17 
	~<libã°/ã°.hµ
>

19 
	~<libmemˇched-1.0/memˇched.h
>

21 
	~<c°dio
>

22 
	~<c°dlib
>

23 
	~<°döt.h
>

24 
	~<c°rög
>

25 
	~<sys/time.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<uni°d.h
>

29 
	~<˘ime
>

30 
	~<˛õ¡s/gíî©‹.h
>

31 
	~<˛õ¡s/execuã.h
>

33 
	~<libã°/£rvî.h
>

35 
	~<ã°s/debug.h
>

37 
	~"ã°s/libmemˇched-1.0/gíî©e.h
"

39 
usög
 
«me•a˚
 
	glibã°
;

42 
	#GLOBAL_COUNT
 100000

	)

45 
	#TEST_COUNTER
 500000

	)

47 
∑ús_°
 *
	gglobÆ_∑ús
;

48 *
	gglobÆ_keys
[
GLOBAL_COUNT
];

49 
size_t
 
	gglobÆ_keys_Àngth
[
GLOBAL_COUNT
];

51 
ã°_ªtu∫_t
 
	$˛ónup_∑ús_TEST
(
memˇched_°
 *)

53 
	`∑ús_‰ì
(
globÆ_∑ús
);

55  
TEST_SUCCESS
;

56 
	}
}

58 
ã°_ªtu∫_t
 
	$gíî©e_∑ús_TEST
(
memˇched_°
 *)

60 
globÆ_∑ús

	`∑ús_gíî©e
(
GLOBAL_COUNT
, 400);

62 
±rdiff_t
 
x
0; x < 
GLOBAL_COUNT
; x++)

64 
globÆ_keys
[
x
]
globÆ_∑ús
[x].
key
;

65 
globÆ_keys_Àngth
[
x
]
globÆ_∑ús
[x].
key_Àngth
;

68  
TEST_SUCCESS
;

69 
	}
}

71 
ã°_ªtu∫_t
 
	$drizzÀ_TEST
(
memˇched_°
 *
memc
)

73 
öföôe
:

74 
±rdiff_t
 
x
0; x < 
TEST_COUNTER
; x++)

76 
memˇched_ªtu∫_t
 
rc
;

78 
uöt32_t
 
ã°_bô
(uöt32_t)(
	`øndom
(Ë% 
GLOBAL_COUNT
);

79 
uöt8_t
 
which
(uöt8_t)(
	`øndom
() % 2);

81 i‡(
which
 == 0)

83 
size_t
 
ªtu∫_vÆue_Àngth
;

84 
uöt32_t
 
Êags
;

85 * 
ªtu∫_vÆue

	`memˇched_gë
(
memc
, 
globÆ_keys
[
ã°_bô
], 
globÆ_keys_Àngth
[test_bit],

86 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
);

87 i‡(
rc
 =
MEMCACHED_SUCCESS
 && 
ªtu∫_vÆue
)

89 
	`‰ì
(
ªtu∫_vÆue
);

91 i‡(
rc
 =
MEMCACHED_NOTFOUND
)

97 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

102 
rc

	`memˇched_£t
(
memc
, 
globÆ_∑ús
[
ã°_bô
].
key
,

103 
globÆ_∑ús
[
ã°_bô
].
key_Àngth
,

104 
globÆ_∑ús
[
ã°_bô
].
vÆue
,

105 
globÆ_∑ús
[
ã°_bô
].
vÆue_Àngth
,

107 i‡(
rc
 !
MEMCACHED_SUCCESS
 &&Ñ¯!
MEMCACHED_BUFFERED
)

109 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

114 i‡(
	`gëív
("MEMCACHED_ATOM_BURIN_IN"))

116 
öföôe
;

119  
TEST_SUCCESS
;

120 
	}
}

122 
ã°_ªtu∫_t
 
	$¥e_n⁄block
(
memˇched_°
 *
memc
)

124 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0));

126  
TEST_SUCCESS
;

127 
	}
}

133 
ã°_ªtu∫_t
 
	$add_ã°
(
memˇched_°
 *
memc
)

135 c⁄° *
key
= "foo";

136 c⁄° *
vÆue
= "when we sanitize";

138 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

139 
vÆue
, 
	`°æí
(value),

140 
	`time_t
(0), 
	`uöt32_t
(0));

141 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

142 
	`memˇched_quô
(
memc
);

143 
rc

	`memˇched_add
(
memc
, 
key
, 
	`°æí
(key),

144 
vÆue
, 
	`°æí
(value),

145 (
time_t
)0, (
uöt32_t
)0);

147 i‡(
rc
 =
MEMCACHED_CONNECTION_FAILURE
)

149 
	`¥öt_£rvîs
(
memc
);

153 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
))

155 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTSTORED
 
‹
Ñ¯=
MEMCACHED_STORED
);

159 
	`ã°_com∑ª_gŸ
(
MEMCACHED_NOTSTORED
, 
rc
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

162  
TEST_SUCCESS
;

163 
	}
}

169 
ã°_ªtu∫_t
 
	$m™y_adds
(
memˇched_°
 *
memc
)

171 
	`ã°_åue
(
memc
);

172 
±rdiff_t
 
x
0; x < 
TEST_COUNTER
; x++)

174 
	`ã°_com∑ª_gŸ
(
TEST_SUCCESS
, 
	`add_ã°
(
memc
), 
x
);

176  
TEST_SUCCESS
;

177 
	}
}

179 
ã°_°
 
	gsmash_ã°s
[] ={

180 {"gíî©e_∑ús", 
åue
, (
ã°_ˇŒback_‚
*)
gíî©e_∑ús_TEST
 },

181 {"drizzÀ", 
åue
, (
ã°_ˇŒback_‚
*)
drizzÀ_TEST
 },

182 {"˛ónup", 
åue
, (
ã°_ˇŒback_‚
*)
˛ónup_∑ús_TEST
 },

183 {"m™y_adds", 
åue
, (
ã°_ˇŒback_‚
*)
m™y_adds
 },

187 
	#BENCHMARK_TEST_LOOP
 20000

	)

189 
	sbíchm¨k_°©e_°


191 
boﬁ
 
	m¸óã_öô
;

192 
boﬁ
 
	m˛⁄e_öô
;

193 
memˇched_°
 *
	m¸óã
;

194 
memˇched_°
 *
	m˛⁄e
;

195 } 
	gbíchm¨k_°©e
;

197 
ã°_ªtu∫_t
 
	$memˇched_¸óã_bíchm¨k
(
memˇched_°
 *)

199 
bíchm¨k_°©e
.
¸óã_öô

åue
;

201 
±rdiff_t
 
x
0; x < 
BENCHMARK_TEST_LOOP
; x++)

203 
memˇched_°
 *
±r

	`memˇched_¸óã
(&
bíchm¨k_°©e
.
¸óã
[
x
]);

205 
	`ã°_åue
(
±r
);

208  
TEST_SUCCESS
;

209 
	}
}

211 
ã°_ªtu∫_t
 
	$memˇched_˛⁄e_bíchm¨k
(
memˇched_°
 *
memc
)

213 
bíchm¨k_°©e
.
˛⁄e_öô

åue
;

215 
±rdiff_t
 
x
0; x < 
BENCHMARK_TEST_LOOP
; x++)

217 
memˇched_°
 *
±r

	`memˇched_˛⁄e
(&
bíchm¨k_°©e
.
˛⁄e
[
x
], 
memc
);

219 
	`ã°_åue
(
±r
);

222  
TEST_SUCCESS
;

223 
	}
}

225 
ã°_ªtu∫_t
 
	$¥e_Æloˇã
(
memˇched_°
 *)

227 
	`mem£t
(&
bíchm¨k_°©e
, 0, (benchmark_state));

229 
bíchm¨k_°©e
.
¸óã
(
memˇched_°
 *)
	`ˇŒoc
(
BENCHMARK_TEST_LOOP
, (memcached_st));

230 
	`ã°_åue
(
bíchm¨k_°©e
.
¸óã
);

231 
bíchm¨k_°©e
.
˛⁄e
(
memˇched_°
 *)
	`ˇŒoc
(
BENCHMARK_TEST_LOOP
, (memcached_st));

232 
	`ã°_åue
(
bíchm¨k_°©e
.
˛⁄e
);

234  
TEST_SUCCESS
;

235 
	}
}

237 
ã°_ªtu∫_t
 
	$po°_Æloˇã
(
memˇched_°
 *)

239 
±rdiff_t
 
x
0; x < 
BENCHMARK_TEST_LOOP
; x++)

241 i‡(
bíchm¨k_°©e
.
¸óã_öô
)

243 
	`memˇched_‰ì
(&
bíchm¨k_°©e
.
¸óã
[
x
]);

246 i‡(
bíchm¨k_°©e
.
˛⁄e_öô
)

248 
	`memˇched_‰ì
(&
bíchm¨k_°©e
.
˛⁄e
[
x
]);

252 
	`‰ì
(
bíchm¨k_°©e
.
¸óã
);

253 
	`‰ì
(
bíchm¨k_°©e
.
˛⁄e
);

255  
TEST_SUCCESS
;

256 
	}
}

259 
ã°_°
 
	gmi¸o_ã°s
[] ={

260 {"memˇched_¸óã", 1, (
ã°_ˇŒback_‚
*)
memˇched_¸óã_bíchm¨k
 },

261 {"memˇched_˛⁄e", 1, (
ã°_ˇŒback_‚
*)
memˇched_˛⁄e_bíchm¨k
 },

266 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

267 {"smash", 0, 0, 
smash_ã°s
},

268 {"smash_n⁄block", (
ã°_ˇŒback_‚
*)
¥e_n⁄block
, 0, 
smash_ã°s
},

269 {"mi¸o-bíchm¨k", (
ã°_ˇŒback_‚
*)
¥e_Æloˇã
, (ã°_ˇŒback_‚*)
po°_Æloˇã
, 
mi¸o_ã°s
},

274 
	~"ã°s/libmemˇched_w‹ld.h
"

276 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

278 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

280 
	gw‹ld
->
¸óã
((
ã°_ˇŒback_¸óã_‚
*)
w‹ld_¸óã
);

281 
	gw‹ld
->
de°roy
((
ã°_ˇŒback_de°roy_‚
*)
w‹ld_de°roy
);

283 
	gw‹ld
->
£t_ru¬î
(
√w
 
LibmemˇchedRu¬î
);

	@tests/libmemcached-1.0/basic.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~<libmemˇched-1.0/memˇched.h
>

42 
	~"libmemˇched/is.h
"

44 
	~"ã°s/basic.h
"

46 
	~<c°rög
>

48 
ã°_ªtu∫_t
 
	$basic_öô_ã°
(
memˇched_°
 *
junk
)

50 ()
junk
;

52 
memˇched_°
 
memc
;

53 
memˇched_°
 *
memc_±r
;

55 
memc_±r

	`memˇched_¸óã
(&
memc
);

56 
	`ã°_åue
(
memc_±r
);

57 
	`ã°_Ál£
(
	`memˇched_is_Æloˇãd
(&
memc
));

58 
	`memˇched_‰ì
(
memc_±r
);

60  
TEST_SUCCESS
;

61 
	}
}

63 
ã°_ªtu∫_t
 
	$basic_˛⁄e_ã°
(
memˇched_°
 *
memc
)

65 
memˇched_°
 *
memc_±r
;

67 
memc_±r

	`memˇched_˛⁄e
(
NULL
, 
memc
);

68 
	`ã°_åue
(
memc_±r
);

69 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
memc_±r
));

70 
	`memˇched_‰ì
(
memc_±r
);

72  
TEST_SUCCESS
;

73 
	}
}

75 
ã°_ªtu∫_t
 
	$basic_ª£t_°ack_ã°
(
memˇched_°
 *
junk
)

77 ()
junk
;

78 
memˇched_°
 
memc
;

80 
	`memˇched_¸óã
(&
memc
);

82 
	`memˇched_ª£t
(&
memc
);

83 
	`ã°_Ál£
(
	`memˇched_is_Æloˇãd
(&
memc
));

85 
	`memˇched_‰ì
(&
memc
);

86 
	`ã°_Ál£
(
	`memˇched_is_Æloˇãd
(&
memc
));

88  
TEST_SUCCESS
;

89 
	}
}

91 
ã°_ªtu∫_t
 
	$basic_ª£t_hóp_ã°
(
memˇched_°
 *
junk
)

93 ()
junk
;

94 
memˇched_°
 *
memc_±r
;

96 
memc_±r

	`memˇched_¸óã
(
NULL
);

97 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
memc_±r
));

99 
	`memˇched_ª£t
(
memc_±r
);

100 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
memc_±r
));

102 
	`memˇched_‰ì
(
memc_±r
);

104  
TEST_SUCCESS
;

105 
	}
}

107 
ã°_ªtu∫_t
 
	$basic_ª£t_°ack_˛⁄e_ã°
(
memˇched_°
 *
memc
)

109 
memˇched_°
 
˛⁄e
;

110 
memˇched_°
 *
memc_±r
;

112 
	`mem£t
(&
˛⁄e
, 0, (clone));

113 
memc_±r

	`memˇched_˛⁄e
(&
˛⁄e
, 
memc
);

114 
	`ã°_åue
(
memc_±r
);

116 
	`memˇched_ª£t
(
memc_±r
);

118 
	`memˇched_‰ì
(
memc_±r
);

120  
TEST_SUCCESS
;

121 
	}
}

123 
ã°_ªtu∫_t
 
	$basic_ª£t_hóp_˛⁄e_ã°
(
memˇched_°
 *
memc
)

125 
memˇched_°
 *
memc_±r
;

127 
memc_±r

	`memˇched_˛⁄e
(
NULL
, 
memc
);

128 
	`ã°_åue
(
memc_±r
);

130 
	`memˇched_ª£t
(
memc_±r
);

132 
	`memˇched_‰ì
(
memc_±r
);

134  
TEST_SUCCESS
;

135 
	}
}

	@tests/libmemcached-1.0/callback_counter.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~"ã°s/libmemˇched-1.0/ˇŒback_cou¡î.h
"

43 
memˇched_ªtu∫_t
 
	$ˇŒback_cou¡î
(c⁄° 
memˇched_°
*, 
memˇched_ªsu…_°
*, *
c⁄ãxt
)

45 
size_t
 *
cou¡î
(size_à*)
c⁄ãxt
;

47 *
cou¡î
= *counter + 1;

49  
MEMCACHED_SUCCESS
;

50 
	}
}

	@tests/libmemcached-1.0/callback_counter.h

38 #¥agm®
⁄˚


40 
memˇched_ªtu∫_t
 
ˇŒback_cou¡î
(c⁄° 
memˇched_°
*, 
memˇched_ªsu…_°
*, *);

	@tests/libmemcached-1.0/callbacks.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~<ã°s/ˇŒbacks.h
>

43 
usög
 
«me•a˚
 
	glibã°
;

45 #i‚de‡
__INTEL_COMPILER


46 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

49 
memˇched_ªtu∫_t
 
	$dñëe_åiggî
(
memˇched_°
 *,

50 c⁄° *
key
,

51 
size_t
 
key_Àngth
)

53 
	`Áèl_as£π
(
key
);

54 
	`Áèl_as£π
(
key_Àngth
);

56  
MEMCACHED_SUCCESS
;

57 
	}
}

60 
ã°_ªtu∫_t
 
	$ã°_MEMCACHED_CALLBACK_DELETE_TRIGGER_™d_MEMCACHED_BEHAVIOR_NOREPLY
(
memˇched_°
 *)

62 
memˇched_°
 *
memc

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--NOREPLY"));

63 
	`ã°_åue
(
memc
);

65 
memˇched_åiggî_dñëe_key_‚
 
ˇŒback
;

67 
ˇŒback
(
memˇched_åiggî_dñëe_key_‚
)
dñëe_åiggî
;

69 
	`ã°_com∑ª
(
MEMCACHED_INVALID_ARGUMENTS
,

70 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_DELETE_TRIGGER
, *(**)&
ˇŒback
));

72 
	`memˇched_‰ì
(
memc
);

74  
TEST_SUCCESS
;

75 
	}
}

77 
ã°_ªtu∫_t
 
	$ã°_MEMCACHED_CALLBACK_DELETE_TRIGGER
(
memˇched_°
 *
memc
)

79 
memˇched_åiggî_dñëe_key_‚
 
ˇŒback
;

81 
ˇŒback
(
memˇched_åiggî_dñëe_key_‚
)
dñëe_åiggî
;

83 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

84 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_DELETE_TRIGGER
, *(**)&
ˇŒback
));

86  
TEST_SUCCESS
;

87 
	}
}

	@tests/libmemcached-1.0/debug.cc

38 
	~<mem_c⁄fig.h
>

40 
	~<libã°/ã°.hµ
>

41 
	~<˛imôs
>

43 
usög
 
«me•a˚
 
	glibã°
;

45 
	~<libmemˇched-1.0/memˇched.h
>

46 
	~<ã°s/debug.h
>

47 
	~<ã°s/¥öt.h
>

49 
	~"libmemˇched/ö°™˚.hµ
"

52 
memˇched_ªtu∫_t
 
	$¥öt_keys_ˇŒback
(c⁄° 
memˇched_°
 *,

53 c⁄° *
key
,

54 
size_t
 
key_Àngth
,

58 
Out
 << "\t" << 
key
 << " (" << 
key_Àngth
 << ")";

61  
MEMCACHED_SUCCESS
;

62 
	}
}

64 
memˇched_ªtu∫_t
 
	$£rvî_wøµî_f‹_dump_ˇŒback
(c⁄° 
memˇched_°
 *,

65 c⁄° 
memˇched_ö°™˚_°
 * 
£rvî
,

68 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

70 i‡(
	`°rcmp
(
	`memˇched_£rvî_ty≥
(
£rvî
), "SOCKET") == 0)

72 i‡(
	`memˇched_Áûed
(
	`memˇched_£rvî_add_unix_sockë
(
memc
, 
	`memˇched_£rvî_«me
(
£rvî
))))

74  
MEMCACHED_FAILURE
;

79 i‡(
	`memˇched_Áûed
(
	`memˇched_£rvî_add
(
memc
, 
	`memˇched_£rvî_«me
(
£rvî
), 
	`memˇched_£rvî_p‹t
(server))))

81  
MEMCACHED_FAILURE
;

85 
memˇched_dump_‚
 
ˇŒbacks
[1];

87 
ˇŒbacks
[0]&
¥öt_keys_ˇŒback
;

89 
Out
 << 
	`memˇched_£rvî_«me
(
£rvî
Ë<< ":" << 
	`memˇched_£rvî_p‹t
(server);

91 i‡(
	`memˇched_Áûed
(
	`memˇched_dump
(
memc
, 
ˇŒbacks
, 
NULL
, 1)))

93  
MEMCACHED_FAILURE
;

96 
	`memˇched_‰ì
(
memc
);

98  
MEMCACHED_SUCCESS
;

99 
	}
}

102 
ã°_ªtu∫_t
 
	$c⁄fúm_keys_exi°
(
memˇched_°
 *
memc
, c⁄° * c⁄° *
keys
, c⁄° 
size_t
 
numbî_of_keys
, 
boﬁ
 
key_m©ches_vÆue
, boﬁ 
ªquúe_Æl
)

104 
size_t
 
x
0; x < 
numbî_of_keys
; ++x)

106 
memˇched_ªtu∫_t
 
rc
;

107 
size_t
 
vÆue_Àngth
;

108 *
vÆue

	`memˇched_gë
(
memc
,

109 
	`ã°_°rög_make_‰om_c°r
(
keys
[
x
]),

110 &
vÆue_Àngth
,

111 0, &
rc
);

112 i‡(
ªquúe_Æl
)

114 
	`ã°_åue
(
vÆue
);

115 i‡(
key_m©ches_vÆue
)

117 
	`ã°_°rcmp
(
keys
[
x
], 
vÆue
);

120 i‡(
	`memˇched_suc˚ss
(
rc
))

122 
	`ã°_w¨n
(
vÆue
, "get() didÇotÑeturná value");

123 i‡(
vÆue
 
™d
 
key_m©ches_vÆue
)

125 
	`ã°_°rcmp
(
keys
[
x
], 
vÆue
);

129 i‡(
vÆue
)

131 
	`‰ì
(
vÆue
);

135  
TEST_SUCCESS
;

136 
	}
}

138 
ã°_ªtu∫_t
 
	$c⁄fúm_keys_d⁄t_exi°
(
memˇched_°
 *
memc
, c⁄° * c⁄° *
keys
, c⁄° 
size_t
 
numbî_of_keys
)

140 
size_t
 
x
0; x < 
numbî_of_keys
; ++x)

142 
memˇched_ªtu∫_t
 
rc
;

143 
size_t
 
vÆue_Àngth
;

144 *
vÆue

	`memˇched_gë
(
memc
,

145 
	`ã°_°rög_make_‰om_c°r
(
keys
[
x
]),

146 &
vÆue_Àngth
,

147 0, &
rc
);

148 
	`ã°_Ál£
(
vÆue
);

149 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

152  
TEST_SUCCESS
;

153 
	}
}

156 
ã°_ªtu∫_t
 
	$¥öt_keys_by_£rvî
(
memˇched_°
 *
memc
)

158 
memˇched_£rvî_‚
 
ˇŒback
[]{ 
£rvî_wøµî_f‹_dump_ˇŒback
 };

159 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒback
, 
NULL
, 
	`ã°_¨øy_Àngth
(callback)));

161  
TEST_SUCCESS
;

162 
	}
}

164 
memˇched_ªtu∫_t
 
	$ˇŒback_dump_cou¡î
(c⁄° 
memˇched_°
 *
±r
,

165 c⁄° *
key
,

166 
size_t
 
key_Àngth
,

167 *
c⁄ãxt
)

169 ()
±r
; ()
key
; ()
key_Àngth
;

170 
size_t
 *
cou¡î
(size_à*)
c⁄ãxt
;

172 *
cou¡î
= *counter + 1;

174  
MEMCACHED_SUCCESS
;

175 
	}
}

177 
size_t
 
	$c⁄fúm_key_cou¡
(
memˇched_°
 *
memc
)

179 
memˇched_°
 *
˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

180 i‡(
	`memˇched_Áûed
(
	`memˇched_behavi‹_£t
(
˛⁄e
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 
Ál£
)))

182 
	`memˇched_‰ì
(
˛⁄e
);

183  
ULONG_MAX
;

186 
memˇched_dump_‚
 
ˇŒbacks
[1];

188 
ˇŒbacks
[0]&
ˇŒback_dump_cou¡î
;

190 
size_t
 
cou¡
= 0;

191 i‡(
	`memˇched_Áûed
(
	`memˇched_dump
(
˛⁄e
, 
ˇŒbacks
, (*)&
cou¡
, 1)))

193 
	`memˇched_‰ì
(
˛⁄e
);

194  
ULONG_MAX
;

197 
	`memˇched_‰ì
(
˛⁄e
);

198  
cou¡
;

199 
	}
}

201 
	$¥öt_£rvîs
(
memˇched_°
 *
memc
)

203 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

204 
ˇŒbacks
[0]
£rvî_¥öt_ˇŒback
;

205 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, 
NULL
, 1);

206 
	}
}

	@tests/libmemcached-1.0/deprecated.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~<libmemˇched-1.0/memˇched.h
>

42 
	~<ã°s/dïªˇãd.h
>

44 
ã°_ªtu∫_t
 
	$£rvî_li°_nuŒ_ã°
(
memˇched_°
 *
±r
)

46 
memˇched_£rvî_°
 *
£rvî_li°
;

47 
memˇched_ªtu∫_t
 
rc
;

48 ()
±r
;

50 
£rvî_li°

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, NULL, 0, 0, NULL);

51 
	`ã°_åue
(
£rvî_li°
);

52 
	`memˇched_£rvî_li°_‰ì
(
£rvî_li°
);

54 
£rvî_li°

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, "localhost", 0, 0, NULL);

55 
	`ã°_åue
(
£rvî_li°
);

56 
	`memˇched_£rvî_li°_‰ì
(
£rvî_li°
);

58 
£rvî_li°

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, NULL, 0, 0, &
rc
);

59 
	`ã°_åue
(
£rvî_li°
);

60 
	`memˇched_£rvî_li°_‰ì
(
£rvî_li°
);

62  
TEST_SUCCESS
;

63 
	}
}

66 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_728286
(
memˇched_°
 *)

68 
memˇched_£rvî_°
 *
£rvîs

	`memˇched_£rvîs_∑r£
("1.2.3.4:99");

69 
	`Áèl_as£π
(
£rvîs
);

70 
	`memˇched_£rvî_‰ì
(
£rvîs
);

72  
TEST_SUCCESS
;

73 
	}
}

	@tests/libmemcached-1.0/dump.cc

37 
	~<mem_c⁄fig.h
>

39 
	~<c°dlib
>

40 
	~<˛imôs
>

42 
	~<libã°/ã°.hµ
>

44 
	~<libmemˇched-1.0/memˇched.h
>

45 
	~<libmemˇchedutû-1.0/utû.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 
	~"ã°s/libmemˇched-1.0/dump.h
"

51 
memˇched_ªtu∫_t
 
	$ˇŒback_dump_cou¡î
(c⁄° 
memˇched_°
 *,

53 
size_t
,

54 *
c⁄ãxt
)

56 
size_t
 *
cou¡î
(size_à*)
c⁄ãxt
;

59 
°d
::
˚º
.
	`wrôe
(
key
, 
Àngth
);

60 
°d
::
˚º
 << std::
ídl
;

63 *
cou¡î
= *counter +1;

65  
MEMCACHED_SUCCESS
;

66 
	}
}

68 
memˇched_ªtu∫_t
 
	$ôem_cou¡î
(c⁄° 
memˇched_ö°™˚_°
 * ,

69 c⁄° *
key
, 
size_t
 
key_Àngth
,

70 c⁄° *
vÆue
, 
size_t
,

71 *
c⁄ãxt
)

73 i‡((
key_Àngth
 =(("cuº_ôems"Ë-1)Ë
	`™d
 (
	`°∫cmp
("cuº_ôems", 
key
, (("curr_items") -1)) == 0))

75 
uöt64_t
* 
cou¡î
(uöt64_t*)
c⁄ãxt
;

76 
numbî_vÆue

	`°πoul
(
vÆue
, (**)
NULL
, 10);

77 i‡(
numbî_vÆue
 =
ULONG_MAX
)

79  
MEMCACHED_FAILURE
;

81 *
cou¡î
*cou¡î +
numbî_vÆue
;

84  
MEMCACHED_SUCCESS
;

85 
	}
}

88 
ã°_ªtu∫_t
 
	$memˇched_dump_TEST
(
memˇched_°
 *
memc
)

90 
	`ã°_skù
(
Ál£
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

92 
size_t
 
cou¡
= 0;

93 
memˇched_dump_‚
 
ˇŒbacks
[1];

94 
ˇŒbacks
[0]&
ˇŒback_dump_cou¡î
;

96 
uöt64_t
 
cou¡î
= 0;

97 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
,

98 
	`memˇched_°©_execuã
(
memc
, 
NULL
, 
ôem_cou¡î
, &
cou¡î
),

99 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

100 
	`ã°_zîo
(
cou¡î
);

102 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
, 
	`memˇched_dump
(
memc
, 
ˇŒbacks
, &
cou¡
, 1), 
	`memˇched_œ°_îr‹_mesßge
(memc));

104  
TEST_SUCCESS
;

105 
	}
}

108 
	#memˇched_dump_TEST2_COUNT
 64

	)

109 
ã°_ªtu∫_t
 
	$memˇched_dump_TEST2
(
memˇched_°
 *
memc
)

111 
	`ã°_skù
(
Ál£
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

114 
uöt32_t
 
x
0; x < 
memˇched_dump_TEST2_COUNT
; x++)

116 
key
[1024];

118 
Àngth

	`¢¥ötf
(
key
, (key), "%s%u", 
__func__
, 
x
);

120 
	`ã°_åue
(
Àngth
 > 0);

122 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

123 
	`memˇched_£t
(
memc
, 
key
, 
Àngth
,

124 
NULL
, 0,

125 
	`time_t
(0), 
	`uöt32_t
(0)));

127 
	`memˇched_quô
(
memc
);

129 
uöt64_t
 
cou¡î
= 0;

130 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

131 
	`memˇched_°©_execuã
(
memc
, 
NULL
, 
ôem_cou¡î
, &
cou¡î
));

132 
	`ã°_åue
(
cou¡î
 > 0);

134 
size_t
 
cou¡
= 0;

135 
memˇched_dump_‚
 
ˇŒbacks
[1];

136 
ˇŒbacks
[0]&
ˇŒback_dump_cou¡î
;

138 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

139 
	`memˇched_dump
(
memc
, 
ˇŒbacks
, &
cou¡
, 1));

141 
	`ã°_åue
(
cou¡
);

143  
TEST_SUCCESS
;

144 
	}
}

	@tests/libmemcached-1.0/dump.h

37 #¥agm®
⁄˚


39 
ã°_ªtu∫_t
 
memˇched_dump_TEST
(
memˇched_°
 *);

40 
ã°_ªtu∫_t
 
memˇched_dump_TEST2
(
memˇched_°
 *);

	@tests/libmemcached-1.0/encoding_key.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~<libmemˇched-1.0/memˇched.h
>

42 
	~<libmemˇchedutû-1.0/utû.h
>

44 
	~"ã°s/libmemˇched-1.0/ícodög_key.h
"

46 
usög
 
«me•a˚
 
	glibã°
;

48 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_TEST
(
memˇched_°
* 
memc
)

50 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

52  
TEST_SUCCESS
;

53 
	}
}

55 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_£t_gë_TEST
(
memˇched_°
* 
memc
)

57 
memˇched_°
 *
memc_no_¸y±

	`memˇched_˛⁄e
(
NULL
, 
memc
);

58 
	`ã°_åue
(
memc_no_¸y±
);

59 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

61 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
,

62 
	`ã°_lôîÆ_∑øm
(
__func__
),

63 
	`ã°_lôîÆ_∑øm
(
__func__
),

64 
	`time_t
(0),

65 
	`uöt32_t
(0)));

68 
memˇched_ªtu∫_t
 
rc
;

69 
size_t
 
vÆue_Àngth
;

70 *
vÆue
;

71 
	`ã°_åue
((
vÆue

	`memˇched_gë
(
memc
,

72 
	`ã°_lôîÆ_∑øm
(
__func__
),

73 &
vÆue_Àngth
, 
NULL
, &
rc
)));

74 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

75 
	`ã°_com∑ª
(
	`ã°_lôîÆ_∑øm_size
(
__func__
), 
vÆue_Àngth
);

76 
	`ã°_memcmp
(
__func__
, 
vÆue
, 
vÆue_Àngth
);

78 
size_t
 
øw_vÆue_Àngth
;

79 *
øw_vÆue
;

80 
	`ã°_åue
((
øw_vÆue

	`memˇched_gë
(
memc_no_¸y±
,

81 
	`ã°_lôîÆ_∑øm
(
__func__
),

82 &
øw_vÆue_Àngth
, 
NULL
, &
rc
)));

83 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

84 
	`ã°_√_com∑ª
(
vÆue_Àngth
, 
øw_vÆue_Àngth
);

85 
	`ã°_√_com∑ª
(0, 
	`memcmp
(
vÆue
, 
øw_vÆue
, 
øw_vÆue_Àngth
));

87 
	`‰ì
(
vÆue
);

88 
	`‰ì
(
øw_vÆue
);

91 
	`memˇched_‰ì
(
memc_no_¸y±
);

93  
TEST_SUCCESS
;

94 
	}
}

96 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_add_gë_TEST
(
memˇched_°
* 
memc
)

98 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

100 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_add
(
memc
,

101 
	`ã°_lôîÆ_∑øm
(
__func__
),

102 
	`ã°_lôîÆ_∑øm
(
__func__
),

103 
	`time_t
(0),

104 
	`uöt32_t
(0)));

107 
memˇched_ªtu∫_t
 
rc
;

108 
size_t
 
vÆue_Àngth
;

109 *
vÆue
;

110 
	`ã°_åue
((
vÆue

	`memˇched_gë
(
memc
,

111 
	`ã°_lôîÆ_∑øm
(
__func__
),

112 &
vÆue_Àngth
, 
NULL
, &
rc
)));

113 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

114 
	`ã°_com∑ª
(
	`ã°_lôîÆ_∑øm_size
(
__func__
), 
vÆue_Àngth
);

115 
	`ã°_memcmp
(
__func__
, 
vÆue
, 
vÆue_Àngth
);

116 
	`‰ì
(
vÆue
);

119  
TEST_SUCCESS
;

120 
	}
}

122 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_ª∂a˚_gë_TEST
(
memˇched_°
* 
memc
)

124 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

128 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_add
(
memc
,

129 
	`ã°_lôîÆ_∑øm
(
__func__
),

130 
	`ã°_lôîÆ_∑øm
(
__func__
),

131 
	`time_t
(0),

132 
	`uöt32_t
(0)));

134 
memˇched_ªtu∫_t
 
rc
;

135 
size_t
 
vÆue_Àngth
;

136 *
vÆue
;

137 
	`ã°_åue
((
vÆue

	`memˇched_gë
(
memc
,

138 
	`ã°_lôîÆ_∑øm
(
__func__
),

139 &
vÆue_Àngth
, 
NULL
, &
rc
)));

140 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

141 
	`ã°_com∑ª
(
	`ã°_lôîÆ_∑øm_size
(
__func__
), 
vÆue_Àngth
);

142 
	`ã°_memcmp
(
__func__
, 
vÆue
, 
vÆue_Àngth
);

143 
	`‰ì
(
vÆue
);

148 
libã°
::
vch¨_t
 
√w_vÆue
;

149 
vch¨
::
	`make
(
√w_vÆue
);

151 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_ª∂a˚
(
memc
,

152 
	`ã°_lôîÆ_∑øm
(
__func__
),

153 
	`vch¨_∑øm
(
√w_vÆue
),

154 
	`time_t
(0),

155 
	`uöt32_t
(0)));

157 
memˇched_ªtu∫_t
 
rc
;

158 
size_t
 
vÆue_Àngth
;

159 *
vÆue
;

160 
	`ã°_åue
((
vÆue

	`memˇched_gë
(
memc
,

161 
	`ã°_lôîÆ_∑øm
(
__func__
),

162 &
vÆue_Àngth
, 
NULL
, &
rc
)));

163 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

164 
	`ã°_com∑ª
(
√w_vÆue
.
	`size
(), 
vÆue_Àngth
);

165 
	`ã°_com∑ª
(0, 
vch¨
::
	`com∑ª
(
√w_vÆue
, 
vÆue
, 
vÆue_Àngth
));

166 
	`‰ì
(
vÆue
);

169  
TEST_SUCCESS
;

170 
	}
}

172 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_ö¸emít_TEST
(
memˇched_°
* 
memc
)

174 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

176 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
	`memˇched_ö¸emít
(
memc
,

177 
	`ã°_lôîÆ_∑øm
(
__func__
),

178 
	`uöt32_t
(0),

179 
NULL
));

181  
TEST_SUCCESS
;

182 
	}
}

184 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_de¸emít_TEST
(
memˇched_°
* 
memc
)

186 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

188 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
	`memˇched_de¸emít
(
memc
,

189 
	`ã°_lôîÆ_∑øm
(
__func__
),

190 
	`uöt32_t
(0),

191 
NULL
));

193  
TEST_SUCCESS
;

194 
	}
}

196 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_ö¸emít_wôh_öôül_TEST
(
memˇched_°
* 
memc
)

198 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

200 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
	`memˇched_ö¸emít_wôh_öôül
(
memc
,

201 
	`ã°_lôîÆ_∑øm
(
__func__
),

202 
	`uöt32_t
(0),

203 
	`uöt32_t
(0),

204 
	`time_t
(0),

205 
NULL
));

207  
TEST_SUCCESS
;

208 
	}
}

210 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_de¸emít_wôh_öôül_TEST
(
memˇched_°
* 
memc
)

212 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

214 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
	`memˇched_de¸emít_wôh_öôül
(
memc
,

215 
	`ã°_lôîÆ_∑øm
(
__func__
),

216 
	`uöt32_t
(0),

217 
	`uöt32_t
(0),

218 
	`time_t
(0),

219 
NULL
));

221  
TEST_SUCCESS
;

222 
	}
}

224 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_≠≥nd_TEST
(
memˇched_°
* 
memc
)

226 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

228 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
	`memˇched_≠≥nd
(
memc
,

229 
	`ã°_lôîÆ_∑øm
(
__func__
),

230 
	`ã°_lôîÆ_∑øm
(
__func__
),

231 
	`time_t
(0),

232 
	`uöt32_t
(0)));

234  
TEST_SUCCESS
;

235 
	}
}

237 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_¥ïíd_TEST
(
memˇched_°
* 
memc
)

239 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

241 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
	`memˇched_¥ïíd
(
memc
,

242 
	`ã°_lôîÆ_∑øm
(
__func__
),

243 
	`ã°_lôîÆ_∑øm
(
__func__
),

244 
	`time_t
(0),

245 
	`uöt32_t
(0)));

247  
TEST_SUCCESS
;

248 
	}
}

250 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_£t_gë_˛⁄e_TEST
(
memˇched_°
* 
memc
)

252 
memˇched_°
 *
memc_no_¸y±

	`memˇched_˛⁄e
(
NULL
, 
memc
);

253 
	`ã°_åue
(
memc_no_¸y±
);

255 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

257 
memˇched_°
 *
memc_¸y±

	`memˇched_˛⁄e
(
NULL
, 
memc
);

258 
	`ã°_åue
(
memc_¸y±
);

260 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
,

261 
	`ã°_lôîÆ_∑øm
(
__func__
),

262 
	`ã°_lôîÆ_∑øm
(
__func__
),

263 
	`time_t
(0),

264 
	`uöt32_t
(0)));

267 
memˇched_ªtu∫_t
 
rc
;

268 
size_t
 
vÆue_Àngth
;

269 *
vÆue
;

270 
	`ã°_åue
((
vÆue

	`memˇched_gë
(
memc
,

271 
	`ã°_lôîÆ_∑øm
(
__func__
),

272 &
vÆue_Àngth
, 
NULL
, &
rc
)));

273 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

274 
	`ã°_com∑ª
(
	`ã°_lôîÆ_∑øm_size
(
__func__
), 
vÆue_Àngth
);

275 
	`ã°_memcmp
(
__func__
, 
vÆue
, 
vÆue_Àngth
);

280 
size_t
 
øw_vÆue_Àngth
;

281 *
øw_vÆue
;

282 
	`ã°_åue
((
øw_vÆue

	`memˇched_gë
(
memc_no_¸y±
,

283 
	`ã°_lôîÆ_∑øm
(
__func__
),

284 &
øw_vÆue_Àngth
, 
NULL
, &
rc
)));

285 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

286 
	`ã°_√_com∑ª
(
	`ã°_lôîÆ_∑øm_size
(
__func__
), 
øw_vÆue_Àngth
);

287 
	`ã°_√_com∑ª
(0, 
	`memcmp
(
__func__
, 
øw_vÆue
, 
øw_vÆue_Àngth
));

292 
size_t
 
£c⁄d_vÆue_Àngth
;

293 *
£c⁄d_vÆue
;

294 
	`ã°_åue
((
£c⁄d_vÆue

	`memˇched_gë
(
memc_¸y±
,

295 
	`ã°_lôîÆ_∑øm
(
__func__
),

296 &
£c⁄d_vÆue_Àngth
, 
NULL
, &
rc
)));

297 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

298 
	`ã°_com∑ª
(
vÆue_Àngth
, 
£c⁄d_vÆue_Àngth
);

299 
	`ã°_com∑ª
(0, 
	`memcmp
(
vÆue
, 
£c⁄d_vÆue
, 
£c⁄d_vÆue_Àngth
));

300 
	`ã°_com∑ª
(
	`ã°_lôîÆ_∑øm_size
(
__func__
), 
£c⁄d_vÆue_Àngth
);

301 
	`ã°_com∑ª
(
vÆue_Àngth
, 
£c⁄d_vÆue_Àngth
);

302 
	`ã°_memcmp
(
__func__
, 
£c⁄d_vÆue
, 
£c⁄d_vÆue_Àngth
);

303 
	`ã°_memcmp
(
vÆue
, 
£c⁄d_vÆue
, 
£c⁄d_vÆue_Àngth
);

305 
	`‰ì
(
vÆue
);

306 
	`‰ì
(
øw_vÆue
);

307 
	`‰ì
(
£c⁄d_vÆue
);

310 
	`memˇched_‰ì
(
memc_no_¸y±
);

311 
	`memˇched_‰ì
(
memc_¸y±
);

313  
TEST_SUCCESS
;

314 
	}
}

316 
ã°_ªtu∫_t
 
	$memˇched_£t_ícodög_key_£t_grow_key_TEST
(
memˇched_°
* 
memc
)

318 
memˇched_°
 *
memc_no_¸y±

	`memˇched_˛⁄e
(
NULL
, 
memc
);

319 
	`ã°_åue
(
memc_no_¸y±
);

320 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_ícodög_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
)));

322 
size_t
 
∑ylﬂd_size
[] = { 100, 1000, 10000, 1000000, 1000000, 0 };

323 
libã°
::
vch¨_t
 
∑ylﬂd
;

324 
size_t
 *
±r

∑ylﬂd_size
; *ptr;Ötr++)

326 
∑ylﬂd
.
	`ª£rve
(*
±r
);

327 
size_t
 
x

∑ylﬂd
.
	`size
(); x < *
±r
; x++)

329 
∑ylﬂd
.
	`push_back
(
	`ønd
());

333 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
,

334 
	`ã°_lôîÆ_∑øm
(
__func__
),

335 &
∑ylﬂd
[0],Öaylﬂd.
	`size
(),

336 
	`time_t
(0),

337 
	`uöt32_t
(0));

340 i‡(
rc
 =
MEMCACHED_SERVER_MEMORY_ALLOCATION_FAILURE
)

344 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

348 
memˇched_ªtu∫_t
 
rc
;

349 
size_t
 
vÆue_Àngth
;

350 *
vÆue
;

351 
	`ã°_åue
((
vÆue

	`memˇched_gë
(
memc
,

352 
	`ã°_lôîÆ_∑øm
(
__func__
),

353 &
vÆue_Àngth
, 
NULL
, &
rc
)));

354 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

355 
	`ã°_com∑ª
(
∑ylﬂd
.
	`size
(), 
vÆue_Àngth
);

356 
	`ã°_memcmp
(&
∑ylﬂd
[0], 
vÆue
, 
vÆue_Àngth
);

358 
size_t
 
øw_vÆue_Àngth
;

359 *
øw_vÆue
;

360 
	`ã°_åue
((
øw_vÆue

	`memˇched_gë
(
memc_no_¸y±
,

361 
	`ã°_lôîÆ_∑øm
(
__func__
),

362 &
øw_vÆue_Àngth
, 
NULL
, &
rc
)));

363 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

364 
	`ã°_√_com∑ª
(
∑ylﬂd
.
	`size
(), 
øw_vÆue_Àngth
);

365 
	`ã°_√_com∑ª
(0, 
	`memcmp
(&
∑ylﬂd
[0], 
øw_vÆue
, 
øw_vÆue_Àngth
));

367 
	`‰ì
(
vÆue
);

368 
	`‰ì
(
øw_vÆue
);

372 
	`memˇched_‰ì
(
memc_no_¸y±
);

374  
TEST_SUCCESS
;

375 
	}
}

	@tests/libmemcached-1.0/encoding_key.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_TEST
(
memˇched_°
*);

41 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_£t_gë_TEST
(
memˇched_°
*);

42 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_add_gë_TEST
(
memˇched_°
*);

43 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_ª∂a˚_gë_TEST
(
memˇched_°
*);

44 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_ö¸emít_TEST
(
memˇched_°
*);

45 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_de¸emít_TEST
(
memˇched_°
*);

46 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_ö¸emít_wôh_öôül_TEST
(
memˇched_°
*);

47 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_de¸emít_wôh_öôül_TEST
(
memˇched_°
*);

48 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_¥ïíd_TEST
(
memˇched_°
*);

49 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_≠≥nd_TEST
(
memˇched_°
*);

50 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_£t_gë_˛⁄e_TEST
(
memˇched_°
*);

51 
ã°_ªtu∫_t
 
memˇched_£t_ícodög_key_£t_grow_key_TEST
(
memˇched_°
*);

	@tests/libmemcached-1.0/error_conditions.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	#BUILDING_LIBMEMCACHED


	)

43 
	~<libmemˇched-1.0/memˇched.h
>

44 
	~"libmemˇched/is.h
"

46 
	~<ã°s/îr‹_c⁄dôi⁄s.h
>

48 
ã°_ªtu∫_t
 
	$memˇched_ö¸emít_MEMCACHED_NO_SERVERS
(
memˇched_°
 *)

50 
memˇched_°
 *
memc_±r
;

52 
memc_±r

	`memˇched_¸óã
(
NULL
);

53 
	`ã°_åue
(
memc_±r
);

55 
	`memˇched_ö¸emít
(
memc_±r
, 
	`ã°_lôîÆ_∑øm
("dód key"), 1, 
NULL
);

56 
	`ã°_åue
(
	`memˇched_œ°_îr‹
(
memc_±r
Ë=
MEMCACHED_NO_SERVERS
);

58 
	`memˇched_ö¸emít
(
memc_±r
, 
	`ã°_lôîÆ_∑øm
("dód key"), 1, 
NULL
);

59 
	`ã°_åue
(
	`memˇched_œ°_îr‹
(
memc_±r
Ë=
MEMCACHED_NO_SERVERS
);

61 
	`memˇched_‰ì
(
memc_±r
);

63  
TEST_SUCCESS
;

64 
	}
}

	@tests/libmemcached-1.0/exist.cc

37 
	~<mem_c⁄fig.h
>

38 
	~<libã°/ã°.hµ
>

40 
	~<ã°s/exi°.h
>

42 
usög
 
«me•a˚
 
	glibã°
;

44 
ã°_ªtu∫_t
 
	$memˇched_exi°_NOTFOUND
(
memˇched_°
 *
memc
)

46 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
	`memˇched_exi°
(
memc
, 
	`ã°_lôîÆ_∑øm
("frog")));

47  
TEST_SUCCESS
;

48 
	}
}

50 
ã°_ªtu∫_t
 
	$memˇched_exi°_SUCCESS
(
memˇched_°
 *
memc
)

52 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("frog"), 0, 0, 0, 0));

53 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_exi°
(
memc
, 
	`ã°_lôîÆ_∑øm
("frog")));

54 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_dñëe
(
memc
, 
	`ã°_lôîÆ_∑øm
("frog"), 0));

55 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
	`memˇched_exi°
(
memc
, 
	`ã°_lôîÆ_∑øm
("frog")));

57  
TEST_SUCCESS
;

58 
	}
}

60 
ã°_ªtu∫_t
 
	$memˇched_exi°_by_key_NOTFOUND
(
memˇched_°
 *
memc
)

62 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
	`memˇched_exi°_by_key
(
memc
, 
	`ã°_lôîÆ_∑øm
("master"),Åest_literal_param("frog")));

63  
TEST_SUCCESS
;

64 
	}
}

66 
ã°_ªtu∫_t
 
	$memˇched_exi°_by_key_SUCCESS
(
memˇched_°
 *
memc
)

68 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t_by_key
(
memc
, 
	`ã°_lôîÆ_∑øm
("master"),Åest_literal_param("frog"), 0, 0, 0, 0));

69 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_exi°_by_key
(
memc
, 
	`ã°_lôîÆ_∑øm
("master"),Åest_literal_param("frog")));

70 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_dñëe_by_key
(
memc
, 
	`ã°_lôîÆ_∑øm
("master"),Åest_literal_param("frog"), 0));

71 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
	`memˇched_exi°_by_key
(
memc
, 
	`ã°_lôîÆ_∑øm
("master"),Åest_literal_param("frog")));

73  
TEST_SUCCESS
;

74 
	}
}

	@tests/libmemcached-1.0/fetch_all_results.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~<ã°s/libmemˇched-1.0/„tch_Æl_ªsu…s.h
>

43 
ã°_ªtu∫_t
 
	$„tch_Æl_ªsu…s
(
memˇched_°
 *
memc
, &
keys_ªtu∫ed
, 
memˇched_ªtu∫_t
& 
rc
)

45 
keys_ªtu∫ed
= 0;

47 
memˇched_ªsu…_°
* 
ªsu…

NULL
;

48 (
ªsu…

	`memˇched_„tch_ªsu…
(
memc
,Ñesu…, &
rc
)))

50 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

51 
keys_ªtu∫ed
+= 1;

53 
	`memˇched_ªsu…_‰ì
(
ªsu…
);

55  
TEST_SUCCESS
;

56 
	}
}

58 
ã°_ªtu∫_t
 
	$„tch_Æl_ªsu…s
(
memˇched_°
 *
memc
, &
keys_ªtu∫ed
)

60 
memˇched_ªtu∫_t
 
rc
;

61  
	`„tch_Æl_ªsu…s
(
memc
, 
keys_ªtu∫ed
, 
rc
);

62 
	}
}

	@tests/libmemcached-1.0/fetch_all_results.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
„tch_Æl_ªsu…s
(
memˇched_°
 *, &, 
memˇched_ªtu∫_t
&);

41 
ã°_ªtu∫_t
 
„tch_Æl_ªsu…s
(
memˇched_°
 *, &);

	@tests/libmemcached-1.0/generate.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~<libmemˇchedutû-1.0/utû.h
>

42 
	~<libmemˇched/is.h
>

44 
	~<ã°s/libmemˇched-1.0/gíî©e.h
>

45 
	~<ã°s/libmemˇched-1.0/„tch_Æl_ªsu…s.h
>

46 
	~"ã°s/libmemˇched-1.0/ˇŒback_cou¡î.h
"

48 
	~"˛õ¡s/gíî©‹.h
"

49 
	~"˛õ¡s/execuã.h
"

51 
	#GLOBAL_COUNT
 10000

	)

52 
	#GLOBAL2_COUNT
 100

	)

54 
usög
 
«me•a˚
 
	glibã°
;

56 
∑ús_°
 *
	gglobÆ_∑ús

NULL
;

57 c⁄° *
	gglobÆ_keys
[
GLOBAL_COUNT
];

58 
size_t
 
	gglobÆ_keys_Àngth
[
GLOBAL_COUNT
];

59 
size_t
 
	gglobÆ_cou¡
= 0;

61 
ã°_ªtu∫_t
 
	$˛ónup_∑ús
(
memˇched_°
*)

63 
	`∑ús_‰ì
(
globÆ_∑ús
);

64 
globÆ_∑ús

NULL
;

66  
TEST_SUCCESS
;

67 
	}
}

69 
ã°_ªtu∫_t
 
	$gíî©e_∑ús
(
memˇched_°
 *)

71 
globÆ_∑ús

	`∑ús_gíî©e
(
GLOBAL_COUNT
, 400);

72 
globÆ_cou¡

GLOBAL_COUNT
;

74 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

76 
globÆ_keys
[
x
]
globÆ_∑ús
[x].
key
;

77 
globÆ_keys_Àngth
[
x
]
globÆ_∑ús
[x].
key_Àngth
;

80  
TEST_SUCCESS
;

81 
	}
}

83 
ã°_ªtu∫_t
 
	$gíî©e_œrge_∑ús
(
memˇched_°
 *
memc
)

85 
globÆ_∑ús

	`∑ús_gíî©e
(
GLOBAL2_COUNT
, 
MEMCACHED_MAX_BUFFER
+10);

86 
globÆ_cou¡

GLOBAL2_COUNT
;

88 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

90 
globÆ_keys
[
x
]
globÆ_∑ús
[x].
key
;

91 
globÆ_keys_Àngth
[
x
]
globÆ_∑ús
[x].
key_Àngth
;

94 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
åue
);

95 
check_execuã

	`execuã_£t
(
memc
, 
globÆ_∑ús
, ()
globÆ_cou¡
);

97 
	`ã°_åue
(
check_execuã
 > (
globÆ_cou¡
 / 2));

99  
TEST_SUCCESS
;

100 
	}
}

102 
ã°_ªtu∫_t
 
	$gíî©e_d©a
(
memˇched_°
 *
memc
)

104 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`gíî©e_∑ús
(
memc
));

106 
check_execuã

	`execuã_£t
(
memc
, 
globÆ_∑ús
, ()
globÆ_cou¡
);

111 
	`ã°_åue
(
check_execuã
 > (
globÆ_cou¡
 / 2));

113  
TEST_SUCCESS
;

114 
	}
}

116 
ã°_ªtu∫_t
 
	$gíî©e_d©a_wôh_°©s
(
memˇched_°
 *
memc
)

118 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`gíî©e_∑ús
(
memc
));

120 
check_execuã

	`execuã_£t
(
memc
, 
globÆ_∑ús
, ()
globÆ_cou¡
);

122 
	`ã°_com∑ª
(
check_execuã
, 
globÆ_cou¡
);

125 
memˇched_ªtu∫_t
 
rc
;

126 
memˇched_°©_°
 *
°©_p

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

127 
	`ã°_åue
(
°©_p
);

129 
uöt32_t
 
ho°_ödex
0; ho°_ödex < 
	`memˇched_£rvî_cou¡
(
memc
); host_index++)

132 i‡(
DEBUG
)

134 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

135 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ho°_ödex
);

137 
	`¥ötf
("\nserver %u|%s|%u bytes: %llu\n",

138 
ho°_ödex
,

139 
	`memˇched_£rvî_«me
(
ö°™˚
),

140 
	`memˇched_£rvî_p‹t
(
ö°™˚
),

141 ()(
°©_p
 + 
ho°_ödex
)->
byãs
);

143 
	`ã°_åue
(()(
°©_p
 + 
ho°_ödex
)->
byãs
);

146 
	`memˇched_°©_‰ì
(
NULL
, 
°©_p
);

148  
TEST_SUCCESS
;

149 
	}
}

151 
ã°_ªtu∫_t
 
	$gíî©e_buf„r_d©a
(
memˇched_°
 *
memc
)

153 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
åue
);

154 
	`gíî©e_d©a
(
memc
);

156  
TEST_SUCCESS
;

157 
	}
}

159 
ã°_ªtu∫_t
 
	$gë_ªad_cou¡
(
memˇched_°
 *
memc
)

161 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

162 
	`ã°_åue
(
memc_˛⁄e
);

164 
	`memˇched_£rvî_add_wôh_weight
(
memc_˛⁄e
, "localhost", 6666, 0);

167 *
ªtu∫_vÆue
;

168 
size_t
 
ªtu∫_vÆue_Àngth
;

169 
uöt32_t
 
Êags
;

170 
uöt32_t
 
cou¡
;

172 
size_t
 
x

cou¡
0; x < 
globÆ_cou¡
; x++)

174 
memˇched_ªtu∫_t
 
rc
;

175 
ªtu∫_vÆue

	`memˇched_gë
(
memc_˛⁄e
, 
globÆ_keys
[
x
], 
globÆ_keys_Àngth
[x],

176 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
);

177 i‡(
rc
 =
MEMCACHED_SUCCESS
)

179 
cou¡
++;

180 i‡(
ªtu∫_vÆue
)

182 
	`‰ì
(
ªtu∫_vÆue
);

188 
	`memˇched_‰ì
(
memc_˛⁄e
);

190  
TEST_SUCCESS
;

191 
	}
}

193 
ã°_ªtu∫_t
 
	$gë_ªad
(
memˇched_°
 *
memc
)

195 
size_t
 
keys_ªtu∫ed
= 0;

196 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

198 
size_t
 
ªtu∫_vÆue_Àngth
;

199 
uöt32_t
 
Êags
;

200 
memˇched_ªtu∫_t
 
rc
;

201 *
ªtu∫_vÆue

	`memˇched_gë
(
memc
, 
globÆ_keys
[
x
], 
globÆ_keys_Àngth
[x],

202 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
);

207 i‡(
rc
 =
MEMCACHED_SUCCESS
 && 
ªtu∫_vÆue
)

209 
keys_ªtu∫ed
++;

210 
	`‰ì
(
ªtu∫_vÆue
);

216 
	`ã°_åue
(
keys_ªtu∫ed
 > (
globÆ_cou¡
 / 2));

218  
TEST_SUCCESS
;

219 
	}
}

221 
ã°_ªtu∫_t
 
	$mgë_ªad
(
memˇched_°
 *
memc
)

224 
	`ã°_skù
(
åue
, 
	`boﬁ
(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4)));

226 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

227 
	`memˇched_mgë
(
memc
, 
globÆ_keys
, 
globÆ_keys_Àngth
, 
globÆ_cou¡
));

231 
keys_ªtu∫ed
;

232 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`„tch_Æl_ªsu…s
(
memc
, 
keys_ªtu∫ed
));

233 
	`ã°_åue
(
keys_ªtu∫ed
 > (
globÆ_cou¡
 / 2));

236  
TEST_SUCCESS
;

237 
	}
}

239 
ã°_ªtu∫_t
 
	$mgë_ªad_ªsu…
(
memˇched_°
 *
memc
)

242 
	`ã°_skù
(
åue
, 
	`boﬁ
(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4)));

244 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

245 
	`memˇched_mgë
(
memc
, 
globÆ_keys
, 
globÆ_keys_Àngth
, 
globÆ_cou¡
));

249 
memˇched_ªsu…_°
 
ªsu…s_obj
;

250 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

251 
	`ã°_åue
(
ªsu…s
);

253 
memˇched_ªtu∫_t
 
rc
;

254 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
)))

256 i‡(
rc
 =
MEMCACHED_IN_PROGRESS
)

261 
	`ã°_åue
(
ªsu…s
);

262 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

264 
	`ã°_com∑ª
(
MEMCACHED_END
, 
rc
);

266 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

269  
TEST_SUCCESS
;

270 
	}
}

272 
ã°_ªtu∫_t
 
	$mgë_ªad_∑πül_ªsu…
(
memˇched_°
 *
memc
)

275 
	`ã°_skù
(
åue
, 
	`boﬁ
(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4)));

277 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

278 
	`memˇched_mgë
(
memc
, 
globÆ_keys
, 
globÆ_keys_Àngth
, 
globÆ_cou¡
));

282 
memˇched_ªsu…_°
 
ªsu…s_obj
;

283 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

285 
memˇched_ªtu∫_t
 
rc
;

286 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
,Ñesu…s, &
rc
);

287 
	`ã°_åue
(
ªsu…s
);

288 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

290 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

294 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

295 
	`memˇched_mgë
(
memc
, 
globÆ_keys
, 
globÆ_keys_Àngth
, 
globÆ_cou¡
));

297 
memˇched_ªsu…_°
 
ªsu…s_obj
;

298 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

299 
	`ã°_åue
(
ªsu…s
);

300 
	`ã°_Ál£
(
	`memˇched_is_Æloˇãd
(
ªsu…s
));

302 
memˇched_ªtu∫_t
 
rc
;

303 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
)))

305 
	`ã°_åue
(
ªsu…s
);

306 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

308 
	`ã°_com∑ª
(
MEMCACHED_END
, 
rc
);

310 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

313  
TEST_SUCCESS
;

314 
	}
}

316 
ã°_ªtu∫_t
 
	$mgë_ªad_fun˘i⁄
(
memˇched_°
 *
memc
)

318 
	`ã°_skù
(
åue
, 
	`boﬁ
(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4)));

320 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

321 
	`memˇched_mgë
(
memc
, 
globÆ_keys
, 
globÆ_keys_Àngth
, 
globÆ_cou¡
));

323 
memˇched_execuã_‚
 
ˇŒbacks
[]{ &
ˇŒback_cou¡î
 };

324 
size_t
 
cou¡î
= 0;

325 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

326 
	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1));

328  
TEST_SUCCESS
;

329 
	}
}

331 
ã°_ªtu∫_t
 
	$dñëe_gíî©e
(
memˇched_°
 *
memc
)

333 
size_t
 
tŸÆ
= 0;

334 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

336 i‡(
	`memˇched_suc˚ss
(
	`memˇched_dñëe
(
memc
, 
globÆ_keys
[
x
], 
globÆ_keys_Àngth
[x], (
time_t
)0)))

338 
tŸÆ
++;

344 
	`ã°_åue
(
tŸÆ
 > (
globÆ_cou¡
 / 2));

346  
TEST_SUCCESS
;

347 
	}
}

349 
ã°_ªtu∫_t
 
	$dñëe_buf„r_gíî©e
(
memˇched_°
 *
memc
)

351 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
åue
);

353 
size_t
 
tŸÆ
= 0;

354 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

356 i‡(
	`memˇched_suc˚ss
(
	`memˇched_dñëe
(
memc
, 
globÆ_keys
[
x
], 
globÆ_keys_Àngth
[x], (
time_t
)0)))

358 
tŸÆ
++;

365 
	`ã°_åue
(
tŸÆ
 > (
globÆ_cou¡
 / 2));

367  
TEST_SUCCESS
;

368 
	}
}

370 
ã°_ªtu∫_t
 
	$mgë_ªad_öã∫Æ_ªsu…
(
memˇched_°
 *
memc
)

373 
	`ã°_skù
(
åue
, 
	`boﬁ
(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4)));

375 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

376 
	`memˇched_mgë
(
memc
, 
globÆ_keys
, 
globÆ_keys_Àngth
, 
globÆ_cou¡
));

378 
memˇched_ªsu…_°
 *
ªsu…s

NULL
;

379 
memˇched_ªtu∫_t
 
rc
;

380 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
,Ñesu…s, &
rc
)))

382 
	`ã°_åue
(
ªsu…s
);

383 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

385 
	`ã°_com∑ª
(
MEMCACHED_END
, 
rc
);

387 
	`memˇched_ªsu…_‰ì
(
ªsu…s
);

390  
TEST_SUCCESS
;

391 
	}
}

	@tests/libmemcached-1.0/generate.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
˛ónup_∑ús
(
memˇched_°
*);

41 
ã°_ªtu∫_t
 
dñëe_buf„r_gíî©e
(
memˇched_°
*);

42 
ã°_ªtu∫_t
 
dñëe_gíî©e
(
memˇched_°
*);

43 
ã°_ªtu∫_t
 
gíî©e_buf„r_d©a
(
memˇched_°
*);

44 
ã°_ªtu∫_t
 
gíî©e_d©a
(
memˇched_°
*);

45 
ã°_ªtu∫_t
 
gíî©e_d©a_wôh_°©s
(
memˇched_°
*);

46 
ã°_ªtu∫_t
 
gíî©e_œrge_∑ús
(
memˇched_°
 *);

47 
ã°_ªtu∫_t
 
gë_ªad
(
memˇched_°
*);

48 
ã°_ªtu∫_t
 
gë_ªad_cou¡
(
memˇched_°
*);

49 
ã°_ªtu∫_t
 
mgë_ªad
(
memˇched_°
*);

50 
ã°_ªtu∫_t
 
mgë_ªad_fun˘i⁄
(
memˇched_°
*);

51 
ã°_ªtu∫_t
 
mgë_ªad_∑πül_ªsu…
(
memˇched_°
*);

52 
ã°_ªtu∫_t
 
mgë_ªad_ªsu…
(
memˇched_°
*);

53 
ã°_ªtu∫_t
 
mgë_ªad_öã∫Æ_ªsu…
(
memˇched_°
*);

	@tests/libmemcached-1.0/haldenbrand.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~"ã°s/libmemˇched-1.0/hÆdíbønd.h
"

42 
	~"ã°s/libmemˇched-1.0/„tch_Æl_ªsu…s.h
"

45 
	#HALDENBRAND_KEY_COUNT
 3000U

46 
	#HALDENBRAND_FLAG_KEY
 99

47 

	)

48 
ã°_ªtu∫_t
 
	$hÆdíbønd_TEST1
(
memˇched_°
 *
memc
)

51 
	`§™dom
(10);

53 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

54 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
åue
));

55 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

56 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
åue
));

60 
tŸÆ
= 0;

61 
uöt32_t
 
x
0 ; 
tŸÆ
 < 20 * 1024576 ; x++ )

63 
uöt32_t
 
size
(uöt32_t)(
	`ønd
() % ( 5 * 1024 ) ) + 400;

64 
øndom°uff
[6 * 1024];

65 
	`mem£t
(
øndom°uff
, 0, 6 * 1024);

66 
	`ã°_åue
(
size
 < 6 * 1024);

68 
uöt32_t
 
j
0 ; j < 
size
 ;j++)

70 
øndom°uff
[
j
] = (sig√d Ë((
	`ønd
() % 26) + 97);

73 
tŸÆ
+
size
;

74 
key
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

75 
key_Àngth

	`¢¥ötf
(
key
, (key), "%u", 
x
);

76 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

77 
	`memˇched_£t
(
memc
, 
key
, 
key_Àngth
,

78 
øndom°uff
, 
	`°æí
(randomstuff),

79 
	`time_t
(0), 
HALDENBRAND_FLAG_KEY
));

81 
	`ã°_åue
(
tŸÆ
 > 
HALDENBRAND_KEY_COUNT
);

83  
TEST_SUCCESS
;

84 
	}
}

87 
ã°_ªtu∫_t
 
	$hÆdíbønd_TEST2
(
memˇched_°
 *
memc
)

89 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

90 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
åue
));

92 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

93 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
åue
));

96 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
, 20 * 1024576));

97 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
, 20 * 1024576));

98 
gëãr
 = 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
);

99 
gëãr
 = 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
);

101 
x
0, 
îr‹s
0; 
tŸÆ
 < 20 * 1024576 ; x++);

104 
size_t
 
tŸÆ_vÆue_Àngth
= 0;

105 
uöt32_t
 
x
0, 
îr‹s
0; 
tŸÆ_vÆue_Àngth
 < 24576 ; x++)

107 
uöt32_t
 
Êags
= 0;

108 
size_t
 
vÆ_Àn
= 0;

110 
key
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

111 
key_Àngth

	`¢¥ötf
(
key
, (key), "%u", 
x
);

113 
memˇched_ªtu∫_t
 
rc
;

114 *
gëvÆ

	`memˇched_gë
(
memc
, 
key
, 
key_Àngth
, &
vÆ_Àn
, &
Êags
, &
rc
);

115 i‡(
	`memˇched_Áûed
(
rc
))

117 i‡(
rc
 =
MEMCACHED_NOTFOUND
)

119 
îr‹s
++;

123 
	`ã°_åue
(
rc
);

128 
	`ã°_com∑ª
(
	`uöt32_t
(
HALDENBRAND_FLAG_KEY
), 
Êags
);

129 
	`ã°_åue
(
gëvÆ
);

131 
tŸÆ_vÆue_Àngth
+
vÆ_Àn
;

132 
îr‹s
= 0;

133 ::
	`‰ì
(
gëvÆ
);

136  
TEST_SUCCESS
;

137 
	}
}

140 
ã°_ªtu∫_t
 
	$hÆdíbønd_TEST3
(
memˇched_°
 *
memc
)

142 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
åue
));

143 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
åue
));

145 #ifde‡
NOT_YET


146 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
, 20 * 1024576);

147 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
, 20 * 1024576);

148 
gëãr
 = 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
);

149 
gëãr
 = 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
);

152 
°d
::
ve˘‹
<
size_t
> 
key_Àngths
;

153 
key_Àngths
.
	`ªsize
(
HALDENBRAND_KEY_COUNT
);

154 
°d
::
ve˘‹
<*> 
keys
;

155 
keys
.
	`ªsize
(
key_Àngths
.
	`size
());

156 
uöt32_t
 
x
0; x < 
key_Àngths
.
	`size
(); x++)

158 
key
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

159 
key_Àngth

	`¢¥ötf
(
key
, (key), "%u", 
x
);

160 
	`ã°_åue
(
key_Àngth
 > 0 
™d
 key_Àngth < 
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1);

161 
keys
[
x
]
	`°rdup
(
key
);

162 
key_Àngths
[
x
]
key_Àngth
;

165 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

166 
	`memˇched_mgë
(
memc
, &
keys
[0], &
key_Àngths
[0], key_Àngths.
	`size
()));

168 
keys_ªtu∫ed
;

169 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`„tch_Æl_ªsu…s
(
memc
, 
keys_ªtu∫ed
));

170 
	`ã°_com∑ª
(
HALDENBRAND_KEY_COUNT
, 
keys_ªtu∫ed
);

172 
libã°
::
vch¨_±r_t
::
ôî©‹
 
ôî

keys
.
	`begö
();

173 
ôî
 !
keys
.
	`íd
();

174 
ôî
++)

176 ::
	`‰ì
(*
ôî
);

180  
TEST_SUCCESS
;

181 
	}
}

	@tests/libmemcached-1.0/haldenbrand.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
hÆdíbønd_TEST1
(
memˇched_°
 *);

41 
ã°_ªtu∫_t
 
hÆdíbønd_TEST2
(
memˇched_°
 *);

42 
ã°_ªtu∫_t
 
hÆdíbønd_TEST3
(
memˇched_°
 *);

	@tests/libmemcached-1.0/internals.cc

37 
	~<mem_c⁄fig.h
>

38 
	~<libã°/ã°.hµ
>

40 
usög
 
«me•a˚
 
	glibã°
;

42 
	~"ã°s/°rög.h
"

47 
ã°_°
 
	g°rög_ã°s
[] ={

48 {"°rög sèti¯wôhÇuŒ", 
Ál£
, 
°rög_°©ic_nuŒ
 },

49 {"°rögáŒo¯wôhÇuŒ", 
Ál£
, 
°rög_Æloc_nuŒ
 },

50 {"°rögáŒo¯wôh 1K", 
Ál£
, 
°rög_Æloc_wôh_size
 },

51 {"°rögáŒo¯wôh mÆlo¯Áûuª", 
Ál£
, 
°rög_Æloc_wôh_size_toobig
 },

52 {"°rögáµíd", 
Ál£
, 
°rög_Æloc_≠≥nd
 },

53 {"°rögáµíd faûuª (toÿbig)", 
Ál£
, 
°rög_Æloc_≠≥nd_toobig
 },

54 {"°rög_Æloc_≠≥nd_mu…ùÀ", 
Ál£
, 
°rög_Æloc_≠≥nd_mu…ùÀ
 },

59 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

60 {"°rög", 0, 0, 
°rög_ã°s
},

64 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
‰ame
)

66 
‰ame
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

	@tests/libmemcached-1.0/ketama.cc

37 
	~<mem_c⁄fig.h
>

38 
	~<libã°/ã°.hµ
>

40 
	~<libmemˇched-1.0/memˇched.h
>

42 
	~"libmemˇched/£rvî_ö°™˚.h
"

43 
	~"libmemˇched/c⁄töuum.hµ
"

44 
	~"libmemˇched/ö°™˚.hµ
"

46 
	~<ã°s/këama.h
>

47 
	~<ã°s/këama_ã°_ˇ£s.h
>

49 
ã°_ªtu∫_t
 
	$këama_com∑tibûôy_libmemˇched
(
memˇched_°
 *)

51 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

52 
	`ã°_åue
(
memc
);

54 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

55 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1));

57 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
));

59 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
));

60 
	`ã°_com∑ª
(
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
, 
	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
));

62 
memˇched_£rvî_°
 *
£rvî_poﬁ

	`memˇched_£rvîs_∑r£
("10.0.1.1:11211 600,10.0.1.2:11211 300,10.0.1.3:11211 200,10.0.1.4:11211 350,10.0.1.5:11211 1000,10.0.1.6:11211 800,10.0.1.7:11211 950,10.0.1.8:11211 100");

63 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

66 
	`ã°_com∑ª
(8U, 
	`memˇched_£rvî_cou¡
(
memc
));

67 
	`ã°_°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "10.0.1.1");

68 
	`ã°_com∑ª
(
	`ö_p‹t_t
(11211), 
£rvî_poﬁ
[0].
p‹t
);

69 
	`ã°_com∑ª
(600U, 
£rvî_poﬁ
[0].
weight
);

70 
	`ã°_°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "10.0.1.3");

71 
	`ã°_com∑ª
(
	`ö_p‹t_t
(11211), 
£rvî_poﬁ
[2].
p‹t
);

72 
	`ã°_com∑ª
(200U, 
£rvî_poﬁ
[2].
weight
);

73 
	`ã°_°rcmp
(
£rvî_poﬁ
[7].
ho°«me
, "10.0.1.8");

74 
	`ã°_com∑ª
(
	`ö_p‹t_t
(11211), 
£rvî_poﬁ
[7].
p‹t
);

75 
	`ã°_com∑ª
(100U, 
£rvî_poﬁ
[7].
weight
);

80 
	`ã°_åue
(
	`memˇched_gíî©e_hash
(
memc
, (*)"VDEAAAAA", 8Ë=memc->
këama
.
c⁄töuum
[0].
ödex
);

83 
uöt32_t
 
x
= 0; x < 99; x++)

85 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s
[
x
].
key
, 
	`°æí
(ketama_test_cases[x].key));

86 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

87 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_idx
);

88 c⁄° *
ho°«me
 = 
	`memˇched_£rvî_«me
(
ö°™˚
);

90 
	`ã°_°rcmp
(
ho°«me
, 
këama_ã°_ˇ£s
[
x
].
£rvî
);

93 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

94 
	`memˇched_‰ì
(
memc
);

96  
TEST_SUCCESS
;

97 
	}
}

99 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug18
(
memˇched_°
 *
åash
)

101 
memˇched_ªtu∫_t
 
rc
;

102 
uöt64_t
 
vÆue
;

103 
x
;

104 
memˇched_°
 *
memc
;

106 ()
åash
;

108 
memc

	`memˇched_¸óã
(
NULL
);

109 
	`ã°_åue
(
memc
);

111 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1);

112 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

114 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

115 
	`ã°_åue
(
vÆue
 == 1);

117 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
, 
MEMCACHED_HASH_MD5
);

118 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

120 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
);

121 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_MD5
);

123 
memˇched_£rvî_°
 *
£rvî_poﬁ

	`memˇched_£rvîs_∑r£
("10.0.1.1:11211 600,10.0.1.2:11211 300,10.0.1.3:11211 200,10.0.1.4:11211 350,10.0.1.5:11211 1000,10.0.1.6:11211 800,10.0.1.7:11211 950,10.0.1.8:11211 100");

124 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

127 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) == 8);

128 
	`ã°_°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "10.0.1.1");

129 
	`ã°_åue
(
£rvî_poﬁ
[0].
p‹t
 == 11211);

130 
	`ã°_åue
(
£rvî_poﬁ
[0].
weight
 == 600);

131 
	`ã°_°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "10.0.1.3");

132 
	`ã°_åue
(
£rvî_poﬁ
[2].
p‹t
 == 11211);

133 
	`ã°_åue
(
£rvî_poﬁ
[2].
weight
 == 200);

134 
	`ã°_°rcmp
(
£rvî_poﬁ
[7].
ho°«me
, "10.0.1.8");

135 
	`ã°_åue
(
£rvî_poﬁ
[7].
p‹t
 == 11211);

136 
	`ã°_åue
(
£rvî_poﬁ
[7].
weight
 == 100);

141 
	`ã°_åue
(
	`memˇched_gíî©e_hash
(
memc
, (*)"VDEAAAAA", 8Ë=memc->
këama
.
c⁄töuum
[0].
ödex
);

144 
x
= 0; x < 99; x++)

146 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s
[
x
].
key
, 
	`°æí
(ketama_test_cases[x].key));

148 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

149 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_idx
);

151 c⁄° *
ho°«me
 = 
	`memˇched_£rvî_«me
(
ö°™˚
);

152 
	`ã°_°rcmp
(
ho°«me
, 
këama_ã°_ˇ£s
[
x
].
£rvî
);

155 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

156 
	`memˇched_‰ì
(
memc
);

158  
TEST_SUCCESS
;

159 
	}
}

161 
ã°_ªtu∫_t
 
	$auto_eje˘_ho°s
(
memˇched_°
 *
åash
)

163 (Ë
åash
;

165 
memˇched_ªtu∫_t
 
rc
;

166 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

167 
	`ã°_åue
(
memc
);

169 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1);

170 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

172 
uöt64_t
 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

173 
	`ã°_åue
(
vÆue
 == 1);

175 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
, 
MEMCACHED_HASH_MD5
);

176 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

178 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
);

179 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_MD5
);

182 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
, 1);

183 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

185 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
);

186 
	`ã°_åue
(
vÆue
 == 1);

188 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

189 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
("10.0.1.1:11211 600,10.0.1.2:11211 300,10.0.1.3:11211 200,10.0.1.4:11211 350,10.0.1.5:11211 1000,10.0.1.6:11211 800,10.0.1.7:11211 950,10.0.1.8:11211 100");

190 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

193 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) == 8);

194 
	`ã°_°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "10.0.1.1");

195 
	`ã°_åue
(
£rvî_poﬁ
[0].
p‹t
 == 11211);

196 
	`ã°_åue
(
£rvî_poﬁ
[0].
weight
 == 600);

197 
	`ã°_°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "10.0.1.3");

198 
	`ã°_åue
(
£rvî_poﬁ
[2].
p‹t
 == 11211);

199 
	`ã°_åue
(
£rvî_poﬁ
[2].
weight
 == 200);

200 
	`ã°_°rcmp
(
£rvî_poﬁ
[7].
ho°«me
, "10.0.1.8");

201 
	`ã°_åue
(
£rvî_poﬁ
[7].
p‹t
 == 11211);

202 
	`ã°_åue
(
£rvî_poﬁ
[7].
weight
 == 100);

204 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 2);

205 
	`memˇched_ö°™˚_√xt_ªåy
(
ö°™˚
, 
	`time
(
NULL
) +15);

206 
memc
->
këama
.
√xt_di°ributi⁄_ªbuûd

	`time
(
NULL
) - 1;

211 
±rdiff_t
 
x
= 0; x < 99; x++)

213 
	`memˇched_aut€je˘
(
memc
);

214 
uöt32_t
 
£rvî_idx

	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s
[
x
].
key
, 
	`°æí
(ketama_test_cases[x].key));

215 
	`ã°_åue
(
£rvî_idx
 != 2);

219 
time_t
 
absﬁuã_time

	`time
(
NULL
) -1;

220 
	`memˇched_ö°™˚_√xt_ªåy
(
ö°™˚
, 
absﬁuã_time
);

221 
memc
->
këama
.
√xt_di°ributi⁄_ªbuûd

absﬁuã_time
;

222 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
,

223 
memc
->
di°ributi⁄
);

224 
±rdiff_t
 
x
= 0; x < 99; x++)

226 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s
[
x
].
key
, 
	`°æí
(ketama_test_cases[x].key));

228 
ö°™˚
=

229 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_idx
);

230 c⁄° *
ho°«me
 = 
	`memˇched_£rvî_«me
(
ö°™˚
);

231 
	`ã°_°rcmp
(
ho°«me
, 
këama_ã°_ˇ£s
[
x
].
£rvî
);

234 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

235 
	`memˇched_‰ì
(
memc
);

237  
TEST_SUCCESS
;

238 
	}
}

240 
ã°_ªtu∫_t
 
	$këama_com∑tibûôy_•ymemˇched
(
memˇched_°
 *)

242 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

243 
	`ã°_åue
(
memc
);

245 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

246 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1));

248 
	`ã°_com∑ª
(
	`UINT64_C
(1), 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
));

250 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
));

251 
	`ã°_com∑ª
(
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
, 
	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
));

253 
memˇched_£rvî_°
 *
£rvî_poﬁ

	`memˇched_£rvîs_∑r£
("10.0.1.1:11211 600,10.0.1.2:11211 300,10.0.1.3:11211 200,10.0.1.4:11211 350,10.0.1.5:11211 1000,10.0.1.6:11211 800,10.0.1.7:11211 950,10.0.1.8:11211 100");

254 
	`ã°_åue
(
£rvî_poﬁ
);

255 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

258 
	`ã°_com∑ª
(8U, 
	`memˇched_£rvî_cou¡
(
memc
));

259 
	`ã°_°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "10.0.1.1");

260 
	`ã°_com∑ª
(
	`ö_p‹t_t
(11211), 
£rvî_poﬁ
[0].
p‹t
);

261 
	`ã°_com∑ª
(600U, 
£rvî_poﬁ
[0].
weight
);

262 
	`ã°_°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "10.0.1.3");

263 
	`ã°_com∑ª
(
	`ö_p‹t_t
(11211), 
£rvî_poﬁ
[2].
p‹t
);

264 
	`ã°_com∑ª
(200U, 
£rvî_poﬁ
[2].
weight
);

265 
	`ã°_°rcmp
(
£rvî_poﬁ
[7].
ho°«me
, "10.0.1.8");

266 
	`ã°_com∑ª
(
	`ö_p‹t_t
(11211), 
£rvî_poﬁ
[7].
p‹t
);

267 
	`ã°_com∑ª
(100U, 
£rvî_poﬁ
[7].
weight
);

272 
	`ã°_åue
(
	`memˇched_gíî©e_hash
(
memc
, (*)"VDEAAAAA", 8Ë=memc->
këama
.
c⁄töuum
[0].
ödex
);

275 
uöt32_t
 
x
= 0; x < 99; x++)

277 
uöt32_t
 
£rvî_idx

	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s_•y
[
x
].
key
, 
	`°æí
(ketama_test_cases_spy[x].key));

279 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

280 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_idx
);

282 c⁄° *
ho°«me

	`memˇched_£rvî_«me
(
ö°™˚
);

284 
	`ã°_°rcmp
(
ho°«me
, 
këama_ã°_ˇ£s_•y
[
x
].
£rvî
);

287 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

288 
	`memˇched_‰ì
(
memc
);

290  
TEST_SUCCESS
;

291 
	}
}

	@tests/libmemcached-1.0/mem_functions.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 #i‡
deföed
(
HAVE_LIBUUID
) && HAVE_LIBUUID

42 
	~<uuid/uuid.h
>

49 
	~<libmemˇched-1.0/memˇched.h
>

50 
	~"libmemˇched/is.h
"

51 
	~"libmemˇched/£rvî_ö°™˚.h
"

53 
	~<libhashkô-1.0/hashkô.h
>

55 
	~<libã°/memˇched.hµ
>

57 
	~<˚ºno
>

58 
	~<mem‹y
>

59 
	~<±hªad.h
>

60 
	~<£m≠h‹e.h
>

61 
	~<sig«l.h
>

62 
	~<sys/°©.h
>

63 
	~<sys/time.h
>

64 
	~<sys/ty≥s.h
>

65 
	~<uni°d.h
>

67 
	~<io°ªam
>

69 
	~<libã°/£rvî.h
>

71 
	~"˛õ¡s/gíî©‹.h
"

73 
	#SMALL_STRING_LEN
 1024

	)

75 
	~<libã°/ã°.hµ
>

77 
usög
 
«me•a˚
 
	glibã°
;

79 
	~<libmemˇchedutû-1.0/utû.h
>

81 
	~"ã°s/hash_ªsu…s.h
"

83 
	~"ã°s/libmemˇched-1.0/ˇŒback_cou¡î.h
"

84 
	~"ã°s/libmemˇched-1.0/„tch_Æl_ªsu…s.h
"

85 
	~"ã°s/libmemˇched-1.0/mem_fun˘i⁄s.h
"

86 
	~"ã°s/libmemˇched-1.0/£tup_™d_ã¨downs.h
"

87 
	~"ã°s/¥öt.h
"

88 
	~"ã°s/debug.h
"

89 
	~"ã°s/memc.hµ
"

91 
	#UUID_STRING_MAXLENGTH
 36

	)

93 
	~"ã°s/keys.hµ
"

95 
	~"libmemˇched/ö°™˚.hµ
"

97 
memˇched_°
 * 
	$¸óã_sögÀ_ö°™˚_memˇched
(c⁄° 
memˇched_°
 *
‹igöÆ_memc
, c⁄° *
›ti⁄s
)

102 
›ti⁄s_buf„r
[1024]= { 0 };

103 i‡(
›ti⁄s
 =
NULL
)

105 i‡(
	`memˇched_is_bö¨y
(
‹igöÆ_memc
))

107 
	`¢¥ötf
(
›ti⁄s_buf„r
, (options_buffer), "--BINARY");

115 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
‹igöÆ_memc
, 0);

117 
£rvî_°rög
[1024];

118 
£rvî_°rög_Àngth
;

119 i‡(
ö°™˚
->
ty≥
 =
MEMCACHED_CONNECTION_UNIX_SOCKET
)

121 i‡(
›ti⁄s
)

123 
£rvî_°rög_Àngth

	`¢¥ötf
(
£rvî_°rög
, (server_string), "--SOCKET=\"%s\" %s",

124 
	`memˇched_£rvî_«me
(
ö°™˚
), 
›ti⁄s
);

128 
£rvî_°rög_Àngth

	`¢¥ötf
(
£rvî_°rög
, (server_string), "--SOCKET=\"%s\"",

129 
	`memˇched_£rvî_«me
(
ö°™˚
));

134 i‡(
›ti⁄s
)

136 
£rvî_°rög_Àngth

	`¢¥ötf
(
£rvî_°rög
, (server_string), "--server=%s:%d %s",

137 
	`memˇched_£rvî_«me
(
ö°™˚
), (
	`memˇched_£rvî_p‹t
(instance)),

138 
›ti⁄s
);

142 
£rvî_°rög_Àngth

	`¢¥ötf
(
£rvî_°rög
, (server_string), "--server=%s:%d",

143 
	`memˇched_£rvî_«me
(
ö°™˚
), (
	`memˇched_£rvî_p‹t
(instance)));

147 i‡(
£rvî_°rög_Àngth
 <= 0)

149  
NULL
;

152 
îº‹_buf„r
[1024];

153 i‡(
	`memˇched_Áûed
(
	`libmemˇched_check_c⁄figuøti⁄
(
£rvî_°rög
, 
£rvî_°rög_Àngth
, 
îº‹_buf„r
, (errror_buffer))))

155 
Eº‹
 << "FaûedÅÿ∑r£ (" << 
£rvî_°rög
 << "Ë" << 
îº‹_buf„r
;

156  
NULL
;

159  
	`memˇched
(
£rvî_°rög
, 
£rvî_°rög_Àngth
);

160 
	}
}

163 
ã°_ªtu∫_t
 
	$öô_ã°
(
memˇched_°
 *
nŸ_u£d
)

165 
memˇched_°
 
memc
;

166 ()
nŸ_u£d
;

168 ()
	`memˇched_¸óã
(&
memc
);

169 
	`memˇched_‰ì
(&
memc
);

171  
TEST_SUCCESS
;

172 
	}
}

174 
	#TEST_PORT_COUNT
 7

	)

175 
ö_p‹t_t
 
	gã°_p‹ts
[
TEST_PORT_COUNT
];

177 
memˇched_ªtu∫_t
 
	$£rvî_di•œy_fun˘i⁄
(c⁄° 
memˇched_°
 *
±r
,

178 c⁄° 
memˇched_ö°™˚_°
 * 
£rvî
,

179 *
c⁄ãxt
)

182 
size_t
 
biggî
*((size_à*)(
c⁄ãxt
));

183 ()
±r
;

184 
	`Áèl_as£π
(
biggî
 <
	`memˇched_£rvî_p‹t
(
£rvî
));

185 *((
size_t
 *)(
c⁄ãxt
))
	`memˇched_£rvî_p‹t
(
£rvî
);

187  
MEMCACHED_SUCCESS
;

188 
	}
}

190 
memˇched_ªtu∫_t
 
	$dump_£rvî_öf‹m©i⁄
(c⁄° 
memˇched_°
 *
±r
,

191 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
,

192 *
c⁄ãxt
)

195 
FILE
 *
°ªam
(FILE *)
c⁄ãxt
;

196 ()
±r
;

198 
	`Ârötf
(
°ªam
, "Memcached Server: %s %u Version %u.%u.%u\n",

199 
	`memˇched_£rvî_«me
(
ö°™˚
),

200 
	`memˇched_£rvî_p‹t
(
ö°™˚
),

201 
ö°™˚
->
maj‹_vîsi⁄
,

202 
ö°™˚
->
mö‹_vîsi⁄
,

203 
ö°™˚
->
mi¸o_vîsi⁄
);

205  
MEMCACHED_SUCCESS
;

206 
	}
}

208 
ã°_ªtu∫_t
 
	$£rvî_s‹t_ã°
(
memˇched_°
 *
±r
)

210 
size_t
 
biggî
= 0;

212 
memˇched_ªtu∫_t
 
rc
;

213 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

214 
memˇched_°
 *
loˇl_memc
;

215 ()
±r
;

217 
loˇl_memc

	`memˇched_¸óã
(
NULL
);

218 
	`ã°_åue
(
loˇl_memc
);

219 
	`memˇched_behavi‹_£t
(
loˇl_memc
, 
MEMCACHED_BEHAVIOR_SORT_HOSTS
, 1);

221 
uöt32_t
 
x
0; x < 
TEST_PORT_COUNT
; x++)

223 
ã°_p‹ts
[
x
](
ö_p‹t_t
)
	`øndom
() % 64000;

224 
rc

	`memˇched_£rvî_add_wôh_weight
(
loˇl_memc
, "loˇlho°", 
ã°_p‹ts
[
x
], 0);

225 
	`ã°_com∑ª
(
	`memˇched_£rvî_cou¡
(
loˇl_memc
), 
x
 +1);

227 
	`ã°_åue
(
	`memˇched_£rvî_li°_cou¡
(
	`memˇched_£rvî_li°
(
loˇl_memc
)Ë=
x
+1);

229 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

232 
ˇŒbacks
[0]
£rvî_di•œy_fun˘i⁄
;

233 
	`memˇched_£rvî_curs‹
(
loˇl_memc
, 
ˇŒbacks
, (*)&
biggî
, 1);

236 
	`memˇched_‰ì
(
loˇl_memc
);

238  
TEST_SUCCESS
;

239 
	}
}

241 
ã°_ªtu∫_t
 
	$£rvî_s‹t2_ã°
(
memˇched_°
 *
±r
)

243 
size_t
 
biggî
= 0;

244 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

245 
memˇched_°
 *
loˇl_memc
;

246 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
;

247 ()
±r
;

249 
loˇl_memc

	`memˇched_¸óã
(
NULL
);

250 
	`ã°_åue
(
loˇl_memc
);

251 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

252 
	`memˇched_behavi‹_£t
(
loˇl_memc
, 
MEMCACHED_BEHAVIOR_SORT_HOSTS
, 1));

254 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

255 
	`memˇched_£rvî_add_wôh_weight
(
loˇl_memc
, "MEMCACHED_BEHAVIOR_SORT_HOSTS", 43043, 0));

256 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
loˇl_memc
, 0);

257 
	`ã°_com∑ª
(
	`ö_p‹t_t
(43043), 
	`memˇched_£rvî_p‹t
(
ö°™˚
));

259 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

260 
	`memˇched_£rvî_add_wôh_weight
(
loˇl_memc
, "MEMCACHED_BEHAVIOR_SORT_HOSTS", 43042, 0));

262 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
loˇl_memc
, 0);

263 
	`ã°_com∑ª
(
	`ö_p‹t_t
(43042), 
	`memˇched_£rvî_p‹t
(
ö°™˚
));

265 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
loˇl_memc
, 1);

266 
	`ã°_com∑ª
(
	`ö_p‹t_t
(43043), 
	`memˇched_£rvî_p‹t
(
ö°™˚
));

268 
ˇŒbacks
[0]
£rvî_di•œy_fun˘i⁄
;

269 
	`memˇched_£rvî_curs‹
(
loˇl_memc
, 
ˇŒbacks
, (*)&
biggî
, 1);

272 
	`memˇched_‰ì
(
loˇl_memc
);

274  
TEST_SUCCESS
;

275 
	}
}

277 
ã°_ªtu∫_t
 
	$memˇched_£rvî_ªmove_ã°
(
memˇched_°
*)

279 c⁄° *
£rvî_°rög
= "--server=localhost:4444 --server=localhost:4445 --server=localhost:4446 --server=localhost:4447 --server=localhost --server=memcache1.memcache.bk.sapo.pt:11211 --server=memcache1.memcache.bk.sapo.pt:11212 --server=memcache1.memcache.bk.sapo.pt:11213 --server=memcache1.memcache.bk.sapo.pt:11214 --server=memcache2.memcache.bk.sapo.pt:11211 --server=memcache2.memcache.bk.sapo.pt:11212 --server=memcache2.memcache.bk.sapo.pt:11213 --server=memcache2.memcache.bk.sapo.pt:11214";

280 
buf„r
[
BUFSIZ
];

282 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

283 
	`libmemˇched_check_c⁄figuøti⁄
(
£rvî_°rög
, 
	`°æí
(£rvî_°rög), 
buf„r
, (buffer)));

284 
memˇched_°
 *
memc

	`memˇched
(
£rvî_°rög
, 
	`°æí
(server_string));

285 
	`ã°_åue
(
memc
);

287 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

288 
ˇŒbacks
[0]
£rvî_¥öt_ˇŒback
;

289 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, 
NULL
, 1);

291 
	`memˇched_‰ì
(
memc
);

293  
TEST_SUCCESS
;

294 
	}
}

296 
memˇched_ªtu∫_t
 
	$£rvî_di•œy_uns‹t_fun˘i⁄
(c⁄° 
memˇched_°
*,

297 c⁄° 
memˇched_ö°™˚_°
 * 
£rvî
,

298 *
c⁄ãxt
)

301 
uöt32_t
 
x
*((uöt32_à*)(
c⁄ãxt
));

303 i‡(! (
ã°_p‹ts
[
x
] =
	`memˇched_£rvî_p‹t
(
£rvî
)))

305 
	`Ârötf
(
°dîr
, "%lu -> %lu\n", ()
ã°_p‹ts
[
x
], ()
	`memˇched_£rvî_p‹t
(
£rvî
));

306  
MEMCACHED_FAILURE
;

309 *((
uöt32_t
 *)(
c⁄ãxt
))++
x
;

311  
MEMCACHED_SUCCESS
;

312 
	}
}

314 
ã°_ªtu∫_t
 
	$£rvî_uns‹t_ã°
(
memˇched_°
 *
±r
)

316 
size_t
 
cou¡î
= 0;

317 
size_t
 
biggî
= 0;

318 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

319 
memˇched_°
 *
loˇl_memc
;

320 ()
±r
;

322 
loˇl_memc

	`memˇched_¸óã
(
NULL
);

323 
	`ã°_åue
(
loˇl_memc
);

325 
uöt32_t
 
x
0; x < 
TEST_PORT_COUNT
; x++)

327 
ã°_p‹ts
[
x
](
ö_p‹t_t
)(
	`øndom
() % 64000);

328 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

329 
	`memˇched_£rvî_add_wôh_weight
(
loˇl_memc
, "loˇlho°", 
ã°_p‹ts
[
x
], 0));

330 
	`ã°_com∑ª
(
	`memˇched_£rvî_cou¡
(
loˇl_memc
), 
x
 +1);

332 
	`ã°_åue
(
	`memˇched_£rvî_li°_cou¡
(
	`memˇched_£rvî_li°
(
loˇl_memc
)Ë=
x
+1);

336 
ˇŒbacks
[0]
£rvî_di•œy_uns‹t_fun˘i⁄
;

337 
	`memˇched_£rvî_curs‹
(
loˇl_memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

340 
	`memˇched_behavi‹_£t
(
loˇl_memc
, 
MEMCACHED_BEHAVIOR_SORT_HOSTS
, 1);

341 
ˇŒbacks
[0]
£rvî_di•œy_fun˘i⁄
;

342 
	`memˇched_£rvî_curs‹
(
loˇl_memc
, 
ˇŒbacks
, (*)&
biggî
, 1);

345 
	`memˇched_‰ì
(
loˇl_memc
);

347  
TEST_SUCCESS
;

348 
	}
}

350 
ã°_ªtu∫_t
 
	$Æloˇti⁄_ã°
(
memˇched_°
 *
nŸ_u£d
)

352 ()
nŸ_u£d
;

353 
memˇched_°
 *
memc
;

354 
memc

	`memˇched_¸óã
(
NULL
);

355 
	`ã°_åue
(
memc
);

356 
	`memˇched_‰ì
(
memc
);

358  
TEST_SUCCESS
;

359 
	}
}

361 
ã°_ªtu∫_t
 
	$˛⁄e_ã°
(
memˇched_°
 *
memc
)

365 
memˇched_°
 *
memc_˛⁄e
;

366 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, NULL);

367 
	`ã°_åue
(
memc_˛⁄e
);

368 
	`memˇched_‰ì
(
memc_˛⁄e
);

373 
memˇched_°
 *
memc_˛⁄e
;

374 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

375 
	`ã°_åue
(
memc_˛⁄e
);

378 
	`ã°_åue
(
memc_˛⁄e
->
Æloˇt‹s
.
‰ì
 =
memc
->allocators.free);

379 
	`ã°_åue
(
memc_˛⁄e
->
Æloˇt‹s
.
mÆloc
 =
memc
->allocators.malloc);

380 
	`ã°_åue
(
memc_˛⁄e
->
Æloˇt‹s
.
ªÆloc
 =
memc
->allocators.realloc);

381 
	`ã°_åue
(
memc_˛⁄e
->
Æloˇt‹s
.
ˇŒoc
 =
memc
->allocators.calloc);

384 
	`ã°_åue
(
memc_˛⁄e
->
c⁄√˘_timeout
 =
memc
->connect_timeout);

385 
	`ã°_åue
(
memc_˛⁄e
->
dñëe_åiggî
 =
memc
->delete_trigger);

386 
	`ã°_åue
(
memc_˛⁄e
->
di°ributi⁄
 =
memc
->distribution);

388 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
no_block
 =
memc
->flags.no_block);

389 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
t˝_nodñay
 =
memc
->flags.tcp_nodelay);

390 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
suµ‹t_ˇs
 =
memc
->flags.support_cas);

391 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
buf„r_ªque°s
 =
memc
->flags.buffer_requests);

392 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
u£_s‹t_ho°s
 =
memc
->flags.use_sort_hosts);

393 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
vîify_key
 =
memc
->flags.verify_key);

394 
	`ã°_åue
(
memc_˛⁄e
->
këama
.
weighãd_
 =
memc
->ketama.weighted_);

395 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
bö¨y_¥Ÿocﬁ
 =
memc
->flags.binary_protocol);

396 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
hash_wôh_«me•a˚
 =
memc
->flags.hash_with_namespace);

397 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
ª∂y
 =
memc
->flags.reply);

398 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
u£_udp
 =
memc
->flags.use_udp);

399 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
auto_eje˘_ho°s
 =
memc
->flags.auto_eject_hosts);

400 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
øndomize_ª∂iˇ_ªad
 =
memc
->flags.randomize_replica_read);

402 
	`ã°_åue
(
memc_˛⁄e
->
gë_key_Áûuª
 =
memc
->get_key_failure);

403 
	`ã°_åue
(
	`hashkô_com∑ª
(&
memc_˛⁄e
->
hashkô
, &
memc
->hashkit));

404 
	`ã°_åue
(
memc_˛⁄e
->
io_byãs_w©îm¨k
 =
memc
->io_bytes_watermark);

405 
	`ã°_åue
(
memc_˛⁄e
->
io_msg_w©îm¨k
 =
memc
->io_msg_watermark);

406 
	`ã°_åue
(
memc_˛⁄e
->
io_key_¥e„tch
 =
memc
->io_key_prefetch);

407 
	`ã°_åue
(
memc_˛⁄e
->
⁄_˛ónup
 =
memc
->on_cleanup);

408 
	`ã°_åue
(
memc_˛⁄e
->
⁄_˛⁄e
 =
memc
->on_clone);

409 
	`ã°_åue
(
memc_˛⁄e
->
pﬁl_timeout
 =
memc
->poll_timeout);

410 
	`ã°_åue
(
memc_˛⁄e
->
rcv_timeout
 =
memc
->rcv_timeout);

411 
	`ã°_åue
(
memc_˛⁄e
->
ªcv_size
 =
memc
->recv_size);

412 
	`ã°_åue
(
memc_˛⁄e
->
ªåy_timeout
 =
memc
->retry_timeout);

413 
	`ã°_åue
(
memc_˛⁄e
->
£nd_size
 =
memc
->send_size);

414 
	`ã°_åue
(
memc_˛⁄e
->
£rvî_Áûuª_limô
 =
memc
->server_failure_limit);

415 
	`ã°_åue
(
memc_˛⁄e
->
¢d_timeout
 =
memc
->snd_timeout);

416 
	`ã°_åue
(
memc_˛⁄e
->
u£r_d©a
 =
memc
->user_data);

418 
	`memˇched_‰ì
(
memc_˛⁄e
);

423 
memˇched_°
 
de˛¨ed_˛⁄e
;

424 
memˇched_°
 *
memc_˛⁄e
;

425 
	`mem£t
(&
de˛¨ed_˛⁄e
, 0 , (
memˇched_°
));

426 
memc_˛⁄e

	`memˇched_˛⁄e
(&
de˛¨ed_˛⁄e
, 
NULL
);

427 
	`ã°_åue
(
memc_˛⁄e
);

428 
	`memˇched_‰ì
(
memc_˛⁄e
);

433 
memˇched_°
 
de˛¨ed_˛⁄e
;

434 
memˇched_°
 *
memc_˛⁄e
;

435 
	`mem£t
(&
de˛¨ed_˛⁄e
, 0 , (
memˇched_°
));

436 
memc_˛⁄e

	`memˇched_˛⁄e
(&
de˛¨ed_˛⁄e
, 
memc
);

437 
	`ã°_åue
(
memc_˛⁄e
);

438 
	`memˇched_‰ì
(
memc_˛⁄e
);

441  
TEST_SUCCESS
;

442 
	}
}

444 
ã°_ªtu∫_t
 
	$u£rd©a_ã°
(
memˇched_°
 *
memc
)

446 * 
foo

NULL
;

447 
	`ã°_Ál£
(
	`memˇched_£t_u£r_d©a
(
memc
, 
foo
));

448 
	`ã°_åue
(
	`memˇched_gë_u£r_d©a
(
memc
Ë=
foo
);

449 
	`ã°_åue
(
	`memˇched_£t_u£r_d©a
(
memc
, 
NULL
Ë=
foo
);

451  
TEST_SUCCESS
;

452 
	}
}

454 
ã°_ªtu∫_t
 
	$c⁄√˘i⁄_ã°
(
memˇched_°
 *
memc
)

456 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

457 
	`memˇched_£rvî_add_wôh_weight
(
memc
, "localhost", 0, 0));

459  
TEST_SUCCESS
;

460 
	}
}

462 
ã°_ªtu∫_t
 
	$libmemˇched_°rög_behavi‹_ã°
(
memˇched_°
 *)

464 
x

MEMCACHED_BEHAVIOR_NO_BLOCK
; x < (
MEMCACHED_BEHAVIOR_MAX
); ++x)

466 
	`ã°_åue
(
	`libmemˇched_°rög_behavi‹
(
	`memˇched_behavi‹_t
(
x
)));

468 
	`ã°_com∑ª
(37, (
MEMCACHED_BEHAVIOR_MAX
));

470  
TEST_SUCCESS
;

471 
	}
}

473 
ã°_ªtu∫_t
 
	$libmemˇched_°rög_di°ributi⁄_ã°
(
memˇched_°
 *)

475 
x

MEMCACHED_DISTRIBUTION_MODULA
; x < (
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
); ++x)

477 
	`ã°_åue
(
	`libmemˇched_°rög_di°ributi⁄
(
	`memˇched_£rvî_di°ributi⁄_t
(
x
)));

479 
	`ã°_com∑ª
(7, (
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
));

481  
TEST_SUCCESS
;

482 
	}
}

484 
ã°_ªtu∫_t
 
	$memˇched_ªtu∫_t_TEST
(
memˇched_°
 *
memc
)

486 
uöt32_t
 
vÆues
[] = { 851992627U, 2337886783U, 4109241422U, 4001849190U,

501 
rc
(
MEMCACHED_SUCCESS
);Ñ¯< (
MEMCACHED_MAXIMUM_RETURN
); ++rc)

503 
uöt32_t
 
hash_vÆ
;

504 c⁄° *
msg

	`memˇched_°ªº‹
(
memc
, 
	`memˇched_ªtu∫_t
(
rc
));

505 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(
msg
, 
	`°æí
(msg),

506 
MEMCACHED_HASH_JENKINS
);

507 i‡(
vÆues
[
rc
] !
hash_vÆ
)

509 
	`Ârötf
(
°dîr
, "\n\nYou have updated memcached_return_t without updatingÅhe memcached_return_t_TEST\n");

510 
	`Ârötf
(
°dîr
, "%u, %s, (%u)\n\n", (
uöt32_t
)
rc
, 
	`memˇched_°ªº‹
(
memc
, 
	`memˇched_ªtu∫_t
‘c)), 
hash_vÆ
);

512 
	`ã°_com∑ª
(
vÆues
[
rc
], 
hash_vÆ
);

514 
	`ã°_com∑ª
(49, (
MEMCACHED_MAXIMUM_RETURN
));

516  
TEST_SUCCESS
;

517 
	}
}

519 
ã°_ªtu∫_t
 
	$£t_ã°
(
memˇched_°
 *
memc
)

521 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
,

522 
	`ã°_lôîÆ_∑øm
("foo"),

523 
	`ã°_lôîÆ_∑øm
("when we sanitize"),

524 
	`time_t
(0), (
uöt32_t
)0);

525 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

527  
TEST_SUCCESS
;

528 
	}
}

530 
ã°_ªtu∫_t
 
	$≠≥nd_ã°
(
memˇched_°
 *
memc
)

532 
memˇched_ªtu∫_t
 
rc
;

533 c⁄° *
ö_vÆue
= "we";

534 
size_t
 
vÆue_Àngth
;

535 
uöt32_t
 
Êags
;

537 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

538 
	`memˇched_Êush
(
memc
, 0));

540 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

541 
	`memˇched_£t
(
memc
,

542 
	`ã°_lôîÆ_∑øm
(
__func__
),

543 
ö_vÆue
, 
	`°æí
(in_value),

544 
	`time_t
(0), 
	`uöt32_t
(0)));

546 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

547 
	`memˇched_≠≥nd
(
memc
,

548 
	`ã°_lôîÆ_∑øm
(
__func__
),

549 "Åhe", 
	`°æí
("Åhe"),

550 
	`time_t
(0), 
	`uöt32_t
(0)));

552 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

553 
	`memˇched_≠≥nd
(
memc
,

554 
	`ã°_lôîÆ_∑øm
(
__func__
),

555 "Öe›À", 
	`°æí
("Öeople"),

556 
	`time_t
(0), 
	`uöt32_t
(0)));

558 *
out_vÆue

	`memˇched_gë
(
memc
,

559 
	`ã°_lôîÆ_∑øm
(
__func__
),

560 &
vÆue_Àngth
, &
Êags
, &
rc
);

561 
	`ã°_memcmp
(
out_vÆue
, "wêthê≥›À", 
	`°æí
("weÅheÖeople"));

562 
	`ã°_com∑ª
(
	`°æí
("wêthê≥›À"), 
vÆue_Àngth
);

563 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

564 
	`‰ì
(
out_vÆue
);

566  
TEST_SUCCESS
;

567 
	}
}

569 
ã°_ªtu∫_t
 
	$≠≥nd_bö¨y_ã°
(
memˇched_°
 *
memc
)

571 
uöt32_t
 
°‹e_li°
[] = { 23, 56, 499, 98, 32847, 0 };

573 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

574 
	`memˇched_Êush
(
memc
, 0));

576 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

577 
	`memˇched_£t
(
memc
,

578 
	`ã°_lôîÆ_∑øm
(
__func__
),

579 
NULL
, 0,

580 
	`time_t
(0), 
	`uöt32_t
(0)));

582 
size_t
 
cou¡
= 0;

583 
uöt32_t
 
x
0; 
°‹e_li°
[x] ; x++)

585 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

586 
	`memˇched_≠≥nd
(
memc
,

587 
	`ã°_lôîÆ_∑øm
(
__func__
),

588 (*)&
°‹e_li°
[
x
], (
uöt32_t
),

589 
	`time_t
(0), 
	`uöt32_t
(0)));

590 
cou¡
++;

593 
size_t
 
vÆue_Àngth
;

594 
uöt32_t
 
Êags
;

595 
memˇched_ªtu∫_t
 
rc
;

596 
uöt32_t
 *
vÆue
(uöt32_à*)
	`memˇched_gë
(
memc
,

597 
	`ã°_lôîÆ_∑øm
(
__func__
),

598 &
vÆue_Àngth
, &
Êags
, &
rc
);

599 
	`ã°_com∑ª
(
vÆue_Àngth
, (
uöt32_t
Ë* 
cou¡
);

600 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

602 
uöt32_t
 
cou¡î

	`uöt32_t
(
cou¡
), *
±r

vÆue
; counter; counter--)

604 
	`ã°_com∑ª
(*
±r
, 
°‹e_li°
[
cou¡
 - 
cou¡î
]);

605 
±r
++;

607 
	`‰ì
(
vÆue
);

609  
TEST_SUCCESS
;

610 
	}
}

612 
ã°_ªtu∫_t
 
	$memˇched_mgë_mixed_memˇched_gë_TEST
(
memˇched_°
 *
memc
)

614 
keys_°
 
	`keys
(200);

616 
libã°
::
vch¨_±r_t
::
ôî©‹
 
ôî

keys
.
	`begö
();

617 
ôî
 !
keys
.
	`íd
();

618 ++
ôî
)

620 
	`ã°_com∑ª_höt
(
MEMCACHED_SUCCESS
,

621 
	`memˇched_£t
(
memc
,

622 (*
ôî
), 36,

623 
NULL
, 0,

624 
	`time_t
(0), 
	`uöt32_t
(0)),

625 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

628 
±rdiff_t
 
lo›
= 0;Üoop < 20;Üoop++)

630 i‡(
	`øndom
() %2)

632 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

633 
	`memˇched_mgë
(
memc
, 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(), keys.
	`size
()));

635 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, 
NULL
);

636 
	`ã°_åue
(
ªsu…s
);

638 
size_t
 
ªsu…_cou¡
= 0;

639 
memˇched_ªtu∫_t
 
rc
;

640 
	`memˇched_„tch_ªsu…
(
memc
, 
ªsu…s
, &
rc
))

642 
ªsu…_cou¡
++;

644 
	`ã°_åue
(
keys
.
	`size
(Ë>
ªsu…_cou¡
);

648 
which_key

	`øndom
(Ë% (
keys
.
	`size
());

649 
size_t
 
vÆue_Àngth
;

650 
uöt32_t
 
Êags
;

651 
memˇched_ªtu∫_t
 
rc
;

652 *
out_vÆue

	`memˇched_gë
(
memc
, 
keys
.
	`key_©
(
which_key
), keys.
	`Àngth_©
(which_key),

653 &
vÆue_Àngth
, &
Êags
, &
rc
);

654 i‡(
rc
 =
MEMCACHED_NOTFOUND
)

658 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

660 
	`ã°_nuŒ
(
out_vÆue
);

661 
	`ã°_zîo
(
vÆue_Àngth
);

662 
	`ã°_zîo
(
Êags
);

666  
TEST_SUCCESS
;

667 
	}
}

669 
ã°_ªtu∫_t
 
	$ˇs2_ã°
(
memˇched_°
 *
memc
)

671 c⁄° *
keys
[]= {"fudge", "son", "food"};

672 
size_t
 
key_Àngth
[]= {5, 3, 4};

673 c⁄° *
vÆue
= "weÅheÖeople";

674 
size_t
 
vÆue_Àngth

	`°æí
("weÅheÖeople");

676 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush
(
memc
, 0));

678 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 
åue
));

680 
uöt32_t
 
x
= 0; x < 3; x++)

682 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

683 
	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

684 
keys
[
x
], 
key_Àngth
[x],

685 
	`time_t
(50), 
	`uöt32_t
(9)));

688 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

689 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

691 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, 
NULL
);

692 
	`ã°_åue
(
ªsu…s
);

694 
memˇched_ªtu∫_t
 
rc
;

695 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
,Ñesu…s, &
rc
);

696 
	`ã°_åue
(
ªsu…s
);

697 
	`ã°_åue
(
ªsu…s
->
ôem_ˇs
);

698 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

699 
	`ã°_åue
(
	`memˇched_ªsu…_ˇs
(
ªsu…s
));

701 
	`ã°_memcmp
(
vÆue
, "wêthê≥›À", 
	`°æí
("weÅheÖeople"));

702 
	`ã°_com∑ª
(
	`°æí
("wêthê≥›À"), 
vÆue_Àngth
);

703 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

705 
	`memˇched_ªsu…_‰ì
(
ªsu…s
);

707  
TEST_SUCCESS
;

708 
	}
}

710 
ã°_ªtu∫_t
 
	$ˇs_ã°
(
memˇched_°
 *
memc
)

712 c⁄° * 
keys
[2] = { 
__func__
, 
NULL
 };

713 
size_t
 
keyÀngths
[2] = { 
	`°æí
(
__func__
), 0 };

715 
memˇched_ªsu…_°
 
ªsu…s_obj
;

717 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush
(
memc
, 0));

719 
	`ã°_skù
(
åue
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
,Årue));

721 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

722 
	`memˇched_£t
(
memc
,

723 
	`ã°_lôîÆ_∑øm
(
__func__
),

724 
	`ã°_lôîÆ_∑øm
("weÅheÖeople"),

725 (
time_t
)0, (
uöt32_t
)0));

727 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

728 
	`memˇched_mgë
(
memc
, 
keys
, 
keyÀngths
, 1));

730 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

731 
	`ã°_åue
(
ªsu…s
);

733 
memˇched_ªtu∫_t
 
rc
;

734 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
);

735 
	`ã°_åue
(
ªsu…s
);

736 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

737 
	`ã°_åue
(
	`memˇched_ªsu…_ˇs
(
ªsu…s
));

738 
	`ã°_memcmp
("wêthê≥›À", 
	`memˇched_ªsu…_vÆue
(
ªsu…s
), 
	`ã°_lôîÆ_∑øm_size
("weÅheÖeople"));

739 
	`ã°_com∑ª
(
	`ã°_lôîÆ_∑øm_size
("weÅheÖeople"),

740 
	`°æí
(
	`memˇched_ªsu…_vÆue
(
ªsu…s
)));

742 
uöt64_t
 
ˇs

	`memˇched_ªsu…_ˇs
(
ªsu…s
);

745 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
);

746 
	`ã°_åue
(
rc
 =
MEMCACHED_END
);

747 
	`ã°_åue
(
ªsu…s
 =
NULL
);

750 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

751 
	`memˇched_ˇs
(
memc
,

752 
	`ã°_lôîÆ_∑øm
(
__func__
),

753 
	`ã°_lôîÆ_∑øm
("changeÅhe value"),

754 0, 0, 
ˇs
));

760 
	`ã°_com∑ª
(
MEMCACHED_DATA_EXISTS
,

761 
	`memˇched_ˇs
(
memc
,

762 
	`ã°_lôîÆ_∑øm
(
__func__
),

763 
	`ã°_lôîÆ_∑øm
("changeÅhe value"),

764 0, 0, 
ˇs
));

766 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

768  
TEST_SUCCESS
;

769 
	}
}

772 
ã°_ªtu∫_t
 
	$¥ïíd_ã°
(
memˇched_°
 *
memc
)

774 c⁄° *
key
= "fig";

775 c⁄° *
vÆue
= "people";

777 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

778 
	`memˇched_Êush
(
memc
, 0));

780 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

781 
	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

782 
vÆue
, 
	`°æí
(value),

783 
	`time_t
(0), 
	`uöt32_t
(0)));

785 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

786 
	`memˇched_¥ïíd
(
memc
, 
key
, 
	`°æí
(key),

787 "thê", 
	`°æí
("the "),

788 
	`time_t
(0), 
	`uöt32_t
(0)));

790 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

791 
	`memˇched_¥ïíd
(
memc
, 
key
, 
	`°æí
(key),

792 "wê", 
	`°æí
("we "),

793 
	`time_t
(0), 
	`uöt32_t
(0)));

795 
size_t
 
vÆue_Àngth
;

796 
uöt32_t
 
Êags
;

797 
memˇched_ªtu∫_t
 
rc
;

798 *
out_vÆue

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

799 &
vÆue_Àngth
, &
Êags
, &
rc
);

800 
	`ã°_memcmp
(
out_vÆue
, "wêthê≥›À", 
	`°æí
("weÅheÖeople"));

801 
	`ã°_com∑ª
(
	`°æí
("wêthê≥›À"), 
vÆue_Àngth
);

802 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

803 
	`‰ì
(
out_vÆue
);

805  
TEST_SUCCESS
;

806 
	}
}

812 
ã°_ªtu∫_t
 
	$memˇched_add_SUCCESS_TEST
(
memˇched_°
 *
memc
)

814 
memˇched_ªtu∫_t
 
rc
;

815 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
), 
NULL
, NULL, &
rc
));

816 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

818 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

819 
	`memˇched_add
(
memc
,

820 
	`ã°_lôîÆ_∑øm
(
__func__
),

821 
	`ã°_lôîÆ_∑øm
("try somethingÉlse"),

822 
	`time_t
(0), 
	`uöt32_t
(0)));

824  
TEST_SUCCESS
;

825 
	}
}

827 
ã°_ªtu∫_t
 
	$ªgªssi⁄_1067242_TEST
(
memˇched_°
 *
memc
)

829 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
,

830 
	`ã°_lôîÆ_∑øm
(
__func__
),

831 
	`ã°_lôîÆ_∑øm
("-2"),

834 
memˇched_ªtu∫_t
 
rc
;

835 * 
vÆue
;

836 
	`ã°_åue
((
vÆue

	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
), 
NULL
, NULL, &
rc
)));

837 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

838 
	`‰ì
(
vÆue
);

840 
size_t
 
x
= 0; x < 10; x++)

842 
uöt64_t
 
√w_numbî
;

843 
	`ã°_com∑ª
(
MEMCACHED_CLIENT_ERROR
,

844 
	`memˇched_ö¸emít
(
memc
,

845 
	`ã°_lôîÆ_∑øm
(
__func__
), 1, &
√w_numbî
));

846 
	`ã°_com∑ª
(
MEMCACHED_CLIENT_ERROR
, 
	`memˇched_œ°_îr‹
(
memc
));

847 
	`ã°_åue
((
vÆue

	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
), 
NULL
, NULL, &
rc
)));

848 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

849 
	`‰ì
(
vÆue
);

852  
TEST_SUCCESS
;

853 
	}
}

859 
ã°_ªtu∫_t
 
	$add_ã°
(
memˇched_°
 *
memc
)

861 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

862 
	`memˇched_£t
(
memc
,

863 
	`ã°_lôîÆ_∑øm
(
__func__
),

864 
	`ã°_lôîÆ_∑øm
("when we sanitize"),

865 
	`time_t
(0), 
	`uöt32_t
(0)));

867 
	`memˇched_quô
(
memc
);

869 
size_t
 
vÆue_Àngth
;

870 
uöt32_t
 
Êags
;

871 
memˇched_ªtu∫_t
 
rc
;

872 *
check_vÆue

	`memˇched_gë
(
memc
,

873 
	`ã°_lôîÆ_∑øm
(
__func__
),

874 &
vÆue_Àngth
, &
Êags
, &
rc
);

875 
	`ã°_memcmp
(
check_vÆue
, "whí wêßnôize", 
	`°æí
("when we sanitize"));

876 
	`ã°_com∑ª
(
	`ã°_lôîÆ_∑øm_size
("whí wêßnôize"), 
vÆue_Àngth
);

877 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

878 
	`‰ì
(
check_vÆue
);

880 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
Ë? 
MEMCACHED_DATA_EXISTS
 : 
MEMCACHED_NOTSTORED
,

881 
	`memˇched_add
(
memc
,

882 
	`ã°_lôîÆ_∑øm
(
__func__
),

883 
	`ã°_lôîÆ_∑øm
("try somethingÉlse"),

884 
	`time_t
(0), 
	`uöt32_t
(0)));

886  
TEST_SUCCESS
;

887 
	}
}

896 
ã°_ªtu∫_t
 
	$add_wøµî
(
memˇched_°
 *
memc
)

898 
max
= 10000;

899 #ifde‡
__sun


900 
max
= 10;

902 #ifde‡
__APPLE__


903 
max
= 10;

906 
uöt32_t
 
x
0; x < 
max
; x++)

908 
	`add_ã°
(
memc
);

911  
TEST_SUCCESS
;

912 
	}
}

914 
ã°_ªtu∫_t
 
	$ª∂a˚_ã°
(
memˇched_°
 *
memc
)

916 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

917 
	`memˇched_£t
(
memc
,

918 
	`ã°_lôîÆ_∑øm
(
__func__
),

919 
	`ã°_lôîÆ_∑øm
("when we sanitize"),

920 
	`time_t
(0), 
	`uöt32_t
(0)));

922 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

923 
	`memˇched_ª∂a˚
(
memc
,

924 
	`ã°_lôîÆ_∑øm
(
__func__
),

925 
	`ã°_lôîÆ_∑øm
("first we insert some data"),

926 
	`time_t
(0), 
	`uöt32_t
(0)));

928  
TEST_SUCCESS
;

929 
	}
}

931 
ã°_ªtu∫_t
 
	$dñëe_ã°
(
memˇched_°
 *
memc
)

933 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

934 
	`memˇched_£t
(
memc
,

935 
	`ã°_lôîÆ_∑øm
(
__func__
),

936 
	`ã°_lôîÆ_∑øm
("when we sanitize"),

937 
	`time_t
(0), 
	`uöt32_t
(0)));

939 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

940 
	`memˇched_dñëe
(
memc
,

941 
	`ã°_lôîÆ_∑øm
(
__func__
),

942 
	`time_t
(0)));

944  
TEST_SUCCESS
;

945 
	}
}

947 
ã°_ªtu∫_t
 
	$Êush_ã°
(
memˇched_°
 *
memc
)

949 
uöt64_t
 
quîy_id

	`memˇched_quîy_id
(
memc
);

950 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

951 
	`memˇched_Êush
(
memc
, 0));

952 
	`ã°_com∑ª
(
quîy_id
 +1, 
	`memˇched_quîy_id
(
memc
));

954  
TEST_SUCCESS
;

955 
	}
}

957 
memˇched_ªtu∫_t
 
	$£rvî_fun˘i⁄
(c⁄° 
memˇched_°
 *,

958 c⁄° 
memˇched_ö°™˚_°
 *,

962  
MEMCACHED_SUCCESS
;

963 
	}
}

965 
ã°_ªtu∫_t
 
	$memˇched_£rvî_curs‹_ã°
(
memˇched_°
 *
memc
)

967 
c⁄ãxt
[10];

968 
	`°∫˝y
(
c⁄ãxt
, "foo bad", (context));

969 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

971 
ˇŒbacks
[0]
£rvî_fun˘i⁄
;

972 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, 
c⁄ãxt
, 1);

973  
TEST_SUCCESS
;

974 
	}
}

976 
ã°_ªtu∫_t
 
	$bad_key_ã°
(
memˇched_°
 *
memc
)

978 
memˇched_ªtu∫_t
 
rc
;

979 c⁄° *
key
= "foo bad";

980 
uöt32_t
 
Êags
;

982 
uöt64_t
 
quîy_id

	`memˇched_quîy_id
(
memc
);

985 
	`ã°_skù
(
Ál£
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

987 
	`ã°_com∑ª
(
quîy_id
, 
	`memˇched_quîy_id
(
memc
));

989 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

990 
	`ã°_åue
(
memc_˛⁄e
);

992 
quîy_id

	`memˇched_quîy_id
(
memc_˛⁄e
);

993 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

994 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
åue
));

995 
	`ã°_com∑ª
(
quîy_id
, 
	`memˇched_quîy_id
(
memc_˛⁄e
));

998 i‡(
	`memˇched_behavi‹_gë
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
Ë=
Ál£
)

1000 
uöt64_t
 
bef‹e_quîy_id

	`memˇched_quîy_id
(
memc_˛⁄e
);

1002 
size_t
 
°rög_Àngth
;

1003 *
°rög

	`memˇched_gë
(
memc_˛⁄e
, 
key
, 
	`°æí
(key),

1004 &
°rög_Àngth
, &
Êags
, &
rc
);

1005 
	`ã°_com∑ª
(
MEMCACHED_BAD_KEY_PROVIDED
, 
rc
);

1006 
	`ã°_zîo
(
°rög_Àngth
);

1007 
	`ã°_Ál£
(
°rög
);

1009 
	`ã°_com∑ª
(
bef‹e_quîy_id
 +1, 
	`memˇched_quîy_id
(
memc_˛⁄e
));

1011 
quîy_id

	`memˇched_quîy_id
(
memc_˛⁄e
);

1012 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1013 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
Ál£
));

1014 
	`ã°_com∑ª
(
quîy_id
, 
	`memˇched_quîy_id
(
memc_˛⁄e
));

1016 
size_t
 
°rög_Àngth
;

1017 *
°rög

	`memˇched_gë
(
memc_˛⁄e
, 
key
, 
	`°æí
(key),

1018 &
°rög_Àngth
, &
Êags
, &
rc
);

1019 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

1020 
	`ã°_zîo
(
°rög_Àngth
);

1021 
	`ã°_Ál£
(
°rög
);

1025 c⁄° *
keys
[] = { "GoodKey", "Bad Key", "NotMine" };

1026 
size_t
 
key_Àngths
[] = { 7, 7, 7 };

1027 
quîy_id

	`memˇched_quîy_id
(
memc_˛⁄e
);

1028 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1029 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
åue
));

1030 
	`ã°_com∑ª
(
quîy_id
, 
	`memˇched_quîy_id
(
memc_˛⁄e
));

1032 
quîy_id

	`memˇched_quîy_id
(
memc_˛⁄e
);

1033 
	`ã°_com∑ª
(
MEMCACHED_BAD_KEY_PROVIDED
,

1034 
	`memˇched_mgë
(
memc_˛⁄e
, 
keys
, 
key_Àngths
, 3));

1035 
	`ã°_com∑ª
(
quîy_id
 +1, 
	`memˇched_quîy_id
(
memc_˛⁄e
));

1037 
quîy_id

	`memˇched_quîy_id
(
memc_˛⁄e
);

1039 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1040 
	`memˇched_mgë_by_key
(
memc_˛⁄e
, "foÿdaddy", 9, 
keys
, 
key_Àngths
, 1));

1041 
	`ã°_com∑ª
(
quîy_id
 +1, 
	`memˇched_quîy_id
(
memc_˛⁄e
));

1047 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1048 
	`memˇched_ˇŒback_£t
(
memc_˛⁄e
, 
MEMCACHED_CALLBACK_NAMESPACE
, 
NULL
));

1050 
libã°
::
vch¨_t
 
l⁄gkey
;

1052 
libã°
::
vch¨_t
::
ôî©‹
 
ô

l⁄gkey
.
	`begö
();

1053 
l⁄gkey
.
	`ö£π
(
ô
, 
MEMCACHED_MAX_KEY
, 'a');

1056 
	`ã°_com∑ª
(
l⁄gkey
.
	`size
(), 
	`size_t
(
MEMCACHED_MAX_KEY
));

1058 
size_t
 
°rög_Àngth
;

1060 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc_˛⁄e
, &
l⁄gkey
[0],Ü⁄gkey.
	`size
(Ë-1, &
°rög_Àngth
, &
Êags
, &
rc
));

1061 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

1062 
	`ã°_zîo
(
°rög_Àngth
);

1064 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc_˛⁄e
, &
l⁄gkey
[0],Ü⁄gkey.
	`size
(), &
°rög_Àngth
, &
Êags
, &
rc
));

1065 
	`ã°_com∑ª
(
MEMCACHED_BAD_KEY_PROVIDED
, 
rc
);

1066 
	`ã°_zîo
(
°rög_Àngth
);

1072 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1073 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
åue
));

1074 
size_t
 
°rög_Àngth
;

1075 *
°rög

	`memˇched_gë
(
memc_˛⁄e
, 
key
, 0,

1076 &
°rög_Àngth
, &
Êags
, &
rc
);

1077 
	`ã°_com∑ª
(
MEMCACHED_BAD_KEY_PROVIDED
, 
rc
);

1078 
	`ã°_zîo
(
°rög_Àngth
);

1079 
	`ã°_Ál£
(
°rög
);

1082 
	`memˇched_‰ì
(
memc_˛⁄e
);

1084  
TEST_SUCCESS
;

1085 
	}
}

1087 
	#READ_THROUGH_VALUE
 "£àf‹ me"

	)

1088 
memˇched_ªtu∫_t
 
	$ªad_through_åiggî
(
memˇched_°
 *,

1090 
size_t
,

1091 
memˇched_ªsu…_°
 *
ªsu…
)

1093  
	`memˇched_ªsu…_£t_vÆue
(
ªsu…
, 
READ_THROUGH_VALUE
, 
	`°æí
(READ_THROUGH_VALUE));

1094 
	}
}

1096 #i‚de‡
__INTEL_COMPILER


1097 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

1100 
ã°_ªtu∫_t
 
	$ªad_through
(
memˇched_°
 *
memc
)

1102 
memˇched_åiggî_key_‚
 
cb
(memˇched_åiggî_key_‚)
ªad_through_åiggî
;

1104 
size_t
 
°rög_Àngth
;

1105 
uöt32_t
 
Êags
;

1106 
memˇched_ªtu∫_t
 
rc
;

1107 *
°rög

	`memˇched_gë
(
memc
,

1108 
	`ã°_lôîÆ_∑øm
(
__func__
),

1109 &
°rög_Àngth
, &
Êags
, &
rc
);

1111 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

1112 
	`ã°_Ál£
(
°rög_Àngth
);

1113 
	`ã°_Ál£
(
°rög
);

1115 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1116 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_GET_FAILURE
, *(**)&
cb
));

1118 
°rög

	`memˇched_gë
(
memc
,

1119 
	`ã°_lôîÆ_∑øm
(
__func__
),

1120 &
°rög_Àngth
, &
Êags
, &
rc
);

1122 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1123 
	`ã°_com∑ª
((
READ_THROUGH_VALUE
Ë-1, 
°rög_Àngth
);

1124 
	`ã°_com∑ª
(0, 
°rög
[(
READ_THROUGH_VALUE
) -1]);

1125 
	`ã°_°rcmp
(
READ_THROUGH_VALUE
, 
°rög
);

1126 
	`‰ì
(
°rög
);

1128 
°rög

	`memˇched_gë
(
memc
,

1129 
	`ã°_lôîÆ_∑øm
(
__func__
),

1130 &
°rög_Àngth
, &
Êags
, &
rc
);

1132 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1133 
	`ã°_åue
(
°rög
);

1134 
	`ã°_com∑ª
(
°rög_Àngth
, (
READ_THROUGH_VALUE
) -1);

1135 
	`ã°_åue
(
°rög
[(
READ_THROUGH_VALUE
) -1] == 0);

1136 
	`ã°_°rcmp
(
READ_THROUGH_VALUE
, 
°rög
);

1137 
	`‰ì
(
°rög
);

1139  
TEST_SUCCESS
;

1140 
	}
}

1142 
ã°_ªtu∫_t
 
	$£t_ã°2
(
memˇched_°
 *
memc
)

1144 
uöt32_t
 
x
= 0; x < 10; x++)

1146 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

1147 
	`memˇched_£t
(
memc
,

1148 
	`ã°_lôîÆ_∑øm
("foo"),

1149 
	`ã°_lôîÆ_∑øm
("train inÅhe brain"),

1150 
	`time_t
(0), 
	`uöt32_t
(0)));

1153  
TEST_SUCCESS
;

1154 
	}
}

1156 
ã°_ªtu∫_t
 
	$£t_ã°3
(
memˇched_°
 *
memc
)

1158 
size_t
 
vÆue_Àngth
= 8191;

1160 
libã°
::
vch¨_t
 
vÆue
;

1161 
vÆue
.
	`ª£rve
(
vÆue_Àngth
);

1162 
uöt32_t
 
x
0; x < 
vÆue_Àngth
; x++)

1164 
vÆue
.
	`push_back
((
x
 % 127));

1168 
uöt32_t
 
x
= 0; x < 32; x++)

1170 
key
[16];

1172 
	`¢¥ötf
(
key
, (key), "foo%u", 
x
);

1174 
uöt64_t
 
quîy_id

	`memˇched_quîy_id
(
memc
);

1175 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

1176 
	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

1177 &
vÆue
[0], vÆue.
	`size
(),

1178 
	`time_t
(0), 
	`uöt32_t
(0)));

1179 
	`ã°_com∑ª
(
quîy_id
 +1, 
	`memˇched_quîy_id
(
memc
));

1182  
TEST_SUCCESS
;

1183 
	}
}

1185 
ã°_ªtu∫_t
 
	$mgë_íd
(
memˇched_°
 *
memc
)

1187 c⁄° *
keys
[]= { "foo", "foo2" };

1188 
size_t
 
Àngths
[]= { 3, 4 };

1189 c⁄° *
vÆues
[]= { "fjord", "41" };

1192 
size_t
 
x
0; x < 
	`ã°_¨øy_Àngth
(
keys
); x++)

1194 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1195 
	`memˇched_£t
(
memc
,

1196 
keys
[
x
], 
Àngths
[x],

1197 
vÆues
[
x
], 
	`°æí
(values[x]),

1198 
	`time_t
(0), 
	`uöt32_t
(0)));

1201 *
°rög
;

1202 
size_t
 
°rög_Àngth
;

1203 
uöt32_t
 
Êags
;

1206 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1207 
	`memˇched_mgë
(
memc
,

1208 
keys
, 
Àngths
,

1209 
	`ã°_¨øy_Àngth
(
keys
)));

1211 
key
[
MEMCACHED_MAX_KEY
];

1212 
size_t
 
key_Àngth
;

1213 
memˇched_ªtu∫_t
 
rc
;

1216 
size_t
 
x
0; x < 
	`ã°_¨øy_Àngth
(
keys
); x++)

1218 
°rög

	`memˇched_„tch
(
memc
, 
key
, &
key_Àngth
, &
°rög_Àngth
,

1219 &
Êags
, &
rc
);

1220 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1221 
vÆ
 = 0;

1222 i‡(
key_Àngth
 == 4)

1224 
vÆ
= 1;

1227 
	`ã°_com∑ª
(
°rög_Àngth
, 
	`°æí
(
vÆues
[
vÆ
]));

1228 
	`ã°_åue
(
	`°∫cmp
(
vÆues
[
vÆ
], 
°rög
, 
°rög_Àngth
) == 0);

1229 
	`‰ì
(
°rög
);

1233 
°rög

	`memˇched_„tch
(
memc
, 
key
, &
key_Àngth
, &
°rög_Àngth
, &
Êags
, &
rc
);

1234 
	`ã°_com∑ª
(
MEMCACHED_END
, 
rc
);

1235 
	`ã°_nuŒ
(
°rög
);

1238 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1239 
	`memˇched_mgë
(
memc
, 
keys
, 
Àngths
, 1));

1241 
°rög

	`memˇched_„tch
(
memc
, 
key
, &
key_Àngth
, &
°rög_Àngth
, &
Êags
, &
rc
);

1242 
	`ã°_com∑ª
(
key_Àngth
, 
Àngths
[0]);

1243 
	`ã°_åue
(
	`°∫cmp
(
keys
[0], 
key
, 
key_Àngth
) == 0);

1244 
	`ã°_com∑ª
(
°rög_Àngth
, 
	`°æí
(
vÆues
[0]));

1245 
	`ã°_åue
(
	`°∫cmp
(
vÆues
[0], 
°rög
, 
°rög_Àngth
) == 0);

1246 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1247 
	`‰ì
(
°rög
);

1250 
°rög

	`memˇched_„tch
(
memc
, 
key
, &
key_Àngth
, &
°rög_Àngth
, &
Êags
, &
rc
);

1251 
	`ã°_com∑ª
(
MEMCACHED_END
, 
rc
);

1252 
	`ã°_nuŒ
(
°rög
);

1254  
TEST_SUCCESS
;

1255 
	}
}

1258 
ã°_ªtu∫_t
 
	$°©s_£rvî«me_ã°
(
memˇched_°
 *
memc
)

1260 
memˇched_°©_°
 
memc_°©
;

1261 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

1262 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

1264 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
 
™d
 
	`memˇched_gë_ß¶_ˇŒbacks
(
memc
))

1266  
TEST_SKIPPED
;

1269 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_°©_£rvî«me
(&
memc_°©
, 
NULL
,

1270 
	`memˇched_£rvî_«me
(
ö°™˚
),

1271 
	`memˇched_£rvî_p‹t
(
ö°™˚
)));

1273  
TEST_SUCCESS
;

1274 
	}
}

1276 
ã°_ªtu∫_t
 
	$ö¸emít_ã°
(
memˇched_°
 *
memc
)

1278 
uöt64_t
 
√w_numbî
;

1280 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1281 
	`memˇched_£t
(
memc
,

1282 
	`ã°_lôîÆ_∑øm
("number"),

1283 
	`ã°_lôîÆ_∑øm
("0"),

1284 (
time_t
)0, (
uöt32_t
)0));

1286 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1287 
	`memˇched_ö¸emít
(
memc
, 
	`ã°_lôîÆ_∑øm
("numbî"), 1, &
√w_numbî
));

1288 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
√w_numbî
);

1290 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1291 
	`memˇched_ö¸emít
(
memc
, 
	`ã°_lôîÆ_∑øm
("numbî"), 1, &
√w_numbî
));

1292 
	`ã°_com∑ª
(
	`uöt64_t
(2), 
√w_numbî
);

1294  
TEST_SUCCESS
;

1295 
	}
}

1297 
ã°_ªtu∫_t
 
	$ö¸emít_wôh_öôül_ã°
(
memˇched_°
 *
memc
)

1299 
	`ã°_skù
(
åue
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

1301 
uöt64_t
 
√w_numbî
;

1302 
uöt64_t
 
öôül
= 0;

1304 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush_buf„rs
(
memc
));

1306 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1307 
	`memˇched_ö¸emít_wôh_öôül
(
memc
, 
	`ã°_lôîÆ_∑øm
("numbî"), 1, 
öôül
, 0, &
√w_numbî
));

1308 
	`ã°_com∑ª
(
√w_numbî
, 
öôül
);

1310 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1311 
	`memˇched_ö¸emít_wôh_öôül
(
memc
, 
	`ã°_lôîÆ_∑øm
("numbî"), 1, 
öôül
, 0, &
√w_numbî
));

1312 
	`ã°_com∑ª
(
√w_numbî
, (
öôül
 +1));

1314  
TEST_SUCCESS
;

1315 
	}
}

1317 
ã°_ªtu∫_t
 
	$de¸emít_ã°
(
memˇched_°
 *
memc
)

1319 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

1320 
	`memˇched_£t
(
memc
,

1321 
	`ã°_lôîÆ_∑øm
(
__func__
),

1322 
	`ã°_lôîÆ_∑øm
("3"),

1323 
	`time_t
(0), 
	`uöt32_t
(0)));

1326 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush_buf„rs
(
memc
));

1328 
uöt64_t
 
√w_numbî
;

1329 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1330 
	`memˇched_de¸emít
(
memc
,

1331 
	`ã°_lôîÆ_∑øm
(
__func__
),

1332 1, &
√w_numbî
));

1333 
	`ã°_com∑ª
(
	`uöt64_t
(2), 
√w_numbî
);

1335 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1336 
	`memˇched_de¸emít
(
memc
,

1337 
	`ã°_lôîÆ_∑øm
(
__func__
),

1338 1, &
√w_numbî
));

1339 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
√w_numbî
);

1341  
TEST_SUCCESS
;

1342 
	}
}

1344 
ã°_ªtu∫_t
 
	$de¸emít_wôh_öôül_ã°
(
memˇched_°
 *
memc
)

1346 
	`ã°_skù
(
åue
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

1348 
uöt64_t
 
öôül
= 3;

1350 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush_buf„rs
(
memc
));

1352 
uöt64_t
 
√w_numbî
;

1353 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1354 
	`memˇched_de¸emít_wôh_öôül
(
memc
,

1355 
	`ã°_lôîÆ_∑øm
(
__func__
),

1356 1, 
öôül
,

1357 0, &
√w_numbî
));

1358 
	`ã°_com∑ª
(
√w_numbî
, 
öôül
);

1360 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1361 
	`memˇched_de¸emít_wôh_öôül
(
memc
,

1362 
	`ã°_lôîÆ_∑øm
(
__func__
),

1363 1, 
öôül
,

1364 0, &
√w_numbî
));

1365 
	`ã°_com∑ª
(
√w_numbî
, (
öôül
 - 1));

1367  
TEST_SUCCESS
;

1368 
	}
}

1370 
ã°_ªtu∫_t
 
	$ö¸emít_by_key_ã°
(
memˇched_°
 *
memc
)

1372 c⁄° *
ma°î_key
= "foo";

1373 c⁄° *
key
= "number";

1374 c⁄° *
vÆue
= "0";

1376 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

1377 
	`memˇched_£t_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1378 
key
, 
	`°æí
(key),

1379 
vÆue
, 
	`°æí
(value),

1380 
	`time_t
(0), 
	`uöt32_t
(0)));

1383 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush_buf„rs
(
memc
));

1385 
uöt64_t
 
√w_numbî
;

1386 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1387 
	`memˇched_ö¸emít_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1388 
key
, 
	`°æí
(key), 1, &
√w_numbî
));

1389 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
√w_numbî
);

1391 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1392 
	`memˇched_ö¸emít_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1393 
key
, 
	`°æí
(key), 1, &
√w_numbî
));

1394 
	`ã°_com∑ª
(
	`uöt64_t
(2), 
√w_numbî
);

1396  
TEST_SUCCESS
;

1397 
	}
}

1399 
ã°_ªtu∫_t
 
	$ö¸emít_wôh_öôül_by_key_ã°
(
memˇched_°
 *
memc
)

1401 
	`ã°_skù
(
åue
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

1403 
uöt64_t
 
√w_numbî
;

1404 c⁄° *
ma°î_key
= "foo";

1405 c⁄° *
key
= "number";

1406 
uöt64_t
 
öôül
= 0;

1408 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1409 
	`memˇched_ö¸emít_wôh_öôül_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1410 
key
, 
	`°æí
(key),

1411 1, 
öôül
, 0, &
√w_numbî
));

1412 
	`ã°_com∑ª
(
√w_numbî
, 
öôül
);

1414 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1415 
	`memˇched_ö¸emít_wôh_öôül_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1416 
key
, 
	`°æí
(key),

1417 1, 
öôül
, 0, &
√w_numbî
));

1418 
	`ã°_com∑ª
(
√w_numbî
, (
öôül
 +1));

1420  
TEST_SUCCESS
;

1421 
	}
}

1423 
ã°_ªtu∫_t
 
	$de¸emít_by_key_ã°
(
memˇched_°
 *
memc
)

1425 
uöt64_t
 
√w_numbî
;

1426 c⁄° *
vÆue
= "3";

1428 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

1429 
	`memˇched_£t_by_key
(
memc
,

1430 
	`ã°_lôîÆ_∑øm
("foo"),

1431 
	`ã°_lôîÆ_∑øm
("number"),

1432 
vÆue
, 
	`°æí
(value),

1433 (
time_t
)0, (
uöt32_t
)0));

1435 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1436 
	`memˇched_de¸emít_by_key
(
memc
,

1437 
	`ã°_lôîÆ_∑øm
("foo"),

1438 
	`ã°_lôîÆ_∑øm
("number"),

1439 1, &
√w_numbî
));

1440 
	`ã°_com∑ª
(
	`uöt64_t
(2), 
√w_numbî
);

1442 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1443 
	`memˇched_de¸emít_by_key
(
memc
,

1444 
	`ã°_lôîÆ_∑øm
("foo"),

1445 
	`ã°_lôîÆ_∑øm
("number"),

1446 1, &
√w_numbî
));

1447 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
√w_numbî
);

1449  
TEST_SUCCESS
;

1450 
	}
}

1452 
ã°_ªtu∫_t
 
	$de¸emít_wôh_öôül_by_key_ã°
(
memˇched_°
 *
memc
)

1454 
	`ã°_skù
(
åue
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

1456 
uöt64_t
 
√w_numbî
;

1457 
uöt64_t
 
öôül
= 3;

1459 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1460 
	`memˇched_de¸emít_wôh_öôül_by_key
(
memc
,

1461 
	`ã°_lôîÆ_∑øm
("foo"),

1462 
	`ã°_lôîÆ_∑øm
("number"),

1463 1, 
öôül
, 0, &
√w_numbî
));

1464 
	`ã°_com∑ª
(
√w_numbî
, 
öôül
);

1466 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1467 
	`memˇched_de¸emít_wôh_öôül_by_key
(
memc
,

1468 
	`ã°_lôîÆ_∑øm
("foo"),

1469 
	`ã°_lôîÆ_∑øm
("number"),

1470 1, 
öôül
, 0, &
√w_numbî
));

1471 
	`ã°_com∑ª
(
√w_numbî
, (
öôül
 - 1));

1473  
TEST_SUCCESS
;

1474 
	}
}

1475 
ã°_ªtu∫_t
 
	$bö¨y_ö¸emít_wôh_¥efix_ã°
(
memˇched_°
 *
memc
)

1477 
	`ã°_skù
(
åue
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

1479 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, (*)"namespace:"));

1481 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

1482 
	`memˇched_£t
(
memc
,

1483 
	`ã°_lôîÆ_∑øm
("number"),

1484 
	`ã°_lôîÆ_∑øm
("0"),

1485 (
time_t
)0, (
uöt32_t
)0));

1487 
uöt64_t
 
√w_numbî
;

1488 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_ö¸emít
(
memc
,

1489 
	`ã°_lôîÆ_∑øm
("number"),

1490 1, &
√w_numbî
));

1491 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
√w_numbî
);

1493 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_ö¸emít
(
memc
,

1494 
	`ã°_lôîÆ_∑øm
("number"),

1495 1, &
√w_numbî
));

1496 
	`ã°_com∑ª
(
	`uöt64_t
(2), 
√w_numbî
);

1498  
TEST_SUCCESS
;

1499 
	}
}

1501 
ã°_ªtu∫_t
 
	$quô_ã°
(
memˇched_°
 *
memc
)

1503 c⁄° *
vÆue
= "sanfordánd sun";

1505 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

1506 
	`memˇched_£t
(
memc
,

1507 
	`ã°_lôîÆ_∑øm
(
__func__
),

1508 
vÆue
, 
	`°æí
(value),

1509 
	`time_t
(10), 
	`uöt32_t
(3)));

1510 
	`memˇched_quô
(
memc
);

1512 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

1513 
	`memˇched_£t
(
memc
,

1514 
	`ã°_lôîÆ_∑øm
(
__func__
),

1515 
vÆue
, 
	`°æí
(value),

1516 
	`time_t
(50), 
	`uöt32_t
(9)));

1518  
TEST_SUCCESS
;

1519 
	}
}

1521 
ã°_ªtu∫_t
 
	$mgë_ªsu…_ã°
(
memˇched_°
 *
memc
)

1523 c⁄° *
keys
[]= {"fudge", "son", "food"};

1524 
size_t
 
key_Àngth
[]= {5, 3, 4};

1526 
memˇched_ªsu…_°
 
ªsu…s_obj
;

1527 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

1528 
	`ã°_åue
(
ªsu…s
);

1529 
	`ã°_åue
(&
ªsu…s_obj
 =
ªsu…s
);

1532 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1533 
	`memˇched_Êush
(
memc
, 0));

1535 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1536 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

1538 
memˇched_ªtu∫_t
 
rc
;

1539 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
)))

1541 
	`ã°_åue
(
ªsu…s
);

1544 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
))Ë{ 
	`ã°_åue
(
Ál£
); };

1545 
	`ã°_Ál£
(
ªsu…s
);

1546 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

1548 
uöt32_t
 
x
= 0; x < 3; x++)

1550 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

1551 
keys
[
x
], 
key_Àngth
[x],

1552 (
time_t
)50, (
uöt32_t
)9);

1553 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

1556 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1557 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

1559 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
)))

1561 
	`ã°_åue
(
ªsu…s
);

1562 
	`ã°_åue
(&
ªsu…s_obj
 =
ªsu…s
);

1563 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1564 
	`ã°_memcmp
(
	`memˇched_ªsu…_key_vÆue
(
ªsu…s
),

1565 
	`memˇched_ªsu…_vÆue
(
ªsu…s
),

1566 
	`memˇched_ªsu…_Àngth
(
ªsu…s
));

1567 
	`ã°_com∑ª
(
	`memˇched_ªsu…_key_Àngth
(
ªsu…s
), 
	`memˇched_ªsu…_Àngth
(results));

1570 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

1572  
TEST_SUCCESS
;

1573 
	}
}

1575 
ã°_ªtu∫_t
 
	$mgë_ªsu…_Æloc_ã°
(
memˇched_°
 *
memc
)

1577 c⁄° *
keys
[]= {"fudge", "son", "food"};

1578 
size_t
 
key_Àngth
[]= {5, 3, 4};

1580 
memˇched_ªsu…_°
 *
ªsu…s
;

1583 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1584 
	`memˇched_Êush
(
memc
, 0));

1586 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1587 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

1589 
memˇched_ªtu∫_t
 
rc
;

1590 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, 
NULL
, &
rc
)))

1592 
	`ã°_åue
(
ªsu…s
);

1594 
	`ã°_Ál£
(
ªsu…s
);

1595 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

1597 
uöt32_t
 
x
= 0; x < 3; x++)

1599 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

1600 
keys
[
x
], 
key_Àngth
[x],

1601 (
time_t
)50, (
uöt32_t
)9);

1602 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

1605 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1606 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

1608 
uöt32_t
 
x
= 0;

1609 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, 
NULL
, &
rc
)))

1611 
	`ã°_åue
(
ªsu…s
);

1612 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1613 
	`ã°_com∑ª
(
	`memˇched_ªsu…_key_Àngth
(
ªsu…s
), 
	`memˇched_ªsu…_Àngth
(results));

1614 
	`ã°_memcmp
(
	`memˇched_ªsu…_key_vÆue
(
ªsu…s
),

1615 
	`memˇched_ªsu…_vÆue
(
ªsu…s
),

1616 
	`memˇched_ªsu…_Àngth
(
ªsu…s
));

1617 
	`memˇched_ªsu…_‰ì
(
ªsu…s
);

1618 
x
++;

1621  
TEST_SUCCESS
;

1622 
	}
}

1624 
ã°_ªtu∫_t
 
	$mgë_ªsu…_fun˘i⁄
(
memˇched_°
 *
memc
)

1626 c⁄° *
keys
[]= {"fudge", "son", "food"};

1627 
size_t
 
key_Àngth
[]= {5, 3, 4};

1628 
size_t
 
cou¡î
;

1629 
memˇched_execuã_‚
 
ˇŒbacks
[1];

1631 
uöt32_t
 
x
= 0; x < 3; x++)

1633 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

1634 
	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

1635 
keys
[
x
], 
key_Àngth
[x],

1636 
	`time_t
(50), 
	`uöt32_t
(9)));

1638 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush_buf„rs
(
memc
));

1639 
	`memˇched_quô
(
memc
);

1641 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1642 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

1644 
ˇŒbacks
[0]&
ˇŒback_cou¡î
;

1645 
cou¡î
= 0;

1647 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1648 
	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1));

1650 
	`ã°_com∑ª
(
	`size_t
(3), 
cou¡î
);

1652  
TEST_SUCCESS
;

1653 
	}
}

1655 
ã°_ªtu∫_t
 
	$mgë_ã°
(
memˇched_°
 *
memc
)

1657 c⁄° *
keys
[]= {"fudge", "son", "food"};

1658 
size_t
 
key_Àngth
[]= {5, 3, 4};

1660 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

1661 
size_t
 
ªtu∫_key_Àngth
;

1662 *
ªtu∫_vÆue
;

1663 
size_t
 
ªtu∫_vÆue_Àngth
;

1665 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1666 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

1668 
uöt32_t
 
Êags
;

1669 
memˇched_ªtu∫_t
 
rc
;

1670 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

1671 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)))

1673 
	`ã°_åue
(
ªtu∫_vÆue
);

1675 
	`ã°_Ál£
(
ªtu∫_vÆue
);

1676 
	`ã°_zîo
(
ªtu∫_vÆue_Àngth
);

1677 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

1679 
uöt32_t
 
x
= 0; x < 3; x++)

1681 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

1682 
keys
[
x
], 
key_Àngth
[x],

1683 (
time_t
)50, (
uöt32_t
)9);

1684 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

1686 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1687 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

1689 
uöt32_t
 
x
= 0;

1690 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

1691 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)))

1693 
	`ã°_åue
(
ªtu∫_vÆue
);

1694 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1695 i‡(
nŸ
 
memc
->
_«me•a˚
)

1697 
	`ã°_com∑ª
(
ªtu∫_key_Àngth
, 
ªtu∫_vÆue_Àngth
);

1698 
	`ã°_memcmp
(
ªtu∫_vÆue
, 
ªtu∫_key
, 
ªtu∫_vÆue_Àngth
);

1700 
	`‰ì
(
ªtu∫_vÆue
);

1701 
x
++;

1704  
TEST_SUCCESS
;

1705 
	}
}

1707 
ã°_ªtu∫_t
 
	$mgë_execuã
(
memˇched_°
 *
‹igöÆ_memc
)

1709 
	`ã°_skù
(
åue
, 
	`memˇched_behavi‹_gë
(
‹igöÆ_memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

1711 
memˇched_°
 *
memc

	`¸óã_sögÀ_ö°™˚_memˇched
(
‹igöÆ_memc
, "--BINARY-PROTOCOL");

1712 
	`ã°_åue
(
memc
);

1714 
keys_°
 
	`keys
(20480);

1717 
blob
[1024] = {0};

1719 
size_t
 
x
0; x < 
keys
.
	`size
(); ++x)

1721 
uöt64_t
 
quîy_id

	`memˇched_quîy_id
(
memc
);

1722 
memˇched_ªtu∫_t
 
rc

	`memˇched_add
(
memc
,

1723 
keys
.
	`key_©
(
x
), keys.
	`Àngth_©
(x),

1724 
blob
, (blob),

1726 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

1727 
	`ã°_com∑ª
(
quîy_id
 +1, 
	`memˇched_quîy_id
(
memc
));

1731 
size_t
 
cou¡î
= 0;

1732 
memˇched_execuã_‚
 
ˇŒbacks
[]{ &
ˇŒback_cou¡î
 };

1733 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1734 
	`memˇched_mgë_execuã
(
memc
,

1735 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(),

1736 
keys
.
	`size
(), 
ˇŒbacks
, &
cou¡î
, 1));

1739 
uöt64_t
 
quîy_id

	`memˇched_quîy_id
(
memc
);

1740 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1741 
	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1));

1742 
	`ã°_com∑ª
(
quîy_id
, 
	`memˇched_quîy_id
(
memc
));

1745 
	`ã°_com∑ª
(
keys
.
	`size
(), 
cou¡î
);

1748 
	`memˇched_‰ì
(
memc
);

1750  
TEST_SUCCESS
;

1751 
	}
}

1753 
ã°_ªtu∫_t
 
	$MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH_TEST
(
memˇched_°
 *
‹igöÆ_memc
)

1755 
	`ã°_skù
(
åue
, 
	`memˇched_behavi‹_gë
(
‹igöÆ_memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

1757 
memˇched_°
 *
memc

	`¸óã_sögÀ_ö°™˚_memˇched
(
‹igöÆ_memc
, "--BINARY-PROTOCOL");

1758 
	`ã°_åue
(
memc
);

1760 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
, 8));

1762 
keys_°
 
	`keys
(20480);

1765 
blob
[1024] = {0};

1767 
size_t
 
x
0; x < 
keys
.
	`size
(); ++x)

1769 
uöt64_t
 
quîy_id

	`memˇched_quîy_id
(
memc
);

1770 
memˇched_ªtu∫_t
 
rc

	`memˇched_add
(
memc
,

1771 
keys
.
	`key_©
(
x
), keys.
	`Àngth_©
(x),

1772 
blob
, (blob),

1774 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

1775 
	`ã°_com∑ª
(
quîy_id
 +1, 
	`memˇched_quîy_id
(
memc
));

1779 
size_t
 
cou¡î
= 0;

1780 
memˇched_execuã_‚
 
ˇŒbacks
[]{ &
ˇŒback_cou¡î
 };

1781 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1782 
	`memˇched_mgë_execuã
(
memc
,

1783 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(),

1784 
keys
.
	`size
(), 
ˇŒbacks
, &
cou¡î
, 1));

1787 
uöt64_t
 
quîy_id

	`memˇched_quîy_id
(
memc
);

1788 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1789 
	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1));

1790 
	`ã°_com∑ª
(
quîy_id
, 
	`memˇched_quîy_id
(
memc
));

1793 
	`ã°_com∑ª
(
keys
.
	`size
(), 
cou¡î
);

1796 
	`memˇched_‰ì
(
memc
);

1798  
TEST_SUCCESS
;

1799 
	}
}

1801 
	#REGRESSION_BINARY_VS_BLOCK_COUNT
 20480

	)

1802 
∑ús_°
 *
	gglobÆ_∑ús

NULL
;

1804 
ã°_ªtu∫_t
 
	$key_£tup
(
memˇched_°
 *
memc
)

1806 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_bö¨y
(
memc
));

1808 
globÆ_∑ús

	`∑ús_gíî©e
(
REGRESSION_BINARY_VS_BLOCK_COUNT
, 0);

1810  
TEST_SUCCESS
;

1811 
	}
}

1813 
ã°_ªtu∫_t
 
	$key_ã¨down
(
memˇched_°
 *)

1815 
	`∑ús_‰ì
(
globÆ_∑ús
);

1816 
globÆ_∑ús

NULL
;

1818  
TEST_SUCCESS
;

1819 
	}
}

1821 
ã°_ªtu∫_t
 
	$block_add_ªgªssi⁄
(
memˇched_°
 *
memc
)

1824 
±rdiff_t
 
x
0; x < 
REGRESSION_BINARY_VS_BLOCK_COUNT
; ++x)

1826 
libã°
::
vch¨_t
 
blob
;

1827 
libã°
::
vch¨
::
	`make
(
blob
, 1024);

1829 
memˇched_ªtu∫_t
 
rc

	`memˇched_add_by_key
(
memc
,

1830 
	`ã°_lôîÆ_∑øm
("bob"),

1831 
globÆ_∑ús
[
x
].
key
, globÆ_∑ús[x].
key_Àngth
,

1832 &
blob
[0], blob.
	`size
(),

1833 
	`time_t
(0), 
	`uöt32_t
(0));

1834 i‡(
rc
 =
MEMCACHED_MEMORY_ALLOCATION_FAILURE
)

1836 
Eº‹
 << 
	`memˇched_œ°_îr‹_mesßge
(
memc
);

1837  
TEST_SKIPPED
;

1839 
	`ã°_com∑ª
(*
memc
, 
MEMCACHED_SUCCESS
);

1840 
	`ã°_com∑ª
(
rc
, 
MEMCACHED_SUCCESS
);

1843  
TEST_SUCCESS
;

1844 
	}
}

1846 
ã°_ªtu∫_t
 
	$bö¨y_add_ªgªssi⁄
(
memˇched_°
 *
memc
)

1848 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 
åue
));

1849  
	`block_add_ªgªssi⁄
(
memc
);

1850 
	}
}

1852 
ã°_ªtu∫_t
 
	$gë_°©s_keys
(
memˇched_°
 *
memc
)

1854 **
°©_li°
;

1855 **
±r
;

1856 
memˇched_°©_°
 
memc_°©
;

1857 
memˇched_ªtu∫_t
 
rc
;

1859 
°©_li°

	`memˇched_°©_gë_keys
(
memc
, &
memc_°©
, &
rc
);

1860 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1861 
±r

°©_li°
; *ptr;Ötr++)

1862 
	`ã°_åue
(*
±r
);

1864 
	`‰ì
(
°©_li°
);

1866  
TEST_SUCCESS
;

1867 
	}
}

1869 
ã°_ªtu∫_t
 
	$vîsi⁄_°rög_ã°
(
memˇched_°
 *)

1871 
	`ã°_°rcmp
(
LIBMEMCACHED_VERSION_STRING
, 
	`memˇched_lib_vîsi⁄
());

1873  
TEST_SUCCESS
;

1874 
	}
}

1876 
ã°_ªtu∫_t
 
	$gë_°©s
(
memˇched_°
 *
memc
)

1878 
memˇched_ªtu∫_t
 
rc
;

1880 
memˇched_°©_°
 *
memc_°©

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

1881 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1882 
	`ã°_åue
(
memc_°©
);

1884 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

1886 **
°©_li°

	`memˇched_°©_gë_keys
(
memc
, 
memc_°©
+
x
, &
rc
);

1887 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1888 **
±r

°©_li°
; *ptr;Ötr++) {};

1890 
	`‰ì
(
°©_li°
);

1893 
	`memˇched_°©_‰ì
(
NULL
, 
memc_°©
);

1895  
TEST_SUCCESS
;

1896 
	}
}

1898 
ã°_ªtu∫_t
 
	$add_ho°_ã°
(
memˇched_°
 *
memc
)

1900 
£rvî«me
[]= "0.example.com";

1902 
memˇched_ªtu∫_t
 
rc
;

1903 
memˇched_£rvî_°
 *
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, 
£rvî«me
, 400, 0, &
rc
);

1904 
	`ã°_com∑ª
(1U, 
	`memˇched_£rvî_li°_cou¡
(
£rvîs
));

1906 
x
= 2; x < 20; x++)

1908 
buf„r
[
SMALL_STRING_LEN
];

1910 
	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
, "%u.exam∂e.com", 400+
x
);

1911 
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(£rvîs, 
buf„r
, 401, 0,

1912 &
rc
);

1913 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

1914 
	`ã°_com∑ª
(
x
, 
	`memˇched_£rvî_li°_cou¡
(
£rvîs
));

1917 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
));

1918 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
));

1920 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

1922  
TEST_SUCCESS
;

1923 
	}
}

1925 
ã°_ªtu∫_t
 
	$ªgªssi⁄_1048945_TEST
(
memˇched_°
*)

1927 
memˇched_ªtu∫
 
°©us
;

1929 
memˇched_£rvî_°
* 
li°

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, "a", 11211, 0, &
°©us
);

1930 
	`ã°_com∑ª
(
°©us
, 
MEMCACHED_SUCCESS
);

1932 
li°

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
÷i°, "b", 11211, 0, &
°©us
);

1933 
	`ã°_com∑ª
(
°©us
, 
MEMCACHED_SUCCESS
);

1935 
li°

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
÷i°, "c", 11211, 0, &
°©us
);

1936 
	`ã°_com∑ª
(
°©us
, 
MEMCACHED_SUCCESS
);

1938 
memˇched_°
* 
memc

	`memˇched_¸óã
(
NULL
);

1940 
°©us

	`memˇched_£rvî_push
(
memc
, 
li°
);

1941 
	`memˇched_£rvî_li°_‰ì
(
li°
);

1942 
	`ã°_com∑ª
(
°©us
, 
MEMCACHED_SUCCESS
);

1944 c⁄° 
memˇched_ö°™˚_°
 * 
£rvî

	`memˇched_£rvî_by_key
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
), &
°©us
);

1945 
	`ã°_åue
(
£rvî
);

1946 
	`ã°_com∑ª
(
°©us
, 
MEMCACHED_SUCCESS
);

1948 
	`memˇched_‰ì
(
memc
);

1950  
TEST_SUCCESS
;

1951 
	}
}

1953 
ã°_ªtu∫_t
 
	$memˇched_„tch_ªsu…_NOT_FOUND
(
memˇched_°
 *
memc
)

1955 
memˇched_ªtu∫_t
 
rc
;

1957 c⁄° *
key
= "not_found";

1958 
size_t
 
key_Àngth

	`ã°_lôîÆ_∑øm_size
("not_found");

1960 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

1961 
	`memˇched_mgë
(
memc
, &
key
, &
key_Àngth
, 1));

1963 
memˇched_ªsu…_°
 *
ªsu…

	`memˇched_„tch_ªsu…
(
memc
, 
NULL
, &
rc
);

1964 
	`ã°_nuŒ
(
ªsu…
);

1965 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

1967 
	`memˇched_ªsu…_‰ì
(
ªsu…
);

1969  
TEST_SUCCESS
;

1970 
	}
}

1972 
memˇched_ªtu∫_t
 
	$˛⁄e_ã°_ˇŒback
(
memˇched_°
 *, memcached_st *)

1974  
MEMCACHED_SUCCESS
;

1975 
	}
}

1977 
memˇched_ªtu∫_t
 
	$˛ónup_ã°_ˇŒback
(
memˇched_°
 *)

1979  
MEMCACHED_SUCCESS
;

1980 
	}
}

1982 
ã°_ªtu∫_t
 
	$ˇŒback_ã°
(
memˇched_°
 *
memc
)

1986 
x
= 5;

1987 *
ã°_±r
;

1988 
memˇched_ªtu∫_t
 
rc
;

1990 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_USER_DATA
, &
x
));

1991 
ã°_±r
(*)
	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_USER_DATA
, &
rc
);

1992 
	`ã°_åue
(*
ã°_±r
 =
x
);

1997 
memˇched_˛⁄e_‚
 
˛⁄e_cb
(memˇched_˛⁄e_‚)
˛⁄e_ã°_ˇŒback
;

1998 *
˛⁄e_cb_±r
*(**)&
˛⁄e_cb
;

1999 *
ãmp_fun˘i⁄

NULL
;

2001 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_CLONE_FUNCTION
, 
˛⁄e_cb_±r
));

2002 
memˇched_ªtu∫_t
 
rc
;

2003 
ãmp_fun˘i⁄

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_CLONE_FUNCTION
, &
rc
);

2004 
	`ã°_åue
(
ãmp_fun˘i⁄
 =
˛⁄e_cb_±r
);

2005 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2010 
memˇched_˛ónup_‚
 
˛ónup_cb
(memˇched_˛ónup_‚)
˛ónup_ã°_ˇŒback
;

2011 *
˛ónup_cb_±r
*(**)&
˛ónup_cb
;

2012 *
ãmp_fun˘i⁄

NULL
;

2013 
memˇched_ªtu∫_t
 
rc
;

2015 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_CLONE_FUNCTION
, 
˛ónup_cb_±r
));

2016 
ãmp_fun˘i⁄

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_CLONE_FUNCTION
, &
rc
);

2017 
	`ã°_åue
(
ãmp_fun˘i⁄
 =
˛ónup_cb_±r
);

2020  
TEST_SUCCESS
;

2021 
	}
}

2024 
ã°_ªtu∫_t
 
	$behavi‹_ã°
(
memˇched_°
 *
memc
)

2026 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 1);

2027 
	`ã°_com∑ª
(
åue
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
));

2029 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 1);

2030 
	`ã°_com∑ª
(
åue
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
));

2032 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, 
MEMCACHED_HASH_MD5
);

2033 
	`ã°_com∑ª
(
	`uöt64_t
(
MEMCACHED_HASH_MD5
), 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
));

2035 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

2036 
	`ã°_zîo
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
));

2038 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 0);

2039 
	`ã°_zîo
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
));

2041 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, 
MEMCACHED_HASH_DEFAULT
);

2042 
	`ã°_com∑ª
(
	`uöt64_t
(
MEMCACHED_HASH_DEFAULT
), 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
));

2044 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, 
MEMCACHED_HASH_CRC
);

2045 
	`ã°_com∑ª
(
	`uöt64_t
(
MEMCACHED_HASH_CRC
), 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
));

2047 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
));

2049 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
));

2051 
uöt64_t
 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
);

2052 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 
vÆue
 +1);

2053 
	`ã°_com∑ª
((
vÆue
 +1), 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
));

2055  
TEST_SUCCESS
;

2056 
	}
}

2058 
ã°_ªtu∫_t
 
	$MEMCACHED_BEHAVIOR_CORK_ã°
(
memˇched_°
 *
memc
)

2060 
	`ã°_com∑ª
(
MEMCACHED_DEPRECATED
,

2061 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_CORK
, 
åue
));

2065 
boﬁ
 
vÆue
(boﬁ)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_CORK
);

2066 
	`ã°_Ál£
(
vÆue
);

2069  
TEST_SUCCESS
;

2070 
	}
}

2073 
ã°_ªtu∫_t
 
	$MEMCACHED_BEHAVIOR_TCP_KEEPALIVE_ã°
(
memˇched_°
 *
memc
)

2075 
memˇched_ªtu∫_t
 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
, 
åue
);

2076 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_NOT_SUPPORTED
);

2078 
boﬁ
 
vÆue
(boﬁ)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
);

2080 i‡(
	`memˇched_suc˚ss
(
rc
))

2082 
	`ã°_åue
(
vÆue
);

2086 
	`ã°_Ál£
(
vÆue
);

2089  
TEST_SUCCESS
;

2090 
	}
}

2093 
ã°_ªtu∫_t
 
	$MEMCACHED_BEHAVIOR_TCP_KEEPIDLE_ã°
(
memˇched_°
 *
memc
)

2095 
memˇched_ªtu∫_t
 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
, 
åue
);

2096 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_NOT_SUPPORTED
);

2098 
boﬁ
 
vÆue
(boﬁ)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
);

2100 i‡(
	`memˇched_suc˚ss
(
rc
))

2102 
	`ã°_åue
(
vÆue
);

2106 
	`ã°_Ál£
(
vÆue
);

2109  
TEST_SUCCESS
;

2110 
	}
}

2113 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug4
(
memˇched_°
 *
memc
)

2115 c⁄° *
keys
[]= {"fudge", "son", "food"};

2116 
size_t
 
key_Àngth
[]= {5, 3, 4};

2119 
	`memˇched_£rvîs_ª£t
(
memc
);

2123 
	`ã°_com∑ª
(
MEMCACHED_NO_SERVERS
,

2124 
	`memˇched_Êush
(
memc
, 0));

2126 
	`ã°_com∑ª
(
MEMCACHED_NO_SERVERS
,

2127 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

2130 
keys_ªtu∫ed
;

2131 
memˇched_ªtu∫_t
 
rc
;

2132 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`„tch_Æl_ªsu…s
(
memc
, 
keys_ªtu∫ed
, 
rc
));

2133 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

2134 
	`ã°_zîo
(
keys_ªtu∫ed
);

2137 
uöt32_t
 
x
= 0; x < 3; x++)

2139 
	`ã°_com∑ª
(
MEMCACHED_NO_SERVERS
,

2140 
	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

2141 
keys
[
x
], 
key_Àngth
[x],

2142 (
time_t
)50, (
uöt32_t
)9));

2145 
	`ã°_com∑ª
(
MEMCACHED_NO_SERVERS
,

2146 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3));

2149 *
ªtu∫_vÆue
;

2150 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2151 
memˇched_ªtu∫_t
 
rc
;

2152 
size_t
 
ªtu∫_key_Àngth
;

2153 
size_t
 
ªtu∫_vÆue_Àngth
;

2154 
uöt32_t
 
Êags
;

2155 
uöt32_t
 
x
= 0;

2156 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2157 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)))

2159 
	`ã°_åue
(
ªtu∫_vÆue
);

2160 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2161 
	`ã°_åue
(
ªtu∫_key_Àngth
 =
ªtu∫_vÆue_Àngth
);

2162 
	`ã°_memcmp
(
ªtu∫_vÆue
, 
ªtu∫_key
, 
ªtu∫_vÆue_Àngth
);

2163 
	`‰ì
(
ªtu∫_vÆue
);

2164 
x
++;

2168  
TEST_SUCCESS
;

2169 
	}
}

2171 
	#VALUE_SIZE_BUG5
 1048064

	)

2172 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug5
(
memˇched_°
 *
memc
)

2174 c⁄° *
keys
[]= {"036790384900", "036790384902", "036790384904", "036790384906"};

2175 
size_t
 
key_Àngth
[]{
	`°æí
("036790384900"), strlen("036790384902"), strlen("036790384904"), strlen("036790384906")};

2176 *
vÆue
;

2177 
size_t
 
vÆue_Àngth
;

2178 
uöt32_t
 
Êags
;

2179 *
ö£π_d©a

	`√w
 (
°d
::
nŸhrow
Ë[
VALUE_SIZE_BUG5
];

2181 
uöt32_t
 
x
0; x < 
VALUE_SIZE_BUG5
; x++)

2183 
ö£π_d©a
[
x
](sig√d )
	`ønd
();

2186 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2187 
	`memˇched_Êush
(
memc
, 0));

2189 
memˇched_ªtu∫_t
 
rc
;

2190 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
keys
[0], 
key_Àngth
[0], &
vÆue_Àngth
, &
Êags
, &
rc
));

2191 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2192 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 4));

2194 
cou¡
;

2195 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`„tch_Æl_ªsu…s
(
memc
, 
cou¡
, 
rc
));

2196 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

2197 
	`ã°_zîo
(
cou¡
);

2199 
uöt32_t
 
x
= 0; x < 4; x++)

2201 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2202 
	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

2203 
ö£π_d©a
, 
VALUE_SIZE_BUG5
,

2204 (
time_t
)0, (
uöt32_t
)0));

2207 
uöt32_t
 
x
= 0; x < 10; x++)

2209 
vÆue

	`memˇched_gë
(
memc
, 
keys
[0], 
key_Àngth
[0],

2210 &
vÆue_Àngth
, &
Êags
, &
rc
);

2211 
	`ã°_com∑ª
(
rc
, 
MEMCACHED_SUCCESS
);

2212 
	`ã°_åue
(
vÆue
);

2213 ::
	`‰ì
(
vÆue
);

2215 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2216 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 4));

2218 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`„tch_Æl_ªsu…s
(
memc
, 
cou¡
));

2219 
	`ã°_com∑ª
(4U, 
cou¡
);

2221 
dñëe
 [] 
ö£π_d©a
;

2223  
TEST_SUCCESS
;

2224 
	}
}

2226 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug6
(
memˇched_°
 *
memc
)

2228 c⁄° *
keys
[]= {"036790384900", "036790384902", "036790384904", "036790384906"};

2229 
size_t
 
key_Àngth
[]{
	`°æí
("036790384900"), strlen("036790384902"), strlen("036790384904"), strlen("036790384906")};

2230 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2231 
size_t
 
ªtu∫_key_Àngth
;

2232 *
vÆue
;

2233 
size_t
 
vÆue_Àngth
;

2234 
uöt32_t
 
Êags
;

2235 *
ö£π_d©a

	`√w
 (
°d
::
nŸhrow
Ë[
VALUE_SIZE_BUG5
];

2237 
uöt32_t
 
x
0; x < 
VALUE_SIZE_BUG5
; x++)

2239 
ö£π_d©a
[
x
](sig√d )
	`ønd
();

2242 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush
(
memc
, 0));

2244 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`c⁄fúm_keys_d⁄t_exi°
(
memc
, 
keys
, 
	`ã°_¨øy_Àngth
(keys)));

2248 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2249 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 4));

2251 
memˇched_ªtu∫_t
 
rc
;

2252 
uöt32_t
 
cou¡
= 0;

2253 (
vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2254 &
vÆue_Àngth
, &
Êags
, &
rc
)))

2256 
cou¡
++;

2258 
	`ã°_zîo
(
cou¡
);

2259 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

2261 
uöt32_t
 
x
0; x < 
	`ã°_¨øy_Àngth
(
keys
); x++)

2263 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2264 
	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

2265 
ö£π_d©a
, 
VALUE_SIZE_BUG5
,

2266 (
time_t
)0, (
uöt32_t
)0));

2268 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`c⁄fúm_keys_exi°
(
memc
, 
keys
, 
	`ã°_¨øy_Àngth
(keys)));

2270 
uöt32_t
 
x
= 0; x < 2; x++)

2272 
vÆue

	`memˇched_gë
(
memc
, 
keys
[0], 
key_Àngth
[0],

2273 &
vÆue_Àngth
, &
Êags
, &
rc
);

2274 
	`ã°_åue
(
vÆue
);

2275 
	`‰ì
(
vÆue
);

2277 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2278 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 4));

2280 
cou¡
= 3; count; count--)

2282 
vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2283 &
vÆue_Àngth
, &
Êags
, &
rc
);

2284 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2285 
	`ã°_memcmp
(
vÆue
, 
ö£π_d©a
, 
vÆue_Àngth
);

2286 
	`ã°_åue
(
vÆue_Àngth
);

2287 
	`‰ì
(
vÆue
);

2290 
dñëe
 [] 
ö£π_d©a
;

2292  
TEST_SUCCESS
;

2293 
	}
}

2295 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug8
(
memˇched_°
 *)

2297 
memˇched_ªtu∫_t
 
rc
;

2298 
memˇched_°
 *
möe
;

2299 
memˇched_°
 *
memc_˛⁄e
;

2301 
memˇched_£rvî_°
 *
£rvîs
;

2302 c⁄° *
£rvî_li°
= "memcache1.memcache.bk.sapo.pt:11211, memcache1.memcache.bk.sapo.pt:11212, memcache1.memcache.bk.sapo.pt:11213, memcache1.memcache.bk.sapo.pt:11214, memcache2.memcache.bk.sapo.pt:11211, memcache2.memcache.bk.sapo.pt:11212, memcache2.memcache.bk.sapo.pt:11213, memcache2.memcache.bk.sapo.pt:11214";

2304 
£rvîs

	`memˇched_£rvîs_∑r£
(
£rvî_li°
);

2305 
	`ã°_åue
(
£rvîs
);

2307 
möe

	`memˇched_¸óã
(
NULL
);

2308 
rc

	`memˇched_£rvî_push
(
möe
, 
£rvîs
);

2309 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2310 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

2312 
	`ã°_åue
(
möe
);

2313 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
möe
);

2315 
	`memˇched_quô
(
möe
);

2316 
	`memˇched_quô
(
memc_˛⁄e
);

2319 
	`memˇched_‰ì
(
möe
);

2320 
	`memˇched_‰ì
(
memc_˛⁄e
);

2322  
TEST_SUCCESS
;

2323 
	}
}

2326 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug7
(
memˇched_°
 *
memc
)

2328 *
ö£π_d©a

	`√w
 (
°d
::
nŸhrow
Ë[
VALUE_SIZE_BUG5
];

2329 
	`ã°_åue
(
ö£π_d©a
);

2331 
size_t
 
x
0; x < 
VALUE_SIZE_BUG5
; x++)

2333 
ö£π_d©a
[
x
](sig√d )
	`ønd
();

2336 
	`memˇched_Êush
(
memc
, 0);

2338 c⁄° *
keys
= "036790384900";

2339 
size_t
 
key_Àngth

	`°æí
(
keys
);

2340 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
, 
keys
, 
key_Àngth
,

2341 
ö£π_d©a
, 
VALUE_SIZE_BUG5
,

2342 
	`time_t
(0), 245U));

2344 
memˇched_ªtu∫_t
 
rc
;

2345 
size_t
 
vÆue_Àngth
;

2346 
uöt32_t
 
Êags
= 0;

2347 *
vÆue

	`memˇched_gë
(
memc
, 
keys
, 
key_Àngth
,

2348 &
vÆue_Àngth
, &
Êags
, &
rc
);

2349 
	`ã°_com∑ª
(245U, 
Êags
);

2350 
	`ã°_åue
(
vÆue
);

2351 
	`‰ì
(
vÆue
);

2353 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_mgë
(
memc
, &
keys
, &
key_Àngth
, 1));

2355 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2356 
size_t
 
ªtu∫_key_Àngth
;

2357 
Êags
= 0;

2358 
vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2359 &
vÆue_Àngth
, &
Êags
, &
rc
);

2360 
	`ã°_com∑ª
(
	`uöt32_t
(245), 
Êags
);

2361 
	`ã°_åue
(
vÆue
);

2362 
	`‰ì
(
vÆue
);

2363 
dñëe
 [] 
ö£π_d©a
;

2366  
TEST_SUCCESS
;

2367 
	}
}

2369 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug9
(
memˇched_°
 *
memc
)

2371 c⁄° *
keys
[]= {"UDATA:edevil@sapo.pt", "fudge&*@#", "for^#@&$not"};

2372 
size_t
 
key_Àngth
[3];

2373 
uöt32_t
 
Êags
;

2374 
cou¡
= 0;

2376 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2377 
size_t
 
ªtu∫_key_Àngth
;

2378 *
ªtu∫_vÆue
;

2379 
size_t
 
ªtu∫_vÆue_Àngth
;

2382 
key_Àngth
[0]
	`°æí
("UDATA:edevil@sapo.pt");

2383 
key_Àngth
[1]
	`°æí
("fudge&*@#");

2384 
key_Àngth
[2]
	`°æí
("for^#@&$not");

2387 
x
= 0; x < 3; x++)

2389 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

2390 
keys
[
x
], 
key_Àngth
[x],

2391 (
time_t
)50, (
uöt32_t
)9);

2392 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2395 
memˇched_ªtu∫_t
 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

2396 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2399 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2400 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)Ë!
NULL
)

2402 
	`ã°_åue
(
ªtu∫_vÆue
);

2403 
	`‰ì
(
ªtu∫_vÆue
);

2404 
cou¡
++;

2406 
	`ã°_com∑ª
(3U, 
cou¡
);

2408  
TEST_SUCCESS
;

2409 
	}
}

2412 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug10
(
memˇched_°
 *
memc
)

2414 
	`ã°_skù
(
memc
->
£rvîs
[0].
ty≥
, 
MEMCACHED_CONNECTION_TCP
);

2416 
size_t
 
vÆue_Àngth
= 512;

2417 
£t
= 1;

2418 
memˇched_°
 *
m˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

2420 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
£t
);

2421 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
£t
);

2422 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
, 
	`uöt64_t
(0));

2424 
libã°
::
vch¨_t
 
vÆue
;

2425 
vÆue
.
	`ª£rve
(
vÆue_Àngth
);

2426 
uöt32_t
 
x
0; x < 
vÆue_Àngth
; x++)

2428 
vÆue
.
	`push_back
((
x
 % 127));

2431 
x
= 1; x <= 100000; ++x)

2433 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
m˛⁄e
,

2434 
	`ã°_lôîÆ_∑øm
("foo"),

2435 &
vÆue
[0], vÆue.
	`size
(),

2438 
	`ã°_åue
((
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_WRITE_FAILURE
 o∏r¯=
MEMCACHED_BUFFERED
 o∏r¯=
MEMCACHED_TIMEOUT
 o∏r¯=
MEMCACHED_CONNECTION_FAILURE


2439 
‹
 
rc
 =
MEMCACHED_SERVER_TEMPORARILY_DISABLED
));

2441 i‡(
rc
 =
MEMCACHED_WRITE_FAILURE
 
‹
Ñ¯=
MEMCACHED_TIMEOUT
)

2443 
x
--;

2447 
	`memˇched_‰ì
(
m˛⁄e
);

2449  
TEST_SUCCESS
;

2450 
	}
}

2455 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug11
(
memˇched_°
 *
memc
)

2457 
memˇched_°
 *
m˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

2459 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
åue
);

2460 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
åue
);

2461 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
, 
	`size_t
(-1));

2463 
	`ã°_com∑ª
(-1, 
	`öt32_t
(
	`memˇched_behavi‹_gë
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
)));

2466 
libã°
::
vch¨_t
 
vÆue
;

2467 
vÆue
.
	`ª£rve
(512);

2468 
x
= 0; x < 512; x++)

2470 
vÆue
.
	`push_back
((
x
 % 127));

2473 
x
= 1; x <= 100000; ++x)

2475 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
m˛⁄e
, 
	`ã°_lôîÆ_∑øm
("foo"), &
vÆue
[0], vÆue.
	`size
(), 0, 0);

2476 ()
rc
;

2479 
	`memˇched_‰ì
(
m˛⁄e
);

2481  
TEST_SUCCESS
;

2482 
	}
}

2487 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug12
(
memˇched_°
 *
memc
)

2489 
memˇched_ªtu∫_t
 
rc
;

2490 
uöt32_t
 
Êags
;

2491 
size_t
 
vÆue_Àngth
;

2492 *
vÆue
;

2493 
uöt64_t
 
numbî_vÆue
;

2495 
vÆue

	`memˇched_gë
(
memc
, "autoö¸emít", 
	`°æí
("autoincrement"),

2496 &
vÆue_Àngth
, &
Êags
, &
rc
);

2497 
	`ã°_nuŒ
(
vÆue
);

2498 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

2500 
rc

	`memˇched_ö¸emít
(
memc
, "autoö¸emít", 
	`°æí
("autoincrement"),

2501 1, &
numbî_vÆue
);

2502 
	`ã°_nuŒ
(
vÆue
);

2504 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) == 1)

2506 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2510 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

2513 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2514 
	`memˇched_£t
(
memc
, "autoö¸emít", 
	`°æí
("autoincrement"), "1", 1, 0, 0));

2516 
vÆue

	`memˇched_gë
(
memc
, "autoö¸emít", 
	`°æí
("autoö¸emít"), &
vÆue_Àngth
, &
Êags
, &
rc
);

2517 
	`ã°_åue
(
vÆue
);

2518 
	`‰ì
(
vÆue
);

2520 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2521 
	`memˇched_ö¸emít
(
memc
, "autoö¸emít", 
	`°æí
("autoö¸emít"), 1, &
numbî_vÆue
));

2522 
	`ã°_com∑ª
(2UL, 
numbî_vÆue
);

2524  
TEST_SUCCESS
;

2525 
	}
}

2531 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug13
(
memˇched_°
 *
memc
)

2533 
key
[] = "key34567890";

2535 
comm™dFú°
[]= "set key34567890 0 0 ";

2536 
comm™dLa°
[] = " \r\n";

2537 
size_t
 
comm™dLígth
;

2539 
comm™dLígth
 = 
	`°æí
(
comm™dFú°
Ë+ såÀn(
comm™dLa°
) + 4;

2541 
size_t
 
ovîÊowSize
 = 
MEMCACHED_MAX_BUFFER
 - 
comm™dLígth
;

2543 
size_t
 
ã°Size

ovîÊowSize
 - 1;ÅestSize < overflowSize + 1;ÅestSize++)

2545 *
ovîÊow

	`√w
 (
°d
::
nŸhrow
Ë[
ã°Size
];

2546 
	`ã°_åue
(
ovîÊow
);

2548 
	`mem£t
(
ovîÊow
, 'x', 
ã°Size
);

2549 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2550 
	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

2551 
ovîÊow
, 
ã°Size
, 0, 0));

2552 
dñëe
 [] 
ovîÊow
;

2555  
TEST_SUCCESS
;

2556 
	}
}

2565 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug14
(
memˇched_°
 *
memc
)

2567 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
åue
);

2569 
libã°
::
vch¨_t
 
vÆue
;

2570 
vÆue
.
	`ª£rve
(18000);

2571 
±rdiff_t
 
x
= 0; x < 18000; x++)

2573 
vÆue
.
	`push_back
((Ë(
x
 % 127));

2576 
size_t
 
cuºít_Àngth
1; cuºít_Àngth < 
vÆue
.
	`size
(); current_length++)

2578 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"),

2579 &
vÆue
[0], 
cuºít_Àngth
,

2580 (
time_t
)0, (
uöt32_t
)0);

2581 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

2583 
size_t
 
°rög_Àngth
;

2584 
uöt32_t
 
Êags
;

2585 *
°rög

	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"),

2586 &
°rög_Àngth
, &
Êags
, &
rc
);

2588 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2589 
	`ã°_com∑ª
(
°rög_Àngth
, 
cuºít_Àngth
);

2590 
buf„r
[1024];

2591 
	`¢¥ötf
(
buf„r
, (buf„r), "%u", 
	`uöt32_t
(
°rög_Àngth
));

2592 
	`ã°_memcmp
(
°rög
, &
vÆue
[0], 
°rög_Àngth
);

2594 
	`‰ì
(
°rög
);

2597  
TEST_SUCCESS
;

2598 
	}
}

2603 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug15
(
memˇched_°
 *
memc
)

2605 
uöt32_t
 
x
= 0; x < 2; x++)

2607 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("mykey"),

2608 
NULL
, 0,

2609 (
time_t
)0, (
uöt32_t
)0);

2611 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2613 
size_t
 
Àngth
;

2614 
uöt32_t
 
Êags
;

2615 *
vÆue

	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("mykey"),

2616 &
Àngth
, &
Êags
, &
rc
);

2618 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2619 
	`ã°_Ál£
(
vÆue
);

2620 
	`ã°_zîo
(
Àngth
);

2621 
	`ã°_zîo
(
Êags
);

2623 
vÆue

	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("mykey"),

2624 &
Àngth
, &
Êags
, &
rc
);

2626 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2627 
	`ã°_nuŒ
(
vÆue
);

2628 
	`ã°_zîo
(
Àngth
);

2629 
	`ã°_zîo
(
Êags
);

2632  
TEST_SUCCESS
;

2633 
	}
}

2636 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug16
(
memˇched_°
 *
memc
)

2638 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("mykey"),

2639 
NULL
, 0,

2640 (
time_t
)0, 
UINT32_MAX
));

2643 
size_t
 
Àngth
;

2644 
uöt32_t
 
Êags
;

2645 
memˇched_ªtu∫_t
 
rc
;

2646 *
vÆue

	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("mykey"),

2647 &
Àngth
, &
Êags
, &
rc
);

2649 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2650 
	`ã°_nuŒ
(
vÆue
);

2651 
	`ã°_zîo
(
Àngth
);

2652 
	`ã°_com∑ª
(
Êags
, 
UINT32_MAX
);

2654  
TEST_SUCCESS
;

2655 
	}
}

2657 #i‡!
deföed
(
__sun
Ë&& !deföed(
__O≥nBSD__
)

2659 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug17
(
memˇched_°
 *
memc
)

2661 c⁄° *
key
= "Ë±ÜÁì£";

2662 c⁄° *
vÆue
="Êàë‰ª¨Âú®ÁÇéÁÉ≠ÊäëÈÉÅÁöÑÂ§èÂ§©Êó†Ê≥ïÂÅúÊ≠¢Ë±ÜÁì£";

2663 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

2664 
vÆue
, 
	`°æí
(value),

2665 (
time_t
)0, 0);

2667 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2669 
size_t
 
Àngth
;

2670 
uöt32_t
 
Êags
;

2671 *
vÆue2

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

2672 &
Àngth
, &
Êags
, &
rc
);

2674 
	`ã°_com∑ª
(
Àngth
, 
	`°æí
(
vÆue
));

2675 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2676 
	`ã°_memcmp
(
vÆue
, 
vÆue2
, 
Àngth
);

2677 
	`‰ì
(
vÆue2
);

2679  
TEST_SUCCESS
;

2680 
	}
}

2687 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug19
(
memˇched_°
 *)

2689 
memˇched_ªtu∫_t
 
ªs
;

2691 
memˇched_°
 *
memc

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--server=localhost:11311/?100 --server=localhost:11312/?100"));

2693 c⁄° 
memˇched_ö°™˚_°
 * 
£rvî

	`memˇched_£rvî_by_key
(
memc
, "a", 1, &
ªs
);

2694 
	`ã°_åue
(
£rvî
);

2696 
	`memˇched_‰ì
(
memc
);

2698  
TEST_SUCCESS
;

2699 
	}
}

2702 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug20
(
memˇched_°
 *
memc
)

2704 c⁄° *
key
= "abc";

2705 
size_t
 
key_Àn

	`°æí
("abc");

2707 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 
åue
));

2709 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2710 
	`memˇched_£t
(
memc
,

2711 
	`ã°_lôîÆ_∑øm
("abc"),

2712 
	`ã°_lôîÆ_∑øm
("foobar"),

2713 (
time_t
)0, (
uöt32_t
)0));

2715 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2716 
	`memˇched_mgë
(
memc
, &
key
, &
key_Àn
, 1));

2718 
memˇched_ªsu…_°
 
ªsu…_obj
;

2719 
memˇched_ªsu…_°
 *
ªsu…

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…_obj
);

2720 
	`ã°_åue
(
ªsu…
);

2722 
	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…_obj
);

2723 
memˇched_ªtu∫_t
 
°©us
;

2724 
ªsu…

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…_obj
, &
°©us
);

2726 
	`ã°_åue
(
ªsu…
);

2727 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
°©us
);

2729 
	`memˇched_ªsu…_‰ì
(
ªsu…
);

2731  
TEST_SUCCESS
;

2732 
	}
}

2742 
__©åibuã__
((
n‹ëu∫
)Ë
	$Áû
()

2744 
	`Áèl_as£π
(0);

2745 
	}
}

2748 
ã°_ªtu∫_t
 
	$_u£r_suµlõd_bug21
(
memˇched_°
* 
memc
, 
size_t
 
key_cou¡
)

2750 #ifde‡
WIN32


2751 ()
memc
;

2752 ()
key_cou¡
;

2753  
TEST_SKIPPED
;

2755 (*
ﬁdÆ¨m
)();

2757 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

2758 
	`ã°_åue
(
memc_˛⁄e
);

2761 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 
åue
));

2764 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush
(
memc_˛⁄e
, 0));

2766 
keys_°
 
	`keys
(
key_cou¡
);

2768 
ﬁdÆ¨m

	`sig«l
(
SIGALRM
, 
Áû
);

2769 
	`Æ¨m
(5);

2771 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
,

2772 
	`memˇched_mgë
(
memc_˛⁄e
, 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(), keys.
	`size
()),

2773 
	`memˇched_œ°_îr‹_mesßge
(
memc_˛⁄e
));

2775 
	`Æ¨m
(0);

2776 
	`sig«l
(
SIGALRM
, 
ﬁdÆ¨m
);

2778 
memˇched_ªtu∫_t
 
rc
;

2779 
uöt32_t
 
Êags
;

2780 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2781 
size_t
 
ªtu∫_key_Àngth
;

2782 *
ªtu∫_vÆue
;

2783 
size_t
 
ªtu∫_vÆue_Àngth
;

2784 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2785 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)))

2787 
	`ã°_Ál£
(
ªtu∫_vÆue
);

2789 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

2790 
	`ã°_zîo
(
ªtu∫_vÆue_Àngth
);

2791 
	`ã°_zîo
(
ªtu∫_key_Àngth
);

2792 
	`ã°_Ál£
(
ªtu∫_key
[0]);

2793 
	`ã°_Ál£
(
ªtu∫_vÆue
);

2795 
	`memˇched_‰ì
(
memc_˛⁄e
);

2797  
TEST_SUCCESS
;

2799 
	}
}

2801 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug21
(
memˇched_°
 *
memc
)

2803 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_bö¨y
(
memc
));

2806 
	`ã°_com∑ª
(
TEST_SUCCESS
,

2807 
	`_u£r_suµlõd_bug21
(
memc
, 10));

2810 
	`ã°_com∑ª
(
TEST_SUCCESS
,

2811 
	`_u£r_suµlõd_bug21
(
memc
, 1000));

2813  
TEST_SUCCESS
;

2814 
	}
}

2816 
ã°_ªtu∫_t
 
	$com∑ris⁄_›î©‹_memˇched_°_™d__memˇched_ªtu∫_t_TEST
(
memˇched_°
 *)

2818 
ã°
::
Memc
 
memc_
;

2820 
memˇched_°
 *
memc
&
memc_
;

2822 
	`ASSERT_EQ
(
memc
, 
MEMCACHED_SUCCESS
);

2823 
	`ã°_com∑ª
(
memc
, 
MEMCACHED_SUCCESS
);

2825 
	`ASSERT_NEQ
(
memc
, 
MEMCACHED_FAILURE
);

2827  
TEST_SUCCESS
;

2828 
	}
}

2830 
ã°_ªtu∫_t
 
	$këama_TEST
(
memˇched_°
 *)

2832 
ã°
::
Memc
 
	`memc
("--server=10.0.1.1:11211 --server=10.0.1.2:11211");

2834 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2835 
	`memˇched_behavi‹_£t
(&
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 
åue
));

2837 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(&
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
), 
	`uöt64_t
(1));

2839 
	`ã°_com∑ª
(
	`memˇched_behavi‹_£t
(&
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
, 
MEMCACHED_HASH_MD5
), 
MEMCACHED_SUCCESS
);

2841 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(&
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
), 
MEMCACHED_HASH_MD5
);

2843 
	`ã°_com∑ª
(
	`memˇched_behavi‹_£t_di°ributi⁄
(&
memc
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
), 
MEMCACHED_SUCCESS
);

2846  
TEST_SUCCESS
;

2847 
	}
}

2849 
ã°_ªtu∫_t
 
	$ouçut_këama_weighãd_keys
(
memˇched_°
 *)

2851 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

2852 
	`ã°_åue
(
memc
);

2855 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2856 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 
åue
));

2858 
uöt64_t
 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

2859 
	`ã°_com∑ª
(
vÆue
, 
	`uöt64_t
(1));

2861 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

2862 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
, 
MEMCACHED_HASH_MD5
));

2864 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
);

2865 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_MD5
);

2868 
	`ã°_åue
(
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
Ë=
MEMCACHED_SUCCESS
);

2870 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

2871 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
("10.0.1.1:11211,10.0.1.2:11211,10.0.1.3:11211,10.0.1.4:11211,10.0.1.5:11211,10.0.1.6:11211,10.0.1.7:11211,10.0.1.8:11211,192.168.1.1:11211,192.168.100.1:11211");

2872 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

2876 
FILE
 *
Â
;

2877 i‡((
Â
 = 
	`f›í
("ketama_keys.txt", "w")))

2881 
	`¥ötf
("cannot writeÅo file ketama_keys.txt");

2882  
TEST_FAILURE
;

2885 
x
= 0; x < 10000; x++)

2887 
key
[10];

2888 
	`¢¥ötf
(
key
, (key), "%d", 
x
);

2890 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
key
, 
	`°æí
(key));

2891 *
ho°«me
 = 
memc
->
ho°s
[
£rvî_idx
].hostname;

2892 
ö_p‹t_t
 
p‹t
 = 
memc
->
ho°s
[
£rvî_idx
].port;

2893 
	`Ârötf
(
Â
, "key %†i†⁄ ho° /%s:%u\n", 
key
, 
ho°«me
, 
p‹t
);

2894 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

2895 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ho°_ödex
);

2897 
	`f˛o£
(
Â
);

2899 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

2900 
	`memˇched_‰ì
(
memc
);

2902  
TEST_SUCCESS
;

2903 
	}
}

2906 
ã°_ªtu∫_t
 
	$ªsu…_°©ic
(
memˇched_°
 *
memc
)

2908 
memˇched_ªsu…_°
 
ªsu…
;

2909 
memˇched_ªsu…_°
 *
ªsu…_±r

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…
);

2910 
	`ã°_Ál£
(
ªsu…
.
›ti⁄s
.
is_Æloˇãd
);

2911 
	`ã°_åue
(
	`memˇched_is_öôülized
(&
ªsu…
));

2912 
	`ã°_åue
(
ªsu…_±r
);

2913 
	`ã°_åue
(
ªsu…_±r
 =&
ªsu…
);

2915 
	`memˇched_ªsu…_‰ì
(&
ªsu…
);

2917 
	`ã°_Ál£
(
ªsu…
.
›ti⁄s
.
is_Æloˇãd
);

2918 
	`ã°_Ál£
(
	`memˇched_is_öôülized
(&
ªsu…
));

2920  
TEST_SUCCESS
;

2921 
	}
}

2923 
ã°_ªtu∫_t
 
	$ªsu…_Æloc
(
memˇched_°
 *
memc
)

2925 
memˇched_ªsu…_°
 *
ªsu…_±r

	`memˇched_ªsu…_¸óã
(
memc
, 
NULL
);

2926 
	`ã°_åue
(
ªsu…_±r
);

2927 
	`ã°_åue
(
ªsu…_±r
->
›ti⁄s
.
is_Æloˇãd
);

2928 
	`ã°_åue
(
	`memˇched_is_öôülized
(
ªsu…_±r
));

2929 
	`memˇched_ªsu…_‰ì
(
ªsu…_±r
);

2931  
TEST_SUCCESS
;

2932 
	}
}

2935 
ã°_ªtu∫_t
 
	$add_ho°_ã°1
(
memˇched_°
 *
memc
)

2937 
memˇched_ªtu∫_t
 
rc
;

2938 
£rvî«me
[]= "0.example.com";

2940 
memˇched_£rvî_°
 *
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, 
£rvî«me
, 400, 0, &
rc
);

2941 
	`ã°_åue
(
£rvîs
);

2942 
	`ã°_com∑ª
(1U, 
	`memˇched_£rvî_li°_cou¡
(
£rvîs
));

2944 
uöt32_t
 
x
= 2; x < 20; x++)

2946 
buf„r
[
SMALL_STRING_LEN
];

2948 
	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
, "%lu.exam∂e.com", ()(400 +
x
));

2949 
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(£rvîs, 
buf„r
, 401, 0,

2950 &
rc
);

2951 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

2952 
	`ã°_com∑ª
(
x
, 
	`memˇched_£rvî_li°_cou¡
(
£rvîs
));

2955 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
));

2956 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
));

2958 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

2960  
TEST_SUCCESS
;

2961 
	}
}

2964 
	$my_‰ì
(c⁄° 
memˇched_°
 *
±r
, *
mem
, *
c⁄ãxt
)

2966 ()
c⁄ãxt
;

2967 ()
±r
;

2968 #ifde‡
HARD_MALLOC_TESTS


2969 *
ªÆ_±r
(
mem
 =
NULL
Ë? mem : (*)((
ˇddr_t
)mem - 8);

2970 
	`‰ì
(
ªÆ_±r
);

2972 
	`‰ì
(
mem
);

2974 
	}
}

2977 *
	$my_mÆloc
(c⁄° 
memˇched_°
 *
±r
, c⁄° 
size_t
 
size
, *
c⁄ãxt
)

2979 ()
c⁄ãxt
;

2980 ()
±r
;

2981 #ifde‡
HARD_MALLOC_TESTS


2982 *
ªt

	`mÆloc
(
size
 + 8);

2983 i‡(
ªt
 !
NULL
)

2985 
ªt
(*)((
ˇddr_t
)ret + 8);

2988 *
ªt

	`mÆloc
(
size
);

2991 i‡(
ªt
 !
NULL
)

2993 
	`mem£t
(
ªt
, 0xff, 
size
);

2996  
ªt
;

2997 
	}
}

3000 *
	$my_ªÆloc
(c⁄° 
memˇched_°
 *
±r
, *
mem
, c⁄° 
size_t
 
size
, *)

3002 #ifde‡
HARD_MALLOC_TESTS


3003 *
ªÆ_±r
(
mem
 =
NULL
Ë? NULL : (*)((
ˇddr_t
)mem - 8);

3004 *
nmem

	`ªÆloc
(
ªÆ_±r
, 
size
 + 8);

3006 *
ªt

NULL
;

3007 i‡(
nmem
 !
NULL
)

3009 
ªt
(*)((
ˇddr_t
)
nmem
 + 8);

3012  
ªt
;

3014 ()
±r
;

3015  
	`ªÆloc
(
mem
, 
size
);

3017 
	}
}

3020 *
	$my_ˇŒoc
(c⁄° 
memˇched_°
 *
±r
, 
size_t
 
√Àm
, c⁄° size_à
size
, *)

3022 #ifde‡
HARD_MALLOC_TESTS


3023 *
mem

	`my_mÆloc
(
±r
, 
√Àm
 * 
size
);

3024 i‡(
mem
)

3026 
	`mem£t
(
mem
, 0, 
√Àm
 * 
size
);

3029  
mem
;

3031 ()
±r
;

3032  
	`ˇŒoc
(
√Àm
, 
size
);

3034 
	}
}

3036 
ã°_ªtu∫_t
 
	$£À˘i⁄_of_«me•a˚_ã°s
(
memˇched_°
 *
memc
)

3038 
memˇched_ªtu∫_t
 
rc
;

3039 c⁄° *
key
= "mine";

3040 *
vÆue
;

3043 
vÆue
(*)
	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, &
rc
);

3044 
	`ã°_nuŒ
(
vÆue
);

3045 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
, 
rc
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

3048 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3049 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, (*)
key
));

3051 
vÆue
(*)
	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, &
rc
);

3052 
	`ã°_åue
(
vÆue
);

3053 
	`ã°_memcmp
(
vÆue
, 
key
, 4);

3054 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
, 
rc
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

3057 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3058 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, 
NULL
));

3060 
vÆue
(*)
	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, &
rc
);

3061 
	`ã°_nuŒ
(
vÆue
);

3062 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
, 
rc
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

3065 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3066 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, (*)
key
));

3068 
vÆue
(*)
	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, &
rc
);

3069 
	`ã°_åue
(
vÆue
);

3070 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
, 
rc
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

3071 
	`ã°_memcmp
(
vÆue
, 
key
, 4);

3075 
l⁄g_key
[255];

3076 
	`mem£t
(
l⁄g_key
, 0, 255);

3078 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3079 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, 
NULL
));

3081 
vÆue
(*)
	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, &
rc
);

3082 
	`ã°_nuŒ
(
vÆue
);

3083 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

3087 
	`°∫˝y
(
l⁄g_key
, "Thisismorethentheallottednumberofcharacters", (long_key));

3088 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3089 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, 
l⁄g_key
));

3092 
	`°∫˝y
(
l⁄g_key
, "This is moreÅhenÅheállottedÇumber of characters", (long_key));

3093 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
Ë? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_BAD_KEY_PROVIDED
,

3094 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, 
l⁄g_key
));

3097 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
Ë? 
MEMCACHED_INVALID_ARGUMENTS
 : 
MEMCACHED_SUCCESS
,

3098 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 1));

3100 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
Ë? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_BAD_KEY_PROVIDED
,

3101 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, "dog cat"));

3104  
TEST_SUCCESS
;

3105 
	}
}

3107 
ã°_ªtu∫_t
 
	$£t_«me•a˚
(
memˇched_°
 *
memc
)

3109 
memˇched_ªtu∫_t
 
rc
;

3110 c⁄° *
key
= "mine";

3111 *
vÆue
;

3114 
vÆue
(*)
	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, &
rc
);

3115 
	`ã°_nuŒ
(
vÆue
);

3116 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
, 
rc
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

3119 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3120 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, (*)
key
));

3122 
vÆue
(*)
	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_NAMESPACE
, &
rc
);

3123 
	`ã°_åue
(
vÆue
);

3124 
	`ã°_memcmp
(
vÆue
, 
key
, 4);

3125 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
, 
rc
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

3127  
TEST_SUCCESS
;

3128 
	}
}

3130 
ã°_ªtu∫_t
 
	$£t_«me•a˚_™d_bö¨y
(
memˇched_°
 *
memc
)

3132 
	`ã°_ªtu∫_if
(
	`¥e_bö¨y
(
memc
));

3133 
	`ã°_ªtu∫_if
(
	`£t_«me•a˚
(
memc
));

3135  
TEST_SUCCESS
;

3136 
	}
}

3138 #ifde‡
MEMCACHED_ENABLE_DEPRECATED


3139 
ã°_ªtu∫_t
 
	$dïªˇãd_£t_mem‹y_Æloc
(
memˇched_°
 *
memc
)

3141 *
ã°_±r

NULL
;

3142 *
cb_±r

NULL
;

3144 
memˇched_mÆloc_‚
 
mÆloc_cb
(memˇched_mÆloc_‚)
my_mÆloc
;

3145 
cb_±r
*(**)&
mÆloc_cb
;

3146 
memˇched_ªtu∫_t
 
rc
;

3148 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3149 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_MALLOC_FUNCTION
, 
cb_±r
));

3150 
ã°_±r

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_MALLOC_FUNCTION
, &
rc
);

3151 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

3152 
	`ã°_åue
(
ã°_±r
 =
cb_±r
);

3156 
memˇched_ªÆloc_‚
 
ªÆloc_cb
=

3157 (
memˇched_ªÆloc_‚
)
my_ªÆloc
;

3158 
cb_±r
*(**)&
ªÆloc_cb
;

3159 
memˇched_ªtu∫_t
 
rc
;

3161 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3162 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_REALLOC_FUNCTION
, 
cb_±r
));

3163 
ã°_±r

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_REALLOC_FUNCTION
, &
rc
);

3164 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

3165 
	`ã°_åue
(
ã°_±r
 =
cb_±r
);

3169 
memˇched_‰ì_‚
 
‰ì_cb
=

3170 (
memˇched_‰ì_‚
)
my_‰ì
;

3171 
cb_±r
*(**)&
‰ì_cb
;

3172 
memˇched_ªtu∫_t
 
rc
;

3174 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3175 
	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_FREE_FUNCTION
, 
cb_±r
));

3176 
ã°_±r

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_FREE_FUNCTION
, &
rc
);

3177 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

3178 
	`ã°_åue
(
ã°_±r
 =
cb_±r
);

3181  
TEST_SUCCESS
;

3182 
	}
}

3186 
ã°_ªtu∫_t
 
	$£t_mem‹y_Æloc
(
memˇched_°
 *
memc
)

3188 
	`ã°_com∑ª
(
MEMCACHED_INVALID_ARGUMENTS
,

3189 
	`memˇched_£t_mem‹y_Æloˇt‹s
(
memc
, 
NULL
, 
my_‰ì
,

3190 
my_ªÆloc
, 
my_ˇŒoc
, 
NULL
));

3192 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3193 
	`memˇched_£t_mem‹y_Æloˇt‹s
(
memc
, 
my_mÆloc
, 
my_‰ì
,

3194 
my_ªÆloc
, 
my_ˇŒoc
, 
NULL
));

3196 
memˇched_mÆloc_‚
 
mem_mÆloc
;

3197 
memˇched_‰ì_‚
 
mem_‰ì
;

3198 
memˇched_ªÆloc_‚
 
mem_ªÆloc
;

3199 
memˇched_ˇŒoc_‚
 
mem_ˇŒoc
;

3200 
	`memˇched_gë_mem‹y_Æloˇt‹s
(
memc
, &
mem_mÆloc
, &
mem_‰ì
,

3201 &
mem_ªÆloc
, &
mem_ˇŒoc
);

3203 
	`ã°_åue
(
mem_mÆloc
 =
my_mÆloc
);

3204 
	`ã°_åue
(
mem_ªÆloc
 =
my_ªÆloc
);

3205 
	`ã°_åue
(
mem_ˇŒoc
 =
my_ˇŒoc
);

3206 
	`ã°_åue
(
mem_‰ì
 =
my_‰ì
);

3208  
TEST_SUCCESS
;

3209 
	}
}

3211 
ã°_ªtu∫_t
 
	$íabÀ_c⁄si°ít_¸c
(
memˇched_°
 *
memc
)

3213 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, 
MEMCACHED_DISTRIBUTION_CONSISTENT
));

3214 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
), 
	`uöt64_t
(
MEMCACHED_DISTRIBUTION_CONSISTENT
));

3216 
ã°_ªtu∫_t
 
rc
;

3217 i‡((
rc

	`¥e_¸c
(
memc
)Ë!
TEST_SUCCESS
)

3219  
rc
;

3222 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
), 
	`uöt64_t
(
MEMCACHED_DISTRIBUTION_CONSISTENT
));

3224 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
Ë!
MEMCACHED_HASH_CRC
)

3226  
TEST_SKIPPED
;

3229  
TEST_SUCCESS
;

3230 
	}
}

3232 
ã°_ªtu∫_t
 
	$íabÀ_c⁄si°ít_hsõh
(
memˇched_°
 *
memc
)

3234 
ã°_ªtu∫_t
 
rc
;

3235 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, 
MEMCACHED_DISTRIBUTION_CONSISTENT
);

3236 i‡((
rc

	`¥e_hsõh
(
memc
)Ë!
TEST_SUCCESS
)

3238  
rc
;

3241 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
), 
	`uöt64_t
(
MEMCACHED_DISTRIBUTION_CONSISTENT
));

3243 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
Ë!
MEMCACHED_HASH_HSIEH
)

3245  
TEST_SKIPPED
;

3248  
TEST_SUCCESS
;

3249 
	}
}

3251 
ã°_ªtu∫_t
 
	$íabÀ_ˇs
(
memˇched_°
 *
memc
)

3253 i‡(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 2, 4))

3255 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 
åue
);

3257  
TEST_SUCCESS
;

3260  
TEST_SKIPPED
;

3261 
	}
}

3263 
ã°_ªtu∫_t
 
	$check_f‹_1_2_3
(
memˇched_°
 *
memc
)

3265 
	`memˇched_vîsi⁄
(
memc
);

3267 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

3268 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

3270 i‡((
ö°™˚
->
maj‹_vîsi⁄
 >1 && (ö°™˚->
mö‹_vîsi⁄
 =2 && in°™˚->
mi¸o_vîsi⁄
 >= 4))

3271 
‹
 
ö°™˚
->
mö‹_vîsi⁄
 > 2)

3273  
TEST_SUCCESS
;

3276  
TEST_SKIPPED
;

3277 
	}
}

3279 
ã°_ªtu∫_t
 
	$MEMCACHED_BEHAVIOR_POLL_TIMEOUT_ã°
(
memˇched_°
 *
memc
)

3281 c⁄° 
uöt64_t
 
timeout
= 100;

3283 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
, 
timeout
);

3285 
	`ã°_com∑ª
(
timeout
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
));

3287  
TEST_SUCCESS
;

3288 
	}
}

3290 
ã°_ªtu∫_t
 
	$n‹ïly_ã°
(
memˇched_°
 *
memc
)

3292 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3293 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 
åue
));

3294 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3295 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
åue
));

3296 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3297 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 
åue
));

3298 
	`ã°_com∑ª
(1LLU, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
));

3299 
	`ã°_com∑ª
(1LLU, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
));

3300 
	`ã°_com∑ª
(1LLU, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
));

3302 
memˇched_ªtu∫_t
 
ªt
;

3303 
cou¡
= 0; count < 5; ++count)

3305 
size_t
 
x
= 0; x < 100; ++x)

3307 
key
[
MEMCACHED_MAXIMUM_INTEGER_DISPLAY_LENGTH
 +1];

3308 
check_Àngth

	`¢¥ötf
(
key
, (key), "%lu", ()
x
);

3309 
	`ã°_Ál£
((
size_t
)
check_Àngth
 >(
key
) || check_length < 0);

3311 
size_t
 
Àn
(size_t)
check_Àngth
;

3313 
cou¡
)

3316 
ªt

	`memˇched_add
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

3319 
ªt

	`memˇched_ª∂a˚
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

3322 
ªt

	`memˇched_£t
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

3325 
ªt

	`memˇched_≠≥nd
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

3328 
ªt

	`memˇched_¥ïíd
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

3331 
	`ã°_åue
(
cou¡
);

3334 
	`ã°_åue_gŸ
(
ªt
 =
MEMCACHED_SUCCESS
 
‹
Ñë =
MEMCACHED_BUFFERED
,

3335 
	`memˇched_°ªº‹
(
NULL
, 
ªt
));

3344 
no_msg
=0;

3345 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); ++x)

3347 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

3348 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

3349 
no_msg
+=()(
ö°™˚
->
curs‹_a˘ive
);

3352 
	`ã°_åue
(
no_msg
 == 0);

3354 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush_buf„rs
(
memc
));

3359 
size_t
 
x
= 0; x < 100; ++x)

3361 
key
[10];

3363 
check_Àngth

	`¢¥ötf
(
key
, (key), "%lu", ()
x
);

3365 
	`ã°_Ál£
((
size_t
)
check_Àngth
 >(
key
) || check_length < 0);

3367 
size_t
 
Àn
(size_t)
check_Àngth
;

3368 
size_t
 
Àngth
;

3369 
uöt32_t
 
Êags
;

3370 * 
vÆue
=
	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

3371 &
Àngth
, &
Êags
, &
ªt
);

3373 i‡(
MEMCACHED_TIMEOUT
 =
ªt
)

3377 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
 
™d
 
vÆue
 !
NULL
);

3378 
cou¡
)

3383 
	`ã°_åue
(
	`°∫cmp
(
vÆue
, 
key
, 
Àn
) == 0);

3384 
	`ã°_åue
(
Àn
 =
Àngth
);

3387 
	`ã°_åue
(
Àngth
 =
Àn
 * 2);

3390 
	`ã°_åue
(
Àngth
 =
Àn
 * 3);

3393 
	`ã°_åue
(
cou¡
);

3396 
	`‰ì
(
vÆue
);

3403 c⁄° * 
keys
[]= {"0"};

3404 
size_t
 
Àngths
[]= {1};

3405 
size_t
 
Àngth
;

3406 
uöt32_t
 
Êags
;

3407 
memˇched_ªsu…_°
 
ªsu…s_obj
;

3408 
memˇched_ªsu…_°
 *
ªsu…s
;

3409 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3410 
	`memˇched_mgë
(
memc
, 
keys
, 
Àngths
, 1));

3412 
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

3413 
	`ã°_åue
(
ªsu…s
);

3414 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
ªt
);

3415 
	`ã°_åue
(
ªsu…s
);

3416 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
ªt
);

3417 
uöt64_t
 
ˇs

	`memˇched_ªsu…_ˇs
(
ªsu…s
);

3418 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

3420 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3421 
	`memˇched_ˇs
(
memc
, 
keys
[0], 
Àngths
[0], keys[0],Üígths[0], 0, 0, 
ˇs
));

3427 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3428 
	`memˇched_ˇs
(
memc
, 
keys
[0], 
Àngths
[0], keys[0],Üígths[0], 0, 0, 
ˇs
));

3429 
	`ã°_åue
(
	`memˇched_Êush_buf„rs
(
memc
Ë=
MEMCACHED_SUCCESS
);

3430 * 
vÆue
=
	`memˇched_gë
(
memc
, 
keys
[0], 
Àngths
[0], &
Àngth
, &
Êags
, &
ªt
);

3431 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
 && 
vÆue
 !
NULL
);

3432 
	`‰ì
(
vÆue
);

3434  
TEST_SUCCESS
;

3435 
	}
}

3437 
ã°_ªtu∫_t
 
	$™Æyzî_ã°
(
memˇched_°
 *
memc
)

3439 
memˇched_™Æysis_°
 *
ªp‹t
;

3440 
memˇched_ªtu∫_t
 
rc
;

3442 
memˇched_°©_°
 *
memc_°©

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

3443 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

3444 
	`ã°_åue
(
memc_°©
);

3446 
ªp‹t

	`memˇched_™Æyze
(
memc
, 
memc_°©
, &
rc
);

3447 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

3448 
	`ã°_åue
(
ªp‹t
);

3450 
	`‰ì
(
ªp‹t
);

3451 
	`memˇched_°©_‰ì
(
NULL
, 
memc_°©
);

3453  
TEST_SUCCESS
;

3454 
	}
}

3456 
ã°_ªtu∫_t
 
	$utû_vîsi⁄_ã°
(
memˇched_°
 *
memc
)

3458 
	`ã°_com∑ª
(
	`memˇched_vîsi⁄
(
memc
), 
MEMCACHED_SUCCESS
);

3459 
	`ã°_åue
(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 0, 0, 0));

3461 
boﬁ
 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 9, 9, 9);

3464 i‡(
if_suc˚ssful
)

3466 
	`Ârötf
(
°dîr
, "\n----------------------------------------------------------------------\n");

3467 
	`Ârötf
(
°dîr
, "\nDumping Server Information\n\n");

3468 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

3470 
ˇŒbacks
[0]
dump_£rvî_öf‹m©i⁄
;

3471 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, (*)
°dîr
, 1);

3472 
	`Ârötf
(
°dîr
, "\n----------------------------------------------------------------------\n");

3474 
	`ã°_åue
(
if_suc˚ssful
 =
Ál£
);

3476 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

3477 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

3479 
	`memˇched_vîsi⁄
(
memc
);

3482 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, in°™˚->
mö‹_vîsi⁄
, in°™˚->
mi¸o_vîsi⁄
);

3483 
	`ã°_åue
(
if_suc˚ssful
 =
åue
);

3485 i‡(
ö°™˚
->
mi¸o_vîsi⁄
 > 0)

3487 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, in°™˚->
mö‹_vîsi⁄
, (
uöt8_t
)(ö°™˚->
mi¸o_vîsi⁄
 -1));

3489 i‡(
ö°™˚
->
mö‹_vîsi⁄
 > 0)

3491 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, (
uöt8_t
)(ö°™˚->
mö‹_vîsi⁄
 - 1), in°™˚->
mi¸o_vîsi⁄
);

3493 i‡(
ö°™˚
->
maj‹_vîsi⁄
 > 0)

3495 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, (
uöt8_t
)(
ö°™˚
->
maj‹_vîsi⁄
 -1), in°™˚->
mö‹_vîsi⁄
, in°™˚->
mi¸o_vîsi⁄
);

3498 
	`ã°_åue
(
if_suc˚ssful
 =
åue
);

3500 i‡(
ö°™˚
->
mi¸o_vîsi⁄
 > 0)

3502 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, in°™˚->
mö‹_vîsi⁄
, (
uöt8_t
)(ö°™˚->
mi¸o_vîsi⁄
 +1));

3504 i‡(
ö°™˚
->
mö‹_vîsi⁄
 > 0)

3506 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, (
uöt8_t
)(ö°™˚->
mö‹_vîsi⁄
 +1), in°™˚->
mi¸o_vîsi⁄
);

3508 i‡(
ö°™˚
->
maj‹_vîsi⁄
 > 0)

3510 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, (
uöt8_t
)(
ö°™˚
->
maj‹_vîsi⁄
 +1), in°™˚->
mö‹_vîsi⁄
, in°™˚->
mi¸o_vîsi⁄
);

3513 
	`ã°_åue
(
if_suc˚ssful
 =
Ál£
);

3515  
TEST_SUCCESS
;

3516 
	}
}

3518 
ã°_ªtu∫_t
 
	$gëpid_c⁄√˘i⁄_Áûuª_ã°
(
memˇched_°
 *
memc
)

3520 
	`ã°_skù
(
memc
->
£rvîs
[0].
ty≥
, 
MEMCACHED_CONNECTION_TCP
);

3521 
memˇched_ªtu∫_t
 
rc
;

3522 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

3523 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

3526 
	`ã°_åue
(
	`libmemˇched_utû_gëpid
(
	`memˇched_£rvî_«me
(
ö°™˚
),

3527 
	`memˇched_£rvî_p‹t
(
ö°™˚
Ë-1, 
NULL
) == -1);

3529 
	`ã°_åue
(
	`libmemˇched_utû_gëpid
(
	`memˇched_£rvî_«me
(
ö°™˚
),

3530 
	`memˇched_£rvî_p‹t
(
ö°™˚
Ë-1, &
rc
) == -1);

3531 
	`ã°_com∑ª_gŸ
(
MEMCACHED_CONNECTION_FAILURE
, 
rc
, 
	`memˇched_°ªº‹
(
memc
,Ñc));

3533  
TEST_SUCCESS
;

3534 
	}
}

3537 
ã°_ªtu∫_t
 
	$gëpid_ã°
(
memˇched_°
 *
memc
)

3539 
memˇched_ªtu∫_t
 
rc
;

3540 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

3541 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

3544 
	`ã°_åue
(
	`libmemˇched_utû_gëpid
(
	`memˇched_£rvî_«me
(
ö°™˚
),

3545 
	`memˇched_£rvî_p‹t
(
ö°™˚
), 
NULL
) > -1);

3547 
	`ã°_åue
(
	`libmemˇched_utû_gëpid
(
	`memˇched_£rvî_«me
(
ö°™˚
),

3548 
	`memˇched_£rvî_p‹t
(
ö°™˚
), &
rc
) > -1);

3549 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

3551  
TEST_SUCCESS
;

3552 
	}
}

3554 
memˇched_ªtu∫_t
 
	$pög_óch_£rvî
(c⁄° 
memˇched_°
*,

3555 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
,

3559 
memˇched_ªtu∫_t
 
rc
;

3560 i‡(
	`libmemˇched_utû_pög
(
	`memˇched_£rvî_«me
(
ö°™˚
),

3561 
	`memˇched_£rvî_p‹t
(
ö°™˚
), &
rc
Ë=
Ál£
)

3563 
throw
 
libã°
::
	`Áèl
(
LIBYATL_DEFAULT_PARAM
, "%s:%d %s", 
	`memˇched_£rvî_«me
(
ö°™˚
),

3564 
	`memˇched_£rvî_p‹t
(
ö°™˚
), 
	`memˇched_°ªº‹
(
NULL
, 
rc
));

3567 i‡(
	`libmemˇched_utû_pög
(
	`memˇched_£rvî_«me
(
ö°™˚
),

3568 
	`memˇched_£rvî_p‹t
(
ö°™˚
), 
NULL
Ë=
Ál£
)

3570 
throw
 
libã°
::
	`Áèl
(
LIBYATL_DEFAULT_PARAM
, "%s:%d", 
	`memˇched_£rvî_«me
(
ö°™˚
), 
	`memˇched_£rvî_p‹t
(instance));

3573  
MEMCACHED_SUCCESS
;

3574 
	}
}

3576 
ã°_ªtu∫_t
 
	$libmemˇched_utû_pög_TEST
(
memˇched_°
 *
memc
)

3578 
memˇched_£rvî_‚
 
ˇŒbacks
[1]{ 
pög_óch_£rvî
 };

3579 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, 
NULL
, 1);

3581  
TEST_SUCCESS
;

3582 
	}
}

3586 
ã°_ªtu∫_t
 
	$hash_ßnôy_ã°
 (
memˇched_°
 *
memc
)

3588 ()
memc
;

3590 
	`as£π
(
MEMCACHED_HASH_DEFAULT
 == MEMCACHED_HASH_DEFAULT);

3591 
	`as£π
(
MEMCACHED_HASH_MD5
 == MEMCACHED_HASH_MD5);

3592 
	`as£π
(
MEMCACHED_HASH_CRC
 == MEMCACHED_HASH_CRC);

3593 
	`as£π
(
MEMCACHED_HASH_FNV1_64
 == MEMCACHED_HASH_FNV1_64);

3594 
	`as£π
(
MEMCACHED_HASH_FNV1A_64
 == MEMCACHED_HASH_FNV1A_64);

3595 
	`as£π
(
MEMCACHED_HASH_FNV1_32
 == MEMCACHED_HASH_FNV1_32);

3596 
	`as£π
(
MEMCACHED_HASH_FNV1A_32
 == MEMCACHED_HASH_FNV1A_32);

3597 #ifde‡
HAVE_HSIEH_HASH


3598 
	`as£π
(
MEMCACHED_HASH_HSIEH
 == MEMCACHED_HASH_HSIEH);

3600 
	`as£π
(
MEMCACHED_HASH_MURMUR
 == MEMCACHED_HASH_MURMUR);

3601 
	`as£π
(
MEMCACHED_HASH_JENKINS
 == MEMCACHED_HASH_JENKINS);

3602 
	`as£π
(
MEMCACHED_HASH_MAX
 == MEMCACHED_HASH_MAX);

3604  
TEST_SUCCESS
;

3605 
	}
}

3608 
ã°_ªtu∫_t
 
	$hsõh_avaibûôy_ã°
 (
memˇched_°
 *
memc
)

3610 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_HSIEH
));

3612 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3613 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
,

3614 (
uöt64_t
)
MEMCACHED_HASH_HSIEH
));

3616  
TEST_SUCCESS
;

3617 
	}
}

3619 
ã°_ªtu∫_t
 
	$murmur_avaibûôy_ã°
 (
memˇched_°
 *
memc
)

3621 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_MURMUR
));

3623 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

3624 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_MURMUR
));

3626  
TEST_SUCCESS
;

3627 
	}
}

3629 
ã°_ªtu∫_t
 
	$⁄e_©_a_time_run
 (
memˇched_°
 *)

3631 
uöt32_t
 
x
;

3632 c⁄° **
±r
;

3634 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3636 
	`ã°_com∑ª
(
⁄e_©_a_time_vÆues
[
x
],

3637 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_DEFAULT
));

3640  
TEST_SUCCESS
;

3641 
	}
}

3643 
ã°_ªtu∫_t
 
	$md5_run
 (
memˇched_°
 *)

3645 
uöt32_t
 
x
;

3646 c⁄° **
±r
;

3648 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3650 
	`ã°_com∑ª
(
md5_vÆues
[
x
],

3651 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_MD5
));

3654  
TEST_SUCCESS
;

3655 
	}
}

3657 
ã°_ªtu∫_t
 
	$¸c_run
 (
memˇched_°
 *)

3659 
uöt32_t
 
x
;

3660 c⁄° **
±r
;

3662 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3664 
	`ã°_com∑ª
(
¸c_vÆues
[
x
],

3665 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_CRC
));

3668  
TEST_SUCCESS
;

3669 
	}
}

3671 
ã°_ªtu∫_t
 
	$‚v1_64_run
 (
memˇched_°
 *)

3673 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_FNV1_64
));

3675 
uöt32_t
 
x
;

3676 c⁄° **
±r
;

3678 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3680 
	`ã°_com∑ª
(
‚v1_64_vÆues
[
x
],

3681 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_FNV1_64
));

3684  
TEST_SUCCESS
;

3685 
	}
}

3687 
ã°_ªtu∫_t
 
	$‚v1a_64_run
 (
memˇched_°
 *)

3689 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_FNV1A_64
));

3691 
uöt32_t
 
x
;

3692 c⁄° **
±r
;

3694 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3696 
	`ã°_com∑ª
(
‚v1a_64_vÆues
[
x
],

3697 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_FNV1A_64
));

3700  
TEST_SUCCESS
;

3701 
	}
}

3703 
ã°_ªtu∫_t
 
	$‚v1_32_run
 (
memˇched_°
 *)

3705 
uöt32_t
 
x
;

3706 c⁄° **
±r
;

3708 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3710 
	`ã°_com∑ª
(
‚v1_32_vÆues
[
x
],

3711 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_FNV1_32
));

3714  
TEST_SUCCESS
;

3715 
	}
}

3717 
ã°_ªtu∫_t
 
	$‚v1a_32_run
 (
memˇched_°
 *)

3719 
uöt32_t
 
x
;

3720 c⁄° **
±r
;

3722 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3724 
	`ã°_com∑ª
(
‚v1a_32_vÆues
[
x
],

3725 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_FNV1A_32
));

3728  
TEST_SUCCESS
;

3729 
	}
}

3731 
ã°_ªtu∫_t
 
	$hsõh_run
 (
memˇched_°
 *)

3733 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_HSIEH
));

3735 
uöt32_t
 
x
;

3736 c⁄° **
±r
;

3738 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3740 
	`ã°_com∑ª
(
hsõh_vÆues
[
x
],

3741 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_HSIEH
));

3744  
TEST_SUCCESS
;

3745 
	}
}

3747 
ã°_ªtu∫_t
 
	$murmur_run
 (
memˇched_°
 *)

3749 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_MURMUR
));

3751 #ifde‡
WORDS_BIGENDIAN


3752 ()
murmur_vÆues
;

3753  
TEST_SKIPPED
;

3755 
uöt32_t
 
x
;

3756 c⁄° **
±r
;

3758 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3760 
	`ã°_com∑ª
(
murmur_vÆues
[
x
],

3761 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_MURMUR
));

3764  
TEST_SUCCESS
;

3766 
	}
}

3768 
ã°_ªtu∫_t
 
	$murmur3_TEST
(
hashkô_°
 *)

3770 
	`ã°_skù
(
åue
, 
	`libhashkô_has_Æg‹ôhm
(
HASHKIT_HASH_MURMUR3
));

3772 #ifde‡
WORDS_BIGENDIAN


3773 ()
murmur3_vÆues
;

3774  
TEST_SKIPPED
;

3776 
uöt32_t
 
x
;

3777 c⁄° **
±r
;

3779 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3781 
	`ã°_com∑ª
(
murmur3_vÆues
[
x
],

3782 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_MURMUR3
));

3785  
TEST_SUCCESS
;

3787 
	}
}

3789 
ã°_ªtu∫_t
 
	$jíkös_run
 (
memˇched_°
 *)

3791 
uöt32_t
 
x
;

3792 c⁄° **
±r
;

3794 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3796 
	`ã°_com∑ª
(
jíkös_vÆues
[
x
],

3797 
	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_JENKINS
));

3800  
TEST_SUCCESS
;

3801 
	}
}

3803 
uöt32_t
 
	$hash_md5_ã°_fun˘i⁄
(c⁄° *
°rög
, 
size_t
 
°rög_Àngth
, *)

3805  
	`libhashkô_md5
(
°rög
, 
°rög_Àngth
);

3806 
	}
}

3808 
uöt32_t
 
	$hash_¸c_ã°_fun˘i⁄
(c⁄° *
°rög
, 
size_t
 
°rög_Àngth
, *)

3810  
	`libhashkô_¸c32
(
°rög
, 
°rög_Àngth
);

3811 
	}
}

3813 
ã°_ªtu∫_t
 
	$memˇched_gë_hashkô_ã°
 (
memˇched_°
 *)

3815 
uöt32_t
 
x
;

3816 c⁄° **
±r
;

3817 
hashkô_°
 
√w_kô
;

3819 
memˇched_°
 *
memc

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--server=localhost:1 --server=localhost:2 --server=localhost:3 --server=localhost:4 --server=localhost5 --DISTRIBUTION=modula"));

3821 
uöt32_t
 
md5_ho°s
[]= {4U, 1U, 0U, 1U, 4U, 2U, 0U, 3U, 0U, 0U, 3U, 1U, 0U, 0U, 1U, 3U, 0U, 0U, 0U, 3U, 1U, 0U, 4U, 4U, 3U};

3822 
uöt32_t
 
¸c_ho°s
[]= {2U, 4U, 1U, 0U, 2U, 4U, 4U, 4U, 1U, 2U, 3U, 4U, 3U, 4U, 1U, 3U, 3U, 2U, 0U, 0U, 0U, 1U, 2U, 4U, 0U};

3824 c⁄° 
hashkô_°
 *
kô

	`memˇched_gë_hashkô
(
memc
);

3826 
	`hashkô_˛⁄e
(&
√w_kô
, 
kô
);

3827 
	`ã°_com∑ª
(
HASHKIT_SUCCESS
, 
	`hashkô_£t_cu°om_fun˘i⁄
(&
√w_kô
, 
hash_md5_ã°_fun˘i⁄
, 
NULL
));

3829 
	`memˇched_£t_hashkô
(
memc
, &
√w_kô
);

3834 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3836 
uöt32_t
 
hash_vÆ
;

3838 
hash_vÆ

	`hashkô_dige°
(
kô
, *
±r
, 
	`°æí
(*ptr));

3839 
	`ã°_com∑ª_gŸ
(
md5_vÆues
[
x
], 
hash_vÆ
, *
±r
);

3846 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3848 
uöt32_t
 
hash_vÆ
;

3850 
hash_vÆ

	`memˇched_gíî©e_hash
(
memc
, *
±r
, 
	`°æí
(*ptr));

3851 
	`ã°_com∑ª_gŸ
(
md5_ho°s
[
x
], 
hash_vÆ
, *
±r
);

3854 
	`ã°_com∑ª
(
HASHKIT_SUCCESS
, 
	`hashkô_£t_cu°om_fun˘i⁄
(&
√w_kô
, 
hash_¸c_ã°_fun˘i⁄
, 
NULL
));

3856 
	`memˇched_£t_hashkô
(
memc
, &
√w_kô
);

3861 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3863 
uöt32_t
 
hash_vÆ
;

3865 
hash_vÆ

	`hashkô_dige°
(
kô
, *
±r
, 
	`°æí
(*ptr));

3866 
	`ã°_åue
(
¸c_vÆues
[
x
] =
hash_vÆ
);

3869 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

3871 
uöt32_t
 
hash_vÆ
;

3873 
hash_vÆ

	`memˇched_gíî©e_hash
(
memc
, *
±r
, 
	`°æí
(*ptr));

3874 
	`ã°_com∑ª
(
¸c_ho°s
[
x
], 
hash_vÆ
);

3877 
	`memˇched_‰ì
(
memc
);

3879  
TEST_SUCCESS
;

3880 
	}
}

3888 
ã°_ªtu∫_t
 
	$memˇched_gë_MEMCACHED_ERRNO
(
memˇched_°
 *)

3890 
size_t
 
Àn
;

3891 
uöt32_t
 
Êags
;

3892 
memˇched_ªtu∫
 
rc
;

3895 
memˇched_°
 *
é_memc_h

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--server=localhost:9898 --server=localhost:9899"));

3898 *
vÆue

	`memˇched_gë
(
é_memc_h
,

3899 
	`ã°_lôîÆ_∑øm
(
__func__
),

3900 &
Àn
, &
Êags
, &
rc
);

3902 
	`ã°_Ál£
(
vÆue
);

3903 
	`ã°_zîo
(
Àn
);

3904 
	`ã°_åue
(
	`memˇched_Áûed
(
rc
));

3906 
	`memˇched_‰ì
(
é_memc_h
);

3908  
TEST_SUCCESS
;

3909 
	}
}

3914 
ã°_ªtu∫_t
 
	$memˇched_gë_MEMCACHED_NOTFOUND
(
memˇched_°
 *
memc
)

3916 
size_t
 
Àn
;

3917 
uöt32_t
 
Êags
;

3918 
memˇched_ªtu∫
 
rc
;

3921 *
vÆue

	`memˇched_gë
(
memc
,

3922 
	`ã°_lôîÆ_∑øm
(
__func__
),

3923 &
Àn
, &
Êags
, &
rc
);

3925 
	`ã°_Ál£
(
vÆue
);

3926 
	`ã°_zîo
(
Àn
);

3927 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

3929  
TEST_SUCCESS
;

3930 
	}
}

3938 
ã°_ªtu∫_t
 
	$memˇched_gë_by_key_MEMCACHED_ERRNO
(
memˇched_°
 *)

3940 
size_t
 
Àn
;

3941 
uöt32_t
 
Êags
;

3942 
memˇched_ªtu∫
 
rc
;

3945 
memˇched_°
 *
é_memc_h

	`memˇched_¸óã
(
NULL
);

3946 
memˇched_£rvî_°
 *
£rvîs

	`memˇched_£rvîs_∑r£
("localhost:9898,localhost:9899");

3947 
	`memˇched_£rvî_push
(
é_memc_h
, 
£rvîs
);

3948 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

3951 *
vÆue

	`memˇched_gë_by_key
(
é_memc_h
,

3952 
	`ã°_lôîÆ_∑øm
(
__func__
),

3953 
	`ã°_lôîÆ_∑øm
(
__func__
),

3954 &
Àn
, &
Êags
, &
rc
);

3956 
	`ã°_Ál£
(
vÆue
);

3957 
	`ã°_zîo
(
Àn
);

3958 
	`ã°_åue
(
	`memˇched_Áûed
(
rc
));

3960 
	`memˇched_‰ì
(
é_memc_h
);

3962  
TEST_SUCCESS
;

3963 
	}
}

3968 
ã°_ªtu∫_t
 
	$memˇched_gë_by_key_MEMCACHED_NOTFOUND
(
memˇched_°
 *
memc
)

3970 
size_t
 
Àn
;

3971 
uöt32_t
 
Êags
;

3972 
memˇched_ªtu∫
 
rc
;

3975 *
vÆue

	`memˇched_gë_by_key
(
memc
,

3976 
	`ã°_lôîÆ_∑øm
(
__func__
),

3977 
	`ã°_lôîÆ_∑øm
(
__func__
),

3978 &
Àn
, &
Êags
, &
rc
);

3980 
	`ã°_Ál£
(
vÆue
);

3981 
	`ã°_zîo
(
Àn
);

3982 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

3984  
TEST_SUCCESS
;

3985 
	}
}

3987 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_434484
(
memˇched_°
 *
memc
)

3989 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_bö¨y
(
memc
));

3991 
	`ã°_com∑ª
(
MEMCACHED_NOTSTORED
,

3992 
	`memˇched_≠≥nd
(
memc
,

3993 
	`ã°_lôîÆ_∑øm
(
__func__
),

3994 
	`ã°_lôîÆ_∑øm
(
__func__
),

3997 
libã°
::
vch¨_t
 
d©a
;

3998 
d©a
.
	`ªsize
(2048 * 1024);

3999 
	`ã°_com∑ª
(
MEMCACHED_E2BIG
,

4000 
	`memˇched_£t
(
memc
,

4001 
	`ã°_lôîÆ_∑øm
(
__func__
),

4002 &
d©a
[0], d©a.
	`size
(), 0, 0));

4004  
TEST_SUCCESS
;

4005 
	}
}

4007 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_434843
(
memˇched_°
 *
‹igöÆ_memc
)

4009 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_bö¨y
(
‹igöÆ_memc
));

4011 
memˇched_ªtu∫_t
 
rc
;

4012 
size_t
 
cou¡î
= 0;

4013 
memˇched_execuã_‚
 
ˇŒbacks
[]{ &
ˇŒback_cou¡î
 };

4021 
memˇched_°
 *
memc

	`¸óã_sögÀ_ö°™˚_memˇched
(
‹igöÆ_memc
, "--BINARY-PROTOCOL");

4023 
keys_°
 
	`keys
(1024);

4029 
±rdiff_t
 
y
= 0; y < 2; y++)

4031 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4032 
	`memˇched_mgë
(
memc
, 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(), keys.
	`size
()));

4036 
	`ã°_com∑ª
(
y
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_NOTFOUND
,

4037 
	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1));

4039 i‡(
y
 == 0)

4042 
blob
[1024]= { 0 };

4044 
	`ã°_Ál£
(
cou¡î
);

4046 
size_t
 
x
0; x < 
keys
.
	`size
(); ++x)

4048 
rc

	`memˇched_add
(
memc
,

4049 
keys
.
	`key_©
(
x
), keys.
	`Àngth_©
(x),

4050 
blob
, (blob), 0, 0);

4051 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

4057 
	`ã°_com∑ª
(
cou¡î
, 
keys
.
	`size
());

4061 
	`memˇched_‰ì
(
memc
);

4063  
TEST_SUCCESS
;

4064 
	}
}

4066 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_434843_buf„ªd
(
memˇched_°
 *
memc
)

4068 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
åue
));

4070  
	`ªgªssi⁄_bug_434843
(
memc
);

4071 
	}
}

4073 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_421108
(
memˇched_°
 *
memc
)

4075 
memˇched_ªtu∫_t
 
rc
;

4076 
memˇched_°©_°
 *
memc_°©

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

4077 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

4079 *
byãs_°r

	`memˇched_°©_gë_vÆue
(
memc
, 
memc_°©
, "byãs", &
rc
);

4080 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

4081 
	`ã°_åue
(
byãs_°r
);

4082 *
byãs_ªad_°r

	`memˇched_°©_gë_vÆue
(
memc
, 
memc_°©
,

4083 "byãs_ªad", &
rc
);

4084 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

4085 
	`ã°_åue
(
byãs_ªad_°r
);

4087 *
byãs_wrôãn_°r

	`memˇched_°©_gë_vÆue
(
memc
, 
memc_°©
,

4088 "byãs_wrôãn", &
rc
);

4089 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

4090 
	`ã°_åue
(
byãs_wrôãn_°r
);

4092 
byãs

	`°πouŒ
(
byãs_°r
, 0, 10);

4093 
byãs_ªad

	`°πouŒ
(
byãs_ªad_°r
, 0, 10);

4094 
byãs_wrôãn

	`°πouŒ
(
byãs_wrôãn_°r
, 0, 10);

4096 
	`ã°_åue
(
byãs
 !
byãs_ªad
);

4097 
	`ã°_åue
(
byãs
 !
byãs_wrôãn
);

4100 
	`‰ì
(
byãs_°r
);

4101 
	`‰ì
(
byãs_ªad_°r
);

4102 
	`‰ì
(
byãs_wrôãn_°r
);

4103 
	`memˇched_°©_‰ì
(
NULL
, 
memc_°©
);

4105  
TEST_SUCCESS
;

4106 
	}
}

4119 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_442914
(
memˇched_°
 *
‹igöÆ_memc
)

4121 
	`ã°_skù
(
‹igöÆ_memc
->
£rvîs
[0].
ty≥
, 
MEMCACHED_CONNECTION_TCP
);

4123 
memˇched_°
* 
memc

	`¸óã_sögÀ_ö°™˚_memˇched
(
‹igöÆ_memc
, "--NOREPLY --TCP-NODELAY");

4125 
uöt32_t
 
x
= 0; x < 250; ++x)

4127 
key
[250];

4128 
size_t
 
Àn
(size_t)
	`¢¥ötf
(
key
, (key), "%0250u", 
x
);

4129 
memˇched_ªtu∫_t
 
rc

	`memˇched_dñëe
(
memc
, 
key
, 
Àn
, 0);

4130 
îr‹_buf„r
[2048]= { 0 };

4131 
	`¢¥ötf
(
îr‹_buf„r
, ”º‹_buf„r), "%†key: %s", 
	`memˇched_œ°_îr‹_mesßge
(
memc
), 
key
);

4132 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
, 
îr‹_buf„r
);

4137 
key
[250];

4138 
size_t
 
Àn

	`¢¥ötf
(
key
, (key), "%037u", 251U);

4139 
memˇched_ªtu∫_t
 
rc

	`memˇched_dñëe
(
memc
, 
key
, 
Àn
, 0);

4140 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

4142 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 
Ál£
));

4143 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
	`memˇched_dñëe
(
memc
, 
key
, 
Àn
, 0));

4146 
	`memˇched_‰ì
(
memc
);

4148  
TEST_SUCCESS
;

4149 
	}
}

4151 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_447342
(
memˇched_°
 *
memc
)

4153 i‡(
	`memˇched_£rvî_cou¡
(
memc
Ë< 3 
‹
 
	`¥e_ª∂iˇti⁄
(memcË!
TEST_SUCCESS
)

4155  
TEST_SKIPPED
;

4158 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4159 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 2));

4161 
keys_°
 
	`keys
(100);

4163 
size_t
 
x
0; x < 
keys
.
	`size
(); ++x)

4165 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4166 
	`memˇched_£t
(
memc
,

4167 
keys
.
	`key_©
(
x
), keys.
	`Àngth_©
(x),

4168 
keys
.
	`key_©
(
x
), keys.
	`Àngth_©
(x),

4185 
	`memˇched_quô
(
memc
);

4190 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4191 
	`memˇched_mgë
(
memc
,

4192 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(), keys.
	`size
()));

4194 
cou¡î
= 0;

4195 
memˇched_execuã_‚
 
ˇŒbacks
[]{ &
ˇŒback_cou¡î
 };

4196 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4197 
	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1));

4200 
	`ã°_com∑ª
(
cou¡î
, 
keys
.
	`size
());

4202 
	`memˇched_quô
(
memc
);

4209 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚_⁄e

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

4210 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚_two

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 2);

4211 
ö_p‹t_t
 
p‹t0

ö°™˚_⁄e
->
	`p‹t
();

4212 
ö_p‹t_t
 
p‹t2

ö°™˚_two
->
	`p‹t
();

4214 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_⁄e
)->
	`p‹t
(0);

4215 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_two
)->
	`p‹t
(0);

4217 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4218 
	`memˇched_mgë
(
memc
,

4219 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(), keys.
	`size
()));

4221 
cou¡î
= 0;

4222 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4223 
	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1));

4224 
	`ã°_com∑ª
(
cou¡î
, 
keys
.
	`size
());

4227 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_⁄e
)->
	`p‹t
(
p‹t0
);

4228 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_two
)->
	`p‹t
(
p‹t2
);

4230 
	`memˇched_quô
(
memc
);

4233 
size_t
 
x
0; x < 
keys
.
	`size
(); ++x)

4235 i‡(
x
 & 1)

4237 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4238 
	`memˇched_dñëe
(
memc
, 
keys
.
	`key_©
(
x
), keys.
	`Àngth_©
(x), 0));

4242 
	`memˇched_quô
(
memc
);

4243 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_⁄e
)->
	`p‹t
(0);

4244 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_two
)->
	`p‹t
(0);

4247 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4248 
	`memˇched_mgë
(
memc
,

4249 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(), keys.
	`size
()));

4251 
cou¡î
= 0;

4252 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4253 
	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1));

4254 
	`ã°_com∑ª
(
cou¡î
, ()(
keys
.
	`size
() >> 1));

4257 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_⁄e
)->
	`p‹t
(
p‹t0
);

4258 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_two
)->
	`p‹t
(
p‹t2
);

4260  
TEST_SUCCESS
;

4261 
	}
}

4263 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_463297
(
memˇched_°
 *
memc
)

4265 
	`ã°_com∑ª
(
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_dñëe
(
memc
, "foo", 3, 1));

4269 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

4270 
	`ã°_åue
(
memc_˛⁄e
);

4271 
	`ã°_åue
(
	`memˇched_vîsi⁄
(
memc_˛⁄e
Ë=
MEMCACHED_SUCCESS
);

4273 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

4274 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_˛⁄e
, 0);

4276 i‡(
ö°™˚
->
maj‹_vîsi⁄
 > 1 ||

4277 (
ö°™˚
->
maj‹_vîsi⁄
 == 1 &&

4278 
ö°™˚
->
mö‹_vîsi⁄
 > 2))

4281 
memˇched_°
 *
bö_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

4282 
	`ã°_åue
(
bö_˛⁄e
);

4283 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
bö_˛⁄e
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1));

4284 
	`ã°_com∑ª
(
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_dñëe
(
bö_˛⁄e
, "foo", 3, 1));

4285 
	`memˇched_‰ì
(
bö_˛⁄e
);

4287 
	`memˇched_quô
(
memc_˛⁄e
);

4291 
	`ã°_com∑ª
(
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_dñëe
(
memc_˛⁄e
, "foo", 3, 1));

4294 
memˇched_ªtu∫_t
 
rc

	`memˇched_dñëe
(
memc
, "foo", 3, 1);

4299 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_PROTOCOL_ERROR
 ||Ñ¯=
MEMCACHED_NOTFOUND
 ||Ñ¯=
MEMCACHED_CLIENT_ERROR
 ||Ñ¯=
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

4302 
	`ã°_åue
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 1Ë=
MEMCACHED_SUCCESS
);

4303 
rc

	`memˇched_dñëe
(
memc
, "foo", 3, 1);

4304 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_PROTOCOL_ERROR
 ||Ñ¯=
MEMCACHED_NOTFOUND
 ||Ñ¯=
MEMCACHED_CLIENT_ERROR
 ||Ñ¯=
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

4307 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 1));

4308 
rc

	`memˇched_dñëe
(
memc
, "foo", 3, 1);

4309 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_PROTOCOL_ERROR
 ||Ñ¯=
MEMCACHED_NOTFOUND
 ||Ñ¯=
MEMCACHED_CLIENT_ERROR
 ||Ñ¯=
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

4312 
	`ã°_com∑ª
(
MEMCACHED_BUFFERED
, (
rc

	`memˇched_dñëe
(
memc
, "foo", 3, 0)));

4313 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush_buf„rs
(
memc
));

4315 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 0));

4317 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_dñëe
(
memc
, "foo", 3, 0));

4319 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 0));

4320 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
	`memˇched_dñëe
(
memc
, "foo", 3, 0));

4323 
	`memˇched_‰ì
(
memc_˛⁄e
);

4326  
TEST_SUCCESS
;

4327 
	}
}

4334 
ã°_ªtu∫_t
 
	$ã°_gë_œ°_disc⁄√˘
(
memˇched_°
 *
memc
)

4336 
memˇched_ªtu∫_t
 
rc
;

4337 c⁄° 
memˇched_ö°™˚_°
 * 
disc⁄√˘ed_£rvî
;

4340 c⁄° *
key
= "marmotte";

4341 c⁄° *
vÆue
= "milka";

4343 
	`memˇched_ª£t_œ°_disc⁄√˘ed_£rvî
(
memc
);

4344 
	`ã°_Ál£
(
memc
->
œ°_disc⁄√˘ed_£rvî
);

4345 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

4346 
vÆue
, 
	`°æí
(value),

4347 (
time_t
)0, (
uöt32_t
)0);

4348 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

4350 
disc⁄√˘ed_£rvî
 = 
	`memˇched_£rvî_gë_œ°_disc⁄√˘
(
memc
);

4351 
	`ã°_Ál£
(
disc⁄√˘ed_£rvî
);

4354 
memˇched_°
 *
möe
;

4355 
memˇched_£rvî_°
 *
£rvîs
;

4357 c⁄° *
£rvî_li°
= "localhost:9";

4359 
£rvîs

	`memˇched_£rvîs_∑r£
(
£rvî_li°
);

4360 
	`ã°_åue
(
£rvîs
);

4361 
möe

	`memˇched_¸óã
(
NULL
);

4362 
rc

	`memˇched_£rvî_push
(
möe
, 
£rvîs
);

4363 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

4364 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

4365 
	`ã°_åue
(
möe
);

4367 
rc

	`memˇched_£t
(
möe
, 
key
, 
	`°æí
(key),

4368 
vÆue
, 
	`°æí
(value),

4369 (
time_t
)0, (
uöt32_t
)0);

4370 
	`ã°_åue
(
	`memˇched_Áûed
(
rc
));

4372 
disc⁄√˘ed_£rvî

	`memˇched_£rvî_gë_œ°_disc⁄√˘
(
möe
);

4373 
	`ã°_åue_gŸ
(
disc⁄√˘ed_£rvî
, 
	`memˇched_°ªº‹
(
möe
, 
rc
));

4374 
	`ã°_com∑ª
(
	`ö_p‹t_t
(9), 
	`memˇched_£rvî_p‹t
(
disc⁄√˘ed_£rvî
));

4375 
	`ã°_Ál£
(
	`°∫cmp
(
	`memˇched_£rvî_«me
(
disc⁄√˘ed_£rvî
),"localhost",9));

4377 
	`memˇched_quô
(
möe
);

4378 
	`memˇched_‰ì
(
möe
);

4380  
TEST_SUCCESS
;

4381 
	}
}

4383 
ã°_ªtu∫_t
 
	$ã°_mu…ùÀ_gë_œ°_disc⁄√˘
(
memˇched_°
 *)

4385 c⁄° *
£rvî_°rög
= "--server=localhost:8888 --server=localhost:8889 --server=localhost:8890 --server=localhost:8891 --server=localhost:8892";

4386 
buf„r
[
BUFSIZ
];

4388 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4389 
	`libmemˇched_check_c⁄figuøti⁄
(
£rvî_°rög
, 
	`°æí
(£rvî_°rög), 
buf„r
, (buffer)));

4391 
memˇched_°
 *
memc

	`memˇched
(
£rvî_°rög
, 
	`°æí
(server_string));

4392 
	`ã°_åue
(
memc
);

4395 
uöt32_t
 
cou¡î
= 100;

4396 --
cou¡î
)

4398 
x
(
MEMCACHED_SUCCESS
); x < (
MEMCACHED_MAXIMUM_RETURN
); ++x)

4400 c⁄° *
msg

	`memˇched_°ªº‹
(
memc
, 
	`memˇched_ªtu∫_t
(
x
));

4401 
memˇched_ªtu∫_t
 
ªt

	`memˇched_£t
(
memc
, 
msg
, 
	`°æí
(msg), 
NULL
, 0, (
time_t
)0, (
uöt32_t
)0);

4402 
	`ã°_åue_gŸ
((
ªt
 =
MEMCACHED_CONNECTION_FAILURE
 
‹
Ñë =
MEMCACHED_SERVER_TEMPORARILY_DISABLED
), 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

4404 c⁄° 
memˇched_ö°™˚_°
 * 
disc⁄√˘ed_£rvî

	`memˇched_£rvî_gë_œ°_disc⁄√˘
(
memc
);

4405 
	`ã°_åue
(
disc⁄√˘ed_£rvî
);

4406 
	`ã°_°rcmp
("loˇlho°", 
	`memˇched_£rvî_«me
(
disc⁄√˘ed_£rvî
));

4407 
	`ã°_åue
(
	`memˇched_£rvî_p‹t
(
disc⁄√˘ed_£rvî
Ë>8888 
™d
 memcached_server_port(disconnected_server) <= 8892);

4409 i‡(
	`øndom
() % 2)

4411 
	`memˇched_ª£t_œ°_disc⁄√˘ed_£rvî
(
memc
);

4416 
	`memˇched_‰ì
(
memc
);

4418  
TEST_SUCCESS
;

4419 
	}
}

4421 
ã°_ªtu∫_t
 
	$ã°_vîbosôy
(
memˇched_°
 *
memc
)

4423 
	`memˇched_vîbosôy
(
memc
, 3);

4425  
TEST_SUCCESS
;

4426 
	}
}

4429 
memˇched_ªtu∫_t
 
	$°©_¥öãr
(c⁄° 
memˇched_ö°™˚_°
 * 
£rvî
,

4430 c⁄° *
key
, 
size_t
 
key_Àngth
,

4431 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

4432 *
c⁄ãxt
)

4434 ()
£rvî
;

4435 ()
c⁄ãxt
;

4436 ()
key
;

4437 ()
key_Àngth
;

4438 ()
vÆue
;

4439 ()
vÆue_Àngth
;

4441  
MEMCACHED_SUCCESS
;

4442 
	}
}

4444 
ã°_ªtu∫_t
 
	$memˇched_°©_execuã_ã°
(
memˇched_°
 *
memc
)

4446 
memˇched_ªtu∫_t
 
rc

	`memˇched_°©_execuã
(
memc
, 
NULL
, 
°©_¥öãr
, NULL);

4447 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

4449 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4450 
	`memˇched_°©_execuã
(
memc
, "¶abs", 
°©_¥öãr
, 
NULL
));

4452 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4453 
	`memˇched_°©_execuã
(
memc
, "ôems", 
°©_¥öãr
, 
NULL
));

4455 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4456 
	`memˇched_°©_execuã
(
memc
, "sizes", 
°©_¥öãr
, 
NULL
));

4458  
TEST_SUCCESS
;

4459 
	}
}

4465 
ã°_ªtu∫_t
 
	$wr⁄g_Áûuª_cou¡î_ã°
(
memˇched_°
 *
‹igöÆ_memc
)

4467 
memˇched_°
* 
memc

	`¸óã_sögÀ_ö°™˚_memˇched
(
‹igöÆ_memc
, 
NULL
);

4470 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
,

4471 
	`ã°_lôîÆ_∑øm
(
__func__
),

4472 
	`ã°_lôîÆ_∑øm
(
__func__
),

4473 
	`time_t
(0), 
	`uöt32_t
(0));

4474 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

4477 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

4483 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
£rvî_Áûuª_cou¡î
= 0;

4485 
	`memˇched_quô
(
memc
);

4491 
	`ã°_zîo
(
ö°™˚
->
£rvî_Áûuª_cou¡î
);

4493 
	`memˇched_‰ì
(
memc
);

4495  
TEST_SUCCESS
;

4496 
	}
}

4502 
ã°_ªtu∫_t
 
	$wr⁄g_Áûuª_cou¡î_two_ã°
(
memˇched_°
 *
memc
)

4505 c⁄° *
key
= "marmotte";

4506 c⁄° *
vÆue
= "milka";

4508 
	`ã°_com∑ª_höt
(
MEMCACHED_SUCCESS
,

4509 
	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

4510 
vÆue
, 
	`°æí
(value),

4511 (
time_t
)0, (
uöt32_t
)0),

4512 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

4516 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4517 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
, 
åue
));

4520 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4521 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
, 
åue
));

4524 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4525 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
åue
));

4529 
uöt32_t
 
Êags
;

4530 
size_t
 
°rög_Àngth
;

4531 
memˇched_ªtu∫
 
rc
;

4532 *
°rög

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

4533 &
°rög_Àngth
, &
Êags
, &
rc
);

4535 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
, 
rc
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

4536 
	`ã°_åue
(
°rög
);

4537 
	`‰ì
(
°rög
);

4539  
TEST_SUCCESS
;

4540 
	}
}

4542 
ã°_ªtu∫_t
 
	$ªgªssi⁄_996813_TEST
(
memˇched_°
 *)

4544 
memˇched_°
* 
memc

	`memˇched_¸óã
(
NULL
);

4546 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
));

4547 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 1));

4548 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 1));

4549 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1));

4550 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
, 1));

4551 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
, 300));

4552 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
, 30));

4555 
ö_p‹t_t
 
ba£_p‹t
= 11211;

4556 
size_t
 
x
= 0; x < 17; x++)

4558 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_add
(
memc
, "10.2.3.4", 
ba£_p‹t
 +
x
));

4560 
	`ã°_com∑ª
(6U, 
	`memˇched_gíî©e_hash
(
memc
, 
	`ã°_lôîÆ_∑øm
("SZ6hu0SHweFmpwpc0w2R")));

4561 
	`ã°_com∑ª
(1U, 
	`memˇched_gíî©e_hash
(
memc
, 
	`ã°_lôîÆ_∑øm
("SQCK9eiCf53YxHWnYA.o")));

4562 
	`ã°_com∑ª
(9U, 
	`memˇched_gíî©e_hash
(
memc
, 
	`ã°_lôîÆ_∑øm
("SUSDkGXuuZC9t9VhMwa.")));

4563 
	`ã°_com∑ª
(0U, 
	`memˇched_gíî©e_hash
(
memc
, 
	`ã°_lôîÆ_∑øm
("SnnqnJARfaCNT679iAF_")));

4565 
	`memˇched_‰ì
(
memc
);

4567  
TEST_SUCCESS
;

4568 
	}
}

4574 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_490486
(
memˇched_°
 *
‹igöÆ_memc
)

4577 #ifde‡
__APPLE__


4578  
TEST_SKIPPED
;

4581 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_bö¨y
(
‹igöÆ_memc
));

4587 
memˇched_°
 *
memc

	`¸óã_sögÀ_ö°™˚_memˇched
(
‹igöÆ_memc
, "--BINARY-PROTOCOL --POLL-TIMEOUT=1000 --REMOVE-FAILED-SERVERS=1 --RETRY-TIMEOUT=3600");

4588 
	`ã°_åue
(
memc
);

4590 
keys_°
 
	`keys
(20480);

4593 
blob
[1024]= { 0 };

4594 
size_t
 
x
0; x < 
keys
.
	`size
(); ++x)

4596 
memˇched_ªtu∫
 
rc

	`memˇched_£t
(
memc
,

4597 
keys
.
	`key_©
(
x
), keys.
	`Àngth_©
(x),

4598 
blob
, (blob), 0, 0);

4599 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

4605 
size_t
 
cou¡î
= 0;

4606 
memˇched_execuã_fun˘i⁄
 
ˇŒbacks
[]{ &
ˇŒback_cou¡î
 };

4607 
memˇched_ªtu∫_t
 
rc

	`memˇched_mgë_execuã
(
memc
,

4608 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(), keys.
	`size
(),

4609 
ˇŒbacks
, &
cou¡î
, 1);

4610 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

4612 * 
the_vÆue

NULL
;

4613 
the_key
[
MEMCACHED_MAX_KEY
];

4614 
size_t
 
the_key_Àngth
;

4615 
size_t
 
the_vÆue_Àngth
;

4616 
uöt32_t
 
the_Êags
;

4619 
the_vÆue

	`memˇched_„tch
(
memc
, 
the_key
, &
the_key_Àngth
, &
the_vÆue_Àngth
, &
the_Êags
, &
rc
);

4621 i‡((
the_vÆue
!
NULL
Ë&& (
rc
 =
MEMCACHED_SUCCESS
))

4623 ++
cou¡î
;

4624 
	`‰ì
(
the_vÆue
);

4627 }  (
the_vÆue
!
NULL
Ë&& (
rc
 =
MEMCACHED_SUCCESS
));

4630 
	`ã°_com∑ª
(
MEMCACHED_END
, 
rc
);

4633 
	`ã°_com∑ª
(
cou¡î
, 
keys
.
	`size
());

4636 
	`memˇched_‰ì
(
memc
);

4638  
TEST_SUCCESS
;

4639 
	}
}

4641 
ã°_ªtu∫_t
 
	$ªgªssi⁄_1021819_TEST
(
memˇched_°
 *
‹igöÆ
)

4643 
memˇched_°
 *
memc

	`memˇched_˛⁄e
(
NULL
, 
‹igöÆ
);

4644 
	`ã°_åue
(
memc
);

4646 
	`ã°_com∑ª
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
, 2000000), 
MEMCACHED_SUCCESS
);

4647 
	`ã°_com∑ª
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
, 3000000), 
MEMCACHED_SUCCESS
);

4649 
memˇched_ªtu∫_t
 
rc
;

4651 
	`memˇched_gë
(
memc
,

4652 
	`ã°_lôîÆ_∑øm
(
__func__
),

4653 
NULL
, NULL, &
rc
);

4655 
	`ã°_com∑ª
(
rc
, 
MEMCACHED_NOTFOUND
);

4657 
	`memˇched_‰ì
(
memc
);

4659  
TEST_SUCCESS
;

4660 
	}
}

4662 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_583031
(
memˇched_°
 *)

4664 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

4665 
	`ã°_åue
(
memc
);

4666 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_add
(
memc
, "10.2.251.4", 11211));

4668 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
, 3000);

4669 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
, 1000);

4670 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
, 1000);

4671 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
, 1000);

4672 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
, 1000);

4673 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
, 3);

4675 
memˇched_ªtu∫_t
 
rc
;

4676 
size_t
 
Àngth
;

4677 
uöt32_t
 
Êags
;

4679 c⁄° *
vÆue

	`memˇched_gë
(
memc
, "dsf", 3, &
Àngth
, &
Êags
, &
rc
);

4680 
	`ã°_Ál£
(
vÆue
);

4681 
	`ã°_zîo
(
Àngth
);

4683 
	`ã°_com∑ª
(
MEMCACHED_TIMEOUT
, 
memc
);

4685 
	`memˇched_‰ì
(
memc
);

4687  
TEST_SUCCESS
;

4688 
	}
}

4690 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_581030
(
memˇched_°
 *)

4692 #i‚de‡
DEBUG


4693 
memˇched_°©_°
 *
loˇl_°©

	`memˇched_°©
(
NULL
, NULL, NULL);

4694 
	`ã°_Ál£
(
loˇl_°©
);

4696 
	`memˇched_°©_‰ì
(
NULL
, NULL);

4699  
TEST_SUCCESS
;

4700 
	}
}

4702 
	#ªgªssi⁄_bug_655423_COUNT
 6000

	)

4703 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_655423
(
memˇched_°
 *
memc
)

4705 
memˇched_°
 *
˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

4706 
memc

NULL
;

4707 
	`ã°_åue
(
˛⁄e
);

4708 
∑ylﬂd
[100];

4710 #ifde‡
__APPLE__


4711  
TEST_SKIPPED
;

4714 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
˛⁄e
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1));

4715 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
˛⁄e
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 1));

4716 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
˛⁄e
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 1));

4717 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
˛⁄e
, 
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
, 1));

4719 
	`mem£t
(
∑ylﬂd
, ('x'), (payload));

4721 
keys_°
 
	`keys
(
ªgªssi⁄_bug_655423_COUNT
);

4723 
size_t
 
x
0; x < 
keys
.
	`size
(); x++)

4725 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
˛⁄e
,

4726 
keys
.
	`key_©
(
x
),

4727 
keys
.
	`Àngth_©
(
x
),

4728 
∑ylﬂd
, (payload), 0, 0));

4731 
size_t
 
x
0; x < 
keys
.
	`size
(); x++)

4733 
size_t
 
vÆue_Àngth
;

4734 
memˇched_ªtu∫_t
 
rc
;

4735 *
vÆue

	`memˇched_gë
(
˛⁄e
,

4736 
keys
.
	`key_©
(
x
),

4737 
keys
.
	`Àngth_©
(
x
),

4738 &
vÆue_Àngth
, 
NULL
, &
rc
);

4740 i‡(
rc
 =
MEMCACHED_NOTFOUND
)

4742 
	`ã°_Ál£
(
vÆue
);

4743 
	`ã°_zîo
(
vÆue_Àngth
);

4747 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

4748 
	`ã°_åue
(
vÆue
);

4749 
	`ã°_com∑ª
(100LLU, 
vÆue_Àngth
);

4750 
	`‰ì
(
vÆue
);

4753 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4754 
	`memˇched_mgë
(
˛⁄e
,

4755 
keys
.
	`keys_±r
(), keys.
	`Àngths_±r
(),

4756 
keys
.
	`size
()));

4758 
uöt32_t
 
cou¡
= 0;

4759 
memˇched_ªsu…_°
 *
ªsu…

NULL
;

4760 (
ªsu…

	`memˇched_„tch_ªsu…
(
˛⁄e
,Ñesu…, 
NULL
)))

4762 
	`ã°_com∑ª
(
	`size_t
(100), 
	`memˇched_ªsu…_Àngth
(
ªsu…
));

4763 
cou¡
++;

4766 
	`ã°_åue
(
cou¡
 > 100);

4768 
	`memˇched_‰ì
(
˛⁄e
);

4770  
TEST_SUCCESS
;

4771 
	}
}

4776 
	#ªgªssi⁄_bug_490520_COUNT
 200480

	)

4777 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_490520
(
memˇched_°
 *
‹igöÆ_memc
)

4779 
memˇched_°
* 
memc

	`¸óã_sögÀ_ö°™˚_memˇched
(
‹igöÆ_memc
, 
NULL
);

4781 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
,1);

4782 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
,1);

4783 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
, 1000);

4784 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
,1);

4785 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
, 3600);

4788 
blob
[3333] = {0};

4789 
uöt32_t
 
x
0; x < 
ªgªssi⁄_bug_490520_COUNT
; ++x)

4791 
key
[251];

4792 
key_Àngth

	`¢¥ötf
(
key
, (key), "0200%u", 
x
);

4794 
memˇched_ªtu∫
 
rc

	`memˇched_£t
(
memc
, 
key
, 
key_Àngth
, 
blob
, (blob), 0, 0);

4795 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
, 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

4798 
	`memˇched_‰ì
(
memc
);

4800  
TEST_SUCCESS
;

4801 
	}
}

4803 
ã°_ªtu∫_t
 
	$ªgªssi⁄_1009493_TEST
(
memˇched_°
*)

4805 
memˇched_°
* 
memc

	`memˇched_¸óã
(
NULL
);

4806 
	`ã°_åue
(
memc
);

4807 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA
, 
åue
));

4809 
memˇched_°
* 
˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

4810 
	`ã°_åue
(
˛⁄e
);

4812 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
),

4813 
	`memˇched_behavi‹_gë
(
˛⁄e
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
));

4815 
	`memˇched_‰ì
(
memc
);

4816 
	`memˇched_‰ì
(
˛⁄e
);

4818  
TEST_SUCCESS
;

4819 
	}
}

4821 
ã°_ªtu∫_t
 
	$ªgªssi⁄_994772_TEST
(
memˇched_°
* 
memc
)

4823 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1));

4825 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4826 
	`memˇched_£t
(
memc
,

4827 
	`ã°_lôîÆ_∑øm
(
__func__
),

4828 
	`ã°_lôîÆ_∑øm
(
__func__
),

4829 
	`time_t
(0), 
	`uöt32_t
(0)));

4831 c⁄° *
keys
[] = { 
__func__
 };

4832 
size_t
 
key_Àngth
[]{ 
	`°æí
(
__func__
) };

4833 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

4834 
	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 1));

4836 
memˇched_ªtu∫_t
 
rc
;

4837 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, 
NULL
, &
rc
);

4838 
	`ã°_åue
(
ªsu…s
);

4839 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

4841 
	`ã°_°rcmp
(
__func__
, 
	`memˇched_ªsu…_vÆue
(
ªsu…s
));

4842 
uöt64_t
 
ˇs_vÆue

	`memˇched_ªsu…_ˇs
(
ªsu…s
);

4843 
	`ã°_åue
(
ˇs_vÆue
);

4845 * 
èke_vÆue

	`memˇched_ªsu…_èke_vÆue
(
ªsu…s
);

4846 
	`ã°_°rcmp
(
__func__
, 
èke_vÆue
);

4847 
	`‰ì
(
èke_vÆue
);

4849 
	`memˇched_ªsu…_‰ì
(
ªsu…s
);

4852 
	`ã°_åue
(
ˇs_vÆue
 != 9999);

4853 
	`ã°_com∑ª
(
MEMCACHED_END
,

4854 
	`memˇched_ˇs
(
memc
,

4855 
	`ã°_lôîÆ_∑øm
(
__func__
),

4856 
	`ã°_lôîÆ_∑øm
(
__FILE__
),

4857 
	`time_t
(0), 
	`uöt32_t
(0), 9999));

4859 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
,

4860 "dif„ª¡", 
	`°æí
("different"),

4861 
	`ã°_lôîÆ_∑øm
(
__FILE__
),

4862 
	`time_t
(0), 
	`uöt32_t
(0)));

4864  
TEST_SUCCESS
;

4865 
	}
}

4867 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_854604
(
memˇched_°
 *)

4869 
buf„r
[1024];

4871 
	`ã°_com∑ª
(
MEMCACHED_INVALID_ARGUMENTS
, 
	`libmemˇched_check_c⁄figuøti⁄
(0, 0, 
buf„r
, 0));

4873 
	`ã°_com∑ª
(
MEMCACHED_PARSE_ERROR
, 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("sy¡axÉº‹"), 
buf„r
, 0));

4875 
	`ã°_com∑ª
(
MEMCACHED_PARSE_ERROR
, 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("sy¡axÉº‹"), 
buf„r
, 1));

4876 
	`ã°_com∑ª
(
buf„r
[0], 0);

4878 
	`ã°_com∑ª
(
MEMCACHED_PARSE_ERROR
, 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("sy¡axÉº‹"), 
buf„r
, 10));

4879 
	`ã°_åue
(
	`°æí
(
buf„r
));

4881 
	`ã°_com∑ª
(
MEMCACHED_PARSE_ERROR
, 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("sy¡axÉº‹"), 
buf„r
, (buffer)));

4882 
	`ã°_åue
(
	`°æí
(
buf„r
));

4884  
TEST_SUCCESS
;

4885 
	}
}

4887 
	$dõ_mesßge
(
memˇched_°
* 
mc
, 
memˇched_ªtu∫
 
îr‹
, c⁄° * 
wh©
, 
uöt32_t
 
ô
)

4889 
	`Ârötf
(
°dîr
, "Iãøti⁄ #%u: ", 
ô
);

4891 i‡(
îr‹
 =
MEMCACHED_ERRNO
)

4893 
	`Ârötf
(
°dîr
, "systemÉrror %d from %s: %s\n",

4894 
î∫o
, 
wh©
, 
	`°ªº‹
(errno));

4898 
	`Ârötf
(
°dîr
, "îr‹ %d from %s: %s\n", 
îr‹
, 
wh©
,

4899 
	`memˇched_°ªº‹
(
mc
, 
îr‹
));

4901 
	}
}

4903 
	#TEST_CONSTANT_CREATION
 200

	)

4905 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_
(
memˇched_°
 *
memc
)

4907 c⁄° *
ªmŸe_£rvî
;

4908 ()
memc
;

4910 i‡(! (
ªmŸe_£rvî

	`gëív
("LIBMEMCACHED_REMOTE_SERVER")))

4912  
TEST_SKIPPED
;

4915 
uöt32_t
 
x
0; x < 
TEST_CONSTANT_CREATION
; x++)

4917 
memˇched_°
* 
mc

	`memˇched_¸óã
(
NULL
);

4918 
memˇched_ªtu∫
 
rc
;

4920 
rc

	`memˇched_behavi‹_£t
(
mc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1);

4921 i‡(
rc
 !
MEMCACHED_SUCCESS
)

4923 
	`dõ_mesßge
(
mc
, 
rc
, "memˇched_behavi‹_£t", 
x
);

4926 
rc

	`memˇched_behavi‹_£t
(
mc
, 
MEMCACHED_BEHAVIOR_CACHE_LOOKUPS
, 1);

4927 i‡(
rc
 !
MEMCACHED_SUCCESS
)

4929 
	`dõ_mesßge
(
mc
, 
rc
, "memˇched_behavi‹_£t", 
x
);

4932 
rc

	`memˇched_£rvî_add
(
mc
, 
ªmŸe_£rvî
, 0);

4933 i‡(
rc
 !
MEMCACHED_SUCCESS
)

4935 
	`dõ_mesßge
(
mc
, 
rc
, "memˇched_£rvî_add", 
x
);

4938 c⁄° *
£t_key
= "akey";

4939 c⁄° 
size_t
 
£t_key_Àn

	`°æí
(
£t_key
);

4940 c⁄° *
£t_vÆue
= "a value";

4941 c⁄° 
size_t
 
£t_vÆue_Àn

	`°æí
(
£t_vÆue
);

4943 i‡(
rc
 =
MEMCACHED_SUCCESS
)

4945 i‡(
x
 > 0)

4947 
size_t
 
gë_vÆue_Àn
;

4948 *
gë_vÆue
;

4949 
uöt32_t
 
gë_vÆue_Êags
;

4951 
gë_vÆue

	`memˇched_gë
(
mc
, 
£t_key
, 
£t_key_Àn
, &
gë_vÆue_Àn
,

4952 &
gë_vÆue_Êags
, &
rc
);

4953 i‡(
rc
 !
MEMCACHED_SUCCESS
)

4955 
	`dõ_mesßge
(
mc
, 
rc
, "memˇched_gë", 
x
);

4960 i‡(
x
 != 0 &&

4961 (
gë_vÆue_Àn
 !
£t_vÆue_Àn


4962 || 0!=
	`°∫cmp
(
gë_vÆue
, 
£t_vÆue
, 
gë_vÆue_Àn
)))

4964 
	`Ârötf
(
°dîr
, "Values don't match?\n");

4965 
rc

MEMCACHED_FAILURE
;

4967 
	`‰ì
(
gë_vÆue
);

4971 
rc

	`memˇched_£t
(
mc
,

4972 
£t_key
, 
£t_key_Àn
,

4973 
£t_vÆue
, 
£t_vÆue_Àn
,

4977 i‡(
rc
 !
MEMCACHED_SUCCESS
)

4979 
	`dõ_mesßge
(
mc
, 
rc
, "memˇched_£t", 
x
);

4983 
	`memˇched_quô
(
mc
);

4984 
	`memˇched_‰ì
(
mc
);

4986 i‡(
rc
 !
MEMCACHED_SUCCESS
)

4992  
TEST_SUCCESS
;

4993 
	}
}

4995 
ã°_ªtu∫_t
 
	$kûl_HUP_TEST
(
memˇched_°
 *
‹igöÆ_memc
)

4997 
memˇched_°
 *
memc

	`¸óã_sögÀ_ö°™˚_memˇched
(
‹igöÆ_memc
, 0);

4998 
	`ã°_åue
(
memc
);

5000 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

5002 
pid_t
 
pid
;

5003 
	`ã°_åue
((
pid

	`libmemˇched_utû_gëpid
(
	`memˇched_£rvî_«me
(
ö°™˚
),

5004 
	`memˇched_£rvî_p‹t
(
ö°™˚
), 
NULL
)) > -1);

5007 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

5008 
	`memˇched_£t
(
memc
,

5009 
	`ã°_lôîÆ_∑øm
(
__func__
),

5010 
	`ã°_lôîÆ_∑øm
(
__func__
),

5012 
	`ã°_åue_gŸ
(
	`kûl
(
pid
, 
SIGHUP
Ë=0, 
	`°ªº‹
(
î∫o
));

5014 
memˇched_ªtu∫_t
 
ªt

	`memˇched_£t
(
memc
,

5015 
	`ã°_lôîÆ_∑øm
(
__func__
),

5016 
	`ã°_lôîÆ_∑øm
(
__func__
),

5018 
	`ã°_com∑ª
(
ªt
, 
memc
);

5019 
	`ã°_com∑ª
(
MEMCACHED_CONNECTION_FAILURE
, 
memc
);

5021 
	`memˇched_‰ì
(
memc
);

5023  
TEST_SUCCESS
;

5024 
	}
}

	@tests/libmemcached-1.0/mem_functions.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
MEMCACHED_BEHAVIOR_CORK_ã°
(
memˇched_°
 *
memc
);

41 
ã°_ªtu∫_t
 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT_ã°
(
memˇched_°
 *
memc
);

42 
ã°_ªtu∫_t
 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE_ã°
(
memˇched_°
 *
memc
);

43 
ã°_ªtu∫_t
 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE_ã°
(
memˇched_°
 *
memc
);

44 
ã°_ªtu∫_t
 
_u£r_suµlõd_bug21
(
memˇched_°
* 
memc
, 
size_t
 
key_cou¡
);

45 
ã°_ªtu∫_t
 
add_ho°_ã°
(
memˇched_°
 *
memc
);

46 
ã°_ªtu∫_t
 
add_ho°_ã°1
(
memˇched_°
 *
memc
);

47 
ã°_ªtu∫_t
 
memˇched_add_SUCCESS_TEST
(
memˇched_°
*);

48 
ã°_ªtu∫_t
 
add_ã°
(
memˇched_°
 *
memc
);

49 
ã°_ªtu∫_t
 
add_wøµî
(
memˇched_°
 *
memc
);

50 
ã°_ªtu∫_t
 
Æloˇti⁄_ã°
(
memˇched_°
 *
nŸ_u£d
);

51 
ã°_ªtu∫_t
 
™Æyzî_ã°
(
memˇched_°
 *
memc
);

52 
ã°_ªtu∫_t
 
≠≥nd_bö¨y_ã°
(
memˇched_°
 *
memc
);

53 
ã°_ªtu∫_t
 
≠≥nd_ã°
(
memˇched_°
 *
memc
);

54 
ã°_ªtu∫_t
 
bad_key_ã°
(
memˇched_°
 *
memc
);

55 
ã°_ªtu∫_t
 
behavi‹_ã°
(
memˇched_°
 *
memc
);

56 
ã°_ªtu∫_t
 
bö¨y_add_ªgªssi⁄
(
memˇched_°
 *
memc
);

57 
ã°_ªtu∫_t
 
bö¨y_ö¸emít_wôh_¥efix_ã°
(
memˇched_°
 *
memc
);

58 
ã°_ªtu∫_t
 
block_add_ªgªssi⁄
(
memˇched_°
 *
memc
);

59 
ã°_ªtu∫_t
 
ˇŒback_ã°
(
memˇched_°
 *
memc
);

60 
ã°_ªtu∫_t
 
ˇs2_ã°
(
memˇched_°
 *
memc
);

61 
ã°_ªtu∫_t
 
ˇs_ã°
(
memˇched_°
 *
memc
);

62 
ã°_ªtu∫_t
 
check_f‹_1_2_3
(
memˇched_°
 *
memc
);

63 
ã°_ªtu∫_t
 
˛⁄e_ã°
(
memˇched_°
 *
memc
);

64 
ã°_ªtu∫_t
 
c⁄√˘i⁄_ã°
(
memˇched_°
 *
memc
);

65 
ã°_ªtu∫_t
 
¸c_run
 (
memˇched_°
 *);

66 
ã°_ªtu∫_t
 
de¸emít_by_key_ã°
(
memˇched_°
 *
memc
);

67 
ã°_ªtu∫_t
 
de¸emít_ã°
(
memˇched_°
 *
memc
);

68 
ã°_ªtu∫_t
 
de¸emít_wôh_öôül_by_key_ã°
(
memˇched_°
 *
memc
);

69 
ã°_ªtu∫_t
 
de¸emít_wôh_öôül_ã°
(
memˇched_°
 *
memc
);

70 
ã°_ªtu∫_t
 
dñëe_ã°
(
memˇched_°
 *
memc
);

71 
ã°_ªtu∫_t
 
dïªˇãd_£t_mem‹y_Æloc
(
memˇched_°
 *
memc
);

72 
ã°_ªtu∫_t
 
íabÀ_ˇs
(
memˇched_°
 *
memc
);

73 
ã°_ªtu∫_t
 
íabÀ_c⁄si°ít_¸c
(
memˇched_°
 *
memc
);

74 
ã°_ªtu∫_t
 
íabÀ_c⁄si°ít_hsõh
(
memˇched_°
 *
memc
);

75 
ã°_ªtu∫_t
 
Êush_ã°
(
memˇched_°
 *
memc
);

76 
ã°_ªtu∫_t
 
‚v1_32_run
 (
memˇched_°
 *);

77 
ã°_ªtu∫_t
 
‚v1_64_run
 (
memˇched_°
 *);

78 
ã°_ªtu∫_t
 
‚v1a_32_run
 (
memˇched_°
 *);

79 
ã°_ªtu∫_t
 
‚v1a_64_run
 (
memˇched_°
 *);

80 
ã°_ªtu∫_t
 
gë_°©s
(
memˇched_°
 *
memc
);

81 
ã°_ªtu∫_t
 
gë_°©s_keys
(
memˇched_°
 *
memc
);

82 
ã°_ªtu∫_t
 
gëpid_c⁄√˘i⁄_Áûuª_ã°
(
memˇched_°
 *
memc
);

83 
ã°_ªtu∫_t
 
gëpid_ã°
(
memˇched_°
 *
memc
);

84 
ã°_ªtu∫_t
 
hash_ßnôy_ã°
 (
memˇched_°
 *
memc
);

85 
ã°_ªtu∫_t
 
hsõh_avaibûôy_ã°
 (
memˇched_°
 *
memc
);

86 
ã°_ªtu∫_t
 
hsõh_run
 (
memˇched_°
 *);

87 
ã°_ªtu∫_t
 
ö¸emít_by_key_ã°
(
memˇched_°
 *
memc
);

88 
ã°_ªtu∫_t
 
ö¸emít_ã°
(
memˇched_°
 *
memc
);

89 
ã°_ªtu∫_t
 
ö¸emít_wôh_öôül_by_key_ã°
(
memˇched_°
 *
memc
);

90 
ã°_ªtu∫_t
 
ö¸emít_wôh_öôül_ã°
(
memˇched_°
 *
memc
);

91 
ã°_ªtu∫_t
 
öô_ã°
(
memˇched_°
 *
nŸ_u£d
);

92 
ã°_ªtu∫_t
 
jíkös_run
 (
memˇched_°
 *);

93 
ã°_ªtu∫_t
 
key_£tup
(
memˇched_°
 *
memc
);

94 
ã°_ªtu∫_t
 
key_ã¨down
(
memˇched_°
 *);

95 
ã°_ªtu∫_t
 
libmemˇched_°rög_behavi‹_ã°
(
memˇched_°
 *);

96 
ã°_ªtu∫_t
 
libmemˇched_°rög_di°ributi⁄_ã°
(
memˇched_°
 *);

97 
ã°_ªtu∫_t
 
md5_run
 (
memˇched_°
 *);

98 
ã°_ªtu∫_t
 
memˇched_„tch_ªsu…_NOT_FOUND
(
memˇched_°
 *
memc
);

99 
ã°_ªtu∫_t
 
memˇched_gë_MEMCACHED_ERRNO
(
memˇched_°
 *);

100 
ã°_ªtu∫_t
 
memˇched_gë_MEMCACHED_NOTFOUND
(
memˇched_°
 *
memc
);

101 
ã°_ªtu∫_t
 
memˇched_gë_by_key_MEMCACHED_ERRNO
(
memˇched_°
 *
memc
);

102 
ã°_ªtu∫_t
 
memˇched_gë_by_key_MEMCACHED_NOTFOUND
(
memˇched_°
 *
memc
);

103 
ã°_ªtu∫_t
 
memˇched_gë_hashkô_ã°
 (
memˇched_°
 *);

104 
ã°_ªtu∫_t
 
memˇched_mgë_mixed_memˇched_gë_TEST
(
memˇched_°
 *
memc
);

105 
ã°_ªtu∫_t
 
memˇched_ªtu∫_t_TEST
(
memˇched_°
 *
memc
);

106 
ã°_ªtu∫_t
 
memˇched_£rvî_curs‹_ã°
(
memˇched_°
 *
memc
);

107 
ã°_ªtu∫_t
 
memˇched_£rvî_ªmove_ã°
(
memˇched_°
*);

108 
ã°_ªtu∫_t
 
memˇched_°©_execuã_ã°
(
memˇched_°
 *
memc
);

109 
ã°_ªtu∫_t
 
mgë_íd
(
memˇched_°
 *
memc
);

110 
ã°_ªtu∫_t
 
mgë_execuã
(
memˇched_°
 *
‹igöÆ_memc
);

111 
ã°_ªtu∫_t
 
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH_TEST
(
memˇched_°
 *
‹igöÆ_memc
);

112 
ã°_ªtu∫_t
 
mgë_ªsu…_Æloc_ã°
(
memˇched_°
 *
memc
);

113 
ã°_ªtu∫_t
 
mgë_ªsu…_fun˘i⁄
(
memˇched_°
 *
memc
);

114 
ã°_ªtu∫_t
 
mgë_ªsu…_ã°
(
memˇched_°
 *
memc
);

115 
ã°_ªtu∫_t
 
mgë_ã°
(
memˇched_°
 *
memc
);

116 
ã°_ªtu∫_t
 
murmur_avaibûôy_ã°
 (
memˇched_°
 *
memc
);

117 
ã°_ªtu∫_t
 
murmur_run
 (
memˇched_°
 *);

118 
ã°_ªtu∫_t
 
murmur3_TEST
(
hashkô_°
 *);

119 
ã°_ªtu∫_t
 
n‹ïly_ã°
(
memˇched_°
 *
memc
);

120 
ã°_ªtu∫_t
 
⁄e_©_a_time_run
 (
memˇched_°
 *);

121 
ã°_ªtu∫_t
 
këama_TEST
(
memˇched_°
 *);

122 
ã°_ªtu∫_t
 
ouçut_këama_weighãd_keys
(
memˇched_°
 *);

123 
ã°_ªtu∫_t
 
libmemˇched_utû_pög_TEST
(
memˇched_°
*);

124 
ã°_ªtu∫_t
 
¥ïíd_ã°
(
memˇched_°
 *
memc
);

125 
ã°_ªtu∫_t
 
quô_ã°
(
memˇched_°
 *
memc
);

126 
ã°_ªtu∫_t
 
ªad_through
(
memˇched_°
 *
memc
);

127 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_
(
memˇched_°
*);

128 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_421108
(
memˇched_°
*);

129 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_434484
(
memˇched_°
*);

130 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_434843
(
memˇched_°
*);

131 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_434843_buf„ªd
(
memˇched_°
*);

132 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_442914
(
memˇched_°
*);

133 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_447342
(
memˇched_°
*);

134 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_463297
(
memˇched_°
*);

135 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_490486
(
memˇched_°
*);

136 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_490520
(
memˇched_°
*);

137 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_581030
(
memˇched_°
*);

138 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_583031
(
memˇched_°
*);

139 
ã°_ªtu∫_t
 
ªgªssi⁄_1021819_TEST
(
memˇched_°
*);

140 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_655423
(
memˇched_°
*);

141 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_854604
(
memˇched_°
*);

142 
ã°_ªtu∫_t
 
ª∂a˚_ã°
(
memˇched_°
 *
memc
);

143 
ã°_ªtu∫_t
 
ªsu…_Æloc
(
memˇched_°
 *
memc
);

144 
ã°_ªtu∫_t
 
ªsu…_°©ic
(
memˇched_°
 *
memc
);

145 
ã°_ªtu∫_t
 
£À˘i⁄_of_«me•a˚_ã°s
(
memˇched_°
 *
memc
);

146 
ã°_ªtu∫_t
 
£rvî_s‹t2_ã°
(
memˇched_°
 *
±r
);

147 
ã°_ªtu∫_t
 
£rvî_s‹t_ã°
(
memˇched_°
 *
±r
);

148 
ã°_ªtu∫_t
 
£rvî_uns‹t_ã°
(
memˇched_°
 *
±r
);

149 
ã°_ªtu∫_t
 
£t_mem‹y_Æloc
(
memˇched_°
 *
memc
);

150 
ã°_ªtu∫_t
 
£t_«me•a˚
(
memˇched_°
 *
memc
);

151 
ã°_ªtu∫_t
 
£t_«me•a˚_™d_bö¨y
(
memˇched_°
 *
memc
);

152 
ã°_ªtu∫_t
 
£t_ã°
(
memˇched_°
 *
memc
);

153 
ã°_ªtu∫_t
 
£t_ã°2
(
memˇched_°
 *
memc
);

154 
ã°_ªtu∫_t
 
£t_ã°3
(
memˇched_°
 *
memc
);

155 
ã°_ªtu∫_t
 
°©s_£rvî«me_ã°
(
memˇched_°
 *
memc
);

156 
ã°_ªtu∫_t
 
ã°_gë_œ°_disc⁄√˘
(
memˇched_°
 *
memc
);

157 
ã°_ªtu∫_t
 
ã°_mu…ùÀ_gë_œ°_disc⁄√˘
(
memˇched_°
 *);

158 
ã°_ªtu∫_t
 
ã°_vîbosôy
(
memˇched_°
 *
memc
);

159 
ã°_ªtu∫_t
 
u£r_suµlõd_bug10
(
memˇched_°
 *
memc
);

160 
ã°_ªtu∫_t
 
u£r_suµlõd_bug11
(
memˇched_°
 *
memc
);

161 
ã°_ªtu∫_t
 
u£r_suµlõd_bug12
(
memˇched_°
 *
memc
);

162 
ã°_ªtu∫_t
 
u£r_suµlõd_bug13
(
memˇched_°
 *
memc
);

163 
ã°_ªtu∫_t
 
u£r_suµlõd_bug14
(
memˇched_°
 *
memc
);

164 
ã°_ªtu∫_t
 
u£r_suµlõd_bug15
(
memˇched_°
 *
memc
);

165 
ã°_ªtu∫_t
 
u£r_suµlõd_bug16
(
memˇched_°
 *
memc
);

166 
ã°_ªtu∫_t
 
u£r_suµlõd_bug17
(
memˇched_°
 *
memc
);

167 
ã°_ªtu∫_t
 
u£r_suµlõd_bug19
(
memˇched_°
 *);

168 
ã°_ªtu∫_t
 
u£r_suµlõd_bug20
(
memˇched_°
 *
memc
);

169 
ã°_ªtu∫_t
 
u£r_suµlõd_bug21
(
memˇched_°
 *
memc
);

170 
ã°_ªtu∫_t
 
u£r_suµlõd_bug4
(
memˇched_°
 *
memc
);

171 
ã°_ªtu∫_t
 
u£r_suµlõd_bug5
(
memˇched_°
 *
memc
);

172 
ã°_ªtu∫_t
 
u£r_suµlõd_bug6
(
memˇched_°
 *
memc
);

173 
ã°_ªtu∫_t
 
u£r_suµlõd_bug7
(
memˇched_°
 *
memc
);

174 
ã°_ªtu∫_t
 
u£r_suµlõd_bug8
(
memˇched_°
 *);

175 
ã°_ªtu∫_t
 
u£r_suµlõd_bug9
(
memˇched_°
 *
memc
);

176 
ã°_ªtu∫_t
 
u£rd©a_ã°
(
memˇched_°
 *
memc
);

177 
ã°_ªtu∫_t
 
utû_vîsi⁄_ã°
(
memˇched_°
 *
memc
);

178 
ã°_ªtu∫_t
 
vîsi⁄_°rög_ã°
(
memˇched_°
 *);

179 
ã°_ªtu∫_t
 
wr⁄g_Áûuª_cou¡î_ã°
(
memˇched_°
 *
memc
);

180 
ã°_ªtu∫_t
 
wr⁄g_Áûuª_cou¡î_two_ã°
(
memˇched_°
 *
memc
);

181 
ã°_ªtu∫_t
 
kûl_HUP_TEST
(
memˇched_°
 *
memc
);

182 
ã°_ªtu∫_t
 
ªgªssi⁄_996813_TEST
(
memˇched_°
*);

183 
ã°_ªtu∫_t
 
ªgªssi⁄_994772_TEST
(
memˇched_°
*);

184 
ã°_ªtu∫_t
 
ªgªssi⁄_1009493_TEST
(
memˇched_°
*);

185 
ã°_ªtu∫_t
 
ªgªssi⁄_1048945_TEST
(
memˇched_°
*);

186 
ã°_ªtu∫_t
 
ªgªssi⁄_1067242_TEST
(
memˇched_°
*);

187 
ã°_ªtu∫_t
 
com∑ris⁄_›î©‹_memˇched_°_™d__memˇched_ªtu∫_t_TEST
(
memˇched_°
*);

	@tests/libmemcached-1.0/memcached_get.cc

37 
	~<mem_c⁄fig.h
>

38 
	~<libã°/ã°.hµ
>

44 
	~<libmemˇched-1.0/memˇched.h
>

45 
	~"ã°s/libmemˇched-1.0/memˇched_gë.h
"

46 
	~"ã°s/libmemˇched-1.0/£tup_™d_ã¨downs.h
"

48 
ã°_ªtu∫_t
 
	$gë_ã°
(
memˇched_°
 *
memc
)

50 
uöt64_t
 
quîy_id

	`memˇched_quîy_id
(
memc
);

51 
memˇched_ªtu∫_t
 
rc

	`memˇched_dñëe
(
memc
,

52 
	`ã°_lôîÆ_∑øm
(
__func__
),

53 
	`time_t
(0));

54 
	`ã°_åue
(
rc
 =
MEMCACHED_BUFFERED
 
‹
Ñ¯=
MEMCACHED_NOTFOUND
);

55 
	`ã°_com∑ª
(
quîy_id
 +1, 
	`memˇched_quîy_id
(
memc
));

57 
size_t
 
°rög_Àngth
;

58 
uöt32_t
 
Êags
;

59 *
°rög

	`memˇched_gë
(
memc
,

60 
	`ã°_lôîÆ_∑øm
(
__func__
),

61 &
°rög_Àngth
, &
Êags
, &
rc
);

63 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

64 
	`ã°_Ál£
(
°rög_Àngth
);

65 
	`ã°_Ál£
(
°rög
);

67  
TEST_SUCCESS
;

68 
	}
}

70 
ã°_ªtu∫_t
 
	$gë_ã°2
(
memˇched_°
 *
memc
)

72 c⁄° *
vÆue
= "when we sanitize";

74 
uöt64_t
 
quîy_id

	`memˇched_quîy_id
(
memc
);

75 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

76 
	`memˇched_£t
(
memc
,

77 
	`ã°_lôîÆ_∑øm
(
__func__
),

78 
vÆue
, 
	`°æí
(value),

79 
	`time_t
(0), 
	`uöt32_t
(0)));

80 
	`ã°_com∑ª
(
quîy_id
 +1, 
	`memˇched_quîy_id
(
memc
));

82 
quîy_id

	`memˇched_quîy_id
(
memc
);

83 
	`ã°_åue
(
quîy_id
);

85 
uöt32_t
 
Êags
;

86 
size_t
 
°rög_Àngth
;

87 
memˇched_ªtu∫_t
 
rc
;

88 *
°rög

	`memˇched_gë
(
memc
,

89 
	`ã°_lôîÆ_∑øm
(
__func__
),

90 &
°rög_Àngth
, &
Êags
, &
rc
);

91 
	`ã°_com∑ª
(
quîy_id
 +1, 
	`memˇched_quîy_id
(
memc
));

93 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

94 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_œ°_îr‹
(
memc
));

95 
	`ã°_åue
(
°rög
);

96 
	`ã°_com∑ª
(
	`°æí
(
vÆue
), 
°rög_Àngth
);

97 
	`ã°_memcmp
(
°rög
, 
vÆue
, 
°rög_Àngth
);

99 
	`‰ì
(
°rög
);

101  
TEST_SUCCESS
;

102 
	}
}

104 
ã°_ªtu∫_t
 
	$gë_ã°3
(
memˇched_°
 *
memc
)

106 
size_t
 
vÆue_Àngth
= 8191;

108 
libã°
::
vch¨_t
 
vÆue
;

109 
vÆue
.
	`ª£rve
(
vÆue_Àngth
);

110 
uöt32_t
 
x
0; x < 
vÆue_Àngth
; x++)

112 
vÆue
.
	`push_back
((
x
 % 127));

115 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

116 
	`memˇched_£t
(
memc
,

117 
	`ã°_lôîÆ_∑øm
(
__func__
),

118 &
vÆue
[0], vÆue.
	`size
(),

119 
	`time_t
(0), 
	`uöt32_t
(0)));

121 
size_t
 
°rög_Àngth
;

122 
uöt32_t
 
Êags
;

123 
memˇched_ªtu∫_t
 
rc
;

124 *
°rög

	`memˇched_gë
(
memc
,

125 
	`ã°_lôîÆ_∑øm
(
__func__
),

126 &
°rög_Àngth
, &
Êags
, &
rc
);

128 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

129 
	`ã°_åue
(
°rög
);

130 
	`ã°_com∑ª
(
vÆue
.
	`size
(), 
°rög_Àngth
);

131 
	`ã°_memcmp
(
°rög
, &
vÆue
[0], 
°rög_Àngth
);

133 
	`‰ì
(
°rög
);

135  
TEST_SUCCESS
;

136 
	}
}

138 
ã°_ªtu∫_t
 
	$gë_ã°4
(
memˇched_°
 *
memc
)

140 
size_t
 
vÆue_Àngth
= 8191;

142 
libã°
::
vch¨_t
 
vÆue
;

143 
vÆue
.
	`ª£rve
(
vÆue_Àngth
);

144 
uöt32_t
 
x
0; x < 
vÆue_Àngth
; x++)

146 
vÆue
.
	`push_back
((
x
 % 127));

149 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

150 
	`memˇched_£t
(
memc
,

151 
	`ã°_lôîÆ_∑øm
(
__func__
),

152 &
vÆue
[0], vÆue.
	`size
(),

153 
	`time_t
(0), 
	`uöt32_t
(0)));

155 
uöt32_t
 
x
= 0; x < 10; x++)

157 
uöt32_t
 
Êags
;

158 
size_t
 
°rög_Àngth
;

159 
memˇched_ªtu∫_t
 
rc
;

160 *
°rög

	`memˇched_gë
(
memc
,

161 
	`ã°_lôîÆ_∑øm
(
__func__
),

162 &
°rög_Àngth
, &
Êags
, &
rc
);

164 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

165 
	`ã°_åue
(
°rög
);

166 
	`ã°_com∑ª
(
vÆue
.
	`size
(), 
°rög_Àngth
);

167 
	`ã°_memcmp
(
°rög
, &
vÆue
[0], 
°rög_Àngth
);

168 
	`‰ì
(
°rög
);

171  
TEST_SUCCESS
;

172 
	}
}

179 
ã°_ªtu∫_t
 
	$gë_ã°5
(
memˇched_°
 *
memc
)

185 c⁄° *
keys
[]= { "key", "key" };

186 
size_t
 
Àngths
[]= { 3, 3 };

187 
uöt32_t
 
Êags
;

188 
size_t
 
æí
;

190 
	`ã°_com∑ª
(
	`ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memc
),

191 
	`memˇched_£t
(
memc
, 
keys
[0], 
Àngths
[0],

192 
keys
[0], 
Àngths
[0],

193 
	`time_t
(0), 
	`uöt32_t
(0)));

194 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_mgë
(
memc
, 
keys
, 
Àngths
, 
	`ã°_¨øy_Àngth
(keys)));

196 
memˇched_ªsu…_°
 
ªsu…s_obj
;

197 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

198 
	`ã°_åue
(
ªsu…s
);

200 
memˇched_ªtu∫_t
 
rc
;

201 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
);

202 
	`ã°_åue
(
ªsu…s
);

204 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

207 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
, 
keys
[0], 
Àngths
[0], keys[0],Üengths[0], 0, 0));

209 *
vÆ

	`memˇched_gë_by_key
(
memc
, 
keys
[0], 
Àngths
[0], "yek", 3,

210 &
æí
, &
Êags
, &
rc
);

211 
	`ã°_Ál£
(
vÆ
);

212 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

213 
vÆ

	`memˇched_gë
(
memc
, 
keys
[0], 
Àngths
[0], &
æí
, &
Êags
, &
rc
);

214 
	`ã°_åue
(
vÆ
);

215 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

216 
	`‰ì
(
vÆ
);

218  
TEST_SUCCESS
;

219 
	}
}

	@tests/libmemcached-1.0/memcached_get.h

37 #¥agm®
⁄˚


39 
ã°_ªtu∫_t
 
gë_ã°
(
memˇched_°
*);

40 
ã°_ªtu∫_t
 
gë_ã°2
(
memˇched_°
*);

41 
ã°_ªtu∫_t
 
gë_ã°3
(
memˇched_°
*);

42 
ã°_ªtu∫_t
 
gë_ã°4
(
memˇched_°
*);

43 
ã°_ªtu∫_t
 
gë_ã°5
(
memˇched_°
*);

	@tests/libmemcached-1.0/namespace.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
usög
 
«me•a˚
 
	glibã°
;

43 
	~<libmemˇched-1.0/memˇched.h
>

45 
	~<ã°s/«me•a˚.h
>

47 
ã°_ªtu∫_t
 
	$memˇched_ö¸emít_«me•a˚
(
memˇched_°
 *
memc
)

49 
uöt64_t
 
√w_numbî
;

51 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

52 
	`memˇched_£t
(
memc
,

53 
	`ã°_lôîÆ_∑øm
("number"),

54 
	`ã°_lôîÆ_∑øm
("0"),

55 (
time_t
)0, (
uöt32_t
)0));

57 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

58 
	`memˇched_ö¸emít
(
memc
,

59 
	`ã°_lôîÆ_∑øm
("number"),

60 1, &
√w_numbî
));

61 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
√w_numbî
);

63 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

64 
	`memˇched_ö¸emít
(
memc
,

65 
	`ã°_lôîÆ_∑øm
("number"),

66 1, &
√w_numbî
));

67 
	`ã°_com∑ª
(
	`uöt64_t
(2), 
√w_numbî
);

69 
memˇched_°
 *
˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

71 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

72 
	`memˇched_ˇŒback_£t
(
˛⁄e
, 
MEMCACHED_CALLBACK_NAMESPACE
, "all_your_bases"));

74 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
,

75 
	`memˇched_ö¸emít
(
˛⁄e
,

76 
	`ã°_lôîÆ_∑øm
("number"),

77 1, &
√w_numbî
));

79 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

80 
	`memˇched_add
(
˛⁄e
,

81 
	`ã°_lôîÆ_∑øm
("number"),

82 
	`ã°_lôîÆ_∑øm
("10"),

83 (
time_t
)0, (
uöt32_t
)0));

85 *
vÆue

	`memˇched_gë
(
˛⁄e
,

86 
	`ã°_lôîÆ_∑øm
("number"),

88 
	`ã°_åue
(
vÆue
);

89 
	`ã°_com∑ª
(2UL, 
	`°æí
(
vÆue
));

90 
	`ã°_°rcmp
("10", 
vÆue
);

91 
	`‰ì
(
vÆue
);

93 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

94 
	`memˇched_ö¸emít
(
˛⁄e
,

95 
	`ã°_lôîÆ_∑øm
("number"),

96 1, &
√w_numbî
));

97 
	`ã°_com∑ª
(
	`uöt64_t
(11), 
√w_numbî
);

99 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

100 
	`memˇched_ö¸emít
(
memc
,

101 
	`ã°_lôîÆ_∑øm
("number"),

102 1, &
√w_numbî
));

103 
	`ã°_com∑ª
(
	`uöt64_t
(3), 
√w_numbî
);

105 
	`memˇched_‰ì
(
˛⁄e
);

107  
TEST_SUCCESS
;

108 
	}
}

	@tests/libmemcached-1.0/parser.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
usög
 
«me•a˚
 
	glibã°
;

43 
	~<ve˘‹
>

44 
	~<°rög
>

45 
	~<˚ºno
>

47 
	~<libmemˇched-1.0/memˇched.h
>

48 
	~<libmemˇchedutû-1.0/utû.h
>

50 
	~<ã°s/libmemˇched-1.0/∑r£r.h
>

51 
	~<ã°s/¥öt.h
>

52 
	~"libmemˇched/ö°™˚.hµ
"

54 
	esˇ¬î_ty≥_t


56 
	mNIL
,

57 
	mUNSIGNED
,

58 
	mSIGNED
,

59 
	mARRAY


63 
	ssˇ¬î_°rög_°
 {

64 c⁄° *
	mc_°r
;

65 
size_t
 
	msize
;

68 
ölöe
 
sˇ¬î_°rög_°
 
	$sˇ¬î_°rög
(c⁄° *
¨g
, 
size_t
 
¨g_size
)

70 
sˇ¬î_°rög_°
 
loˇl
{ 
¨g
, 
¨g_size
 };

71  
loˇl
;

72 
	}
}

74 
	#make_sˇ¬î_°rög
(
X
Ë
	`sˇ¬î_°rög
((X), 
°©ic_ˇ°
<
size_t
>((XË- 1))

	)

76 
sˇ¬î_°rög_°
 
	gsˇ¬î_°rög_nuŒ
= { 0, 0};

78 
	ssˇ¬î_v¨übÀ_t
 {

79 
sˇ¬î_ty≥_t
 
	mty≥
;

80 
sˇ¬î_°rög_°
 
	m›ti⁄
;

81 
sˇ¬î_°rög_°
 
	mªsu…
;

82 
ã°_ªtu∫_t
 (*
check_func
)(
memˇched_°
 *
	mmemc
, c⁄° 
	msˇ¬î_°rög_°
 &
	mho°«me
);

86 
ã°_ªtu∫_t
 
	$__check_ho°
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &
ho°«me
)

88 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

89 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

91 
	`ã°_åue
(
ö°™˚
);

93 c⁄° *
fú°_ho°«me
 = 
	`memˇched_£rvî_«me
(
ö°™˚
);

94 
	`ã°_åue
(
fú°_ho°«me
);

95 
	`ã°_°rcmp
(
fú°_ho°«me
, 
ho°«me
.
c_°r
);

97  
TEST_SUCCESS
;

98 
	}
}

101 
ã°_ªtu∫_t
 
	$__check_«me•a˚
(
memˇched_°
 *, c⁄° 
sˇ¬î_°rög_°
 &)

104 c⁄° *
_«me•a˚
 = 
	`memˇched_gë_«me•a˚
(
memc
);

105 
	`ã°_åue
(
_«me•a˚
);

106 
	`ã°_°rcmp
(
_«me•a˚
, 
¨g
.
c_°r
);

109  
TEST_SUCCESS
;

110 
	}
}

112 
ã°_ªtu∫_t
 
	$__check_IO_MSG_WATERMARK
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &
vÆue
)

114 
uöt64_t
 
vÆue_numbî
;

116 
vÆue_numbî

	`©ﬁl
(
vÆue
.
c_°r
);

118 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
Ë=
vÆue_numbî
);

119  
TEST_SUCCESS
;

120 
	}
}

122 
ã°_ªtu∫_t
 
	$__check_REMOVE_FAILED_SERVERS
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &)

124 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
));

125  
TEST_SUCCESS
;

126 
	}
}

128 
ã°_ªtu∫_t
 
	$__check_NOREPLY
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &)

130 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
));

131  
TEST_SUCCESS
;

132 
	}
}

134 
ã°_ªtu∫_t
 
	$__check_VERIFY_KEY
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &)

136 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
));

137  
TEST_SUCCESS
;

138 
	}
}

140 
ã°_ªtu∫_t
 
	$__check_di°ributi⁄_RANDOM
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &)

142 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
Ë=
MEMCACHED_DISTRIBUTION_RANDOM
);

143  
TEST_SUCCESS
;

144 
	}
}

146 
sˇ¬î_v¨übÀ_t
 
	gã°_£rvî_°rögs
[]= {

147 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîˆoˇlho°"), make_sˇ¬î_°rög("loˇlho°"), 
__check_ho°
 },

148 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvî=10.0.2.1"), make_sˇ¬î_°rög("10.0.2.1"), 
__check_ho°
 },

149 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîÛxam∂e.com"), make_sˇ¬î_°rög("exam∂e.com"), 
__check_ho°
 },

150 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîˆoˇlho°:30"), make_sˇ¬î_°rög("loˇlho°"), 
__check_ho°
 },

151 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvî=10.0.2.1:20"), make_sˇ¬î_°rög("10.0.2.1"), 
__check_ho°
 },

152 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîÛxam∂e.com:1024"), make_sˇ¬î_°rög("exam∂e.com"), 
__check_ho°
 },

153 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
 }

156 
sˇ¬î_v¨übÀ_t
 
	gã°_£rvî_°rögs_wôh_weights
[]= {

157 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvî=10.0.2.1:30/?40"), make_sˇ¬î_°rög("10.0.2.1"), 
__check_ho°
 },

158 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîÛxam∂e.com:1024/?30"), make_sˇ¬î_°rög("exam∂e.com"), 
__check_ho°
 },

159 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvî=10.0.2.1/?20"), make_sˇ¬î_°rög("10.0.2.1"), 
__check_ho°
 },

160 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîÛxam∂e.com/?10"), make_sˇ¬î_°rög("exam∂e.com"), 
__check_ho°
 },

161 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
 }

164 
sˇ¬î_v¨übÀ_t
 
	gbad_ã°_°rögs
[]= {

165 { 
ARRAY
, 
make_sˇ¬î_°rög
("-£rvîsˆoˇlho°:11221,loˇlho°:11222,loˇlho°:11223,loˇlho°:11224,loˇlho°:11225"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

166 { 
ARRAY
, 
make_sˇ¬î_°rög
("-- sîvîs˜.exam∂e.com:81,loˇlho°:82,b.exam∂e.com"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

167 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîsˆoˇlho°:+80"), 
sˇ¬î_°rög_nuŒ
, 
NULL
},

168 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîsˆoˇlho°.com."), 
sˇ¬î_°rög_nuŒ
, 
NULL
},

169 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîˆoˇlho°.com."), 
sˇ¬î_°rög_nuŒ
, 
NULL
},

170 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîˆoˇlho°.com.:80"), 
sˇ¬î_°rög_nuŒ
, 
NULL
},

171 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

174 
sˇ¬î_v¨übÀ_t
 
	gã°_numbî_›ti⁄s
[]= {

175 { 
ARRAY
, 
make_sˇ¬î_°rög
("--CONNECT-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

176 { 
ARRAY
, 
make_sˇ¬î_°rög
("--IO-BYTES-WATERMARK=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

177 { 
ARRAY
, 
make_sˇ¬î_°rög
("--IO-KEY-PREFETCH=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

178 { 
ARRAY
, 
make_sˇ¬î_°rög
("--IO-MSG-WATERMARK=456"), make_sˇ¬î_°rög("456"), 
__check_IO_MSG_WATERMARK
 },

179 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NUMBER-OF-REPLICAS=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

180 { 
ARRAY
, 
make_sˇ¬î_°rög
("--POLL-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

181 { 
ARRAY
, 
make_sˇ¬î_°rög
("--RCV-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

182 { 
ARRAY
, 
make_sˇ¬î_°rög
("--REMOVE-FAILED-SERVERS=3"), 
sˇ¬î_°rög_nuŒ
, 
__check_REMOVE_FAILED_SERVERS
 },

183 { 
ARRAY
, 
make_sˇ¬î_°rög
("--RETRY-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

184 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SND-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

185 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SOCKET-RECV-SIZE=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

186 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SOCKET-SEND-SIZE=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

187 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

190 
sˇ¬î_v¨übÀ_t
 
	gã°_boﬁón_›ti⁄s
[]= {

191 { 
ARRAY
, 
make_sˇ¬î_°rög
("--FETCH-VERSION"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

192 { 
ARRAY
, 
make_sˇ¬î_°rög
("--BINARY-PROTOCOL"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

193 { 
ARRAY
, 
make_sˇ¬î_°rög
("--BUFFER-REQUESTS"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

194 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH-WITH-NAMESPACE"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

195 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NOREPLY"), 
sˇ¬î_°rög_nuŒ
, 
__check_NOREPLY
 },

196 { 
ARRAY
, 
make_sˇ¬î_°rög
("--RANDOMIZE-REPLICA-READ"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

197 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SORT-HOSTS"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

198 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SUPPORT-CAS"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

199 { 
ARRAY
, 
make_sˇ¬î_°rög
("--TCP-NODELAY"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

200 { 
ARRAY
, 
make_sˇ¬î_°rög
("--TCP-KEEPALIVE"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

201 { 
ARRAY
, 
make_sˇ¬î_°rög
("--TCP-KEEPIDLE"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

202 { 
ARRAY
, 
make_sˇ¬î_°rög
("--USE-UDP"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

203 { 
ARRAY
, 
make_sˇ¬î_°rög
("--VERIFY-KEY"), 
sˇ¬î_°rög_nuŒ
, 
__check_VERIFY_KEY
 },

204 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

207 
sˇ¬î_v¨übÀ_t
 
	g«me•a˚_°rögs
[]= {

208 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NAMESPACE=foo"), make_sˇ¬î_°rög("foo"), 
__check_«me•a˚
 },

209 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NAMESPACE=\"foo\""), make_sˇ¬î_°rög("foo"), 
__check_«me•a˚
 },

210 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NAMESPACE=\"This_is_a_vîy_l⁄g_key\""), make_sˇ¬î_°rög("This_is_a_vîy_l⁄g_key"), 
__check_«me•a˚
 },

211 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

214 
sˇ¬î_v¨übÀ_t
 
	gdi°ributi⁄_°rögs
[]= {

215 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTION=c⁄si°ít"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

216 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTION=c⁄si°ít,CRC"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

217 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTION=c⁄si°ít,MD5"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

218 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTIONÙ™dom"), 
sˇ¬î_°rög_nuŒ
, 
__check_di°ributi⁄_RANDOM
 },

219 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTION=moduœ"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

220 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

223 
sˇ¬î_v¨übÀ_t
 
	ghash_°rögs
[]= {

224 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=CRC"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

225 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=FNV1A_32"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

226 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=FNV1_32"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

228 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=JENKINS"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

230 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=MD5"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

231 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

235 
ã°_ªtu∫_t
 
	$_ã°_›ti⁄
(
sˇ¬î_v¨übÀ_t
 *
sˇ¬î
, 
boﬁ
 
ã°_åue_›t

åue
)

237 
sˇ¬î_v¨übÀ_t
 *
±r

sˇ¬î
;Öå->
ty≥
 !
NIL
;Ötr++)

239 
memˇched_°
 *
memc

	`memˇched
(
±r
->
›ti⁄
.
c_°r
,Öå->›ti⁄.
size
);

243 i‡(
memc
 =
NULL
 
™d
 
ã°_åue_›t
)

245 
buf„r
[2048];

246 
boﬁ
 
suc˚ss

	`libmemˇched_check_c⁄figuøti⁄
(
±r
->
›ti⁄
.
c_°r
,Öå->›ti⁄.
size
, 
buf„r
, (buffer));

248 
°d
::
°rög
 
	`ãmp
(
buf„r
);

249 
ãmp
+= " with option string:";

250 
ãmp
+
±r
->
›ti⁄
.
c_°r
;

251 
	`ã°_åue_gŸ
(
suc˚ss
, 
ãmp
.
	`c_°r
());

252 
Eº‹
 << "Faûed f‹ " << 
ãmp
;

254  
TEST_FAILURE
;

257 i‡(
ã°_åue_›t
)

259 i‡(
±r
->
check_func
)

261 
ã°_ªtu∫_t
 
ã°_rc
(*
±r
->
check_func
)(
memc
,Öå->
ªsu…
);

262 i‡(
ã°_rc
 !
TEST_SUCCESS
)

264 
	`memˇched_‰ì
(
memc
);

265  
ã°_rc
;

269 
	`memˇched_‰ì
(
memc
);

273 
	`ã°_Ál£_wôh
(
memc
, 
±r
->
›ti⁄
.
c_°r
);

277  
TEST_SUCCESS
;

278 
	}
}

280 
ã°_ªtu∫_t
 
	$£rvî_ã°
(
memˇched_°
 *)

282  
	`_ã°_›ti⁄
(
ã°_£rvî_°rögs
);

283 
	}
}

285 
ã°_ªtu∫_t
 
	$£rvî_wôh_weight_ã°
(
memˇched_°
 *)

287  
	`_ã°_›ti⁄
(
ã°_£rvî_°rögs_wôh_weights
);

288 
	}
}

290 
ã°_ªtu∫_t
 
	$£rvîs_bad_ã°
(
memˇched_°
 *)

292 
ã°_ªtu∫_t
 
rc
;

293 i‡((
rc

	`_ã°_›ti⁄
(
bad_ã°_°rögs
, 
Ál£
)Ë!
TEST_SUCCESS
)

295  
rc
;

298  
TEST_SUCCESS
;

299 
	}
}

301 
ã°_ªtu∫_t
 
	$∑r£r_numbî_›ti⁄s_ã°
(
memˇched_°
*)

303  
	`_ã°_›ti⁄
(
ã°_numbî_›ti⁄s
);

304 
	}
}

306 
ã°_ªtu∫_t
 
	$∑r£r_boﬁón_›ti⁄s_ã°
(
memˇched_°
*)

308  
	`_ã°_›ti⁄
(
ã°_boﬁón_›ti⁄s
);

309 
	}
}

311 
ã°_ªtu∫_t
 
	$behavi‹_∑r£r_ã°
(
memˇched_°
*)

313  
TEST_SUCCESS
;

314 
	}
}

316 
ã°_ªtu∫_t
 
	$∑r£r_hash_ã°
(
memˇched_°
*)

318  
	`_ã°_›ti⁄
(
hash_°rögs
);

319 
	}
}

321 
ã°_ªtu∫_t
 
	$∑r£r_di°ributi⁄_ã°
(
memˇched_°
*)

323  
	`_ã°_›ti⁄
(
di°ributi⁄_°rögs
);

324 
	}
}

326 
ã°_ªtu∫_t
 
	$∑r£r_key_¥efix_ã°
(
memˇched_°
*)

328  
	`_ã°_›ti⁄
(
di°ributi⁄_°rögs
);

329 
	}
}

331 
ã°_ªtu∫_t
 
	$ã°_«me•a˚_keyw‹d
(
memˇched_°
*)

333  
	`_ã°_›ti⁄
(
«me•a˚_°rögs
);

334 
	}
}

336 
	#SUPPORT_EXAMPLE_CNF
 "suµ‹t/exam∂e.˙f"

	)

338 
ã°_ªtu∫_t
 
	$memˇched_¸óã_wôh_›ti⁄s_wôh_fûíame
(
memˇched_°
*)

340 
	`ã°_skù
(0, 
	`ac˚ss
(
SUPPORT_EXAMPLE_CNF
, 
R_OK
));

342 
memˇched_°
 *
memc_±r

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--CONFIGURE-FILE=\"support/example.cnf\""));

343 
	`ã°_åue_gŸ
(
memc_±r
, "memcached() failed");

344 
	`memˇched_‰ì
(
memc_±r
);

346  
TEST_SUCCESS
;

347 
	}
}

349 
ã°_ªtu∫_t
 
	$libmemˇched_check_c⁄figuøti⁄_wôh_fûíame_ã°
(
memˇched_°
*)

351 
	`ã°_skù
(0, 
	`ac˚ss
(
SUPPORT_EXAMPLE_CNF
, 
R_OK
));

353 
buf„r
[
BUFSIZ
];

355 
	`ã°_com∑ª_höt
(
MEMCACHED_SUCCESS
,

356 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--CONFIGURE-FILE=\"suµ‹t/exam∂e.˙f\""), 
buf„r
, (buffer)),

357 
buf„r
);

359 
	`ã°_com∑ª_höt
(
MEMCACHED_SUCCESS
,

360 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--CONFIGURE-FILE=suµ‹t/exam∂e.˙f"), 
buf„r
, (buffer)),

361 
buf„r
);

363 
	`ã°_com∑ª_höt
(
MEMCACHED_ERRNO
,

364 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--CONFIGURE-FILE=\"bad-∑th/exam∂e.˙f\""), 
buf„r
, (buffer)),

365 
buf„r
) ;

367  
TEST_SUCCESS
;

368 
	}
}

370 
ã°_ªtu∫_t
 
	$libmemˇched_check_c⁄figuøti⁄_ã°
(
memˇched_°
*)

372 
buf„r
[
BUFSIZ
];

373 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

374 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--£rvîˆoˇlho°"), 
buf„r
, (buffer)));

376 
	`ã°_com∑ª_höt
(
MEMCACHED_PARSE_ERROR
,

377 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--dudeˆoˇlho°"), 
buf„r
, (buffer)),

378 
buf„r
);

380  
TEST_SUCCESS
;

381 
	}
}

383 
ã°_ªtu∫_t
 
	$memˇched_¸óã_wôh_›ti⁄s_ã°
(
memˇched_°
*)

386 
memˇched_°
 *
memc_±r
;

387 
memc_±r

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--server=localhost"));

388 
	`ã°_åue_gŸ
(
memc_±r
, 
	`memˇched_œ°_îr‹_mesßge
(memc_ptr));

389 
	`memˇched_‰ì
(
memc_±r
);

393 
memˇched_°
 *
memc_±r

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--dude=localhost"));

394 
	`ã°_Ál£_wôh
(
memc_±r
, 
	`memˇched_œ°_îr‹_mesßge
(memc_ptr));

397  
TEST_SUCCESS
;

398 
	}
}

400 
ã°_ªtu∫_t
 
	$ã°_ö˛ude_keyw‹d
(
memˇched_°
*)

402 
	`ã°_skù
(0, 
	`ac˚ss
(
SUPPORT_EXAMPLE_CNF
, 
R_OK
));

404 
buf„r
[
BUFSIZ
];

405 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

406 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("INCLUDE \"suµ‹t/exam∂e.˙f\""), 
buf„r
, (buffer)));

408  
TEST_SUCCESS
;

409 
	}
}

411 
ã°_ªtu∫_t
 
	$ã°_íd_keyw‹d
(
memˇched_°
*)

413 
buf„r
[
BUFSIZ
];

414 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

415 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--£rvîˆoˇlho° END bad keyw‹ds"), 
buf„r
, (buffer)));

417  
TEST_SUCCESS
;

418 
	}
}

420 
ã°_ªtu∫_t
 
	$ã°_ª£t_keyw‹d
(
memˇched_°
*)

422 
buf„r
[
BUFSIZ
];

423 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

424 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--£rvîˆoˇlho°Ñe£à--£rvî=bad.com"), 
buf„r
, (buffer)));

426  
TEST_SUCCESS
;

427 
	}
}

429 
ã°_ªtu∫_t
 
	$ã°_îr‹_keyw‹d
(
memˇched_°
*)

431 
buf„r
[
BUFSIZ
];

432 
memˇched_ªtu∫_t
 
rc
;

433 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--£rvîˆoˇlho° ERROR --£rvî=bad.com"), 
buf„r
, (buffer));

434 
	`ã°_åue_gŸ
(
rc
 !
MEMCACHED_SUCCESS
, 
buf„r
);

436  
TEST_SUCCESS
;

437 
	}
}

439 
	#RANDOM_STRINGS
 1000

	)

440 
ã°_ªtu∫_t
 
	$øndom_°©emít_buûd_ã°
(
memˇched_°
*)

442 
°d
::
ve˘‹
<
sˇ¬î_°rög_°
 *> 
›ti⁄_li°
;

444 
sˇ¬î_v¨übÀ_t
 *
±r

ã°_£rvî_°rögs
;Öå->
ty≥
 !
NIL
;Ötr++)

445 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

447 
sˇ¬î_v¨übÀ_t
 *
±r

ã°_numbî_›ti⁄s
;Öå->
ty≥
 !
NIL
;Ötr++)

448 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

450 
sˇ¬î_v¨übÀ_t
 *
±r

ã°_boﬁón_›ti⁄s
;Öå->
ty≥
 !
NIL
;Ötr++)

451 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

453 
sˇ¬î_v¨übÀ_t
 *
±r

«me•a˚_°rögs
;Öå->
ty≥
 !
NIL
;Ötr++)

454 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

456 
sˇ¬î_v¨übÀ_t
 *
±r

di°ributi⁄_°rögs
;Öå->
ty≥
 !
NIL
;Ötr++)

457 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

459 
sˇ¬î_v¨übÀ_t
 *
±r

hash_°rögs
;Öå->
ty≥
 !
NIL
;Ötr++)

460 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

462 
°d
::
ve˘‹
<
boﬁ
> 
u£d_li°
;

463 
u£d_li°
.
	`ªsize
(
›ti⁄_li°
.
	`size
());

465 
	su£d_›ti⁄s_°
 {

466 
boﬁ
 
has_hash
;

467 
boﬁ
 
has_«me•a˚
;

468 
boﬁ
 
has_di°ributi⁄
;

469 
boﬁ
 
has_buf„r_ªque°s
;

470 
boﬁ
 
has_udp
;

471 
boﬁ
 
has_bö¨y
;

472 
boﬁ
 
has_vîify_key
;

474 
	`u£d_›ti⁄s_°
() :

475 
	`has_hash
(
Ál£
),

476 
	`has_«me•a˚
(
Ál£
),

477 
	`has_di°ributi⁄
(
Ál£
),

478 
	`has_buf„r_ªque°s
(
Ál£
),

479 
	`has_udp
(
Ál£
),

480 
	`has_bö¨y
(
Ál£
),

481 
	`has_vîify_key
(
Ál£
)

484 } 
u£d_›ti⁄s
;

486 
uöt32_t
 
x
0; x < 
RANDOM_STRINGS
; x++)

488 
°d
::
°rög
 
øndom_›ti⁄s
;

490 
uöt32_t
 
numbî_of

	`øndom
(Ë% 
	`uöt32_t
(
›ti⁄_li°
.
	`size
());

491 
uöt32_t
 
›ti⁄s
0; o±i⁄†< 
numbî_of
; options++)

493 
size_t
 
›ti⁄_li°_posôi⁄

	`øndom
(Ë% 
›ti⁄_li°
.
	`size
();

495 i‡(
u£d_li°
[
›ti⁄_li°_posôi⁄
])

499 
u£d_li°
[
›ti⁄_li°_posôi⁄
]
åue
;

501 
°d
::
°rög
 
øndom_°rög

›ti⁄_li°
[
›ti⁄_li°_posôi⁄
]->
c_°r
;

503 i‡(
øndom_°rög
.
	`com∑ª
(0, 
	`ã°_lôîÆ_com∑ª_∑øm
("--HASH")) == 0)

505 i‡(
u£d_›ti⁄s
.
has_hash
)

510 i‡(
u£d_›ti⁄s
.
has_di°ributi⁄
)

514 
u£d_›ti⁄s
.
has_hash

åue
;

517 i‡(
øndom_°rög
.
	`com∑ª
(0, 
	`ã°_lôîÆ_com∑ª_∑øm
("--NAMESPACE")) == 0)

519 i‡(
u£d_›ti⁄s
.
has_«me•a˚
)

523 
u£d_›ti⁄s
.
has_«me•a˚

åue
;

526 i‡(
øndom_°rög
.
	`com∑ª
(0, 
	`ã°_lôîÆ_com∑ª_∑øm
("--USE-UDP")) == 0)

528 i‡(
u£d_›ti⁄s
.
has_udp
)

532 
u£d_›ti⁄s
.
has_udp

åue
;

534 i‡(
u£d_›ti⁄s
.
has_buf„r_ªque°s
)

540 i‡(
øndom_°rög
.
	`com∑ª
(0, 
	`ã°_lôîÆ_com∑ª_∑øm
("--BUFFER-REQUESTS")) == 0)

542 i‡(
u£d_›ti⁄s
.
has_buf„r_ªque°s
)

546 
u£d_›ti⁄s
.
has_buf„r_ªque°s

åue
;

548 i‡(
u£d_›ti⁄s
.
has_udp
)

554 i‡(
øndom_°rög
.
	`com∑ª
(0, 
	`ã°_lôîÆ_com∑ª_∑øm
("--BINARY-PROTOCOL")) == 0)

556 i‡(
u£d_›ti⁄s
.
has_bö¨y
)

560 
u£d_›ti⁄s
.
has_bö¨y

åue
;

562 i‡(
u£d_›ti⁄s
.
has_vîify_key
)

568 i‡(
øndom_°rög
.
	`com∑ª
(0, 
	`ã°_lôîÆ_com∑ª_∑øm
("--VERIFY-KEY")) == 0)

570 i‡(
u£d_›ti⁄s
.
has_vîify_key
)

574 
u£d_›ti⁄s
.
has_vîify_key

åue
;

576 i‡(
u£d_›ti⁄s
.
has_bö¨y
)

582 i‡(
øndom_°rög
.
	`com∑ª
(0, 
	`ã°_lôîÆ_com∑ª_∑øm
("--DISTRIBUTION")) == 0)

584 i‡(
u£d_›ti⁄s
.
has_di°ributi⁄
)

589 i‡(
u£d_›ti⁄s
.
has_hash
)

593 
u£d_›ti⁄s
.
has_di°ributi⁄

åue
;

596 
øndom_›ti⁄s
+
øndom_°rög
;

597 
øndom_›ti⁄s
+= " ";

600 i‡(
øndom_›ti⁄s
.
	`size
() <= 1)

605 
øndom_›ti⁄s
.
	`ªsize
‘™dom_›ti⁄s.
	`size
() -1);

607 
buf„r
[
BUFSIZ
];

608 
memˇched_ªtu∫_t
 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
øndom_›ti⁄s
.
	`c_°r
(),Ñ™dom_›ti⁄s.
	`size
(), 
buf„r
, (buffer));

609 i‡(
	`memˇched_Áûed
(
rc
))

611 
Eº‹
 << "libmemˇched_check_c⁄figuøti⁄(" << 
øndom_›ti⁄s
 << "Ë: " << 
buf„r
;

612  
TEST_FAILURE
;

616  
TEST_SUCCESS
;

617 
	}
}

619 
memˇched_ªtu∫_t
 
	$dump_£rvî_öf‹m©i⁄
(c⁄° 
memˇched_°
 *,

620 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
,

623 i‡(
	`°rcmp
(
	`memˇched_£rvî_«me
(
ö°™˚
), "localhost"))

625 
	`Áèl_as£π
(
nŸ
 
	`memˇched_£rvî_«me
(
ö°™˚
));

626  
MEMCACHED_FAILURE
;

629 i‡(
	`memˇched_£rvî_p‹t
(
ö°™˚
Ë< 8888 
‹
 memcached_server_port(instance) > 8892)

631 
	`Áèl_as£π
(
nŸ
 
	`memˇched_£rvî_p‹t
(
ö°™˚
));

632  
MEMCACHED_FAILURE
;

635 i‡(
ö°™˚
->
weight
 > 5 
‹
 instance->weight < 2)

637 
	`Áèl_as£π
(
nŸ
 
ö°™˚
->
weight
);

638  
MEMCACHED_FAILURE
;

641  
MEMCACHED_SUCCESS
;

642 
	}
}

644 
ã°_ªtu∫_t
 
	$ã°_ho°«me_p‹t_weight
(
memˇched_°
 *)

646 c⁄° *
£rvî_°rög
= "--server=localhost:8888/?2 --server=localhost:8889/?3 --server=localhost:8890/?4 --server=localhost:8891/?5 --server=localhost:8892/?3";

647 
buf„r
[
BUFSIZ
];

649 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
,

650 
	`libmemˇched_check_c⁄figuøti⁄
(
£rvî_°rög
, 
	`°æí
(£rvî_°rög), 
buf„r
, (buffer)), buffer);

652 
memˇched_°
 *
memc

	`memˇched
(
£rvî_°rög
, 
	`°æí
(server_string));

653 
	`ã°_åue
(
memc
);

655 
memˇched_£rvî_‚
 
ˇŒbacks
[]{ 
dump_£rvî_öf‹m©i⁄
 };

656 
	`ã°_åue
(
	`memˇched_suc˚ss
(
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, 
NULL
, 1)));

658 
	`memˇched_‰ì
(
memc
);

660  
TEST_SUCCESS
;

661 
	}
}

663 
	ssockë_weight_t
 {

664 c⁄° *
	msockë
;

665 
size_t
 
	mweight
;

666 c⁄° * 
	mty≥
;

669 
memˇched_ªtu∫_t
 
	$dump_sockë_öf‹m©i⁄
(c⁄° 
memˇched_°
 *,

670 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
,

671 *
c⁄ãxt
)

673 
sockë_weight_t
 *
check
(sockë_weight_à*)
c⁄ãxt
;

675 i‡(
	`°rcmp
(
	`memˇched_£rvî_ty≥
(
ö°™˚
), 
check
->
ty≥
) == 0)

677 i‡(
	`°rcmp
(
	`memˇched_£rvî_«me
(
ö°™˚
), 
check
->
sockë
) == 0)

679 i‡(
ö°™˚
->
weight
 =
check
->weight)

681  
MEMCACHED_SUCCESS
;

685 
Eº‹
 << 
ö°™˚
->
weight
 << " !" << 
check
->weight;

690 
Eº‹
 << "'" << 
	`memˇched_£rvî_«me
(
ö°™˚
Ë<< "'" << " !" << "'" << 
check
->
sockë
 << "'";

695 
Eº‹
 << "'" << 
	`memˇched_£rvî_ty≥
(
ö°™˚
Ë<< "'" << " !" << "'" << 
check
->
ty≥
 << "'";

698  
MEMCACHED_FAILURE
;

699 
	}
}

701 
ã°_ªtu∫_t
 
	$ã°_∑r£_sockë
(
memˇched_°
 *)

703 
buf„r
[
BUFSIZ
];

705 
memˇched_£rvî_‚
 
ˇŒbacks
[]{ 
dump_sockë_öf‹m©i⁄
 };

707 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
,

708 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--sockë=\"/tmp/foo\""), 
buf„r
, (buffer)),

709 
buf„r
);

711 
memˇched_°
 *
memc

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--socket=\"/tmp/foo\""));

712 
	`ã°_åue
(
memc
);

713 
sockë_weight_t
 
check
= { "/tmp/foo", 1, "SOCKET"};

714 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

715 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, &
check
, 1));

716 
	`memˇched_‰ì
(
memc
);

720 
	`ã°_com∑ª_gŸ
(
MEMCACHED_SUCCESS
,

721 
	`libmemˇched_check_c⁄figuøti⁄
(
	`ã°_lôîÆ_∑øm
("--sockë=\"/tmp/foo\"/?23"), 
buf„r
, (buffer)),

722 
buf„r
);

724 
memˇched_°
 *
memc

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--socket=\"/tmp/foo\"/?23"));

725 
	`ã°_åue
(
memc
);

726 
sockë_weight_t
 
check
= { "/tmp/foo", 23, "SOCKET"};

727 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

728 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, &
check
, 1));

729 
	`memˇched_‰ì
(
memc
);

732  
TEST_SUCCESS
;

733 
	}
}

738 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_71231153_c⁄√˘
(
memˇched_°
 *)

740 i‡(
	`libmemˇched_utû_pög
("10.0.2.252", 0, 
NULL
))

741  
TEST_SKIPPED
;

744 
memˇched_°
 *
memc

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--SERVER=10.0.2.252 --CONNECT-TIMEOUT=0"));

745 
	`ã°_åue
(
memc
);

746 
	`ã°_zîo
(
memc
->
c⁄√˘_timeout
);

747 
	`ã°_com∑ª
(
MEMCACHED_DEFAULT_TIMEOUT
, 
memc
->
pﬁl_timeout
);

749 
memˇched_ªtu∫_t
 
rc
;

750 
size_t
 
vÆue_Àn
;

751 *
vÆue

	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("ã°"), &
vÆue_Àn
, 
NULL
, &
rc
);

752 
	`ã°_Ál£
(
vÆue
);

753 
	`ã°_zîo
(
vÆue_Àn
);

754 
	`ã°_com∑ª_gŸ
(
MEMCACHED_TIMEOUT
, 
rc
, 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

756 
	`memˇched_‰ì
(
memc
);

759  
TEST_SUCCESS
;

760 
	}
}

762 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_71231153_pﬁl
(
memˇched_°
 *)

764 i‡(
	`libmemˇched_utû_pög
("10.0.2.252", 0, 
NULL
))

766  
TEST_SKIPPED
;

770 
memˇched_°
 *
memc

	`memˇched
(
	`ã°_lôîÆ_∑øm
("--SERVER=10.0.2.252 --POLL-TIMEOUT=0"));

771 
	`ã°_åue
(
memc
);

772 
	`ã°_com∑ª
(
MEMCACHED_DEFAULT_CONNECT_TIMEOUT
, 
memc
->
c⁄√˘_timeout
);

773 
	`ã°_zîo
(
memc
->
pﬁl_timeout
);

775 
memˇched_ªtu∫_t
 
rc
;

776 
size_t
 
vÆue_Àn
;

777 *
vÆue

	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("ã°"), &
vÆue_Àn
, 
NULL
, &
rc
);

778 
	`ã°_Ál£
(
vÆue
);

779 
	`ã°_zîo
(
vÆue_Àn
);

780 #ifde‡
__APPLE__


781 
	`ã°_com∑ª_gŸ
(
MEMCACHED_CONNECTION_FAILURE
, 
rc
, 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

783 
	`ã°_com∑ª_gŸ
(
MEMCACHED_TIMEOUT
, 
rc
, 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

786 
	`memˇched_‰ì
(
memc
);

789  
TEST_SUCCESS
;

790 
	}
}

	@tests/libmemcached-1.0/parser.h

38 #¥agm®
⁄˚


40 #ifdef 
__˝lu•lus


44 
ã°_ªtu∫_t
 
memˇched_NULL_°rög_TEST
(
memˇched_°
*);

45 
ã°_ªtu∫_t
 
memˇched_zîo_°rög_Àngth_TEST
(
memˇched_°
*);

47 
LIBTEST_LOCAL


48 
ã°_ªtu∫_t
 
£rvî_ã°
(
memˇched_°
 *
memc
);

50 
LIBTEST_LOCAL


51 
ã°_ªtu∫_t
 
£rvîs_bad_ã°
(
memˇched_°
 *
memc
);

53 
LIBTEST_LOCAL


54 
ã°_ªtu∫_t
 
behavi‹_∑r£r_ã°
(
memˇched_°
*);

56 
LIBTEST_LOCAL


57 
ã°_ªtu∫_t
 
∑r£r_numbî_›ti⁄s_ã°
(
memˇched_°
*);

59 
LIBTEST_LOCAL


60 
ã°_ªtu∫_t
 
∑r£r_di°ributi⁄_ã°
(
memˇched_°
*);

62 
LIBTEST_LOCAL


63 
ã°_ªtu∫_t
 
∑r£r_hash_ã°
(
memˇched_°
*);

65 
LIBTEST_LOCAL


66 
ã°_ªtu∫_t
 
∑r£r_boﬁón_›ti⁄s_ã°
(
memˇched_°
*);

68 
LIBTEST_LOCAL


69 
ã°_ªtu∫_t
 
∑r£r_key_¥efix_ã°
(
memˇched_°
*);

71 
LIBTEST_LOCAL


72 
ã°_ªtu∫_t
 
libmemˇched_check_c⁄figuøti⁄_ã°
(
memˇched_°
*);

74 
LIBTEST_LOCAL


75 
ã°_ªtu∫_t
 
memˇched_¸óã_wôh_›ti⁄s_ã°
(
memˇched_°
*);

77 
LIBTEST_LOCAL


78 
ã°_ªtu∫_t
 
memˇched_¸óã_wôh_›ti⁄s_wôh_fûíame
(
memˇched_°
*);

80 
LIBTEST_LOCAL


81 
ã°_ªtu∫_t
 
libmemˇched_check_c⁄figuøti⁄_wôh_fûíame_ã°
(
memˇched_°
*);

83 
LIBTEST_LOCAL


84 
ã°_ªtu∫_t
 
øndom_°©emít_buûd_ã°
(
memˇched_°
*);

86 
LIBTEST_LOCAL


87 
ã°_ªtu∫_t
 
ã°_ö˛ude_keyw‹d
(
memˇched_°
*);

89 
LIBTEST_LOCAL


90 
ã°_ªtu∫_t
 
ã°_íd_keyw‹d
(
memˇched_°
*);

92 
LIBTEST_LOCAL


93 
ã°_ªtu∫_t
 
ã°_ª£t_keyw‹d
(
memˇched_°
*);

95 
LIBTEST_LOCAL


96 
ã°_ªtu∫_t
 
ã°_îr‹_keyw‹d
(
memˇched_°
*);

98 
LIBTEST_LOCAL


99 
ã°_ªtu∫_t
 
£rvî_wôh_weight_ã°
(
memˇched_°
 *);

101 
LIBTEST_LOCAL


102 
ã°_ªtu∫_t
 
ã°_ho°«me_p‹t_weight
(
memˇched_°
 *);

104 
LIBTEST_LOCAL


105 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_71231153_c⁄√˘
(
memˇched_°
 *);

107 
LIBTEST_LOCAL


108 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_71231153_pﬁl
(
memˇched_°
 *);

110 
LIBTEST_LOCAL


111 
ã°_ªtu∫_t
 
ã°_∑r£_sockë
(
memˇched_°
 *);

113 
LIBTEST_LOCAL


114 
ã°_ªtu∫_t
 
ã°_«me•a˚_keyw‹d
(
memˇched_°
*);

116 #ifdef 
__˝lu•lus


	@tests/libmemcached-1.0/plus.cpp

38 
	~<mem_c⁄fig.h
>

43 
	~<libmemˇched-1.0/memˇched.hµ
>

44 
	~<libã°/ã°.hµ
>

46 
	~<c°dio
>

47 
	~<c°dlib
>

48 
	~<c°rög
>

49 
	~<sys/time.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<sys/°©.h
>

52 
	~<uni°d.h
>

53 
	~<˘ime
>

55 
	~<°rög
>

56 
	~<io°ªam
>

58 
usög
 
«me•a˚
 
	g°d
;

59 
usög
 
«me•a˚
 
	gmemˇche
;

60 
usög
 
«me•a˚
 
	glibã°
;

62 
p›uœã_ve˘‹
(
ve˘‹
<> &
vec
, c⁄° 
°rög
 &
°r
)

64 
	gvec
.
ª£rve
(
°r
.
Àngth
());

65 
	gvec
.
assign
(
°r
.
begö
(), så.
íd
());

68 
c›y_vec_to_°rög
(
ve˘‹
<> &
vec
, 
°rög
 &
°r
)

70 
	g°r
.
˛ór
();

71 i‡(
nŸ
 
	gvec
.
em±y
())

73 
	g°r
.
assign
(
vec
.
begö
(), vec.
íd
());

77 
ã°_ªtu∫_t
 
	$basic_ã°
(
memˇched_°
 *
memc
)

79 
Memˇche
 
	`foo
(
memc
);

80 c⁄° 
°rög
 
	`vÆue_£t
("This is some data");

81 
°d
::
ve˘‹
<> 
vÆue
;

82 
°d
::
ve˘‹
<> 
ã°_vÆue
;

84 
	`p›uœã_ve˘‹
(
vÆue
, 
vÆue_£t
);

86 
	`ã°_åue
(
foo
.
	`£t
("möe", 
vÆue
, 0, 0));

87 
	`ã°_åue
(
foo
.
	`gë
("möe", 
ã°_vÆue
));

89 
	`ã°_com∑ª
(
ã°_vÆue
.
	`size
(), 
vÆue
.size());

90 
	`ã°_memcmp
(&
ã°_vÆue
[0], &
vÆue
[0],Åe°_vÆue.
	`size
());

91 
	`ã°_Ál£
(
foo
.
	`£t
("", 
vÆue
, 0, 0));

93  
TEST_SUCCESS
;

94 
	}
}

96 
ã°_ªtu∫_t
 
	$ö¸emít_ã°
(
memˇched_°
 *
‹igöÆ
)

98 
Memˇche
 
	`mˇch
(
‹igöÆ
);

99 c⁄° 
°rög
 
	`key
("blah");

100 c⁄° 
°rög
 
	`öc_vÆue
("1");

101 
°d
::
ve˘‹
<> 
öc_vÆ
;

102 
ve˘‹
<> 
ªt_vÆue
;

103 
°rög
 
ªt_°rög
;

104 
uöt64_t
 
öt_öc_vÆue
;

105 
uöt64_t
 
öt_ªt_vÆue
;

107 
	`p›uœã_ve˘‹
(
öc_vÆ
, 
öc_vÆue
);

109 
	`ã°_åue
(
mˇch
.
	`£t
(
key
, 
öc_vÆ
, 0, 0));

111 
	`ã°_åue
(
mˇch
.
	`gë
(
key
, 
ªt_vÆue
));

112 
	`ã°_Ál£
(
ªt_vÆue
.
	`em±y
());

113 
	`c›y_vec_to_°rög
(
ªt_vÆue
, 
ªt_°rög
);

115 
öt_öc_vÆue

	`uöt64_t
(
	`©ﬁ
(
öc_vÆue
.
	`c_°r
()));

116 
öt_ªt_vÆue

	`uöt64_t
(
	`©ﬁ
(
ªt_°rög
.
	`c_°r
()));

117 
	`ã°_com∑ª
(
öt_öc_vÆue
, 
öt_ªt_vÆue
);

119 
	`ã°_åue
(
mˇch
.
	`ö¸emít
(
key
, 1, &
öt_ªt_vÆue
));

120 
	`ã°_com∑ª
(
	`uöt64_t
(2), 
öt_ªt_vÆue
);

122 
	`ã°_åue
(
mˇch
.
	`ö¸emít
(
key
, 1, &
öt_ªt_vÆue
));

123 
	`ã°_com∑ª
(
	`uöt64_t
(3), 
öt_ªt_vÆue
);

125 
	`ã°_åue
(
mˇch
.
	`ö¸emít
(
key
, 5, &
öt_ªt_vÆue
));

126 
	`ã°_com∑ª
(
	`uöt64_t
(8), 
öt_ªt_vÆue
);

128  
TEST_SUCCESS
;

129 
	}
}

131 
ã°_ªtu∫_t
 
	$basic_ma°î_key_ã°
(
memˇched_°
 *
‹igöÆ
)

133 
Memˇche
 
	`foo
(
‹igöÆ
);

134 c⁄° 
°rög
 
	`vÆue_£t
("Data for server A");

135 
ve˘‹
<> 
vÆue
;

136 
ve˘‹
<> 
ã°_vÆue
;

137 c⁄° 
°rög
 
	`ma°î_key_a
("server-a");

138 c⁄° 
°rög
 
	`ma°î_key_b
("server-b");

139 c⁄° 
°rög
 
	`key
("xyz");

141 
	`p›uœã_ve˘‹
(
vÆue
, 
vÆue_£t
);

143 
	`ã°_åue
(
foo
.
	`£tByKey
(
ma°î_key_a
, 
key
, 
vÆue
, 0, 0));

144 
	`ã°_åue
(
foo
.
	`gëByKey
(
ma°î_key_a
, 
key
, 
ã°_vÆue
));

146 
	`ã°_com∑ª
(
vÆue
.
	`size
(), 
ã°_vÆue
.size());

147 
	`ã°_memcmp
(&
vÆue
[0], &
ã°_vÆue
[0], vÆue.
	`size
());

149 
ã°_vÆue
.
	`˛ór
();

152 
	`ã°_Ál£
(
foo
.
	`gëByKey
(
ma°î_key_b
, 
key
, 
ã°_vÆue
));

153 
	`ã°_zîo
(
ã°_vÆue
.
	`size
());

156  
TEST_SUCCESS
;

157 
	}
}

159 
ã°_ªtu∫_t
 
	$mgë_ã°
(
memˇched_°
 *
‹igöÆ
)

161 
Memˇche
 
	`memc
(
‹igöÆ
);

162 
memˇched_ªtu∫_t
 
mc_rc
;

163 
ve˘‹
<
°rög
> 
keys
;

164 
ve˘‹
< ve˘‹<> *> 
vÆues
;

165 
keys
.
	`ª£rve
(3);

166 
keys
.
	`push_back
("fudge");

167 
keys
.
	`push_back
("son");

168 
keys
.
	`push_back
("food");

169 
ve˘‹
<> 
vÆ1
;

170 
ve˘‹
<> 
vÆ2
;

171 
ve˘‹
<> 
vÆ3
;

172 
	`p›uœã_ve˘‹
(
vÆ1
, "fudge");

173 
	`p›uœã_ve˘‹
(
vÆ2
, "son");

174 
	`p›uœã_ve˘‹
(
vÆ3
, "food");

175 
vÆues
.
	`ª£rve
(3);

176 
vÆues
.
	`push_back
(&
vÆ1
);

177 
vÆues
.
	`push_back
(&
vÆ2
);

178 
vÆues
.
	`push_back
(&
vÆ3
);

180 
°rög
 
ªtu∫_key
;

181 
ve˘‹
<> 
ªtu∫_vÆue
;

184 
	`ã°_åue
(
memc
.
	`Êush
());

186 
	`ã°_åue
(
memc
.
	`mgë
(
keys
));

188 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
,

189 
memc
.
	`„tch
(
ªtu∫_key
, 
ªtu∫_vÆue
));

191 
	`ã°_åue
(
memc
.
	`£tAŒ
(
keys
, 
vÆues
, 50, 9));

193 
	`ã°_åue
(
memc
.
	`mgë
(
keys
));

194 
size_t
 
cou¡
= 0;

195 
	`memˇched_suc˚ss
(
mc_rc

memc
.
	`„tch
(
ªtu∫_key
, 
ªtu∫_vÆue
)))

197 
	`ã°_com∑ª
(
ªtu∫_key
.
	`Àngth
(), 
ªtu∫_vÆue
.
	`size
());

198 
	`ã°_memcmp
(&
ªtu∫_vÆue
[0], 
ªtu∫_key
.
	`c_°r
(),Ñëu∫_vÆue.
	`size
());

199 
cou¡
++;

201 
	`ã°_com∑ª
(
vÆues
.
	`size
(), 
cou¡
);

203  
TEST_SUCCESS
;

204 
	}
}

206 
ã°_ªtu∫_t
 
	$Õ_1010899_TEST
(*)

210 
Memˇche
 
memc
;

212 
	`ã°_Ál£
(
memc
.
	`ö¸emít
(
__func__
, 0, 
NULL
));

214  
TEST_SUCCESS
;

215 
	}
}

217 
ã°_ªtu∫_t
 
	$Õ_1010899_wôh_¨gs_TEST
(
memˇched_°
 *
‹igöÆ
)

221 c⁄° 
memˇched_ö°™˚_°
* 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
‹igöÆ
, 0);

222 
Memˇche
 
	`memc
(
	`memˇched_£rvî_«me
(
ö°™˚
), 
	`memˇched_£rvî_p‹t
(instance));

224 
	`ã°_Ál£
(
memc
.
	`ö¸emít
(
__func__
, 0, 
NULL
));

225 
	`ã°_åue
(
memc
.
	`£t
(
__func__
, 
	`ã°_lôîÆ_∑øm
("12"), 0, 0));

226 
	`ã°_åue
(
memc
.
	`ö¸emít
(
__func__
, 3, 
NULL
));

228 
°d
::
ve˘‹
<> 
ªt_vÆ
;

229 
	`ã°_åue
(
memc
.
	`gë
(
__func__
, 
ªt_vÆ
));

231 
	`ã°_°rcmp
(&
ªt_vÆ
[0], "15");

233  
TEST_SUCCESS
;

234 
	}
}

236 
ã°_ªtu∫_t
 
	$basic_behavi‹
(
memˇched_°
 *
‹igöÆ
)

238 
Memˇche
 
	`memc
(
‹igöÆ
);

239 
	`ã°_åue
(
memc
.
	`£tBehavi‹
(
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
åue
));

240 
	`ã°_com∑ª
(
åue
, 
memc
.
	`gëBehavi‹
(
MEMCACHED_BEHAVIOR_VERIFY_KEY
));

242  
TEST_SUCCESS
;

243 
	}
}

245 
ã°_ªtu∫_t
 
	$îr‹_ã°
(
memˇched_°
 *)

247 
Memˇche
 
	`memc
("--server=localhost:178");

248 
°d
::
ve˘‹
<> 
vÆue
;

250 
	`ã°_Ál£
(
memc
.
	`£t
("key", 
vÆue
, 
	`time_t
(0), 
	`uöt32_t
(0)));

252 
	`ã°_åue
(
memc
.
	`îr‹
());

254  
TEST_SUCCESS
;

255 
	}
}

257 
ã°_ªtu∫_t
 
	$îr‹_°d_°rög_ã°
(
memˇched_°
 *)

259 
Memˇche
 
	`memc
("--server=localhost:178");

260 
°d
::
ve˘‹
<> 
vÆue
;

262 
	`ã°_Ál£
(
memc
.
	`£t
("key", 
vÆue
, 
	`time_t
(0), 
	`uöt32_t
(0)));

264 
°d
::
°rög
 
îr‹_mesßge
;

265 
	`ã°_åue
(
memc
.
	`îr‹
(
îr‹_mesßge
));

266 
	`ã°_Ál£
(
îr‹_mesßge
.
	`em±y
());

268  
TEST_SUCCESS
;

269 
	}
}

271 
ã°_ªtu∫_t
 
	$îr‹_memˇched_ªtu∫_t_ã°
(
memˇched_°
 *)

273 
Memˇche
 
	`memc
("--server=localhost:178");

274 
°d
::
ve˘‹
<> 
vÆue
;

276 
	`ã°_Ál£
(
memc
.
	`£t
("key", 
vÆue
, 
	`time_t
(0), 
	`uöt32_t
(0)));

278 
memˇched_ªtu∫_t
 
rc
;

279 
	`ã°_åue
(
memc
.
	`îr‹
(
rc
));

280 
	`ã°_com∑ª
(
MEMCACHED_CONNECTION_FAILURE
, 
rc
);

282  
TEST_SUCCESS
;

283 
	}
}

285 
ã°_°
 
	gîr‹_ã°s
[] ={

286 { "îr‹()", 
Ál£
, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
îr‹_ã°
) },

287 { "îr‹(°d::°rög&)", 
Ál£
, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
îr‹_°d_°rög_ã°
) },

288 { "îr‹(memˇched_ªtu∫_t&)", 
Ál£
, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
îr‹_memˇched_ªtu∫_t_ã°
) },

292 
ã°_°
 
	gã°s
[] ={

293 { "basic", 
Ál£
,

294 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
basic_ã°
) },

295 { "basic_ma°î_key", 
Ál£
,

296 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
basic_ma°î_key_ã°
) },

297 { "ö¸emít_ã°", 
Ál£
,

298 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
ö¸emít_ã°
) },

299 { "mgë", 
åue
,

300 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
mgë_ã°
) },

301 { "basic_behavi‹", 
Ál£
,

302 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
basic_behavi‹
) },

306 
ã°_°
 
	gªgªssi⁄_TESTS
[] ={

307 { "Õ:1010899 Memˇche()", 
Ál£
, 
Õ_1010899_TEST
 },

308 { "Õ:1010899 Memˇche÷oˇlho°,Ö‹t)", 
Ál£
,

309 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
*>(
Õ_1010899_wôh_¨gs_TEST
) },

313 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

314 {"block", 0, 0, 
ã°s
},

315 {"îr‹()", 0, 0, 
îr‹_ã°s
},

316 {"ªgªssi⁄", 0, 0, 
ªgªssi⁄_TESTS
},

320 
	#SERVERS_TO_CREATE
 5

	)

322 
	#TEST_PORT_BASE
 
MEMCACHED_DEFAULT_PORT
 +10

	)

323 
	~"ã°s/libmemˇched_w‹ld.h
"

325 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

327 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

329 
	gw‹ld
->
¸óã
((
ã°_ˇŒback_¸óã_‚
*)
w‹ld_¸óã
);

330 
	gw‹ld
->
de°roy
((
ã°_ˇŒback_de°roy_‚
*)
w‹ld_de°roy
);

332 
	gw‹ld
->
£t_ru¬î
(
√w
 
LibmemˇchedRu¬î
);

	@tests/libmemcached-1.0/pool.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
usög
 
«me•a˚
 
	glibã°
;

43 
	~<ve˘‹
>

44 
	~<io°ªam
>

45 
	~<°rög
>

46 
	~<˚ºno
>

48 
	~<£m≠h‹e.h
>

50 
	~<libmemˇched-1.0/memˇched.h
>

51 
	~<libmemˇchedutû-1.0/utû.h
>

52 
	~<libmemˇched/is.h
>

53 
	~<ã°s/poﬁ.h
>

55 
	~<±hªad.h
>

56 
	~<pﬁl.h
>

58 
	~"libmemˇched/ö°™˚.hµ
"

60 #i‚de‡
__INTEL_COMPILER


61 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

65 
ã°_ªtu∫_t
 
	$memˇched_poﬁ_ã°
(
memˇched_°
 *)

67 c⁄° *
c⁄fig_°rög
= "--SERVER=host10.example.com --SERVER=host11.example.com --SERVER=host10.example.com --POOL-MIN=10 --POOL-MAX=32";

69 
buf„r
[2048];

71 
	`ã°_com∑ª
(
	`libmemˇched_check_c⁄figuøti⁄
(
c⁄fig_°rög
, (c⁄fig_°rögË-1, 
buf„r
, (buf„r)), 
MEMCACHED_PARSE_ERROR
);

73 
memˇched_poﬁ_°
* 
poﬁ

	`memˇched_poﬁ
(
c⁄fig_°rög
, 
	`°æí
(config_string));

74 
	`ã°_åue
(
poﬁ
);

76 
memˇched_ªtu∫_t
 
rc
;

77 
memˇched_°
 *
memc

	`memˇched_poﬁ_p›
(
poﬁ
, 
Ál£
, &
rc
);

79 
	`ã°_com∑ª
(
rc
, 
MEMCACHED_SUCCESS
);

80 
	`ã°_åue
(
memc
);

85 
	`memˇched_poﬁ_push
(
poﬁ
, 
memc
);

90 
	`memˇched_poﬁ_de°roy
(
poﬁ
);

92  
TEST_SUCCESS
;

93 
	}
}

96 
	#POOL_SIZE
 10

	)

97 
ã°_ªtu∫_t
 
	$c⁄√˘i⁄_poﬁ_ã°
(
memˇched_°
 *
memc
)

99 
memˇched_poﬁ_°
* 
poﬁ

	`memˇched_poﬁ_¸óã
(
memc
, 5, 
POOL_SIZE
);

100 
	`ã°_åue
(
poﬁ
);

101 
memˇched_°
 *
mmc
[
POOL_SIZE
];

104 
size_t
 
x
0; x < 
POOL_SIZE
; ++x)

106 
memˇched_ªtu∫_t
 
rc
;

107 
mmc
[
x
]
	`memˇched_poﬁ_„tch
(
poﬁ
, 
NULL
, &
rc
);

108 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

109 
	`ã°_åue
(
mmc
[
x
]);

114 
memˇched_ªtu∫_t
 
rc
;

115 
	`ã°_nuŒ
(
	`memˇched_poﬁ_„tch
(
poﬁ
, 
NULL
, &
rc
));

116 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

120 
size_t
 
x
0; x < 
POOL_SIZE
; ++x)

122 i‡(
mmc
[
x
])

124 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_poﬁ_ªÀa£
(
poﬁ
, 
mmc
[
x
]));

127 
	`ã°_åue
(
	`memˇched_poﬁ_de°roy
(
poﬁ
Ë=
memc
);

129  
TEST_SUCCESS
;

130 
	}
}

132 
ã°_ªtu∫_t
 
	$c⁄√˘i⁄_poﬁ2_ã°
(
memˇched_°
 *
memc
)

134 
memˇched_poﬁ_°
* 
poﬁ

	`memˇched_poﬁ_¸óã
(
memc
, 5, 
POOL_SIZE
);

135 
	`ã°_åue
(
poﬁ
);

136 
memˇched_°
 *
mmc
[
POOL_SIZE
];

139 
size_t
 
x
0; x < 
POOL_SIZE
; ++x)

141 
memˇched_ªtu∫_t
 
rc
;

142 
mmc
[
x
]
	`memˇched_poﬁ_„tch
(
poﬁ
, 
NULL
, &
rc
);

143 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

144 
	`ã°_åue
(
mmc
[
x
]);

149 
memˇched_ªtu∫_t
 
rc
;

150 
	`ã°_nuŒ
(
	`memˇched_poﬁ_„tch
(
poﬁ
, 
NULL
, &
rc
));

151 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

155 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

156 
	`memˇched_£t
(
mmc
[0],

157 
	`ã°_lôîÆ_∑øm
("key"),

160 
uöt64_t
 
x
0; x < 
POOL_SIZE
; ++x)

162 
uöt64_t
 
numbî_vÆue
;

163 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

164 
	`memˇched_ö¸emít
(
mmc
[
x
],

165 
	`ã°_lôîÆ_∑øm
("key"),

166 1, &
numbî_vÆue
));

167 
	`ã°_com∑ª
(
numbî_vÆue
, (
x
+1));

171 
size_t
 
x
0; x < 
POOL_SIZE
; ++x)

173 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_poﬁ_ªÀa£
(
poﬁ
, 
mmc
[
x
]));

181 
mmc
[0]
	`memˇched_poﬁ_„tch
(
poﬁ
, 
NULL
, NULL);

182 
	`ã°_åue
(
mmc
[0]);

184 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

185 
	`memˇched_poﬁ_behavi‹_£t
(
poﬁ
, 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
, 9999));

188 
memˇched_ªtu∫_t
 
rc
;

189 
mmc
[1]
	`memˇched_poﬁ_„tch
(
poﬁ
, 
NULL
, &
rc
);

190 
	`ã°_åue
(
mmc
[1]);

191 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

194 
	`ã°_com∑ª
(
	`UINT64_C
(9999), 
	`memˇched_behavi‹_gë
(
mmc
[1], 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
));

195 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_poﬁ_ªÀa£
(
poﬁ
, 
mmc
[1]));

196 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_poﬁ_ªÀa£
(
poﬁ
, 
mmc
[0]));

199 
memˇched_ªtu∫_t
 
rc
;

200 
mmc
[0]
	`memˇched_poﬁ_„tch
(
poﬁ
, 
NULL
, &
rc
);

201 
	`ã°_åue
(
mmc
[0]);

202 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

205 
	`ã°_com∑ª
(
	`UINT64_C
(9999), 
	`memˇched_behavi‹_gë
(
mmc
[0], 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
));

206 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_poﬁ_ªÀa£
(
poﬁ
, 
mmc
[0]));

208 
	`ã°_åue
(
	`memˇched_poﬁ_de°roy
(
poﬁ
Ë=
memc
);

210  
TEST_SUCCESS
;

211 
	}
}

213 
	sã°_poﬁ_c⁄ãxt_°
 {

214 vﬁ©ûê
memˇched_ªtu∫_t
 
	mrc
;

215 
memˇched_poﬁ_°
* 
	mpoﬁ
;

216 
memˇched_°
* 
	mmmc
;

217 
£m_t
 
	m_lock
;

219 
ã°_poﬁ_c⁄ãxt_°
(
memˇched_poﬁ_°
 *
poﬁ_¨g
, 
memˇched_°
 *
memc_¨g
):

220 
rc
(
MEMCACHED_FAILURE
),

221 
poﬁ
(
poﬁ_¨g
),

222 
mmc
(
memc_¨g
)

224 
£m_öô
(&
_lock
, 0, 0);

227 
waô
()

229 
£m_waô
(&
_lock
);

232 
ªÀa£
()

234 
£m_po°
(&
_lock
);

237 ~
ã°_poﬁ_c⁄ãxt_°
()

239 
£m_de°roy
(&
_lock
);

243 
__©åibuã__
((
n‹ëu∫
)Ë* 
	$c⁄√˘i⁄_ªÀa£
(*
¨g
)

245 
ã°_poﬁ_c⁄ãxt_°
 *
ªsour˚

°©ic_ˇ°
<ã°_poﬁ_c⁄ãxt_° *>(
¨g
);

246 
	`FATAL_IF
(
ªsour˚
 =
NULL
);

249 
ªsour˚
->
rc

	`memˇched_poﬁ_ªÀa£
‘esour˚->
poﬁ
,Ñesour˚->
mmc
);

250 
ªsour˚
->
	`ªÀa£
();

252 
	`±hªad_exô
(
¨g
);

253 
	}
}

255 
ã°_ªtu∫_t
 
	$c⁄√˘i⁄_poﬁ3_ã°
(
memˇched_°
 *
memc
)

257 #ifde‡
__APPLE__


258  
TEST_SKIPPED
;

261 
memˇched_poﬁ_°
* 
poﬁ

	`memˇched_poﬁ_¸óã
(
memc
, 1, 1);

262 
	`ã°_åue
(
poﬁ
);

264 
memˇched_°
 *
poﬁ_memc
;

266 
memˇched_ªtu∫_t
 
rc
;

267 
poﬁ_memc

	`memˇched_poﬁ_„tch
(
poﬁ
, 
NULL
, &
rc
);

268 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

269 
	`ã°_åue
(
poﬁ_memc
);

280 
±hªad_t
 
tid
;

281 
ã°_poﬁ_c⁄ãxt_°
 
	`ôem
(
poﬁ
, 
poﬁ_memc
);

283 
	`ã°_zîo
(
	`±hªad_¸óã
(&
tid
, 
NULL
, 
c⁄√˘i⁄_ªÀa£
, &
ôem
));

284 
ôem
.
	`waô
();

286 
memˇched_ªtu∫_t
 
rc
;

287 
memˇched_°
 *
p›_memc
;

289 
cou¡î
= 5;

292 
time•ec
 
ªœtive_time
= { 0, 0 };

293 
p›_memc

	`memˇched_poﬁ_„tch
(
poﬁ
, &
ªœtive_time
, &
rc
);

295 i‡(
	`memˇched_suc˚ss
(
rc
))

300 i‡(
	`memˇched_Áûed
(
rc
))

302 
	`ã°_nuŒ
(
p›_memc
);

303 
	`ã°_åue
(
rc
 !
MEMCACHED_TIMEOUT
);

305 } --
cou¡î
);

307 i‡(
	`memˇched_Áûed
(
rc
))

309 
	`±hªad_joö
(
tid
, 
NULL
);

310 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

314 
±hªad_ªt

	`±hªad_joö
(
tid
, 
NULL
);

315 
	`ã°_åue
(
±hªad_ªt
 =0 
‹
Öthªad_ªà=
ESRCH
);

317 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

318 
	`ã°_åue
(
poﬁ_memc
 =
p›_memc
);

320 
	`ã°_åue
(
	`memˇched_poﬁ_de°roy
(
poﬁ
Ë=
memc
);

322  
TEST_SUCCESS
;

323 
	}
}

325 
memˇched_°
 * 
	$¸óã_sögÀ_ö°™˚_memˇched
(c⁄° 
memˇched_°
 *
‹igöÆ_memc
, c⁄° *
›ti⁄s
)

330 
›ti⁄s_buf„r
[1024]= { 0 };

331 i‡(
›ti⁄s
 =
NULL
)

333 i‡(
	`memˇched_is_bö¨y
(
‹igöÆ_memc
))

335 
	`¢¥ötf
(
›ti⁄s_buf„r
, (options_buffer), "--BINARY");

343 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
‹igöÆ_memc
, 0);

345 
£rvî_°rög
[1024];

346 
£rvî_°rög_Àngth
;

347 i‡(
ö°™˚
->
ty≥
 =
MEMCACHED_CONNECTION_UNIX_SOCKET
)

349 i‡(
›ti⁄s
)

351 
£rvî_°rög_Àngth

	`¢¥ötf
(
£rvî_°rög
, (server_string), "--SOCKET=\"%s\" %s",

352 
	`memˇched_£rvî_«me
(
ö°™˚
), 
›ti⁄s
);

356 
£rvî_°rög_Àngth

	`¢¥ötf
(
£rvî_°rög
, (server_string), "--SOCKET=\"%s\"",

357 
	`memˇched_£rvî_«me
(
ö°™˚
));

362 i‡(
›ti⁄s
)

364 
£rvî_°rög_Àngth

	`¢¥ötf
(
£rvî_°rög
, (server_string), "--server=%s:%d %s",

365 
	`memˇched_£rvî_«me
(
ö°™˚
), (
	`memˇched_£rvî_p‹t
(instance)),

366 
›ti⁄s
);

370 
£rvî_°rög_Àngth

	`¢¥ötf
(
£rvî_°rög
, (server_string), "--server=%s:%d",

371 
	`memˇched_£rvî_«me
(
ö°™˚
), (
	`memˇched_£rvî_p‹t
(instance)));

375 i‡(
£rvî_°rög_Àngth
 <= 0)

377  
NULL
;

380 
îº‹_buf„r
[1024];

381 i‡(
	`memˇched_Áûed
(
	`libmemˇched_check_c⁄figuøti⁄
(
£rvî_°rög
, 
£rvî_°rög_Àngth
, 
îº‹_buf„r
, (errror_buffer))))

383 
Eº‹
 << "FaûedÅÿ∑r£ (" << 
£rvî_°rög
 << "Ë" << 
îº‹_buf„r
;

384  
NULL
;

387  
	`memˇched
(
£rvî_°rög
, 
£rvî_°rög_Àngth
);

388 
	}
}

390 
±hªad_muãx_t
 
	gmuãx

PTHREAD_MUTEX_INITIALIZER
;

391 
boﬁ
 
	g_ru¬ög

Ál£
;

393 
	$£t_ru¬ög
(c⁄° 
boﬁ
 
¨g
)

395 
îr‹
;

396 
	`FATAL_IF_
((
îr‹

	`±hªad_muãx_lock
(&
muãx
)Ë!0, 
	`°ªº‹
(error));

398 
_ru¬ög

¨g
;

400 
	`FATAL_IF_
((
îr‹

	`±hªad_muãx_u∆ock
(&
muãx
)Ë!0, 
	`°ªº‹
(error));

401 
	}
}

403 
boﬁ
 
	$ru¬ög
()

405 
îr‹
;

406 
boﬁ
 
ªt
;

408 
	`FATAL_IF_
((
îr‹

	`±hªad_muãx_lock
(&
muãx
)Ë!0, 
	`°ªº‹
(error));

410 
ªt

_ru¬ög
;

412 
	`FATAL_IF_
((
îr‹

	`±hªad_muãx_u∆ock
(&
muãx
)Ë!0, 
	`°ªº‹
(error));

414  
ªt
;

415 
	}
}

417 *
	$w‹kî_thªad
(*
˘x
)

419 
memˇched_poﬁ_°
 *
poﬁ
(memˇched_poﬁ_° *)
˘x
;

421 
	`ru¬ög
())

423 
memˇched_ªtu∫_t
 
rc
;

424 
memˇched_°
 *
mc

	`memˇched_poﬁ_p›
(
poﬁ
, 
åue
, &
rc
);

426 i‡(
mc
 =
NULL
)

428 
Eº‹
 << "ÁûedÅÿ„tchá c⁄√˘i⁄ fromÅhêpoﬁ" << 
	`memˇched_°ªº‹
(
NULL
, 
rc
);

429 
	`dªam
(1, 0);

433 
rc

	`memˇched_£t
(
mc
, "test:kv", 7, "value", 5, 600, 0);

434 i‡(
	`memˇched_Áûed
(
rc
))

436 
Out
 << "failed memcached_set()";

439 
rc

	`memˇched_poﬁ_push
(
poﬁ
, 
mc
);

440 i‡(
	`memˇched_Áûed
(
rc
))

442 
Eº‹
 << "ÁûedÅÿªÀa£á c⁄√˘i⁄Åÿthêpoﬁ" << 
	`memˇched_°ªº‹
(
NULL
, 
rc
);

446  
NULL
;

447 
	}
}

449 
	#NUM_THREADS
 20

	)

450 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_962815
(
memˇched_°
 *
memc
)

452 
±hªad_t
 
pid
[
NUM_THREADS
];

454 
	`ã°_Ál£
(
	`ru¬ög
());

456 
memˇched_°
 *
ma°î
 = 
	`¸óã_sögÀ_ö°™˚_memˇched
(
memc
, 0);

457 
	`ã°_åue
(
ma°î
);

459 
memˇched_poﬁ_°
 *
poﬁ

	`memˇched_poﬁ_¸óã
(
ma°î
, 5, 10);

461 
	`ã°_åue
(
poﬁ
);

463 
	`£t_ru¬ög
(
åue
);

465 
size_t
 
x
=0; x < 
NUM_THREADS
; x++)

467 
	`ã°_com∑ª
(0, 
	`±hªad_¸óã
(&
pid
[
x
], 
NULL
, 
w‹kî_thªad
, (*)
poﬁ
));

471 
pﬁlfd
 
fds
[1];

472 
	`mem£t
(
fds
, 0, (
pﬁlfd
));

473 
fds
[0].
fd
= -1;

474 
fds
[0].
evíts

POLLIN
;

475 
fds
[0].
ªvíts
= 0;

477 
a˘ive_fd
;

478 i‡((
a˘ive_fd

	`pﬁl
(
fds
, 1, 5000)) == -1)

480 
Eº‹
 << "pﬁl(ËÁûed wôh:" << 
	`°ªº‹
(
î∫o
);

482 
	`ã°_zîo
(
a˘ive_fd
);

484 
	`£t_ru¬ög
(
Ál£
);

487 
size_t
 
x
=0; x < 
NUM_THREADS
; x++)

489 
	`ã°_com∑ª
(0, 
	`±hªad_joö
(
pid
[
x
], 
NULL
));

492 
	`memˇched_poﬁ_de°roy
(
poﬁ
);

494 
	`memˇched_‰ì
(
ma°î
);

496  
TEST_SUCCESS
;

497 
	}
}

	@tests/libmemcached-1.0/print.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
usög
 
«me•a˚
 
	glibã°
;

44 
	~<io°ªam
>

46 
	~<libmemˇched-1.0/memˇched.h
>

48 
	~"ã°s/¥öt.h
"

50 
memˇched_ªtu∫_t
 
	$£rvî_¥öt_ˇŒback
(c⁄° 
memˇched_°
*,

51 c⁄° 
memˇched_ö°™˚_°
 * 
£rvî
,

52 *
c⁄ãxt
)

54 i‡(
c⁄ãxt
)

56 
°d
::
˚º
 << 
	`memˇched_£rvî_«me
(
£rvî
Ë<< ":" << 
	`memˇched_£rvî_p‹t
(£rvîË<< std::
ídl
;

59  
MEMCACHED_SUCCESS
;

60 
	}
}

62 
memˇched_ªtu∫_t
 
	$£rvî_¥öt_vîsi⁄_ˇŒback
(c⁄° 
memˇched_°
 *,

63 c⁄° 
memˇched_ö°™˚_°
 * 
£rvî
,

66 
°d
::
˚º
 << "Sîvî: " << 
	`memˇched_£rvî_«me
(
£rvî
Ë<< ":" << 
	`memˇched_£rvî_p‹t
(server) << " "

67 << (
	`memˇched_£rvî_maj‹_vîsi⁄
(
£rvî
)) << "."

68 << (
	`memˇched_£rvî_mö‹_vîsi⁄
(
£rvî
)) << "."

69 << (
	`memˇched_£rvî_mi¸o_vîsi⁄
(
£rvî
))

70 << 
°d
::
ídl
;

72  
MEMCACHED_SUCCESS
;

73 
	}
}

75 c⁄° * 
	$¥öt_vîsi⁄
(
memˇched_°
 *
memc
)

77 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

78 
ˇŒbacks
[0]
£rvî_¥öt_vîsi⁄_ˇŒback
;

79 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, 
NULL
, 1);

82 
	}
}

	@tests/libmemcached-1.0/replication.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
usög
 
«me•a˚
 
	glibã°
;

43 
	~<libmemˇched-1.0/memˇched.h
>

45 
	~"libmemˇched/£rvî_ö°™˚.h
"

47 
	~<ã°s/ª∂iˇti⁄.h
>

48 
	~<ã°s/debug.h
>

50 
	~"ã°s/libmemˇched-1.0/£tup_™d_ã¨downs.h
"

52 
ã°_ªtu∫_t
 
	$check_ª∂iˇti⁄_ßnôy_TEST
(
memˇched_°
 *
memc
)

54 
	`ã°_åue
(
memc
);

55 
	`ã°_com∑ª
(
	`uöt64_t
(1),

56 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

62 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
), 
	`uöt64_t
(
	`memˇched_£rvî_cou¡
(memc) - 1));

64  
TEST_SUCCESS
;

65 
	}
}

67 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_£t_ã°
(
memˇched_°
 *
memc
)

69 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

70 
	`ã°_åue
(
memc_˛⁄e
);

71 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

72 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 0));

74 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

75 
	`memˇched_£t
(
memc
, "bubba", 5, "0", 1, 0, 0));

90 
	`memˇched_quô
(
memc
);

98 
x
= 'a'; x <= 'z'; ++x)

100 c⁄° 
key
[2]{ ()
x
, 0 };

101 
size_t
 
Àn
;

102 
uöt32_t
 
Êags
;

103 
memˇched_ªtu∫_t
 
rc
;

104 *
vÆ

	`memˇched_gë_by_key
(
memc_˛⁄e
, 
key
, 1, "bubba", 5,

105 &
Àn
, &
Êags
, &
rc
);

106 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

107 
	`ã°_åue
(
vÆ
);

108 
	`‰ì
(
vÆ
);

111 
	`memˇched_‰ì
(
memc_˛⁄e
);

113  
TEST_SUCCESS
;

114 
	}
}

116 
	~"libmemˇched/ö°™˚.hµ
"

118 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_gë_ã°
(
memˇched_°
 *
memc
)

126 
uöt32_t
 
ho°
0; ho° < 
	`memˇched_£rvî_cou¡
(
memc
); ++host)

128 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

129 
memˇched_ö°™˚_°
* 
ö°™˚
(memˇched_ö°™˚_°*)
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_˛⁄e
, 
ho°
);

131 
ö°™˚
->
	`p‹t
(0);

133 
x
= 'a'; x <= 'z'; ++x)

135 c⁄° 
key
[2]{ ()
x
, 0 };

136 
size_t
 
Àn
;

137 
uöt32_t
 
Êags
;

138 
memˇched_ªtu∫_t
 
rc
;

139 *
vÆ

	`memˇched_gë_by_key
(
memc_˛⁄e
, 
key
, 1, "bubba", 5,

140 &
Àn
, &
Êags
, &
rc
);

141 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

142 
	`ã°_åue
(
vÆ
);

143 
	`‰ì
(
vÆ
);

146 
	`memˇched_‰ì
(
memc_˛⁄e
);

149  
TEST_SUCCESS
;

150 
	}
}

152 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_mgë_ã°
(
memˇched_°
 *
memc
)

154 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

155 
	`ã°_åue
(
memc_˛⁄e
);

156 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

157 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 0));

159 c⁄° *
keys
[]= { "bubba", "key1", "key2", "key3" };

160 
size_t
 
Àn
[]= { 5, 4, 4, 4 };

162 
size_t
 
x
= 0; x< 4; ++x)

164 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
, 
keys
[
x
], 
Àn
[x], "0", 1, 0, 0));

180 
	`memˇched_quô
(
memc
);

187 
memˇched_ªsu…_°
 
ªsu…_obj
;

188 
uöt32_t
 
ho°
0; ho° < 
	`memˇched_£rvî_cou¡
(
memc_˛⁄e
); host++)

190 
memˇched_°
 *
√w_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

191 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
√w_˛⁄e
, 
ho°
);

192 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
	`p‹t
(0);

194 
x
= 'a'; x <= 'z'; ++x)

196 
key
[2]{ ()
x
, 0 };

198 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

199 
	`memˇched_mgë_by_key
(
√w_˛⁄e
, 
key
, 1, 
keys
, 
Àn
, 4));

201 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
√w_˛⁄e
, &
ªsu…_obj
);

202 
	`ã°_åue
(
ªsu…s
);

204 
hôs
= 0;

205 
memˇched_ªtu∫_t
 
rc
;

206 (
ªsu…s

	`memˇched_„tch_ªsu…
(
√w_˛⁄e
, &
ªsu…_obj
, &
rc
)Ë!
NULL
)

208 
hôs
++;

210 
	`ã°_com∑ª
(4, 
hôs
);

211 
	`memˇched_ªsu…_‰ì
(&
ªsu…_obj
);

214 
	`memˇched_‰ì
(
√w_˛⁄e
);

217 
	`memˇched_‰ì
(
memc_˛⁄e
);

219  
TEST_SUCCESS
;

220 
	}
}

222 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_øndomize_mgë_ã°
(
memˇched_°
 *
memc
)

224 
memˇched_ªsu…_°
 
ªsu…_obj
;

225 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

226 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 3);

227 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
, 1);

229 c⁄° *
keys
[]= { "key1", "key2", "key3", "key4", "key5", "key6", "key7" };

230 
size_t
 
Àn
[]= { 4, 4, 4, 4, 4, 4, 4 };

232 
size_t
 
x
= 0; x< 7; ++x)

234 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

235 
	`memˇched_£t
(
memc
, 
keys
[
x
], 
Àn
[x], "1", 1, 0, 0));

238 
	`memˇched_quô
(
memc
);

240 
size_t
 
x
= 0; x< 7; ++x)

242 c⁄° 
key
[2]{ ()
x
, 0 };

244 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

245 
	`memˇched_mgë_by_key
(
memc_˛⁄e
, 
key
, 1, 
keys
, 
Àn
, 7));

247 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc_˛⁄e
, &
ªsu…_obj
);

248 
	`ã°_åue
(
ªsu…s
);

250 
hôs
= 0;

251 
memˇched_ªtu∫_t
 
rc
;

252 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc_˛⁄e
, &
ªsu…_obj
, &
rc
)Ë!
NULL
)

254 ++
hôs
;

256 
	`ã°_com∑ª
(
hôs
, 7);

257 
	`memˇched_ªsu…_‰ì
(&
ªsu…_obj
);

259 
	`memˇched_‰ì
(
memc_˛⁄e
);

261  
TEST_SUCCESS
;

262 
	}
}

264 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_dñëe_ã°
(
memˇched_°
 *
memc_ju°_˛⁄ed
)

266 
	`memˇched_Êush
(
memc_ju°_˛⁄ed
, 0);

267 
memˇched_°
 *
memc_nŸ_ª∂iˇã

	`memˇched_˛⁄e
(
NULL
, 
memc_ju°_˛⁄ed
);

268 
memˇched_°
 *
memc_ª∂iˇãd

	`memˇched_˛⁄e
(
NULL
, 
memc_ju°_˛⁄ed
);

269 c⁄° *
keys
[]= { "bubba", "key1", "key2", "key3", "key4" };

271 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
	`memˇched_behavi‹_gë
(
memc_ª∂iˇãd
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

272 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc_ª∂iˇãd
, 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
, 
Ál£
));

275 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc_ª∂iˇãd
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 1UL));

276 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
	`memˇched_behavi‹_gë
(
memc_ª∂iˇãd
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
));

278 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc_nŸ_ª∂iˇã
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 0UL));

279 
	`ã°_com∑ª
(
	`uöt64_t
(0), 
	`memˇched_behavi‹_gë
(
memc_nŸ_ª∂iˇã
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
));

281 
size_t
 
x
0; x < 
	`ã°_¨øy_Àngth
(
keys
); ++x)

283 
	`memˇched_£t
(
memc_ª∂iˇãd
,

284 
	`ã°_°rög_make_‰om_c°r
(
keys
[
x
]),

285 
	`ã°_°rög_make_‰om_c°r
(
keys
[
x
]),

289 
	`memˇched_Êush_buf„rs
(
memc_ª∂iˇãd
);

292 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`c⁄fúm_keys_exi°
(
memc_ª∂iˇãd
, 
keys
, 
	`ã°_¨øy_Àngth
(keys), 
åue
,Årue));

293 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`c⁄fúm_keys_exi°
(
memc_nŸ_ª∂iˇã
, 
keys
, 
	`ã°_¨øy_Àngth
(keys), 
åue
,Årue));

296 
size_t
 
x
0; x < 
	`ã°_¨øy_Àngth
(
keys
); ++x)

298 
memˇched_ªtu∫_t
 
dñ_rc

	`memˇched_dñëe
(
memc_ª∂iˇãd
,

299 
	`ã°_°rög_make_‰om_c°r
(
keys
[
x
]),

301 i‡(
dñ_rc
 =
MEMCACHED_SUCCESS
 
‹
 dñ_r¯=
MEMCACHED_NOTFOUND
)

305 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
dñ_rc
);

309 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`c⁄fúm_keys_d⁄t_exi°
(
memc_ª∂iˇãd
, 
keys
, 
	`ã°_¨øy_Àngth
(keys)));

310 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`c⁄fúm_keys_d⁄t_exi°
(
memc_nŸ_ª∂iˇã
, 
keys
, 
	`ã°_¨øy_Àngth
(keys)));

312 
	`ã°_zîo
(
	`c⁄fúm_key_cou¡
(
memc_nŸ_ª∂iˇã
));

315 
	`memˇched_‰ì
(
memc_nŸ_ª∂iˇã
);

316 
	`memˇched_‰ì
(
memc_ª∂iˇãd
);

318  
TEST_SUCCESS
;

319 
	}
}

321 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_øndomize_mgë_Áû_ã°
(
memˇched_°
 *
memc
)

323 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

324 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 3);

326 
x
(
MEMCACHED_SUCCESS
); x < (
MEMCACHED_MAXIMUM_RETURN
); ++x)

328 c⁄° *
key

	`memˇched_°ªº‹
(
NULL
, 
	`memˇched_ªtu∫_t
(
x
));

329 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

330 
	`memˇched_£t
(
memc
,

331 
key
, 
	`°æí
(key),

332 
key
, 
	`°æí
(key), 0, 0));

335 
	`memˇched_Êush_buf„rs
(
memc
);

339 
	`˛o£
(
memc_˛⁄e
->
£rvîs
[1].
fd
);

340 
memc_˛⁄e
->
£rvîs
[1].
	`p‹t
(1);

341 
memc_˛⁄e
->
£rvîs
[1].
addªss_öfo_√xt

NULL
;

343 
x
(
MEMCACHED_SUCCESS
); x < (
MEMCACHED_MAXIMUM_RETURN
); ++x)

345 c⁄° *
key

	`memˇched_°ªº‹
(
NULL
, 
	`memˇched_ªtu∫_t
(
x
));

346 
uöt32_t
 
Êags
;

347 
size_t
 
vÆue_Àngth
;

348 
memˇched_ªtu∫_t
 
rc
;

349 *
vÆue

	`memˇched_gë
(
memc_˛⁄e
, 
key
, 
	`°æí
(key), &
vÆue_Àngth
, &
Êags
, &
rc
);

350 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

351 
	`ã°_com∑ª
(
	`°æí
(
key
), 
vÆue_Àngth
);

352 
	`ã°_°rcmp
(
key
, 
vÆue
);

353 
	`‰ì
(
vÆue
);

355 
	`memˇched_‰ì
(
memc_˛⁄e
);

356  
TEST_SUCCESS
;

357 
	}
}

360 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_miss_ã°
(
memˇched_°
 *
memc
)

362 
	`ã°_skù
(
åue
, 
Ál£
);

364 
memˇched_°
 *
memc_ª∂

	`memˇched_˛⁄e
(
NULL
, 
memc
);

365 
	`ã°_åue
(
memc_ª∂
);

366 
memˇched_°
 *
memc_sögÀ

	`memˇched_˛⁄e
(
NULL
, 
memc
);

367 
	`ã°_åue
(
memc_sögÀ
);

369 c⁄° *
vÆue
 = "my_value";

370 
size_t
 
vÀn
;

371 
uöt32_t
 
Êags
;

374 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc_ª∂
) > 1);

377 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

378 
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc_ª∂
, 
MEMCACHED_DISTRIBUTION_CONSISTENT
));

379 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

380 
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc_sögÀ
, 
MEMCACHED_DISTRIBUTION_CONSISTENT
));

383 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

384 
	`memˇched_behavi‹_£t
(
memc_ª∂
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 
åue
));

385 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

386 
	`memˇched_behavi‹_£t
(
memc_ª∂
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
,

387 
	`memˇched_£rvî_cou¡
(
memc_ª∂
)));

391 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc_ª∂
,

392 
	`ã°_lôîÆ_∑øm
(
__func__
),

393 
vÆue
, 
	`°æí
(value),

394 
	`time_t
(1200), 
	`uöt32_t
(0));

395 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

401 
memˇched_ªtu∫_t
 
rc

	`memˇched_dñëe
(
memc_sögÀ
,

402 
	`ã°_lôîÆ_∑øm
(
__func__
),

404 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

410 
memˇched_ªtu∫_t
 
rc
;

411 c⁄° 
memˇched_£rvî_°
 *
ö°™˚

	`memˇched_£rvî_by_key
(
memc_sögÀ
,

412 
	`ã°_lôîÆ_∑øm
(
__func__
),

413 &
rc
);

414 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

415 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

416 
	`memˇched_£rvî_ªmove
(
ö°™˚
));

422 
memˇched_ªtu∫_t
 
rc
;

423 *
gë_vÆue

	`memˇched_gë
(
memc_sögÀ
,

424 
	`ã°_lôîÆ_∑øm
(
__func__
),

425 &
vÀn
, &
Êags
, &
rc
);

426 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 
‹
Ñ¯=
MEMCACHED_BUFFERED
);

427 
	`ã°_åue
(
gë_vÆue
 
™d
 
	`°rcmp
(gë_vÆue, 
vÆue
) == 0);

428 
	`‰ì
(
gë_vÆue
);

433 
memˇched_ªtu∫_t
 
rc
;

434 *
gë_vÆue

	`memˇched_gë
(
memc_ª∂
,

435 
	`ã°_lôîÆ_∑øm
(
__func__
),

436 &
vÀn
, &
Êags
, &
rc
);

437 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

438 
	`ã°_åue
(
gë_vÆue
 
™d
 
	`°rcmp
(gë_vÆue, 
vÆue
) == 0);

439 
	`‰ì
(
gë_vÆue
);

442 
	`memˇched_‰ì
(
memc_ª∂
);

443 
	`memˇched_‰ì
(
memc_sögÀ
);

445  
TEST_SUCCESS
;

446 
	}
}

	@tests/libmemcached-1.0/sasl.cc

37 
	~<mem_c⁄fig.h
>

38 
	~<libã°/ã°.hµ
>

40 
usög
 
«me•a˚
 
	glibã°
;

46 
	~<libmemˇched-1.0/memˇched.h
>

48 
ã°_ªtu∫_t
 
	$¥e_ß¶
(
memˇched_°
 *)

50 
	`SKIP_IF
(
åue
);

52 
	`SKIP_IF_
(
åue
, "currently weáreÇotÅesting sasl support");

54 
	`SKIP_IF
(
LIBMEMCACHED_WITH_SASL_SUPPORT
 == 0);

56  
TEST_SUCCESS
;

57 
	}
}

65 
ã°_ªtu∫_t
 
	$ß¶_auth_ã°
(
memˇched_°
 *
memc
)

67 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
)

69 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£t
(
memc
, "foo", 3, "b¨", 3, (
time_t
)0, (
uöt32_t
)0));

70 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_dñëe
(
memc
, "foo", 3, 0));

71 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_de°roy_ß¶_auth_d©a
(
memc
));

72 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_de°roy_ß¶_auth_d©a
(
memc
));

73 
	`ã°_com∑ª
(
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_de°roy_ß¶_auth_d©a
(
NULL
));

74 
	`memˇched_quô
(
memc
);

76 
	`ã°_com∑ª
(
MEMCACHED_AUTH_FAILURE
,

77 
	`memˇched_£t
(
memc
, "foo", 3, "b¨", 3, (
time_t
)0, (
uöt32_t
)0));

78 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_de°roy_ß¶_auth_d©a
(
memc
));

80 
	`memˇched_quô
(
memc
);

81  
TEST_SUCCESS
;

84  
TEST_SKIPPED
;

85 
	}
}

88 
ã°_°
 
	gß¶_auth_ã°s
[]= {

89 {"ß¶_auth", 
åue
, (
ã°_ˇŒback_‚
*)
ß¶_auth_ã°
 },

90 {0, 0, (
ã°_ˇŒback_‚
*)0}

93 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

94 {"ß¶_auth", (
ã°_ˇŒback_‚
*)
¥e_ß¶
, 0, 
ß¶_auth_ã°s
 },

96 {"ß¶", (
ã°_ˇŒback_‚
*)
¥e_ß¶
, 0, 
ã°s
 },

101 
	~"ã°s/libmemˇched_w‹ld.h
"

103 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

105 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

107 
	gw‹ld
->
¸óã
((
ã°_ˇŒback_¸óã_‚
*)
w‹ld_¸óã
);

108 
	gw‹ld
->
de°roy
((
ã°_ˇŒback_de°roy_‚
*)
w‹ld_de°roy
);

110 
	gw‹ld
->
£t_ru¬î
(
√w
 
LibmemˇchedRu¬î
);

112 
	gw‹ld
->
£t_ß¶
("memcached", "memcached");

	@tests/libmemcached-1.0/server_add.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/y©l.h
>

41 
	~<°rög
>

43 
usög
 
«me•a˚
 
	glibã°
;

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
	~<ã°s/£rvî_add.h
>

49 
	g°d
::
°rög
 
	$øndom_ho°«me
()

51 
libã°
::
vch¨_t
 
ho°«me
;

52 
libã°
::
vch¨
::
	`make
(
ho°«me
, 23);

53 
libã°
::
vch¨
::
	`≠≥nd
(
ho°«me
, ".com");

55  
°d
::
	`°rög
(&
ho°«me
[0]);

56 
	}
}

58 
ã°_ªtu∫_t
 
	$memˇched_£rvî_add_nuŒ_ã°
(
memˇched_°
* 
memc
)

60 
	`ASSERT_EQ
(0, 
	`memˇched_£rvî_cou¡
(
memc
));

62 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_add
(
memc
, 
NULL
, 0));

64  
TEST_SUCCESS
;

65 
	}
}

67 
ã°_ªtu∫_t
 
	$memˇched_£rvî_add_em±y_ã°
(
memˇched_°
* 
memc
)

69 
	`ASSERT_EQ
(0, 
	`memˇched_£rvî_cou¡
(
memc
));

71 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_add
(
memc
, "", 0));

73  
TEST_SUCCESS
;

74 
	}
}

76 
ã°_ªtu∫_t
 
	$memˇched_£rvî_m™y_TEST
(
memˇched_°
* 
memc
)

78 
	`ASSERT_EQ
(0, 
	`memˇched_£rvî_cou¡
(
memc
));

80 
ö_p‹t_t
 
ba£_p‹t
= 5555;

81 
ö_p‹t_t
 
x
= 0; x < 100; ++x)

83 
°d
::
°rög
 
	`ho°«me
(
	`øndom_ho°«me
());

84 
	`ASSERT_TRUE
(
ho°«me
.
	`size
());

85 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_add
(
memc
, 
ho°«me
.
	`c_°r
(), 
ba£_p‹t
 +
x
));

88  
TEST_SUCCESS
;

89 
	}
}

91 
ã°_ªtu∫_t
 
	$memˇched_£rvî_m™y_weighãd_TEST
(
memˇched_°
* 
memc
)

93 
	`SKIP_IF
(
åue
);

94 
	`ASSERT_EQ
(0, 
	`memˇched_£rvî_cou¡
(
memc
));

96 
ö_p‹t_t
 
ba£_p‹t
= 5555;

97 
ö_p‹t_t
 
x
= 0; x < 100; ++x)

99 
°d
::
°rög
 
	`ho°«me
(
	`øndom_ho°«me
());

100 
	`ASSERT_TRUE
(
ho°«me
.
	`size
());

101 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_£rvî_add_wôh_weight
(
memc
, 
ho°«me
.
	`c_°r
(), 
ba£_p‹t
 +
x
, 
	`øndom
() % 10));

104  
TEST_SUCCESS
;

105 
	}
}

	@tests/libmemcached-1.0/setup_and_teardowns.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
	~<libmemˇchedutû-1.0/utû.h
>

43 
	~"ã°s/¥öt.h
"

44 
	~"ã°s/libmemˇched-1.0/£tup_™d_ã¨downs.h
"

46 
	~<sys/°©.h
>

48 
usög
 
«me•a˚
 
	glibã°
;

50 
memˇched_ªtu∫_t
 
	$ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memˇched_°
 *
memc
)

52 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
))

54  
MEMCACHED_BUFFERED
;

57  
MEMCACHED_SUCCESS
;

58 
	}
}

63 
ã°_ªtu∫_t
 
	$¥e_bö¨y
(
memˇched_°
 *
memc
)

65 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) > 0);

66 
	`ã°_skù
(
åue
, 
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4));

67 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 
åue
));

69  
TEST_SUCCESS
;

70 
	}
}

72 
ã°_ªtu∫_t
 
	$¥e_buf„r
(
memˇched_°
 *
memc
)

74 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
åue
));

76  
TEST_SUCCESS
;

77 
	}
}

79 
ã°_ªtu∫_t
 
	$¥e_unix_sockë
(
memˇched_°
 *
memc
)

81 
°©
 
buf
;

83 
	`memˇched_£rvîs_ª£t
(
memc
);

84 c⁄° *
sockë_fûe

libã°
::
	`deÁu…_sockë
();

85 
	`ã°_skù
(
åue
, 
	`boﬁ
(
sockë_fûe
));

87 
	`ã°_skù
(0, 
	`°©
(
sockë_fûe
, &
buf
));

89 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

90 
	`memˇched_£rvî_add_unix_sockë_wôh_weight
(
memc
, 
sockë_fûe
, 0));

92  
TEST_SUCCESS
;

93 
	}
}

95 
ã°_ªtu∫_t
 
	$¥e_nodñay
(
memˇched_°
 *
memc
)

97 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

98 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 0);

100  
TEST_SUCCESS
;

101 
	}
}

103 
ã°_ªtu∫_t
 
	$¥e_£âimî
(
memˇched_°
 *
memc
)

105 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
, 1000);

106 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
, 1000);

108  
TEST_SUCCESS
;

109 
	}
}

111 
ã°_ªtu∫_t
 
	$¥e_murmur
(
memˇched_°
 *
memc
)

113 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_MURMUR
));

114  
TEST_SUCCESS
;

115 
	}
}

117 
ã°_ªtu∫_t
 
	$¥e_jíkös
(
memˇched_°
 *
memc
)

119 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_JENKINS
);

121  
TEST_SKIPPED
;

122 
	}
}

125 
ã°_ªtu∫_t
 
	$¥e_md5
(
memˇched_°
 *
memc
)

127 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_MD5
);

129  
TEST_SUCCESS
;

130 
	}
}

132 
ã°_ªtu∫_t
 
	$¥e_¸c
(
memˇched_°
 *
memc
)

134 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_CRC
);

136  
TEST_SUCCESS
;

137 
	}
}

139 
ã°_ªtu∫_t
 
	$¥e_hsõh
(
memˇched_°
 *
memc
)

141 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_HSIEH
));

142  
TEST_SUCCESS
;

143 
	}
}

145 
ã°_ªtu∫_t
 
	$¥e_hash_‚v1_64
(
memˇched_°
 *
memc
)

147 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_MURMUR
));

149  
TEST_SUCCESS
;

150 
	}
}

152 
ã°_ªtu∫_t
 
	$¥e_hash_‚v1a_64
(
memˇched_°
 *
memc
)

154 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_FNV1A_64
));

156  
TEST_SUCCESS
;

157 
	}
}

159 
ã°_ªtu∫_t
 
	$¥e_hash_‚v1_32
(
memˇched_°
 *
memc
)

161 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_FNV1_32
);

163  
TEST_SUCCESS
;

164 
	}
}

166 
ã°_ªtu∫_t
 
	$¥e_hash_‚v1a_32
(
memˇched_°
 *
memc
)

168 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_FNV1A_32
);

170  
TEST_SUCCESS
;

171 
	}
}

173 
ã°_ªtu∫_t
 
	$memˇched_£rvîs_ª£t_SETUP
(
memˇched_°
 *
memc
)

175 
	`memˇched_£rvîs_ª£t
(
memc
);

176 
	`ã°_com∑ª
(0U, 
	`memˇched_£rvî_cou¡
(
memc
));

177  
TEST_SUCCESS
;

178 
	}
}

180 
ã°_ªtu∫_t
 
	$memˇched_£rvîs_ª£t_MEMCACHED_DISTRIBUTION_CONSISTENT_SETUP
(
memˇched_°
 *
memc
)

182 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`memˇched_£rvîs_ª£t_SETUP
(
memc
));

184 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc
, 
MEMCACHED_DISTRIBUTION_CONSISTENT
));

185 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
), 
MEMCACHED_DISTRIBUTION_CONSISTENT
);

187  
TEST_SUCCESS
;

188 
	}
}

190 
ã°_ªtu∫_t
 
	$memˇched_£rvîs_ª£t_MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED_SETUP
(
memˇched_°
 *
memc
)

192 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`memˇched_£rvîs_ª£t_SETUP
(
memc
));

193 
	`ASSERT_EQ
(0U, 
	`memˇched_£rvî_cou¡
(0));

195 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
));

196 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
), 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
);

198  
TEST_SUCCESS
;

199 
	}
}

201 
ã°_ªtu∫_t
 
	$¥e_behavi‹_këama
(
memˇched_°
 *
memc
)

203 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA
, 1));

205 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA
), 
	`uöt64_t
(1));

207  
TEST_SUCCESS
;

208 
	}
}

210 
ã°_ªtu∫_t
 
	$¥e_behavi‹_këama_weighãd
(
memˇched_°
 *
memc
)

212 
	`ã°_com∑ª
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 
åue
), 
MEMCACHED_SUCCESS
);

214 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
), 
	`uöt64_t
(1));

216 
	`ã°_com∑ª
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
, 
MEMCACHED_HASH_MD5
), 
MEMCACHED_SUCCESS
);

218 
	`ã°_com∑ª
(
	`memˇched_hash_t
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
)), 
MEMCACHED_HASH_MD5
);

220  
TEST_SUCCESS
;

221 
	}
}

223 
ã°_ªtu∫_t
 
	$¥e_ª∂iˇti⁄
(
memˇched_°
 *
memc
)

225 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_bö¨y
(
memc
));

231 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 
	`memˇched_£rvî_cou¡
(memc) - 1));

232 
	`ã°_com∑ª
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
), 
	`uöt64_t
(
	`memˇched_£rvî_cou¡
(memc) - 1));

234  
TEST_SUCCESS
;

235 
	}
}

238 
ã°_ªtu∫_t
 
	$¥e_ª∂iˇti⁄_noblock
(
memˇched_°
 *
memc
)

240 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_ª∂iˇti⁄
(
memc
));

242  
	`¥e_n⁄block
(
memc
);

243 
	}
}

245 
ã°_ªtu∫_t
 
	$¥e_n⁄block
(
memˇched_°
 *
memc
)

247 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

249  
TEST_SUCCESS
;

250 
	}
}

252 
ã°_ªtu∫_t
 
	$¥e_n⁄block_bö¨y
(
memˇched_°
 *
memc
)

254 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

255 
	`ã°_åue
(
memc_˛⁄e
);

259 
	`memˇched_vîsi⁄
(
memc_˛⁄e
);

261 
memˇched_ªtu∫_t
 
rc

MEMCACHED_FAILURE
;

262 i‡(
	`libmemˇched_utû_vîsi⁄_check
(
memc_˛⁄e
, 1, 4, 4))

264 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

265 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

266 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1));

267 
	`ã°_com∑ª
(
	`uöt64_t
(1), 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

271 
	`memˇched_‰ì
(
memc_˛⁄e
);

272  
TEST_SKIPPED
;

275 
	`memˇched_‰ì
(
memc_˛⁄e
);

277  
rc
 =
MEMCACHED_SUCCESS
 ? 
TEST_SUCCESS
 : 
TEST_SKIPPED
;

278 
	}
}

	@tests/libmemcached-1.0/setup_and_teardowns.h

38 #¥agm®
⁄˚


40 
memˇched_ªtu∫_t
 
ªtu∫_vÆue_ba£d_⁄_buf„rög
(
memˇched_°
*);

42 
ã°_ªtu∫_t
 
¥e_behavi‹_këama
(
memˇched_°
*);

43 
ã°_ªtu∫_t
 
¥e_behavi‹_këama_weighãd
(
memˇched_°
*);

44 
ã°_ªtu∫_t
 
¥e_bö¨y
(
memˇched_°
*);

45 
ã°_ªtu∫_t
 
¥e_c‹k
(
memˇched_°
*);

46 
ã°_ªtu∫_t
 
¥e_c‹k_™d_n⁄block
(
memˇched_°
*);

47 
ã°_ªtu∫_t
 
¥e_¸c
(
memˇched_°
*);

48 
ã°_ªtu∫_t
 
¥e_hash_‚v1_32
(
memˇched_°
*);

49 
ã°_ªtu∫_t
 
¥e_hash_‚v1_64
(
memˇched_°
*);

50 
ã°_ªtu∫_t
 
¥e_hash_‚v1a_32
(
memˇched_°
*);

51 
ã°_ªtu∫_t
 
¥e_hash_‚v1a_64
(
memˇched_°
*);

52 
ã°_ªtu∫_t
 
¥e_hsõh
(
memˇched_°
*);

53 
ã°_ªtu∫_t
 
¥e_jíkös
(
memˇched_°
*);

54 
ã°_ªtu∫_t
 
¥e_md5
(
memˇched_°
*);

55 
ã°_ªtu∫_t
 
¥e_murmur
(
memˇched_°
*);

56 
ã°_ªtu∫_t
 
¥e_nodñay
(
memˇched_°
*);

57 
ã°_ªtu∫_t
 
¥e_n⁄block
(
memˇched_°
*);

58 
ã°_ªtu∫_t
 
¥e_n⁄block_bö¨y
(
memˇched_°
*);

59 
ã°_ªtu∫_t
 
¥e_ª∂iˇti⁄
(
memˇched_°
*);

60 
ã°_ªtu∫_t
 
¥e_ª∂iˇti⁄_noblock
(
memˇched_°
*);

61 
ã°_ªtu∫_t
 
¥e_£âimî
(
memˇched_°
*);

62 
ã°_ªtu∫_t
 
¥e_unix_sockë
(
memˇched_°
*);

63 
ã°_ªtu∫_t
 
¥e_buf„r
(
memˇched_°
*);

64 
ã°_ªtu∫_t
 
memˇched_£rvîs_ª£t_MEMCACHED_DISTRIBUTION_CONSISTENT_SETUP
(
memˇched_°
 *
memc
);

65 
ã°_ªtu∫_t
 
memˇched_£rvîs_ª£t_MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED_SETUP
(
memˇched_°
 *
memc
);

66 
ã°_ªtu∫_t
 
memˇched_£rvîs_ª£t_SETUP
(
memˇched_°
 *
memc
);

	@tests/libmemcached-1.0/stat.cc

37 
	~<mem_c⁄fig.h
>

39 
	~<c°dlib
>

40 
	~<˛imôs
>

42 
	~<libã°/ã°.hµ
>

44 
	~<libmemˇched-1.0/memˇched.h
>

45 
	~<libmemˇchedutû-1.0/utû.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 
	~"ã°s/libmemˇched-1.0/°©.h
"

51 
memˇched_ªtu∫_t
 
	$ôem_cou¡î
(c⁄° 
memˇched_ö°™˚_°
 * ,

52 c⁄° *
key
, 
size_t
 
key_Àngth
,

53 c⁄° *
vÆue
, 
size_t
,

54 *
c⁄ãxt
)

56 i‡((
key_Àngth
 =(("cuº_ôems"Ë-1)Ë
	`™d
 (
	`°∫cmp
("cuº_ôems", 
key
, (("curr_items") -1)) == 0))

58 
uöt64_t
* 
cou¡î
(uöt64_t*)
c⁄ãxt
;

59 
numbî_vÆue

	`°πoul
(
vÆue
, (**)
NULL
, 10);

60 
	`ASSERT_NEQ
(
numbî_vÆue
, 
ULONG_MAX
);

61 *
cou¡î
*cou¡î +
numbî_vÆue
;

64  
MEMCACHED_SUCCESS
;

65 
	}
}

67 
ã°_ªtu∫_t
 
	$memˇched_°©_TEST
(
memˇched_°
 *
memc
)

69 
uöt64_t
 
cou¡î
= 0;

70 
	`ã°_com∑ª
(
MEMCACHED_INVALID_ARGUMENTS
,

71 
	`memˇched_°©_execuã
(
memc
, "BAD_ARG_VALUE", 
ôem_cou¡î
, &
cou¡î
));

73  
TEST_SUCCESS
;

74 
	}
}

76 
	#memˇched_dump_TEST2_COUNT
 64

	)

77 
ã°_ªtu∫_t
 
	$memˇched_°©_TEST2
(
memˇched_°
 *
memc
)

79 
	`ã°_skù
(
Ál£
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

82 
uöt32_t
 
x
0; x < 
memˇched_dump_TEST2_COUNT
; x++)

84 
key
[1024];

85 
Àngth

	`¢¥ötf
(
key
, (key), "%s%u", 
__func__
, 
x
);

87 
	`ASSERT_TRUE
(
Àngth
 > 0);

89 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

90 
	`memˇched_£t
(
memc
, 
key
, 
Àngth
,

91 
NULL
, 0,

92 
	`time_t
(0), 
	`uöt32_t
(0)));

94 
	`memˇched_quô
(
memc
);

96 
uöt64_t
 
cou¡î
= 0;

97 
	`ASSERT_EQ
(
MEMCACHED_SUCCESS
,

98 
	`memˇched_°©_execuã
(
memc
, 
NULL
, 
ôem_cou¡î
, &
cou¡î
));

99 
	`ASSERT_TRUE
(
cou¡î
);

101  
TEST_SUCCESS
;

102 
	}
}

	@tests/libmemcached-1.0/stat.h

37 #¥agm®
⁄˚


39 
ã°_ªtu∫_t
 
memˇched_°©_TEST
(
memˇched_°
 *);

40 
ã°_ªtu∫_t
 
memˇched_°©_TEST2
(
memˇched_°
 *);

	@tests/libmemcached-1.0/string.cc

41 
	~<mem_c⁄fig.h
>

43 
	~<libmemˇched-1.0/memˇched.h
>

45 
	~"libmemˇched/°rög.hµ
"

46 
	~"libmemˇched/is.h
"

48 
	~<libã°/ã°.hµ
>

50 
	~<ã°s/°rög.h
>

52 
ã°_ªtu∫_t
 
	$°rög_°©ic_nuŒ
(*)

54 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

55 
memˇched_°rög_°
 
°rög
;

57 
memˇched_°rög_°
 *
°rög_±r

	`memˇched_°rög_¸óã
(
memc
, &
°rög
, 0);

58 
	`ã°_åue
(
°rög
.
›ti⁄s
.
is_öôülized
);

59 
	`ã°_åue
(
°rög_±r
);

62 
	`ã°_Ál£
(
	`memˇched_is_Æloˇãd
(
°rög_±r
));

63 
	`ã°_Ál£
(
	`memˇched_is_Æloˇãd
(&
°rög
));

64 
	`ã°_åue
(&
°rög
 =
°rög_±r
);

66 
	`ã°_åue
(
°rög
.
›ti⁄s
.
is_öôülized
);

67 
	`ã°_åue
(
	`memˇched_is_öôülized
(&
°rög
));

68 
	`memˇched_°rög_‰ì
(&
°rög
);

69 
	`ã°_Ál£
(
	`memˇched_is_öôülized
(&
°rög
));

71 
	`memˇched_‰ì
(
memc
);

73  
TEST_SUCCESS
;

74 
	}
}

76 
ã°_ªtu∫_t
 
	$°rög_Æloc_nuŒ
(*)

78 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

80 
memˇched_°rög_°
 *
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 0);

81 
	`ã°_åue
(
°rög
);

82 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
));

83 
	`ã°_åue
(
	`memˇched_is_öôülized
(
°rög
));

84 
	`memˇched_°rög_‰ì
(
°rög
);

86 
	`memˇched_‰ì
(
memc
);

88  
TEST_SUCCESS
;

89 
	}
}

91 
ã°_ªtu∫_t
 
	$°rög_Æloc_wôh_size
(*)

93 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

94 
memˇched_°rög_°
 *
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 1024);

95 
	`ã°_åue
(
°rög
);

96 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
));

97 
	`ã°_åue
(
	`memˇched_is_öôülized
(
°rög
));

98 
	`memˇched_°rög_‰ì
(
°rög
);

100 
	`memˇched_‰ì
(
memc
);

102  
TEST_SUCCESS
;

103 
	}
}

105 
ã°_ªtu∫_t
 
	$°rög_Æloc_wôh_size_toobig
(*)

107 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

108 
memˇched_°rög_°
 *
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 
SIZE_MAX
);

109 
	`ã°_zîo
(
°rög
);

110 
	`memˇched_‰ì
(
memc
);

112  
TEST_SUCCESS
;

113 
	}
}

115 
ã°_ªtu∫_t
 
	$°rög_Æloc_≠≥nd
(*)

117 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

119 
buf„r
[
BUFSIZ
];

120 
memˇched_°rög_°
 *
°rög
;

123 
	`mem£t
(
buf„r
, 6, 
BUFSIZ
);

125 
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 100);

126 
	`ã°_åue
(
°rög
);

127 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
));

128 
	`ã°_åue
(
	`memˇched_is_öôülized
(
°rög
));

130 
x
= 0; x < 1024; x++)

132 
memˇched_ªtu∫_t
 
rc
;

133 
rc

	`memˇched_°rög_≠≥nd
(
°rög
, 
buf„r
, 
BUFSIZ
);

134 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

136 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
));

137 
	`memˇched_°rög_‰ì
(
°rög
);

139 
	`memˇched_‰ì
(
memc
);

141  
TEST_SUCCESS
;

142 
	}
}

144 
ã°_ªtu∫_t
 
	$°rög_Æloc_≠≥nd_toobig
(*)

146 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

148 
memˇched_ªtu∫_t
 
rc
;

149 
buf„r
[
BUFSIZ
];

150 
memˇched_°rög_°
 *
°rög
;

153 
	`mem£t
(
buf„r
, 6, (buffer));

155 
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 100);

156 
	`ã°_åue
(
°rög
);

157 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
));

158 
	`ã°_åue
(
	`memˇched_is_öôülized
(
°rög
));

160 
x
= 0; x < 1024; x++)

162 
rc

	`memˇched_°rög_≠≥nd
(
°rög
, 
buf„r
, 
BUFSIZ
);

163 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

165 
rc

	`memˇched_°rög_≠≥nd
(
°rög
, 
buf„r
, 
SIZE_MAX
);

166 
	`ã°_åue
(
rc
 =
MEMCACHED_MEMORY_ALLOCATION_FAILURE
);

167 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
));

168 
	`memˇched_°rög_‰ì
(
°rög
);

170 
	`memˇched_‰ì
(
memc
);

172  
TEST_SUCCESS
;

173 
	}
}

175 
ã°_ªtu∫_t
 
	$°rög_Æloc_≠≥nd_mu…ùÀ
(*)

177 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

179 
memˇched_°rög_°
 *
îr‹_°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 1024);

180 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`ã°_lôîÆ_∑øm
("Error occured whileÖarsing: "));

181 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`ã°_°rög_make_‰om_c°r
("jogÅhe strlen() method"));

182 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`ã°_lôîÆ_∑øm
(" ("));

184 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`ã°_°rög_make_‰om_c°r
(
	`memˇched_°ªº‹
(
NULL
, 
MEMCACHED_SUCCESS
)));

185 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`ã°_lôîÆ_∑øm
(")"));

187 
	`memˇched_°rög_‰ì
(
îr‹_°rög
);

189 
	`memˇched_‰ì
(
memc
);

191  
TEST_SUCCESS
;

192 
	}
}

	@tests/libmemcached-1.0/touch.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
usög
 
«me•a˚
 
	glibã°
;

43 
	~<libmemˇched-1.0/memˇched.h
>

44 
	~<libmemˇchedutû-1.0/utû.h
>

46 
	~"ã°s/touch.h
"

48 
ã°_ªtu∫_t
 
	$¥e_touch
(
memˇched_°
 *
memc
)

50 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_vîsi⁄
(
memc
));

51 
	`ã°_skù
(
åue
, 
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 15));

53  
TEST_SUCCESS
;

54 
	}
}

56 
ã°_ªtu∫_t
 
	$ã°_memˇched_touch
(
memˇched_°
 *
memc
)

58 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_touch
(
memc
));

60 
size_t
 
Àn
;

61 
uöt32_t
 
Êags
;

62 
memˇched_ªtu∫
 
rc
;

64 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
,

65 
	`ã°_lôîÆ_∑øm
(
__func__
),

66 &
Àn
, &
Êags
, &
rc
));

67 
	`ã°_zîo
(
Àn
);

68 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

70 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

71 
	`memˇched_£t
(
memc
,

72 
	`ã°_lôîÆ_∑øm
(
__func__
),

73 
	`ã°_lôîÆ_∑øm
("touchval"),

77 *
vÆue

	`memˇched_gë
(
memc
,

78 
	`ã°_lôîÆ_∑øm
(
__func__
),

79 &
Àn
, &
Êags
, &
rc
);

80 
	`ã°_com∑ª
(8U, 
	`ã°_lôîÆ_∑øm_size
("touchval"));

81 
	`ã°_åue
(
vÆue
);

82 
	`ã°_°rcmp
(
vÆue
, "touchval");

83 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

84 
	`‰ì
(
vÆue
);

87 
rc

	`memˇched_touch
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
), 60 *60);

88 
	`ASSERT_EQ_
(
MEMCACHED_SUCCESS
, 
rc
, "%s", 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

90 
rc

	`memˇched_touch
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
), 60 *60 *24 *60);

91 
	`ASSERT_EQ_
(
MEMCACHED_SUCCESS
, 
rc
, "%s", 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

93 
rc

	`memˇched_exi°
(
memc
, 
	`ã°_lôîÆ_∑øm
(
__func__
));

94 
	`ASSERT_EQ_
(
MEMCACHED_NOTFOUND
, 
rc
, "%s", 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

96  
TEST_SUCCESS
;

97 
	}
}

99 
ã°_ªtu∫_t
 
	$ã°_memˇched_touch_by_key
(
memˇched_°
 *
memc
)

101 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_touch
(
memc
));

103 
size_t
 
Àn
;

104 
uöt32_t
 
Êags
;

105 
memˇched_ªtu∫
 
rc
;

107 
	`ã°_nuŒ
(
	`memˇched_gë_by_key
(
memc
,

108 
	`ã°_lôîÆ_∑øm
("grouping_key"),

109 
	`ã°_lôîÆ_∑øm
(
__func__
),

110 &
Àn
, &
Êags
, &
rc
));

111 
	`ã°_zîo
(
Àn
);

112 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

114 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

115 
	`memˇched_£t_by_key
(
memc
,

116 
	`ã°_lôîÆ_∑øm
("grouping_key"),

117 
	`ã°_lôîÆ_∑øm
(
__func__
),

118 
	`ã°_lôîÆ_∑øm
("touchval"),

122 *
vÆue

	`memˇched_gë_by_key
(
memc
,

123 
	`ã°_lôîÆ_∑øm
("grouping_key"),

124 
	`ã°_lôîÆ_∑øm
(
__func__
),

125 &
Àn
, &
Êags
, &
rc
);

126 
	`ã°_com∑ª
(8U, 
	`ã°_lôîÆ_∑øm_size
("touchval"));

127 
	`ã°_åue
(
vÆue
);

128 
	`ã°_°rcmp
(
vÆue
, "touchval");

129 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

130 
	`‰ì
(
vÆue
);

133 
rc

	`memˇched_touch_by_key
(
memc
,

134 
	`ã°_lôîÆ_∑øm
("grouping_key"),

135 
	`ã°_lôîÆ_∑øm
(
__func__
),

137 
	`ASSERT_EQ_
(
MEMCACHED_SUCCESS
, 
rc
, "%s", 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

139 
rc

	`memˇched_touch_by_key
(
memc
,

140 
	`ã°_lôîÆ_∑øm
("grouping_key"),

141 
	`ã°_lôîÆ_∑øm
(
__func__
),

143 
	`ASSERT_EQ_
(
MEMCACHED_SUCCESS
, 
rc
, "%s", 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

145 
rc

	`memˇched_exi°_by_key
(
memc
, 
	`ã°_lôîÆ_∑øm
("groupög_key"),ã°_lôîÆ_∑øm(
__func__
));

146 
	`ASSERT_EQ_
(
MEMCACHED_NOTFOUND
, 
rc
, "%s", 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

148  
TEST_SUCCESS
;

149 
	}
}

	@tests/libmemcached-1.0/virtual_buckets.cc

38 
	~<mem_c⁄fig.h
>

39 
	~<libã°/ã°.hµ
>

41 
usög
 
«me•a˚
 
	glibã°
;

43 
	~<ã°s/vútuÆ_buckës.h
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
	~<c°rög
>

49 
	slibã°_°rög_t
 {

50 c⁄° *
	mc_°r
;

51 
size_t
 
	msize
;

54 
ölöe
 
libã°_°rög_t
 
	$libã°_°rög
(c⁄° *
¨g
, 
size_t
 
¨g_size
)

56 
libã°_°rög_t
 
loˇl
{ 
¨g
, 
¨g_size
 };

57  
loˇl
;

58 
	}
}

60 
	#make_libã°_°rög
(
X
Ë
	`libã°_°rög
((X), 
°©ic_ˇ°
<
size_t
>((XË- 1))

	)

62 
libã°_°rög_t
 
	glibã°_°rög_t_nuŒ
= { 0, 0};

64 
boﬁ
 
	$libã°_°rög_is_nuŒ
(c⁄° 
libã°_°rög_t
 &
°rög
)

66 i‡(
°rög
.
c_°r
 =0 
™d
 såög.
size
 == 0)

67  
åue
;

69  
Ál£
;

70 
	}
}

72 
	sex≥˘_t
 {

73 
libã°_°rög_t
 
	mkey
;

74 
uöt32_t
 
	m£rvî_id
;

75 
uöt32_t
 
	mbuckë_id
;

78 
ex≥˘_t
 
	gbasic_keys
[]= {

79 { 
make_libã°_°rög
("hello"), 0, 0 },

80 { 
make_libã°_°rög
("doctor"), 0, 0 },

81 { 
make_libã°_°rög
("name"), 1, 3 },

82 { 
make_libã°_°rög
("continue"), 1, 3 },

83 { 
make_libã°_°rög
("yesterday"), 0, 0 },

84 { 
make_libã°_°rög
("tomorrow"), 1, 1 },

85 { 
make_libã°_°rög
("another key"), 2, 2 },

86 { 
libã°_°rög_t_nuŒ
, 0, 0 }

89 
ã°_ªtu∫_t
 
	$vútuÆ_back_m≠
(
memˇched_°
 *)

91 
memˇched_ªtu∫_t
 
rc
;

92 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

93 
memˇched_°
 *
memc
;

95 
memc

	`memˇched_¸óã
(
NULL
);

96 
	`ã°_åue
(
memc
);

98 
uöt32_t
 
£rvî_m≠
[] = { 0, 1, 2, 1 };

99 
rc

	`memˇched_buckë_£t
(
memc
, 
£rvî_m≠
, 
NULL
, 4, 2);

100 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

102 
memˇched_£rvî_di°ributi⁄_t
 
dt
;

103 
dt

	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
);

104 
	`ã°_åue
(
dt
 =
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
);

106 
	`memˇched_behavi‹_£t_key_hash
(
memc
, 
MEMCACHED_HASH_CRC
);

107 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

109 
memˇched_hash_t
 
hash_ty≥

	`memˇched_behavi‹_gë_key_hash
(
memc
);

110 
	`ã°_åue
(
hash_ty≥
 =
MEMCACHED_HASH_CRC
);

112 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
("localhost:11211,Üocalhost1:11210,Üocalhost2:11211");

113 
	`ã°_åue
(
£rvî_poﬁ
);

114 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

117 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) == 3);

118 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "localhost") == 0);

119 
	`ã°_åue
(
£rvî_poﬁ
[0].
p‹t
 == 11211);

121 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[1].
ho°«me
, "localhost1") == 0);

122 
	`ã°_åue
(
£rvî_poﬁ
[1].
p‹t
 == 11210);

124 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "localhost2") == 0);

125 
	`ã°_åue
(
£rvî_poﬁ
[2].
p‹t
 == 11211);

127 
dt

	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
);

128 
hash_ty≥

	`memˇched_behavi‹_gë_key_hash
(
memc
);

129 
	`ã°_åue
(
dt
 =
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
);

130 
	`ã°_åue
(
hash_ty≥
 =
MEMCACHED_HASH_CRC
);

133 
ex≥˘_t
 *
±r

basic_keys
; 
nŸ
 
	`libã°_°rög_is_nuŒ
’å->
key
);Ötr++)

135 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
±r
->
key
.
c_°r
,Öå->key.
size
);

137 
buf„r
[1024];

138 
	`¢¥ötf
(
buf„r
, (buf„r), "%.*s:%lu GŸ/Ex≥˘ed %u =%u", ()
±r
->
key
.
size
,Öå->key.
c_°r
, (Ìå->key.size, 
£rvî_idx
,Öå->
£rvî_id
);

139 
	`ã°_com∑ª
(
£rvî_idx
, 
±r
->
£rvî_id
);

142 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

143 
	`memˇched_‰ì
(
memc
);

145  
TEST_SUCCESS
;

146 
	}
}

	@tests/libmemcached_test_container.h

39 #¥agm®
⁄˚


42 
	slibmemˇched_ã°_c⁄èöî_°


44 
	m¥iv©e
:

45 
memˇched_°
 *
_∑ª¡
;

47 
	mpublic
:

48 
libã°
::
£rvî_°¨tup_°
& 
c⁄°ru˘
;

50 
libmemˇched_ã°_c⁄èöî_°
(
libã°
::
£rvî_°¨tup_°
 &
c⁄°ru˘_¨g
) :

51 
_∑ª¡
(
NULL
),

52 
c⁄°ru˘
(
c⁄°ru˘_¨g
)

55 
memˇched_°
* 
∑ª¡
()

57  
	m_∑ª¡
;

60 
∑ª¡
(
memˇched_°
* 
¨g
)

62 
as£π
(
_∑ª¡
 !
¨g
);

63 
ª£t
();

64 
	m_∑ª¡

¨g
;

67 
ª£t
()

69 i‡(
	m_∑ª¡
)

71 
memˇched_‰ì
(
_∑ª¡
);

72 
	m_∑ª¡

NULL
;

76 ~
libmemˇched_ã°_c⁄èöî_°
()

78 
ª£t
();

	@tests/libmemcached_world.h

40 #¥agm®
⁄˚


42 
	~"ã°s/libmemˇched_ã°_c⁄èöî.h
"

44 *
w‹ld_¸óã
(
libã°
::
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

46 i‡(
	glibã°
::
has_memˇched
(Ë=
Ál£
)

48 
îr‹

TEST_SKIPPED
;

49  
	gNULL
;

52 i‡(
	g£rvîs
.
ß¶
())

54 i‡(
	gLIBMEMCACHED_WITH_SASL_SUPPORT
 == 0)

56 
îr‹

TEST_SKIPPED
;

57  
	gNULL
;

60 i‡(
	gHAVE_MEMCACHED_SASL_BINARY
 == 0)

62 
îr‹

TEST_SKIPPED
;

63  
	gNULL
;

67 i‡(
gëív
("TESTS_ENVIRONMENT"))

69 
	gîr‹

TEST_SKIPPED
;

70  
	gNULL
;

74 
uöt32_t
 
	gx
0; x < 
	g£rvîs
.
£rvîs_to_run
(); x++)

76 
ö_p‹t_t
 
	gp‹t

libã°
::
gë_‰ì_p‹t
();

78 i‡(
	g£rvîs
.
ß¶
())

80 i‡(
£rvî_°¨tup
(
£rvîs
, "memˇched-ß¶", 
p‹t
, 
NULL
Ë=
Ál£
)

82 
îr‹

TEST_SKIPPED
;

83  
	gNULL
;

88 i‡(
£rvî_°¨tup
(
£rvîs
, "memˇched", 
p‹t
, 
NULL
Ë=
Ál£
)

90 
îr‹

TEST_SKIPPED
;

91  
	gNULL
;

96 
libmemˇched_ã°_c⁄èöî_°
 *
	gglobÆ_c⁄èöî

√w
Üibmemˇched_ã°_c⁄èöî_°(
£rvîs
);

98  
	gglobÆ_c⁄èöî
;

101 
boﬁ
 
	$w‹ld_de°roy
(*
obje˘
)

103 
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
÷ibmemˇched_ã°_c⁄èöî_° *)
obje˘
;

104 #i‡
	`deföed
(
LIBMEMCACHED_WITH_SASL_SUPPORT
) && LIBMEMCACHED_WITH_SASL_SUPPORT

105 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
)

107 
	`ß¶_d⁄e
();

111 
dñëe
 
c⁄èöî
;

113  
TEST_SUCCESS
;

114 
	}
}

116 
	$ã°_ªtu∫_t
 (*
	tlibmemˇched_ã°_ˇŒback_‚
)(
	tmemˇched_°
 *);

118 
	~"ã°s/ru¬î.h
"

	@tests/libmemcached_world_socket.h

40 #¥agm®
⁄˚


42 
	~<ˇs£π
>

44 
	~"ã°s/libmemˇched_ã°_c⁄èöî.h
"

46 *
w‹ld_¸óã
(
libã°
::
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

48 i‡(
	glibã°
::
has_memˇched
(Ë=
Ál£
)

50 
îr‹

TEST_SKIPPED
;

51  
	gNULL
;

54 
uöt32_t
 
	gx
0; x < 
	g£rvîs
.
£rvîs_to_run
(); x++)

56 c⁄° *
	g¨gv
[]= { "memcached", 0 };

57 i‡(
	g£rvîs
.
°¨t_sockë_£rvî
("memˇched", 
libã°
::
gë_‰ì_p‹t
(), 
¨gv
Ë=
Ál£
)

60 
Áèl_mesßge
("CouldÇotÜaunch memcached");

62 
	gîr‹

TEST_SKIPPED
;

63  
	gNULL
;

68 
libmemˇched_ã°_c⁄èöî_°
 *
	gglobÆ_c⁄èöî

√w
Üibmemˇched_ã°_c⁄èöî_°(
£rvîs
);

70 
	gîr‹

TEST_SUCCESS
;

72  
	gglobÆ_c⁄èöî
;

75 
boﬁ
 
	$w‹ld_de°roy
(*
obje˘
)

77 
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
÷ibmemˇched_ã°_c⁄èöî_° *)
obje˘
;

78 #i‡
	`deföed
(
LIBMEMCACHED_WITH_SASL_SUPPORT
) && LIBMEMCACHED_WITH_SASL_SUPPORT

79 i‡(
LIBMEMCACHED_WITH_SASL_SUPPORT
)

81 
	`ß¶_d⁄e
();

85 
dñëe
 
c⁄èöî
;

87  
TEST_SUCCESS
;

88 
	}
}

90 
	$ã°_ªtu∫_t
 (*
	tlibmemˇched_ã°_ˇŒback_‚
)(
	tmemˇched_°
 *);

92 
	~"ã°s/ru¬î.h
"

	@tests/mem_udp.cc

43 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

46 
usög
 
«me•a˚
 
	glibã°
;

48 
	~<libmemˇched-1.0/memˇched.h
>

49 
	~<libmemˇched/£rvî_ö°™˚.h
>

50 
	~<libmemˇched/io.h
>

51 
	~<libmemˇched/udp.hµ
>

52 
	~<libmemˇchedutû-1.0/utû.h
>

54 
	~<c°dio
>

55 
	~<c°dlib
>

56 
	~<c°rög
>

57 
	~<sys/time.h
>

58 
	~<sys/ty≥s.h
>

59 
	~<sys/°©.h
>

60 
	~<sig«l.h
>

61 
	~<uni°d.h
>

62 
	~<time.h
>

64 
	~<libã°/£rvî.h
>

66 
	~"libmemˇched/ö°™˚.hµ
"

68 #i‚de‡
__INTEL_COMPILER


69 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

75 
ã°_ªtu∫_t
 
	$¥e_bö¨y
(
memˇched_°
 *
memc
)

77 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

78 
	`ã°_åue
(
memc_˛⁄e
);

82 
	`memˇched_vîsi⁄
(
memc_˛⁄e
);

84 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_vîsi⁄
(
memc
));

85 
	`ã°_com∑ª
(
åue
, 
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 2, 1));

86 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 
åue
));

87 
	`ã°_com∑ª
(
åue
, 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
));

89 
	`memˇched_‰ì
(
memc_˛⁄e
);

91  
TEST_SUCCESS
;

92 
	}
}

94 
	g°d
::
	tve˘‹
<
	tuöt16_t
> 
	tEx≥˘ed
;

96 
	$ö¸emít_ªque°_id
(
uöt16_t
 *
id
)

98 (*
id
)++;

99 i‡((*
id
 & 
UDP_REQUEST_ID_THREAD_MASK
) != 0)

101 *
id
= 0;

103 
	}
}

105 
	$gë_udp_ªque°_ids
(
memˇched_°
 *
memc
, 
Ex≥˘ed
 &
ids
)

107 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

109 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

111 
ids
.
	`push_back
(
	`gë_udp_d©agøm_ªque°_id
((
udp_d©agøm_hódî_°
 *Ë((c⁄° 
memˇched_ö°™˚_°
 * )
ö°™˚
)->
wrôe_buf„r
));

113 
	}
}

115 
ã°_ªtu∫_t
 
	$po°_udp_›_check
(
memˇched_°
 *
memc
, 
Ex≥˘ed
& 
ex≥˘ed_ªq_ids
)

117 ()
memc
;

118 ()
ex≥˘ed_ªq_ids
;

120 
memˇched_£rvî_°
 *
cur_£rvî
 = 
	`memˇched_£rvî_li°
(
memc
);

121 
uöt16_t
 *
cur_ªq_ids
 = 
	`gë_udp_ªque°_ids
(
memc
);

123 
size_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

125 
	`ã°_åue
(
cur_£rvî
[
x
].
curs‹_a˘ive
 == 0);

126 
	`ã°_åue
(
cur_ªq_ids
[
x
] =
ex≥˘ed_ªq_ids
[x]);

128 
	`‰ì
(
ex≥˘ed_ªq_ids
);

129 
	`‰ì
(
cur_ªq_ids
);

132  
TEST_SUCCESS
;

133 
	}
}

139 
ã°_ªtu∫_t
 
	$öô_udp
(
memˇched_°
 *
memc
)

141 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
, 
åue
));

143  
TEST_SUCCESS
;

144 
	}
}

146 
ã°_ªtu∫_t
 
	$öô_udp_vÆgröd
(
memˇched_°
 *
memc
)

148 i‡(
	`gëív
("TESTS_ENVIRONMENT"))

150  
TEST_SKIPPED
;

153 
	`ã°_skù
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
, 
åue
));

155  
TEST_SUCCESS
;

156 
	}
}

158 
ã°_ªtu∫_t
 
	$bö¨y_öô_udp
(
memˇched_°
 *
memc
)

160 i‡(
	`gëív
("TESTS_ENVIRONMENT"))

162  
TEST_SKIPPED
;

165 
	`ã°_skù
(
TEST_SUCCESS
, 
	`¥e_bö¨y
(
memc
));

167  
	`öô_udp
(
memc
);

168 
	}
}

171 
ã°_ªtu∫_t
 
	$add_t˝_£rvî_udp_˛õ¡_ã°
(
memˇched_°
 *
memc
)

173 ()
memc
;

175 
memˇched_£rvî_°
 
£rvî
;

176 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

177 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

178 
	`memˇched_£rvî_˛⁄e
(&
£rvî
, &
memc
->
ho°s
[0]);

179 
	`ã°_åue
(
	`memˇched_£rvî_ªmove
(&(
memc
->
ho°s
[0])Ë=
MEMCACHED_SUCCESS
);

180 
	`ã°_åue
(
	`memˇched_£rvî_add
(
memc
, 
£rvî
.
ho°«me
, sîvî.
p‹t
Ë=
MEMCACHED_INVALID_HOST_PROTOCOL
);

182  
TEST_SUCCESS
;

183 
	}
}

186 
ã°_ªtu∫_t
 
	$add_udp_£rvî_t˝_˛õ¡_ã°
(
memˇched_°
 *
memc
)

188 ()
memc
;

190 
memˇched_£rvî_°
 
£rvî
;

191 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚
=

192 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

193 
	`memˇched_£rvî_˛⁄e
(&
£rvî
, &
memc
->
ho°s
[0]);

194 
	`ã°_åue
(
	`memˇched_£rvî_ªmove
(&(
memc
->
ho°s
[0])Ë=
MEMCACHED_SUCCESS
);

196 
memˇched_°
 
t˝_˛õ¡
;

197 
	`memˇched_¸óã
(&
t˝_˛õ¡
);

198 
	`ã°_åue
(
	`memˇched_£rvî_add_udp
(&
t˝_˛õ¡
, 
£rvî
.
ho°«me
, sîvî.
p‹t
Ë=
MEMCACHED_INVALID_HOST_PROTOCOL
);

201  
TEST_SUCCESS
;

202 
	}
}

204 
ã°_ªtu∫_t
 
	$vîsi⁄_TEST
(
memˇched_°
 *
memc
)

206 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
	`memˇched_vîsi⁄
(
memc
));

207  
TEST_SUCCESS
;

208 
	}
}

210 
ã°_ªtu∫_t
 
	$vîbosôy_TEST
(
memˇched_°
 *
memc
)

212 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_vîbosôy
(
memc
, 0));

213  
TEST_SUCCESS
;

214 
	}
}

216 
ã°_ªtu∫_t
 
	$memˇched_gë_TEST
(
memˇched_°
 *
memc
)

218 
memˇched_ªtu∫_t
 
rc
;

219 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
,

220 
	`ã°_lôîÆ_∑øm
(
__func__
),

221 0, 0, &
rc
));

222 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
rc
);

224  
TEST_SUCCESS
;

225 
	}
}

227 
ã°_ªtu∫_t
 
	$memˇched_mgë_execuã_by_key_TEST
(
memˇched_°
 *
memc
)

229 **
keys

NULL
;

230 
size_t
 *
key_Àngth

NULL
;

231 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
,

232 
	`memˇched_mgë_execuã_by_key
(
memc
,

233 
	`ã°_lôîÆ_∑øm
(
__func__
),

234 
keys
, 
key_Àngth
,

240  
TEST_SUCCESS
;

241 
	}
}

243 
ã°_ªtu∫_t
 
	$memˇched_°©_TEST
(
memˇched_°
 *
memc
)

245 
memˇched_ªtu∫_t
 
rc
;

246 
	`ã°_nuŒ
(
	`memˇched_°©
(
memc
, 0, &
rc
));

247 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
rc
);

249  
TEST_SUCCESS
;

250 
	}
}

252 
ã°_ªtu∫_t
 
	$£t_udp_behavi‹_ã°
(
memˇched_°
 *
memc
)

254 
	`memˇched_quô
(
memc
);

256 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, memc->
di°ributi⁄
));

257 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
, 
åue
));

258 
	`ã°_com∑ª
(
åue
, 
memc
->
Êags
.
u£_udp
);

259 
	`ã°_com∑ª
(
Ál£
, 
memc
->
Êags
.
ª∂y
);

261 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
, 
Ál£
));

262 
	`ã°_com∑ª
(
Ál£
, 
memc
->
Êags
.
u£_udp
);

263 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 
Ál£
));

264 
	`ã°_com∑ª
(
åue
, 
memc
->
Êags
.
ª∂y
);

266  
TEST_SUCCESS
;

267 
	}
}

269 
ã°_ªtu∫_t
 
	$udp_£t_ã°
(
memˇched_°
 *
memc
)

272 i‡(
	`gëív
("TESTS_ENVIRONMENT"))

274  
TEST_SUCCESS
;

277 c⁄° 
num_ôîs
= 1025;

279 
	`ã°_åue
(
memc
);

281 
size_t
 
x
0; x < 
num_ôîs
;x++)

283 
Ex≥˘ed
 
ex≥˘ed_ids
;

284 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

285 
£rvî_key

	`memˇched_gíî©e_hash
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"));

286 
	`ã°_åue
(
£rvî_key
 < 
	`memˇched_£rvî_cou¡
(
memc
));

287 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_key
);

288 
size_t
 
öô_off£t

ö°™˚
->
wrôe_buf„r_off£t
;

290 
	`ã°_com∑ª_höt
(
MEMCACHED_SUCCESS
,

291 
	`memˇched_£t
(
memc
,

292 
	`ã°_lôîÆ_∑øm
("foo"),

293 
	`ã°_lôîÆ_∑øm
("when we sanitize"),

294 
	`time_t
(0), 
	`uöt32_t
(0)),

295 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

302 i‡(
ö°™˚
->
wrôe_buf„r_off£t
 < 
öô_off£t
)

304 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
£rvî_key
]);

307 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
));

310  
TEST_SUCCESS
;

311 
	}
}

313 
ã°_ªtu∫_t
 
	$udp_buf„ªd_£t_ã°
(
memˇched_°
 *
memc
)

315 
	`ã°_åue
(
memc
);

316 
	`ã°_com∑ª
(
MEMCACHED_INVALID_ARGUMENTS
,

317 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
åue
));

318  
TEST_SUCCESS
;

319 
	}
}

321 
ã°_ªtu∫_t
 
	$udp_£t_too_big_ã°
(
memˇched_°
 *
memc
)

323 
	`ã°_åue
(
memc
);

324 
Ex≥˘ed
 
ex≥˘ed_ids
;

325 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

327 
°d
::
ve˘‹
<> 
vÆue
;

328 
vÆue
.
	`ªsize
(1024 * 1024 * 10);

330 
	`ã°_com∑ª_höt
(
MEMCACHED_WRITE_FAILURE
,

331 
	`memˇched_£t
(
memc
,

332 
	`ã°_lôîÆ_∑øm
(
__func__
),

333 &
vÆue
[0], vÆue.
	`size
(),

334 
	`time_t
(0), 
	`uöt32_t
(0)),

335 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

336 
	`memˇched_quô
(
memc
);

338  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

339 
	}
}

341 
ã°_ªtu∫_t
 
	$udp_dñëe_ã°
(
memˇched_°
 *
memc
)

343 
	`ã°_åue
(
memc
);

346 
size_t
 
x
= 0; x < 1025; x++)

348 
Ex≥˘ed
 
ex≥˘ed_ids
;

349 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

351 
£rvî_key

	`memˇched_gíî©e_hash
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"));

352 c⁄° 
memˇched_ö°™˚_°
 * 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_key
);

353 
size_t
 
öô_off£t

ö°™˚
->
wrôe_buf„r_off£t
;

355 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

356 
	`memˇched_dñëe
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0));

358 i‡(
ö°™˚
->
wrôe_buf„r_off£t
 < 
öô_off£t
)

360 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
£rvî_key
]);

363 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
));

366  
TEST_SUCCESS
;

367 
	}
}

369 
ã°_ªtu∫_t
 
	$udp_buf„ªd_dñëe_ã°
(
memˇched_°
 *
memc
)

371 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 1);

372  
	`udp_dñëe_ã°
(
memc
);

373 
	}
}

375 
ã°_ªtu∫_t
 
	$udp_vîbosôy_ã°
(
memˇched_°
 *
memc
)

377 
Ex≥˘ed
 
ex≥˘ed_ids
;

378 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

380 
size_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

382 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
x
]);

385 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_vîbosôy
(
memc
, 3));

387  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

388 
	}
}

390 
ã°_ªtu∫_t
 
	$udp_quô_ã°
(
memˇched_°
 *
memc
)

392 
Ex≥˘ed
 
ex≥˘ed_ids
;

393 
	`memˇched_quô
(
memc
);

395  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

396 
	}
}

398 
ã°_ªtu∫_t
 
	$udp_Êush_ã°
(
memˇched_°
 *
memc
)

400 
Ex≥˘ed
 
ex≥˘ed_ids
;

401 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

403 
size_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

405 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
x
]);

407 
	`memˇched_îr‹_¥öt
(
memc
);

408 
	`ã°_com∑ª_höt
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush
(
memc
, 0), 
	`memˇched_œ°_îr‹_mesßge
(memc));

410  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

411 
	}
}

413 
ã°_ªtu∫_t
 
	$udp_ö¸_ã°
(
memˇched_°
 *
memc
)

415 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

416 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("incr"),

417 
	`ã°_lôîÆ_∑øm
("1"),

418 (
time_t
)0, (
uöt32_t
)0));

420 
Ex≥˘ed
 
ex≥˘ed_ids
;

421 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

423 
£rvî_key

	`memˇched_gíî©e_hash
(
memc
, 
	`ã°_lôîÆ_∑øm
("incr"));

424 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
£rvî_key
]);

426 
uöt64_t
 
√wvÆue
;

427 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_ö¸emít
(
memc
, 
	`ã°_lôîÆ_∑øm
("ö¸"), 1, &
√wvÆue
));

429  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

430 
	}
}

432 
ã°_ªtu∫_t
 
	$udp_de¸_ã°
(
memˇched_°
 *
memc
)

434 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

435 
	`memˇched_£t
(
memc
,

436 
	`ã°_lôîÆ_∑øm
(
__func__
),

437 
	`ã°_lôîÆ_∑øm
("1"),

438 
	`time_t
(0), 
	`uöt32_t
(0)));

440 
Ex≥˘ed
 
ex≥˘ed_ids
;

441 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

443 
£rvî_key

	`memˇched_gíî©e_hash
(
memc
,

444 
	`ã°_lôîÆ_∑øm
(
__func__
));

445 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
£rvî_key
]);

447 
uöt64_t
 
√wvÆue
;

448 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_de¸emít
(
memc
,

449 
	`ã°_lôîÆ_∑øm
(
__func__
),

450 1, &
√wvÆue
));

452  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

453 
	}
}

456 
ã°_ªtu∫_t
 
	$udp_°©_ã°
(
memˇched_°
 *
memc
)

458 
memˇched_ªtu∫_t
 
rc
;

459 
¨gs
[]= "";

460 
Ex≥˘ed
 
ex≥˘ed_ids
;

461 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

462 
memˇched_°©_°
 *
rv

	`memˇched_°©
(
memc
, 
¨gs
, &
rc
);

463 
	`memˇched_°©_‰ì
(
memc
, 
rv
);

464 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
rc
);

466  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

467 
	}
}

469 
ã°_ªtu∫_t
 
	$udp_vîsi⁄_ã°
(
memˇched_°
 *
memc
)

471 
Ex≥˘ed
 
ex≥˘ed_ids
;

472 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

474 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
,

475 
	`memˇched_vîsi⁄
(
memc
));

477  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

478 
	}
}

480 
ã°_ªtu∫_t
 
	$udp_gë_ã°
(
memˇched_°
 *
memc
)

482 
memˇched_ªtu∫_t
 
rc
;

483 
size_t
 
vÀn
;

484 
Ex≥˘ed
 
ex≥˘ed_ids
;

485 
	`gë_udp_ªque°_ids
(
memc
, 
ex≥˘ed_ids
);

486 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), &
vÀn
, 
NULL
, &
rc
));

487 
	`ã°_com∑ª
(
MEMCACHED_NOT_SUPPORTED
, 
rc
);

489  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

490 
	}
}

492 
ã°_ªtu∫_t
 
	$udp_mixed_io_ã°
(
memˇched_°
 *
memc
)

494 
ã°_°
 
mixed_io_›s
 [] ={

496 (
ã°_ˇŒback_‚
*)
udp_£t_ã°
},

498 (
ã°_ˇŒback_‚
*)
udp_£t_too_big_ã°
},

500 (
ã°_ˇŒback_‚
*)
udp_dñëe_ã°
},

502 (
ã°_ˇŒback_‚
*)
udp_vîbosôy_ã°
},

504 (
ã°_ˇŒback_‚
*)
udp_quô_ã°
},

507 (
ã°_ˇŒback_‚
*)
udp_Êush_ã°
},

510 (
ã°_ˇŒback_‚
*)
udp_ö¸_ã°
},

512 (
ã°_ˇŒback_‚
*)
udp_de¸_ã°
},

514 (
ã°_ˇŒback_‚
*)
udp_vîsi⁄_ã°
}

517 
size_t
 
x
= 0; x < 500; x++)

519 
ã°_°
 
cuºít_›

mixed_io_›s
[(
	`øndom
() % 8)];

520 
	`ã°_com∑ª
(
TEST_SUCCESS
, 
cuºít_›
.
	`ã°_‚
(
memc
));

522  
TEST_SUCCESS
;

523 
	}
}

525 
ã°_°
 
	gcom∑tibûôy_TESTS
[] ={

526 {"vîsi⁄", 0, (
ã°_ˇŒback_‚
*)
vîsi⁄_TEST
 },

527 {"vîsi⁄", 0, (
ã°_ˇŒback_‚
*)
vîbosôy_TEST
 },

528 {"memˇched_gë()", 0, (
ã°_ˇŒback_‚
*)
memˇched_gë_TEST
 },

529 {"memˇched_mgë_execuã_by_key()", 0, (
ã°_ˇŒback_‚
*)
memˇched_mgë_execuã_by_key_TEST
 },

530 {"memˇched_°©()", 0, (
ã°_ˇŒback_‚
*)
memˇched_°©_TEST
 },

534 
ã°_°
 
	gudp_£tup_£rvî_ã°s
[] ={

535 {"£t_udp_behavi‹_ã°", 0, (
ã°_ˇŒback_‚
*)
£t_udp_behavi‹_ã°
},

536 {"add_t˝_£rvî_udp_˛õ¡_ã°", 0, (
ã°_ˇŒback_‚
*)
add_t˝_£rvî_udp_˛õ¡_ã°
},

537 {"add_udp_£rvî_t˝_˛õ¡_ã°", 0, (
ã°_ˇŒback_‚
*)
add_udp_£rvî_t˝_˛õ¡_ã°
},

541 
ã°_°
 
	gupd_io_ã°s
[] ={

542 {"udp_£t_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_£t_ã°
},

543 {"udp_buf„ªd_£t_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_buf„ªd_£t_ã°
},

544 {"udp_£t_too_big_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_£t_too_big_ã°
},

545 {"udp_dñëe_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_dñëe_ã°
},

546 {"udp_buf„ªd_dñëe_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_buf„ªd_dñëe_ã°
},

547 {"udp_vîbosôy_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_vîbosôy_ã°
},

548 {"udp_quô_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_quô_ã°
},

549 {"udp_Êush_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_Êush_ã°
},

550 {"udp_ö¸_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_ö¸_ã°
},

551 {"udp_de¸_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_de¸_ã°
},

552 {"udp_°©_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_°©_ã°
},

553 {"udp_vîsi⁄_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_vîsi⁄_ã°
},

554 {"udp_gë_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_gë_ã°
},

555 {"udp_mixed_io_ã°", 0, (
ã°_ˇŒback_‚
*)
udp_mixed_io_ã°
},

559 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

560 {"udp_£tup", (
ã°_ˇŒback_‚
*)
öô_udp
, 0, 
udp_£tup_£rvî_ã°s
},

561 {"com∑tibûôy", (
ã°_ˇŒback_‚
*)
öô_udp
, 0, 
com∑tibûôy_TESTS
},

562 {"udp_io", (
ã°_ˇŒback_‚
*)
öô_udp_vÆgröd
, 0, 
upd_io_ã°s
},

563 {"udp_bö¨y_io", (
ã°_ˇŒback_‚
*)
bö¨y_öô_udp
, 0, 
upd_io_ã°s
},

567 
	~"ã°s/libmemˇched_w‹ld.h
"

569 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

571 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

573 
	gw‹ld
->
¸óã
((
ã°_ˇŒback_¸óã_‚
*)
w‹ld_¸óã
);

574 
	gw‹ld
->
de°roy
((
ã°_ˇŒback_de°roy_‚
*)
w‹ld_de°roy
);

576 
	gw‹ld
->
£t_ru¬î
(
√w
 
LibmemˇchedRu¬î
);

	@tests/memc.hpp

38 #¥agm®
⁄˚


40 
«me•a˚
 
	gã°
 {

42 ˛as†
	cMemc
 {

43 
	gpublic
:

44 
Memc
()

46 
_memc

memˇched_¸óã
(
NULL
);

48 i‡(
	g_memc
 =
NULL
)

50 
throw
 "memcached_create() failed";

54 
Memc
(c⁄° 
memˇched_°
* 
¨g
)

56 
	g_memc

memˇched_˛⁄e
(
NULL
, 
¨g
);

58 i‡(
	g_memc
 =
NULL
)

60 
throw
 "memcached_clone() failed";

64 
Memc
(c⁄° 
°d
::
°rög
& 
¨g
)

66 
_memc

memˇched
(
¨g
.
c_°r
(),árg.
size
());

67 i‡(
	g_memc
 =
NULL
)

69 
throw
 "memcached() failed";

73 
Memc
(
ö_p‹t_t
 
¨g
)

75 
	g_memc

memˇched_¸óã
(
NULL
);

77 i‡(
	g_memc
 =
NULL
)

79 
throw
 "memcached_create() failed";

81 
memˇched_£rvî_add
(
_memc
, "loˇlho°", 
¨g
);

84 
memˇched_°
* 
	g›î©‹
&() const

86  
	g_memc
;

89 
memˇched_°
* 
	g›î©‹
->() const

91  
	g_memc
;

94 ~
Memc
()

96 
memˇched_‰ì
(
_memc
);

99 
	g¥iv©e
:

100 
memˇched_°
 *
_memc
;

	@tests/memcapable.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
;

55 
ã°_ªtu∫_t
 
	$quõt_ã°
(*)

57 c⁄° *
¨gs
[]= { "-q", 0 };

59 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

66 c⁄° *
¨gs
[]= { "-h", 0 };

68 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

70  
TEST_SUCCESS
;

71 
	}
}

73 
ã°_ªtu∫_t
 
	$ascii_ã°
(*)

75 
buf„r
[1024];

76 
	`¢¥ötf
(
buf„r
, (buf„r), "%d", (
	`deÁu…_p‹t
()));

77 c⁄° *
¨gs
[]{ "-p", 
buf„r
, " -a ", 0 };

79 
	`ã°_åue
(
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
Ë<
EXIT_FAILURE
);

81  
TEST_SUCCESS
;

82 
	}
}

84 
ã°_ªtu∫_t
 
	$bö¨y_ã°
(*)

86 
buf„r
[1024];

87 
	`¢¥ötf
(
buf„r
, (buf„r), "%d", (
	`deÁu…_p‹t
()));

88 c⁄° *
¨gs
[]{ "-p", 
buf„r
, " -b ", 0 };

90 
	`ã°_åue
(
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
Ë<
EXIT_FAILURE
);

92  
TEST_SUCCESS
;

93 
	}
}

95 
ã°_°
 
	gmemˇ∑bÀ_ã°s
[] ={

96 {"--quõt", 0, 
quõt_ã°
},

97 {"-h", 0, 
hñp_ã°
},

98 {"-a,áscii", 0, 
ascii_ã°
},

99 {"-b, bö¨y", 0, 
bö¨y_ã°
},

103 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

104 {"memˇ∑bÀ", 0, 0, 
memˇ∑bÀ_ã°s
 },

108 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

110 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

112 
îr‹

TEST_SKIPPED
;

113  
NULL
;

116 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
Ë=
Ál£
)

118 
îr‹

TEST_SKIPPED
;

121  &
£rvîs
;

122 
	}
}

125 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

127 
execuèbÀ
= "./clients/memcapable";

128 
	gw‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

129 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memcat.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
("clients/memcat");

55 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

57 c⁄° *
¨gs
[]= { "--help", 0 };

59 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$ˇt_ã°
(*)

66 
buf„r
[1024];

67 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

68 c⁄° *
¨gs
[]{ 
buf„r
, "foo", 0 };

70 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

71 
	`ã°_åue
(
memc
);

73 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

74 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, 0, 0));

76 
memˇched_ªtu∫_t
 
rc
;

77 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

78 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

80 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

82 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

83 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

85 
	`memˇched_‰ì
(
memc
);

87  
TEST_SUCCESS
;

88 
	}
}

90 
ã°_ªtu∫_t
 
	$NOT_FOUND_ã°
(*)

92 
buf„r
[1024];

93 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

94 c⁄° *
¨gs
[]{ 
buf„r
, "foo", 0 };

96 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

97 
	`ã°_åue
(
memc
);

99 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush
(
memc
, 0));

101 
memˇched_ªtu∫_t
 
rc
;

102 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

103 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

105 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

107 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

108 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

110 
	`memˇched_‰ì
(
memc
);

112  
TEST_SUCCESS
;

113 
	}
}

115 
ã°_°
 
	gmemˇt_ã°s
[] ={

116 {"--hñp", 
åue
, 
hñp_ã°
 },

117 {"ˇt(FOUND)", 
åue
, 
ˇt_ã°
 },

118 {"ˇt(NOT_FOUND)", 
åue
, 
NOT_FOUND_ã°
 },

122 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

123 {"memˇt", 0, 0, 
memˇt_ã°s
 },

127 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

129 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

131 
îr‹

TEST_SKIPPED
;

132  
NULL
;

135 i‡(
nŸ
 
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
))

137 
îr‹

TEST_FAILURE
;

140  &
£rvîs
;

141 
	}
}

144 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

146 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

147 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memcp.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
("./clients/memcp");

55 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

57 c⁄° *
¨gs
[]= { "--help", 0 };

59 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$£rvî_ã°
(*)

66 
buf„r
[1024];

67 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

68 c⁄° *
¨gs
[]{ 
buf„r
, 0 };

70 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

72  
TEST_SUCCESS
;

73 
	}
}

75 
ã°_°
 
	gmem˝_ã°s
[] ={

76 {"--hñp", 
åue
, 
hñp_ã°
 },

77 {"--£rvî_ã°", 
åue
, 
£rvî_ã°
 },

81 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

82 {"mem˝", 0, 0, 
mem˝_ã°s
 },

86 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

88 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

90 
îr‹

TEST_SKIPPED
;

91  
NULL
;

94 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
Ë=
Ál£
)

96 
îr‹

TEST_FAILURE
;

99  &
£rvîs
;

100 
	}
}

103 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

105 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

106 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memdump.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
("./clients/memdump");

55 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

57 c⁄° *
¨gs
[]= { "--help", "--quiet", 0 };

59 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$£rvî_ã°
(*)

66 
buf„r
[1024];

67 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

68 c⁄° *
¨gs
[]{ 
buf„r
, 0 };

70 
	`ã°_åue
(
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
Ë<
EXIT_FAILURE
);

72  
TEST_SUCCESS
;

73 
	}
}

75 
ã°_ªtu∫_t
 
	$FOUND_ã°
(*)

77 
buf„r
[1024];

78 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

79 c⁄° *
¨gs
[]{ 
buf„r
, 0 };

81 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

82 
	`ã°_åue
(
memc
);

84 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

85 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, 0, 0));

87 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

88 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo2"), 0, 0, 0, 0));

90 
memˇched_ªtu∫_t
 
rc
;

91 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

92 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

94 
	`ã°_åue
(
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
Ë<
EXIT_FAILURE
);

96 
	`memˇched_‰ì
(
memc
);

98  
TEST_SUCCESS
;

99 
	}
}

101 
ã°_°
 
	gmemdump_ã°s
[] ={

102 {"--hñp", 
åue
, 
hñp_ã°
 },

103 {"--£rvî", 
åue
, 
£rvî_ã°
 },

104 {"FOUND", 
åue
, 
FOUND_ã°
 },

108 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

109 {"memdump", 0, 0, 
memdump_ã°s
 },

113 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

115 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

117 
îr‹

TEST_SKIPPED
;

118  
NULL
;

121 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
Ë=
Ál£
)

123 
îr‹

TEST_FAILURE
;

124  
NULL
;

127  &
£rvîs
;

128 
	}
}

131 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

133 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

134 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memerror.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
("./clients/memerror");

55 
ã°_ªtu∫_t
 
	$hñp_TEST
(*)

57 c⁄° *
¨gs
[]= { "--help", 0 };

59 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$vîsi⁄_TEST
(*)

66 c⁄° *
¨gs
[]= { "--version", 0 };

68 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

70  
TEST_SUCCESS
;

71 
	}
}

73 
ã°_ªtu∫_t
 
	$îr‹_ã°
(*)

75 c⁄° *
¨gs
[]= { "memcached_success", 0 };

77 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

79  
TEST_SUCCESS
;

80 
	}
}

82 
ã°_ªtu∫_t
 
	$SUCCESS_TEST
(*)

84 c⁄° *
¨gs
[]= { "0", 0 };

86 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

88  
TEST_SUCCESS
;

89 
	}
}

91 
ã°_ªtu∫_t
 
	$bad_öput_ã°
(*)

93 c⁄° *
¨gs
[]= { "bad input", 0 };

95 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

97  
TEST_SUCCESS
;

98 
	}
}

100 
ã°_°
 
	gmemîr‹_ã°s
[] ={

101 {"--hñp", 0, 
hñp_TEST
},

102 {"--vîsi⁄", 0, 
vîsi⁄_TEST
},

103 {"<îr‹>", 0, 
îr‹_ã°
},

104 {"0", 0, 
SUCCESS_TEST
},

105 {"<bad i≈ut>", 0, 
bad_öput_ã°
},

109 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

110 {"memîr‹", 0, 0, 
memîr‹_ã°s
 },

114 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
&, 
ã°_ªtu∫_t
& 
îr‹
)

116 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

118 
îr‹

TEST_SKIPPED
;

119  
NULL
;

122  
NULL
;

123 
	}
}

126 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

128 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

129 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memexist.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

46 
	~<libmemˇchedutû-1.0/utû.h
>

48 
usög
 
«me•a˚
 
	glibã°
;

50 #i‚de‡
__INTEL_COMPILER


51 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

54 
	g°d
::
°rög
 
execuèbÀ
("./clients/memexist");

56 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

58 c⁄° *
¨gs
[]= { "--help", 0 };

60 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$exi°_ã°
(*)

66 
buf„r
[1024];

67 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

68 c⁄° *
¨gs
[]{ 
buf„r
, "foo", 0 };

70 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

71 
	`ã°_åue
(
memc
);

73 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

74 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, 0, 0));

76 
memˇched_ªtu∫_t
 
rc
;

77 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

78 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

80 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

82 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

83 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

85 
	`memˇched_‰ì
(
memc
);

87  
TEST_SUCCESS
;

88 
	}
}

90 
ã°_ªtu∫_t
 
	$NOT_FOUND_ã°
(*)

92 
buf„r
[1024];

93 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

94 c⁄° *
¨gs
[]{ 
buf„r
, "foo", 0 };

96 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

97 
	`ã°_åue
(
memc
);

99 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush
(
memc
, 0));

101 
memˇched_ªtu∫_t
 
rc
;

102 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

103 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

105 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

107 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

108 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

110 
	`memˇched_‰ì
(
memc
);

112  
TEST_SUCCESS
;

113 
	}
}

115 
ã°_ªtu∫_t
 
	$check_vîsi⁄
(*)

117 
buf„r
[1024];

118 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

119 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

120 
	`ã°_åue
(
memc
);

122 
ã°_ªtu∫_t
 
ªsu…

TEST_SUCCESS
;

123 i‡(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 8Ë=
Ál£
)

125 
ªsu…

TEST_SKIPPED
;

127 
	`memˇched_‰ì
(
memc
);

129  
ªsu…
;

130 
	}
}

132 
ã°_°
 
	gmemexi°_ã°s
[] ={

133 {"--hñp", 
åue
, 
hñp_ã°
 },

134 {"exi°(FOUND)", 
åue
, 
exi°_ã°
 },

135 {"exi°(NOT_FOUND)", 
åue
, 
NOT_FOUND_ã°
 },

139 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

140 {"memexi°", 
check_vîsi⁄
, 0, 
memexi°_ã°s
 },

144 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

146 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

148 
îr‹

TEST_SKIPPED
;

149  
NULL
;

152 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
Ë=
Ál£
)

154 
îr‹

TEST_SKIPPED
;

157  &
£rvîs
;

158 
	}
}

161 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

163 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

164 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memflush.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
;

55 
ã°_ªtu∫_t
 
	$quõt_ã°
(*)

57 c⁄° *
¨gs
[]= { "--quiet", 0 };

59 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

66 c⁄° *
¨gs
[]= { "--help", 0 };

68 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

70  
TEST_SUCCESS
;

71 
	}
}

73 
ã°_ªtu∫_t
 
	$£rvî_ã°
(*)

75 
buf„r
[1024];

76 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

77 c⁄° *
¨gs
[]{ 
buf„r
, 0 };

79 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

81  
TEST_SUCCESS
;

82 
	}
}

84 
ã°_°
 
	gmemÊush_ã°s
[] ={

85 {"--quõt", 
åue
, 
quõt_ã°
 },

86 {"--hñp", 
åue
, 
hñp_ã°
 },

87 {"--£rvî", 
åue
, 
£rvî_ã°
 },

91 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

92 {"memÊush", 0, 0, 
memÊush_ã°s
 },

96 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

98 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

100 
îr‹

TEST_SKIPPED
;

101  
NULL
;

104 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
) == 0)

106 
îr‹

TEST_SKIPPED
;

109  &
£rvîs
;

110 
	}
}

113 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

115 
execuèbÀ
= "./clients/memflush";

116 
	gw‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

117 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memping.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
("clients/memping");

55 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

57 c⁄° *
¨gs
[]= { "--help", 0 };

59 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$pög_TEST
(*)

66 
buf„r
[1024];

67 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

68 c⁄° *
¨gs
[]{ 
buf„r
, 0 };

70 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

72  
TEST_SUCCESS
;

73 
	}
}

75 
ã°_ªtu∫_t
 
	$NOT_FOUND_TEST
(*)

77 
buf„r
[1024];

78 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîÚ⁄exi°.libmemˇched.‹g:%d", (
	`deÁu…_p‹t
()));

79 c⁄° *
¨gs
[]{ 
buf„r
, 0 };

81 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

83  
TEST_SUCCESS
;

84 
	}
}

86 
ã°_°
 
	gmempög_TESTS
[] ={

87 {"--hñp", 
åue
, 
hñp_ã°
 },

88 {"pög(FOUND)", 
åue
, 
pög_TEST
 },

89 {"pög(NOT_FOUND)", 
åue
, 
NOT_FOUND_TEST
 },

93 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

94 {"mempög", 0, 0, 
mempög_TESTS
 },

98 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

100 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

102 
îr‹

TEST_SKIPPED
;

103  
NULL
;

106 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
Ë=
Ál£
)

108 
îr‹

TEST_FAILURE
;

111  &
£rvîs
;

112 
	}
}

115 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

117 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

118 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memrm.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
("./clients/memrm");

55 
ã°_ªtu∫_t
 
	$quõt_ã°
(*)

57 c⁄° *
¨gs
[]= { "--quiet", 0 };

59 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

60  
TEST_SUCCESS
;

61 
	}
}

63 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

65 c⁄° *
¨gs
[]= { "--help", 0 };

67 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

69  
TEST_SUCCESS
;

70 
	}
}

72 
ã°_ªtu∫_t
 
	$rm_ã°
(*)

74 
buf„r
[1024];

75 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

77 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

78 
	`ã°_åue
(
memc
);

80 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

81 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, 0, 0));

83 
memˇched_ªtu∫_t
 
rc
;

84 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

85 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
rc
);

87 c⁄° *
¨gs
[]{ 
buf„r
, "foo", 0 };

88 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

90 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

91 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

93 
	`memˇched_‰ì
(
memc
);

95  
TEST_SUCCESS
;

96 
	}
}

98 
ã°_ªtu∫_t
 
	$NOT_FOUND_TEST
(*)

100 
buf„r
[1024];

101 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

102 c⁄° *
¨gs
[]{ 
buf„r
, "foo", 0 };

104 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

105 
	`ã°_åue
(
memc
);

107 
memˇched_ªtu∫_t
 
rc
;

108 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

109 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

111 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

113 
	`ã°_nuŒ
(
	`memˇched_gë
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, &
rc
));

114 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
rc
);

116 
	`memˇched_‰ì
(
memc
);

118  
TEST_SUCCESS
;

119 
	}
}

121 
ã°_ªtu∫_t
 
	$mu…ùÀ_NOT_FOUND_TEST
(*)

123 
buf„r
[1024];

124 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

125 c⁄° *
¨gs
[]{ 
buf„r
, "protocols", "foo", "mine", "bar", "dog", "cat", "foo", "mine",

128 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

130  
TEST_SUCCESS
;

131 
	}
}

133 
ã°_°
 
	gmemrm_ã°s
[] ={

134 {"--quõt", 
åue
, 
quõt_ã°
 },

135 {"--hñp", 
åue
, 
hñp_ã°
 },

136 {"rm(FOUND)", 
åue
, 
rm_ã°
 },

137 {"rm(NOT_FOUND)", 
åue
, 
NOT_FOUND_TEST
 },

138 {"mu…ùÀÑm(NOT_FOUND)", 
åue
, 
mu…ùÀ_NOT_FOUND_TEST
 },

142 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

143 {"memrm", 0, 0, 
memrm_ã°s
 },

147 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

149 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

151 
îr‹

TEST_SKIPPED
;

152  
NULL
;

155 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
Ë=
Ál£
)

157 
îr‹

TEST_FAILURE
;

160  &
£rvîs
;

161 
	}
}

164 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

166 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

167 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memslap.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
;

55 
ã°_ªtu∫_t
 
	$quõt_ã°
(*)

57 c⁄° *
¨gs
[]= { "--quiet", 0 };

59 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

66 c⁄° *
¨gs
[]= { "--help", 0 };

68 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

70  
TEST_SUCCESS
;

71 
	}
}

73 
ã°_ªtu∫_t
 
	$£rvî_ã°
(*)

75 
buf„r
[1024];

76 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

77 c⁄° *
¨gs
[]{ 
buf„r
, 0 };

79 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

81  
TEST_SUCCESS
;

82 
	}
}

84 
ã°_ªtu∫_t
 
	$£rvî_c⁄cuºícy_ã°
(*)

86 
buf„r
[1024];

87 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

88 c⁄° *
¨gs
[]{ 
buf„r
, "--concurrency=10", 0 };

90 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

92  
TEST_SUCCESS
;

93 
	}
}

95 
ã°_ªtu∫_t
 
	$£rvî_c⁄cuºícy_öôül_lﬂd_ã°
(*)

97 
buf„r
[1024];

98 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

99 c⁄° *
¨gs
[]{ 
buf„r
, "--concurrency=10", "--initial-load=1000", 0 };

101 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

103  
TEST_SUCCESS
;

104 
	}
}

106 
ã°_ªtu∫_t
 
	$£rvî_c⁄cuºícy_öôül_lﬂd_execuã_numbî_ã°
(*)

108 
buf„r
[1024];

109 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

110 c⁄° *
¨gs
[]{ 
buf„r
, "--concurrency=10", "--initial-load=1000", "--execute-number=10", 0 };

112 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

114  
TEST_SUCCESS
;

115 
	}
}

117 
ã°_ªtu∫_t
 
	$£rvî_c⁄cuºícy_öôül_lﬂd_execuã_numbî_ã°_gë_ã°
(*)

119 
buf„r
[1024];

120 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

121 c⁄° *
¨gs
[]{ 
buf„r
, "--concurrency=10", "--initial-load=1000", "--execute-number=10", "--test=get", 0 };

123 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

125  
TEST_SUCCESS
;

126 
	}
}

128 
ã°_ªtu∫_t
 
	$£rvî_c⁄cuºícy_öôül_lﬂd_execuã_numbî_ã°_£t_ã°
(*)

130 
buf„r
[1024];

131 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

132 c⁄° *
¨gs
[]{ 
buf„r
, "--concurrency=10", "--initial-load=1000", "--execute-number=10", "--test=set", 0 };

134 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

136  
TEST_SUCCESS
;

137 
	}
}

139 
ã°_ªtu∫_t
 
	$£rvî_c⁄cuºícy_öôül_lﬂd_execuã_numbî_ã°_£t_n⁄_blockög_ã°
(*)

141 
buf„r
[1024];

142 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

143 c⁄° *
¨gs
[]{ 
buf„r
, "--concurrency=10", "--initial-load=1000", "--execute-number=10", "--test=set", "--non-blocking", 0 };

145 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

147  
TEST_SUCCESS
;

148 
	}
}

150 
ã°_°
 
	gmem¶≠_ã°s
[] ={

151 {"--quõt", 
åue
, 
quõt_ã°
 },

152 {"--hñp", 
åue
, 
hñp_ã°
 },

153 {"--£rvî_ã°", 
åue
, 
£rvî_ã°
 },

154 {"--c⁄cuºícy=10", 
åue
, 
£rvî_c⁄cuºícy_ã°
 },

155 {"--öôül-lﬂd=1000", 
åue
, 
£rvî_c⁄cuºícy_öôül_lﬂd_ã°
 },

156 {"--execuã-numbî=10", 
åue
, 
£rvî_c⁄cuºícy_öôül_lﬂd_execuã_numbî_ã°
 },

157 {"--ã°=gë", 
åue
, 
£rvî_c⁄cuºícy_öôül_lﬂd_execuã_numbî_ã°_gë_ã°
 },

158 {"--ã°=£t", 
åue
, 
£rvî_c⁄cuºícy_öôül_lﬂd_execuã_numbî_ã°_£t_ã°
 },

159 {"--ã°=£à--n⁄-blockö", 
åue
, 
£rvî_c⁄cuºícy_öôül_lﬂd_execuã_numbî_ã°_£t_n⁄_blockög_ã°
 },

163 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

164 {"mem¶≠", 0, 0, 
mem¶≠_ã°s
 },

168 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

170 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

172 
îr‹

TEST_SKIPPED
;

173  
NULL
;

176 c⁄° *
¨gv
[]= { "memslap", 0 };

177 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
¨gv
Ë=
Ál£
)

179 
îr‹

TEST_FAILURE
;

182  &
£rvîs
;

183 
	}
}

186 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

188 
execuèbÀ
= "./clients/memslap";

189 
	gw‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

190 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memstat.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

47 
usög
 
«me•a˚
 
	glibã°
;

49 #i‚de‡
__INTEL_COMPILER


50 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

53 
	g°d
::
°rög
 
execuèbÀ
("./clients/memstat");

55 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

57 c⁄° *
¨gs
[]= { "--help", 0 };

59 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$bö¨y_TEST
(*)

66 
buf„r
[1024];

67 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
libã°
::
	`deÁu…_p‹t
()));

68 c⁄° *
¨gs
[]{ 
buf„r
, " --binary ", 0 };

70 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

71  
TEST_SUCCESS
;

72 
	}
}

74 
ã°_ªtu∫_t
 
	$£rvî_vîsi⁄_TEST
(*)

76 
buf„r
[1024];

77 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
libã°
::
	`deÁu…_p‹t
()));

78 c⁄° *
¨gs
[]{ 
buf„r
, " --server-version", 0 };

80 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

81  
TEST_SUCCESS
;

82 
	}
}

84 
ã°_ªtu∫_t
 
	$bö¨y_£rvî_vîsi⁄_TEST
(*)

86 
buf„r
[1024];

87 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
libã°
::
	`deÁu…_p‹t
()));

88 c⁄° *
¨gs
[]{ 
buf„r
, " --binary --server-version", 0 };

90 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

92  
TEST_SUCCESS
;

93 
	}
}

95 
ã°_°
 
	gmem°©_ã°s
[] ={

96 {"--hñp", 0, 
hñp_ã°
},

97 {"--bö¨y", 0, 
bö¨y_TEST
},

98 {"--£rvî-vîsi⁄", 0, 
£rvî_vîsi⁄_TEST
},

99 {"--bö¨y --£rvî-vîsi⁄", 0, 
bö¨y_£rvî_vîsi⁄_TEST
},

103 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

104 {"mem°©", 0, 0, 
mem°©_ã°s
 },

108 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

110 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

112 
îr‹

TEST_SKIPPED
;

113  
NULL
;

116 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
Ë=
Ál£
)

118 
îr‹

TEST_SKIPPED
;

121  &
£rvîs
;

122 
	}
}

125 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

127 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

128 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/memtouch.cc

42 
	~<mem_c⁄fig.h
>

44 
	~<libã°/ã°.hµ
>

45 
	~<libmemˇched-1.0/memˇched.h
>

46 
	~<libmemˇchedutû-1.0/utû.h
>

48 
usög
 
«me•a˚
 
	glibã°
;

50 #i‚de‡
__INTEL_COMPILER


51 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

54 
	g°d
::
°rög
 
execuèbÀ
;

56 
ã°_ªtu∫_t
 
	$hñp_ã°
(*)

58 c⁄° *
¨gs
[]= { "--help", 0 };

60 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

62  
TEST_SUCCESS
;

63 
	}
}

65 
ã°_ªtu∫_t
 
	$touch_ã°
(*)

67 
buf„r
[1024];

68 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

70 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

71 
	`ã°_åue
(
memc
);

73 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

74 
	`memˇched_£t
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo"), 0, 0, 0, 0));

76 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_exi°
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo")));

78 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

79 c⁄° *
¨gs
[]{ "--expúe=30", 
buf„r
, "foo", 0 };

80 
	`ã°_com∑ª
(
EXIT_SUCCESS
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

82 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_exi°
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo")));

84 
	`memˇched_‰ì
(
memc
);

86  
TEST_SUCCESS
;

87 
	}
}

89 
ã°_ªtu∫_t
 
	$NOT_FOUND_ã°
(*)

91 
buf„r
[1024];

92 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

93 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

94 
	`ã°_åue
(
memc
);

96 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_Êush
(
memc
, 0));

98 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
	`memˇched_exi°
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo")));

100 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîsˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

101 c⁄° *
¨gs
[]{ "--expúe=30", 
buf„r
, "foo", 0 };

102 
	`ã°_com∑ª
(
EXIT_FAILURE
, 
	`exec_cmdlöe
(
execuèbÀ
, 
¨gs
, 
åue
));

104 
	`ã°_com∑ª
(
MEMCACHED_NOTFOUND
, 
	`memˇched_exi°
(
memc
, 
	`ã°_lôîÆ_∑øm
("foo")));

106 
	`memˇched_‰ì
(
memc
);

108  
TEST_SUCCESS
;

109 
	}
}

111 
ã°_ªtu∫_t
 
	$check_vîsi⁄
(*)

113 
buf„r
[1024];

114 
	`¢¥ötf
(
buf„r
, (buf„r), "--£rvîˆoˇlho°:%d", (
	`deÁu…_p‹t
()));

115 
memˇched_°
 *
memc

	`memˇched
(
buf„r
, 
	`°æí
(buffer));

116 
	`ã°_åue
(
memc
);

118 
ã°_ªtu∫_t
 
ªsu…

TEST_SUCCESS
;

119 i‡(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 8Ë=
Ál£
)

121 
ªsu…

TEST_SKIPPED
;

123 
	`memˇched_‰ì
(
memc
);

125  
ªsu…
;

126 
	}
}

128 
ã°_°
 
	gmemtouch_ã°s
[] ={

129 {"--hñp", 
åue
, 
hñp_ã°
 },

130 {"touch(FOUND)", 
åue
, 
touch_ã°
 },

131 {"touch(NOT_FOUND)", 
åue
, 
NOT_FOUND_ã°
 },

135 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

136 {"memtouch", 
check_vîsi⁄
, 0, 
memtouch_ã°s
 },

140 *
	$w‹ld_¸óã
(
£rvî_°¨tup_°
& 
£rvîs
, 
ã°_ªtu∫_t
& 
îr‹
)

142 i‡(
libã°
::
	`has_memˇched
(Ë=
Ál£
)

144 
îr‹

TEST_SKIPPED
;

145  
NULL
;

148 i‡(
	`£rvî_°¨tup
(
£rvîs
, "memˇched", 
libã°
::
	`deÁu…_p‹t
(), 
NULL
Ë=
Ál£
)

150 
îr‹

TEST_SKIPPED
;

153  &
£rvîs
;

154 
	}
}

157 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

159 
execuèbÀ
= "./clients/memtouch";

160 
	gw‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

161 
	gw‹ld
->
¸óã
(
w‹ld_¸óã
);

	@tests/namespace.h

38 #¥agm®
⁄˚


40 
LIBTEST_LOCAL


41 
ã°_ªtu∫_t
 
memˇched_ö¸emít_«me•a˚
(
memˇched_°
 *
memc
);

	@tests/parser.cc

37 
	~<mem_c⁄fig.h
>

42 
	~<libmemˇched-1.0/memˇched.hµ
>

43 
	~<libã°/ã°.hµ
>

45 
usög
 
«me•a˚
 
	glibã°
;

47 
ã°_ªtu∫_t
 
	$memˇched_NULL_°rög_TEST
(*)

49 
	`ã°_nuŒ
(
	`memˇched
(
NULL
, 75));

50  
TEST_SUCCESS
;

51 
	}
}

53 
ã°_ªtu∫_t
 
	$memˇched_zîo_°rög_Àngth_TEST
(*)

55 
	`ã°_nuŒ
(
	`memˇched
("value", 0));

56  
TEST_SUCCESS
;

57 
	}
}

59 
ã°_ªtu∫_t
 
	$puãnv_loˇlho°_quŸed_TEST
(*)

61 
	`ã°_zîo
(
	`£ãnv
("LIBMEMCACHED", "\"--server=localhost\"", 1));

62 
	`ã°_nuŒ
(
	`memˇched
(
NULL
, 0));

64  
TEST_SUCCESS
;

65 
	}
}

67 
ã°_ªtu∫_t
 
	$puãnv_NULL_TEST
(*)

69 
	`ã°_zîo
(
	`£ãnv
("LIBMEMCACHED", "", 1));

70 
memˇched_°
 *
memc

	`memˇched
(
NULL
, 0);

71 
	`ã°_åue
(
memc
);

73 
	`memˇched_‰ì
(
memc
);

75  
TEST_SUCCESS
;

76 
	}
}

78 
ã°_ªtu∫_t
 
	$puãnv_loˇlho°_TEST
(*)

80 
	`ã°_zîo
(
	`£ãnv
("LIBMEMCACHED", "--server=localhost", 1));

81 
memˇched_°
 *
memc

	`memˇched
(
NULL
, 0);

82 
	`ã°_åue
(
memc
);

84 
	`memˇched_‰ì
(
memc
);

86  
TEST_SUCCESS
;

87 
	}
}

89 
ã°_°
 
	gmemˇched_TESTS
[] ={

90 {"memˇched(NULL, 75)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_NULL_°rög_TEST
 },

91 {"memˇched(\"vÆue\", 0)", 
Ál£
, (
ã°_ˇŒback_‚
*)
memˇched_zîo_°rög_Àngth_TEST
 },

92 {"puãnv(LIBMEMCACHED=--£rvîˆoˇlho°)", 
Ál£
, (
ã°_ˇŒback_‚
*)
puãnv_loˇlho°_TEST
 },

93 {"puãnv(LIBMEMCACHED)", 
Ál£
, (
ã°_ˇŒback_‚
*)
puãnv_NULL_TEST
 },

94 {"puãnv(LIBMEMCACHED=--£rvî=\"loˇlho°\")", 
Ál£
, (
ã°_ˇŒback_‚
*)
puãnv_loˇlho°_quŸed_TEST
 },

98 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

99 {"memˇched()", 0, 0, 
memˇched_TESTS
},

103 
gë_w‹ld
(
libã°
::
Fømew‹k
* 
w‹ld
)

105 
w‹ld
->
cﬁÀ˘i⁄s
(
cﬁÀ˘i⁄
);

	@tests/pool.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
memˇched_poﬁ_ã°
(
memˇched_°
 *);

41 
ã°_ªtu∫_t
 
c⁄√˘i⁄_poﬁ_ã°
(
memˇched_°
 *);

42 
ã°_ªtu∫_t
 
c⁄√˘i⁄_poﬁ2_ã°
(
memˇched_°
 *);

43 
ã°_ªtu∫_t
 
c⁄√˘i⁄_poﬁ3_ã°
(
memˇched_°
 *);

44 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_962815
(
memˇched_°
 *);

	@tests/print.h

38 #¥agm®
⁄˚


40 
memˇched_ªtu∫_t
 
£rvî_¥öt_ˇŒback
(c⁄° 
memˇched_°
 *
±r
,

41 c⁄° 
memˇched_ö°™˚_°
 *
£rvî
,

42 *
c⁄ãxt
);

44 
memˇched_ªtu∫_t
 
£rvî_¥öt_vîsi⁄_ˇŒback
(c⁄° 
memˇched_°
 *
±r
,

45 c⁄° 
memˇched_£rvî_°
 *
£rvî
,

46 *
c⁄ãxt
);

48 c⁄° * 
¥öt_vîsi⁄
(
memˇched_°
 *
memc
);

	@tests/replication.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
ª∂iˇti⁄_£t_ã°
(
memˇched_°
 *
memc
);

42 
ã°_ªtu∫_t
 
ª∂iˇti⁄_gë_ã°
(
memˇched_°
 *
memc
);

44 
ã°_ªtu∫_t
 
ª∂iˇti⁄_mgë_ã°
(
memˇched_°
 *
memc
);

46 
ã°_ªtu∫_t
 
ª∂iˇti⁄_dñëe_ã°
(
memˇched_°
 *
memc
);

48 
ã°_ªtu∫_t
 
ª∂iˇti⁄_øndomize_mgë_ã°
(
memˇched_°
 *
memc
);

50 
ã°_ªtu∫_t
 
ª∂iˇti⁄_øndomize_mgë_Áû_ã°
(
memˇched_°
 *
memc
);

52 
ã°_ªtu∫_t
 
ª∂iˇti⁄_miss_ã°
(
memˇched_°
 *
memc
);

54 
ã°_ªtu∫_t
 
check_ª∂iˇti⁄_ßnôy_TEST
(
memˇched_°
*);

	@tests/runner.h

39 #¥agm®
⁄˚


41 
	~"ã°s/libmemˇched-1.0/gíî©e.h
"

42 
	~"ã°s/memc.hµ
"

43 
	~"ã°s/¥öt.h
"

45 ˛as†
	cLibmemˇchedRu¬î
 : 
public
 
libã°
::
Ru¬î
 {

46 
public
:

47 
ã°_ªtu∫_t
 
	$run
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
)

49  
	`_ru¬î_deÁu…
(
	`libmemˇched_ã°_ˇŒback_‚
(
func
), (
libmemˇched_ã°_c⁄èöî_°
*)
obje˘
);

52 
ã°_ªtu∫_t
 
	$Êush
(* 
¨g
)

54  
	`Êush
((
libmemˇched_ã°_c⁄èöî_°
*)
¨g
);

55 
	}
}

57 
ã°_ªtu∫_t
 
	$Êush
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

59 
ã°
::
Memc
 
	`memc
(
c⁄èöî
->
	`∑ª¡
());

60 
	`memˇched_Êush
(&
memc
, 0);

61 
	`memˇched_quô
(&
memc
);

63  
TEST_SUCCESS
;

64 
	}
}

66 
ã°_ªtu∫_t
 
	$¥e
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
)

68  
	`_¥e_ru¬î_deÁu…
(
	`libmemˇched_ã°_ˇŒback_‚
(
func
), (
libmemˇched_ã°_c⁄èöî_°
*)
obje˘
);

69 
	}
}

71 
ã°_ªtu∫_t
 
	$po°
(
ã°_ˇŒback_‚
* 
func
, *
obje˘
)

73  
	`_po°_ru¬î_deÁu…
(
	`libmemˇched_ã°_ˇŒback_‚
(
func
), (
libmemˇched_ã°_c⁄èöî_°
*)
obje˘
);

74 
	}
}

76 
	g¥iv©e
:

77 
ã°_ªtu∫_t
 
	$_ru¬î_deÁu…
(
libmemˇched_ã°_ˇŒback_‚
 
func
, 
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

79 
	`ã°_åue
(
c⁄èöî
);

80 
	`ã°_åue
(
c⁄èöî
->
	`∑ª¡
());

81 
ã°
::
Memc
 
	`memc
(
c⁄èöî
->
	`∑ª¡
());

83 
	`ã°_com∑ª
(
åue
, 
	`check
());

85 
ã°_ªtu∫_t
 
ªt

TEST_SUCCESS
;

86 i‡(
func
)

88 
	`ã°_åue
(
c⁄èöî
);

89 
ªt

	`func
(&
memc
);

92  
ªt
;

93 
	}
}

95 
ã°_ªtu∫_t
 
	$_¥e_ru¬î_deÁu…
(
libmemˇched_ã°_ˇŒback_‚
 
func
, 
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

97 
c⁄èöî
->
	`ª£t
();

99 
buf„r
[
BUFSIZ
];

101 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
,

102 
	`libmemˇched_check_c⁄figuøti⁄
(
c⁄èöî
->
c⁄°ru˘
.
	`›ti⁄_°rög
().
	`c_°r
(), c⁄èöî->c⁄°ru˘.›ti⁄_°rög().
	`size
(),

103 
buf„r
, (buffer)));

105 
	`ã°_nuŒ
(
c⁄èöî
->
	`∑ª¡
());

106 
c⁄èöî
->
	`∑ª¡
(
	`memˇched
(c⁄èöî->
c⁄°ru˘
.
	`›ti⁄_°rög
().
	`c_°r
(), c⁄èöî->c⁄°ru˘.›ti⁄_°rög().
	`size
()));

107 
	`ã°_åue
(
c⁄èöî
->
	`∑ª¡
());

109 
	`ã°_com∑ª
(
MEMCACHED_SUCCESS
, 
	`memˇched_vîsi⁄
(
c⁄èöî
->
	`∑ª¡
()));

112 i‡(
c⁄èöî
->
c⁄°ru˘
.
	`ß¶
())

114 i‡(
	`memˇched_Áûed
(
	`memˇched_behavi‹_£t
(
c⁄èöî
->
	`∑ª¡
(), 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1)))

116 
c⁄èöî
->
	`ª£t
();

117  
TEST_FAILURE
;

120 i‡(
	`memˇched_Áûed
(
	`memˇched_£t_ß¶_auth_d©a
(
c⁄èöî
->
	`∑ª¡
(), c⁄èöî->
c⁄°ru˘
.
	`u£∫ame
().
	`c_°r
(), c⁄èöî->c⁄°ru˘.
	`∑ssw‹d
().c_str())))

122 
c⁄èöî
->
	`ª£t
();

123  
TEST_FAILURE
;

128 
	`ã°_com∑ª
(
åue
, 
	`check
());

130 i‡(
func
)

132  
	`func
(
c⁄èöî
->
	`∑ª¡
());

135  
TEST_SUCCESS
;

136 
	}
}

138 
ã°_ªtu∫_t
 
	$_po°_ru¬î_deÁu…
(
libmemˇched_ã°_ˇŒback_‚
 
func
, 
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

140 
	`ã°_com∑ª
(
åue
, 
	`check
());

141 
	`˛ónup_∑ús
(
NULL
);

143 
ã°_ªtu∫_t
 
rc

TEST_SUCCESS
;

144 i‡(
func
)

146 
rc

	`func
(
c⁄èöî
->
	`∑ª¡
());

148 
c⁄èöî
->
	`ª£t
();

150  
rc
;

151 
	}
}

	@tests/server_add.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
memˇched_£rvî_add_nuŒ_ã°
(
memˇched_°
*);

41 
ã°_ªtu∫_t
 
memˇched_£rvî_add_em±y_ã°
(
memˇched_°
*);

42 
ã°_ªtu∫_t
 
memˇched_£rvî_m™y_TEST
(
memˇched_°
*);

43 
ã°_ªtu∫_t
 
memˇched_£rvî_m™y_weighãd_TEST
(
memˇched_°
*);

	@tests/string.h

38 #¥agm®
⁄˚


40 #ifdef 
__˝lu•lus


44 
LIBTEST_LOCAL


45 
ã°_ªtu∫_t
 
°rög_°©ic_nuŒ
(*);

47 
LIBTEST_LOCAL


48 
ã°_ªtu∫_t
 
°rög_Æloc_nuŒ
(*);

50 
LIBTEST_LOCAL


51 
ã°_ªtu∫_t
 
°rög_Æloc_wôh_size
(*);

53 
LIBTEST_LOCAL


54 
ã°_ªtu∫_t
 
°rög_Æloc_wôh_size_toobig
(*);

56 
LIBTEST_LOCAL


57 
ã°_ªtu∫_t
 
°rög_Æloc_≠≥nd
(*);

59 
LIBTEST_LOCAL


60 
ã°_ªtu∫_t
 
°rög_Æloc_≠≥nd_toobig
(*);

62 
LIBTEST_LOCAL


63 
ã°_ªtu∫_t
 
°rög_Æloc_≠≥nd_mu…ùÀ
(*);

65 #ifdef 
__˝lu•lus


	@tests/touch.h

38 #¥agm®
⁄˚


40 
ã°_ªtu∫_t
 
ã°_memˇched_touch
(
memˇched_°
 *);

41 
ã°_ªtu∫_t
 
ã°_memˇched_touch_by_key
(
memˇched_°
 *);

	@tests/virtual_buckets.h

38 #¥agm®
⁄˚


40 
	gmemˇched_°
;

42 #ifdef 
__˝lu•lus


46 
LIBTEST_LOCAL


47 
ã°_ªtu∫_t
 
vútuÆ_back_m≠
(
memˇched_°
 *);

49 #ifdef 
__˝lu•lus


	@util/daemon.cc

34 
	~<mem_c⁄fig.h
>

36 #i‡
deföed
 
__SUNPRO_C
 || deföed 
__DECC
 || deföed 
__HP_cc


37 #¥agm®
idít
 "@(#)$Header: /cvsroot/wikipedia/willow/src/bin/willow/daemon.c,v 1.1 2005/05/02 19:15:21 kateturner Exp $"

38 #¥agm®
idít
 "$NetBSD: daemon.c,v 1.9 2003/08/07 16:42:46ágc Exp $"

41 
	~<f˙é.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<sys/waô.h
>

46 
	~<sig«l.h
>

47 
	~<uni°d.h
>

48 
	~<sys/£À˘.h
>

50 
	~<utû/d´m⁄.hµ
>

52 
	~<io°ªam
>

54 
«me•a˚
 
	gd©adif„ª¡ül
 {

55 
«me•a˚
 
	gutû
 {

57 
pid_t
 
	g∑ª¡_pid
;

62 
sigu§1_h™dÀr
(
sig
)

64 i‡(
sig
 =
SIGUSR1
)

66 
_exô
(
EXIT_SUCCESS
);

72 
boﬁ
 
d´m⁄_is_ªady
(boﬁ 
˛o£_io
)

74 i‡(
kûl
(
∑ª¡_pid
, 
SIGUSR1
) == -1)

76 
≥º‹
("kill");

77  
Ál£
;

80 i‡(
˛o£_io
 =
Ál£
)

82  
åue
;;

85 
fd
;

86 i‡((
fd
 = 
›í
("/dev/nuŒ", 
O_RDWR
, 0)) < 0)

88 
≥º‹
("open");

89  
Ál£
;

93 i‡(
dup2
(
fd
, 
STDIN_FILENO
) < 0)

95 
≥º‹
("dup2 stdin");

96  
Ál£
;

99 i‡(
dup2
(
fd
, 
STDOUT_FILENO
) < 0)

101 
≥º‹
("dup2 stdout");

102  
Ál£
;

105 i‡(
dup2
(
fd
, 
STDERR_FILENO
) < 0)

107 
≥º‹
("dup2 stderr");

108  
Ál£
;

111 i‡(
fd
 > 
STDERR_FILENO
)

113 i‡(
˛o£
(
fd
) < 0)

115 
≥º‹
("close");

116  
Ál£
;

121  
åue
;

124 #i‚de‡
__INTEL_COMPILER


125 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

128 
boﬁ
 
d´m⁄ize
(boﬁ 
is_chdú
, boﬁ 
waô_sigu§1
)

130 
siga˘i⁄
 
√w_a˘i⁄
;

132 
√w_a˘i⁄
.
ß_h™dÀr

sigu§1_h™dÀr
;

133 
sigem±y£t
(&
√w_a˘i⁄
.
ß_mask
);

134 
√w_a˘i⁄
.
ß_Êags
= 0;

135 
siga˘i⁄
(
SIGUSR1
, &
√w_a˘i⁄
, 
NULL
);

137 
∑ª¡_pid

gëpid
();

139 
pid_t
 
chûd

f‹k
();

141 
chûd
)

144  
Ál£
;

150 i‡(
waô_sigu§1
)

153 
exô_code

EXIT_FAILURE
;

154 
°©us
;

155 
waôpid
(
chûd
, &
°©us
, 0) != child)

158 i‡(
WIFEXITED
(
°©us
))

160 
exô_code

WEXITSTATUS
(
°©us
);

162 i‡(
WIFSIGNALED
(
°©us
))

164 
exô_code

EXIT_FAILURE
;

166 
_exô
(
exô_code
);

170 
_exô
(
EXIT_SUCCESS
);

175 i‡(
£tsid
() == -1)

177 
≥º‹
("setsid");

178  
Ál£
;

181 i‡(
is_chdú
)

183 i‡(
chdú
("/") < 0)

185 
≥º‹
("chdir");

186  
Ál£
;

190  
åue
;

	@util/daemon.hpp

34 #¥agm®
⁄˚


36 
«me•a˚
 
	gd©adif„ª¡ül
 {

37 
«me•a˚
 
	gutû
 {

39 
boﬁ
 
d´m⁄_is_ªady
(boﬁ 
˛o£_io
);

40 
boﬁ
 
d´m⁄ize
(boﬁ 
is_chdú

åue
, boﬁ 
waô_sigu§1
=Årue);

	@util/instance.hpp

38 #¥agm®
⁄˚


40 
	~<ˇs£π
>

41 
	~<˚ºno
>

42 
	~<c°ddef
>

43 
	~<c°dio
>

44 
	~<√töë/ö.h
>

45 
	~<°rög
>

46 
	~<sys/sockë.h
>

48 
	~"utû/›î©i⁄.hµ
"

50 
	gaddröfo
;

52 
«me•a˚
 
	gd©adif„ª¡ül
 {

53 
«me•a˚
 
	gutû
 {

55 ˛as†
	cIn°™˚


57 
	g¥iv©e
:

58 
	ec⁄√˘i⁄_°©e_t
 {

59 
NOT_WRITING
,

60 
	gNEXT_CONNECT_ADDRINFO
,

61 
	gCONNECT
,

62 
	gCONNECTING
,

63 
	gCONNECTED
,

64 
	gWRITING
,

65 
	gREADING
,

66 
	gFINISHED


68 
	g°d
::
°rög
 
_œ°_îr‹
;

70 
	gpublic
:

71 ˛as†
	cFöish
 {

73 
public
:

74 
vútuÆ
 ~
Föish
() { }

76 
vútuÆ
 
boﬁ
 
ˇŒ
(c⁄° boﬁ, c⁄° 
°d
::
°rög
 &)= 0;

80 
	gpublic
:

81 
In°™˚
(c⁄° 
°d
::
°rög
& 
ho°«me_¨g
, c⁄° std::°rög& 
£rvi˚_¨g
);

83 
In°™˚
(c⁄° 
°d
::
°rög
& 
ho°«me_¨g
, c⁄° 
ö_p‹t_t
 
p‹t_¨g
);

85 ~
In°™˚
();

87 
boﬁ
 
run
();

89 
£t_föish
(
Föish
 *
¨g
)

91 
	g_föish_‚

¨g
;

94 
push
(
utû
::
O≥øti⁄
 *
√xt
)

96 
_›î©i⁄s
.
push_back
(
√xt
);

99 
	g¥iv©e
:

100 
˛o£_sockë
();

102 
‰ì_addröfo
();

104 
boﬁ
 
m‹e_to_ªad
() const;

106 
	g°d
::
°rög
 
_ho°
;

107 
	g°d
::
°rög
 
_£rvi˚
;

108 
	g_sockfd
;

109 
c⁄√˘i⁄_°©e_t
 
	g°©e
;

110 
addröfo
 *
	g_addröfo
;

111 
addröfo
 *
	g_addröfo_√xt
;

112 
Föish
 *
	g_föish_‚
;

113 
	gO≥øti⁄
::
ve˘‹
 
_›î©i⁄s
;

	@util/log.hpp

37 #¥agm®
⁄˚


39 
	~<˚ºno
>

40 
	~<c°d¨g
>

41 
	~<c°dio
>

42 
	~<f˙é.h
>

43 
	~<io°ªam
>

44 
	~<°rög
>

45 
	~<sy¶og.h
>

47 
	#UTIL_MAX_ERROR_SIZE
 2048

	)

49 
«me•a˚
 
	gd©adif„ª¡ül
 {

50 
«me•a˚
 
	gutû
 {

54 
	evîbo£_t


57 
	gVERBOSE_FATAL

LOG_EMERG
,

59 
	gVERBOSE_ALERT

LOG_ALERT
,

60 
	gVERBOSE_CRITICAL

LOG_CRIT
,

62 
	gVERBOSE_ERROR

LOG_ERR
,

64 
	gVERBOSE_WARN

LOG_WARNING
,

66 
	gVERBOSE_NOTICE

LOG_NOTICE
,

68 
	gVERBOSE_INFO

LOG_INFO
,

70 
	gVERBOSE_DEBUG

LOG_DEBUG


73 #i‚de‡
__INTEL_COMPILER


74 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wformat-nonliteral"

77 
	slog_öfo_°


79 
	g°d
::
°rög
 
«me
;

80 
	g°d
::
°rög
 
fûíame
;

81 
	gfd
;

82 
boﬁ
 
	g›t_sy¶og
;

83 
boﬁ
 
	g›t_fûe
;

84 
boﬁ
 
	göô_suc˚ss
;

86 
log_öfo_°
(c⁄° 
°d
::
°rög
& 
«me_¨g
, c⁄° std::°rög &
fûíame_¨g
, 
boﬁ
 
sy¶og_¨g
) :

87 
«me
(
«me_¨g
),

88 
fûíame
(
fûíame_¨g
),

89 
fd
(-1),

90 
›t_sy¶og
(
sy¶og_¨g
),

91 
›t_fûe
(
Ál£
),

92 
öô_suc˚ss
(
Ál£
)

94 i‡(
	g›t_sy¶og
)

96 
›ílog
(
«me
.
c_°r
(), 
LOG_PID
 | 
LOG_NDELAY
, 
LOG_USER
);

99 
öô
();

102 
öô
()

104 i‡(
	gfûíame
.
size
())

106 i‡(
	gfûíame
.
com∑ª
("stderr") == 0)

108 
fd

STDERR_FILENO
;

112 
	gfd

›í
(
fûíame
.
c_°r
(), 
O_CREAT
 | 
O_WRONLY
 | 
O_APPEND
, 0644);

113 i‡(
	gfd
 == -1)

115 i‡(
›t_sy¶og
)

117 
buf„r
[1024];

118 *
	ggëcwd_ªt

gëcwd
(
buf„r
, (buffer));

119 
sy¶og
(
LOG_ERR
, "CouldÇot openÜog file \"%.*s\", from \"%s\", open failed with (%s)",

120 (
fûíame
.
size
()), fûíame.
c_°r
(),

121 
gëcwd_ªt
,

122 
°ªº‹
(
î∫o
));

124 
	g°d
::
˚º
 << "CouldÇŸ o≥¿log fûêf‹ wrôög, swôchögÅÿ°dîr." << 
°d
::
ídl
;

126 
	gfd

STDERR_FILENO
;

130 
	g›t_fûe

åue
;

133 
	göô_suc˚ss

åue
;

136 
boﬁ
 
öôülized
() const

138  
	göô_suc˚ss
;

141 
fûe
() const

143  
	gfd
;

146 
wrôe
(
vîbo£_t
 
vîbo£
, c⁄° *
f‹m©
, ...)

148 i‡(
›t_fûe
 
‹
 
	g›t_sy¶og
)

150 
va_li°
 
	g¨gs
;

151 
va_°¨t
(
¨gs
, 
f‹m©
);

152 
	gmesg
[
BUFSIZ
];

153 
	gmesg_Àngth

v¢¥ötf
(
mesg
, (mesg), 
f‹m©
, 
¨gs
);

154 
va_íd
(
¨gs
);

156 i‡(
	g›t_fûe
)

158 
	gbuf„r
[
UTIL_MAX_ERROR_SIZE
];

159 
	gbuf„r_Àngth

¢¥ötf
(
buf„r
, (buf„r), "%7†%.*s\n", 
vîbo£_«me
(
vîbo£
), 
mesg_Àngth
, 
mesg
);

160 i‡(::
wrôe
(
fûe
(), 
buf„r
, 
buf„r_Àngth
) == -1)

162 
°d
::
˚º
 << "CouldÇŸ wrôêtÿlog fûe." << std::
ídl
;

163 
sy¶og
(
LOG_EMERG
, "górm™d couldÇŸ o≥¿log fûê%s, gŸÉº‹ %s", 
fûíame
.
c_°r
(), 
°ªº‹
(
î∫o
));

168 i‡(
	g›t_sy¶og
)

170 
sy¶og
((
vîbo£
), "%7†%.*s", 
vîbo£_«me
(vîbo£), 
mesg_Àngth
, 
mesg
);

175 ~
log_öfo_°
()

177 i‡(
	gfd
 !-1 
™d
 
fd
 !
STDERR_FILENO
)

179 
˛o£
(
fd
);

182 i‡(
	g›t_sy¶og
)

184 
˛o£log
();

188 
	g¥iv©e
:

189 c⁄° *
vîbo£_«me
(
vîbo£_t
 
vîbo£
)

191 
vîbo£
)

193 
VERBOSE_FATAL
:

196 
	gVERBOSE_ALERT
:

199 
	gVERBOSE_CRITICAL
:

202 
	gVERBOSE_ERROR
:

205 
	gVERBOSE_WARN
:

208 
	gVERBOSE_NOTICE
:

211 
	gVERBOSE_INFO
:

214 
	gVERBOSE_DEBUG
:

	@util/logfile.hpp

38 #¥agm®
⁄˚


40 
	~<°rög
>

41 
	~<f°ªam
>

43 
«me•a˚
 
	gd©adif„ª¡ül
 {

44 
«me•a˚
 
	gutû
 {

46 ˛as†
	cLogfûe


48 
	gpublic
:

49 
Logfûe
(c⁄° 
°d
::
°rög
 &
¨g
);

51 ~
Logfûe
();

53 
	g°d
::
of°ªam
 &
log
()

55  
_log_fûe
;

58 
boﬁ
 
›í
();

60 
	g¥iv©e
:

61 c⁄° 
°d
::
°rög
 
_fûíame
;

62 
	g°d
::
of°ªam
 
_log_fûe
;

	@util/operation.hpp

38 #¥agm®
⁄˚


41 
	~<c°rög
>

42 
	~<iosfwd
>

43 
	~<ve˘‹
>

45 
«me•a˚
 
	gd©adif„ª¡ül
 {

46 
«me•a˚
 
	gutû
 {

48 ˛as†
	cO≥øti⁄
 {

49 
	g°d
::
	tve˘‹
<> 
	tPackë
;

51 
	gpublic
:

52 
°d
::
	tve˘‹
<
	tO≥øti⁄
 *> vector;

54 
O≥øti⁄
(c⁄° *
comm™d
, 
size_t
 
comm™d_Àngth
, 
boﬁ
 
ex≥˘_ª•⁄£

åue
) :

55 
_ex≥˘_ª•⁄£
(
ex≥˘_ª•⁄£
),

56 
∑ckë
(),

57 
_ª•⁄£
()

59 
	g∑ckë
.
ªsize
(
comm™d_Àngth
);

60 
mem˝y
(&
∑ckë
[0], 
comm™d
, 
comm™d_Àngth
);

63 ~
O≥øti⁄
()

66 
size_t
 
size
() const

68  
	g∑ckë
.
size
();

71 c⁄° * 
±r
() const

73  &(
	g∑ckë
)[0];

76 
boﬁ
 
has_ª•⁄£
() const

78  
	g_ex≥˘_ª•⁄£
;

81 
push
(c⁄° *
buf„r
, 
size_t
 
buf„r_size
)

83 
size_t
 
	gª•⁄£_size

_ª•⁄£
.
size
();

84 
	g_ª•⁄£
.
ªsize
(
ª•⁄£_size
 +
buf„r_size
);

85 
mem˝y
(&
_ª•⁄£
[0] +
ª•⁄£_size
, 
buf„r
, 
buf„r_size
);

89 
boﬁ
 
ª•⁄£
(
°d
::
°rög
 &);

91 
boﬁ
 
ªc⁄√˘
() const

93  
	gÁl£
;

96 
	g¥iv©e
:

97 
boﬁ
 
_ex≥˘_ª•⁄£
;

98 
Packë
 
	g∑ckë
;

99 
Packë
 
	g_ª•⁄£
;

	@util/pidfile.cc

38 
	~"mem_c⁄fig.h
"

40 
	~"utû/pidfûe.hµ
"

42 
	~<c°dio
>

43 
	~<c°dlib
>

44 
	~<c°rög
>

45 
	~<˚ºno
>

46 
	~<f˙é.h
>

47 
	~<io°ªam
>

48 
	~<s°ªam
>

49 
	~<sys/°©.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<uni°d.h
>

55 
pid_fûe
[1024 * 4]= { 0 };

57 
ªmove_pidfûe
()

59 i‡(
pid_fûe
[0])

61 i‡(
u∆ök
(
pid_fûe
) == -1)

63 
°d
::
˚º
 << "CouldÇŸÑemovêpidfûe: " << 
pid_fûe
 << "(" << 
°ªº‹
(
î∫o
Ë<< ")" << std::
ídl
;

66 
pid_fûe
[0]= 0;

72 
«me•a˚
 
d©adif„ª¡ül
 {

73 
«me•a˚
 
utû
 {

75 
Pidfûe
::Pidfûe(c⁄° 
°d
::
°rög
 &
¨g
) :

76 
_œ°_î∫o
(0),

77 
_fûíame
(
¨g
)

82 
Pidfûe
::~Pidfile()

84 i‡(
nŸ
 
_fûíame
.
em±y
())

86 i‡(
ac˚ss
(
_fûíame
.
c_°r
(), 
F_OK
) == -1)

88 
°d
::
°rög°ªam
 
îr‹_°ªam
;

89 
îr‹_°ªam
 << "CouldÇŸác˚s†thêpid fûe: " << 
_fûíame
 << "(" << 
°ªº‹
(
î∫o
) << ")";

90 
_îr‹_mesßge

îr‹_°ªam
.
°r
();

92 i‡(
u∆ök
(
_fûíame
.
c_°r
()) == -1)

94 
°d
::
°rög°ªam
 
îr‹_°ªam
;

95 
îr‹_°ªam
 << "CouldÇŸÑemovêthêpid fûe: " << 
_fûíame
 << "(" << 
°ªº‹
(
î∫o
) << ")";

96 
_îr‹_mesßge

îr‹_°ªam
.
°r
();

99 
pid_fûe
[0]= 0;

102 
boﬁ
 
Pidfûe
::
¸óã
()

104 i‡(
_fûíame
.
em±y
())

106  
åue
;

109 i‡(
ac˚ss
(
_fûíame
.
c_°r
(), 
F_OK
) == 0)

111 i‡(
u∆ök
(
_fûíame
.
c_°r
()) == -1)

113 
°d
::
°rög°ªam
 
îr‹_°ªam
;

114 
îr‹_°ªam
 << "U«bÀÅÿªmovêexisôög fûe:" << 
_fûíame
 << "(" << 
°ªº‹
(
î∫o
) << ")";

115 
_îr‹_mesßge

îr‹_°ªam
.
°r
();

117  
Ál£
;

121 
oÊags

O_CREAT
|
O_WRONLY
|
O_TRUNC
;

122 #ifde‡
HAVE_O_CLOEXEC


123 
oÊags
oÊag†| 
O_CLOEXEC
;

126 
fûe
;

127 i‡((
fûe
 = 
›í
(
_fûíame
.
c_°r
(), 
oÊags
, 
S_IRWXU
|
S_IRGRP
|
S_IROTH
)) < 0)

129 
°d
::
°rög°ªam
 
îr‹_°ªam
;

130 
îr‹_°ªam
 << "CouldÇŸ o≥¿pid fûêf‹ wrôög: " << 
_fûíame
 << "(" << 
°ªº‹
(
î∫o
) << ")";

131 
_îr‹_mesßge

îr‹_°ªam
.
°r
();

133  
Ál£
;

136 
buf„r
[
BUFSIZ
];

137 
ãmp

°©ic_ˇ°
<>(
gëpid
());

138 
Àngth

¢¥ötf
(
buf„r
, (buf„r), "%lu\n", 
ãmp
);

139 i‡(
wrôe
(
fûe
, 
buf„r
, 
Àngth
) !=Üength)

141 
°d
::
°rög°ªam
 
îr‹_°ªam
;

142 
îr‹_°ªam
 << "CouldÇŸ wrôêpidÅÿfûe: " << 
_fûíame
 << "(" << 
°ªº‹
(
î∫o
) << ")";

143 
_îr‹_mesßge

îr‹_°ªam
.
°r
();

144 
˛o£
(
fûe
);

146  
Ál£
;

149 i‡(
˛o£
(
fûe
) < 0)

151 
_îr‹_mesßge
+= "CouldÇot close() fileáfter writingÖidÅo it: ";

152 
_îr‹_mesßge
+
_fûíame
;

153  
Ál£
;

155 
¢¥ötf
(
pid_fûe
, ’id_fûe), "%s", 
_fûíame
.
c_°r
());

156 
©exô
(
ªmove_pidfûe
);

158  
åue
;

	@util/pidfile.hpp

38 #¥agm®
⁄˚


40 
	~<°rög
>

42 
«me•a˚
 
	gd©adif„ª¡ül
 {

43 
«me•a˚
 
	gutû
 {

45 ˛as†
	cPidfûe


47 
	gpublic
:

48 
Pidfûe
(c⁄° 
°d
::
°rög
 &
¨g
);

50 ~
Pidfûe
();

52 c⁄° 
	g°d
::
°rög
 &
îr‹_mesßge
()

54  
_îr‹_mesßge
;

57 
boﬁ
 
¸óã
();

59 
	g¥iv©e
:

60 
_œ°_î∫o
;

61 c⁄° 
	g°d
::
°rög
 
_fûíame
;

62 
	g°d
::
°rög
 
_îr‹_mesßge
;

	@util/signal.hpp

37 #¥agm®
⁄˚


39 
	~<±hªad.h
>

40 
	~<£m≠h‹e.h
>

42 #ifde‡
HAVE_SIGNAL_H


43 
	~<sig«l.h
>

46 #ifdef 
__˝lu•lus


50 (
sig«l_ˇŒback_‚
)();

52 #ifdef 
__˝lu•lus


56 
«me•a˚
 
d©adif„ª¡ül
 {

57 
«me•a˚
 
utû
 {

59 
	eshutdown_t
 {

60 
SHUTDOWN_RUNNING
,

61 
SHUTDOWN_GRACEFUL
,

62 
SHUTDOWN_FORCED


65 ˛as†
	cSig«lThªad
 {

66 
boﬁ
 
_exô_⁄_sig«l
;

67 
sig£t_t
 
£t
;

68 
£m_t
 
lock
;

69 
uöt64_t
 
magic_mem‹y
;

70 vﬁ©ûê
shutdown_t
 
__shutdown
;

71 
±hªad_muãx_t
 
shutdown_muãx
;

73 
public
:

75 
Sig«lThªad
(
boﬁ
 
exô_⁄_sig«l_¨g

Ál£
);

77 
ã°
();

78 
po°
();

79 
boﬁ
 
£tup
();

81 
boﬁ
 
exô_⁄_sig«l
()

83  
_exô_⁄_sig«l
;

86 
waô
(& 
sig
)

88  
sigwaô
(&
£t
, &
sig
);

91 ~
Sig«lThªad
();

93 
£t_shutdown
(
shutdown_t
 
¨g
);

94 
boﬁ
 
is_shutdown
();

95 
shutdown_t
 
gë_shutdown
();

97 
sighup
();

98 
sighup
(
sig«l_ˇŒback_‚
* 
¨g
);

100 
¥iv©e
:

101 
±hªad_t
 
thªad
;

102 
sig«l_ˇŒback_‚
* 
_sighup
;

	@util/string.hpp

42 
	~<c°rög
>

43 
	~<c°ddef
>

45 #¥agm®
⁄˚


47 
	#utû_lôîÆ_∑øm
(
X
Ë(X), (
°©ic_ˇ°
<
size_t
>(((XË- 1)))

	)

48 
	#utû_lôîÆ_∑øm_size
(
X
Ë
°©ic_ˇ°
<
size_t
>((XË- 1)

	)

50 
	#utû_lôîÆ_com∑ª_∑øm
(
X
Ë(
°©ic_ˇ°
<
size_t
>(((XË- 1))), (X)

	)

52 
	#utû_°rög_make_‰om_c°r
(
X
Ë(X), ((XË? 
	`°æí
(XË: 0)

	)

54 
	#utû_°rög_make_‰om_¨øy
(
__¨øy
Ë(__¨øy), (
	`°æí
(__¨øy))

	)

56 
	#utû_¨øy_Àngth
(
__¨øy
Ë(__¨øy)/(&__¨øy)

	)

	@win32/wrappers.h

12 #¥agm®
⁄˚


14 
	~<öây≥s.h
>

21 #unde‡
öãrÁ˚


23 #unde‡
mÆloc


24 #unde‡
ªÆloc


31 #i‚de‡
EADDRINUSE


32 
	#EADDRINUSE
 
WSAEADDRINUSE


	)

35 #i‚de‡
EWOULDBLOCK


36 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

39 #i‚de‡
EINPROGRESS


40 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

43 #i‚de‡
EALREADY


44 
	#EALREADY
 
WSAEALREADY


	)

47 #i‚de‡
EISCONN


48 
	#EISCONN
 
WSAEISCONN


	)

51 #i‚de‡
ENOTCONN


52 
	#ENOTCONN
 
WSAENOTCONN


	)

55 #i‚de‡
ENOBUFS


56 
	#ENOBUFS
 
WSAENOBUFS


	)

59 #i‚de‡
SHUT_RDWR


60 
	#SHUT_RDWR
 
SD_BOTH


	)

64 #i‚de‡
EAI_SYSTEM


65 
	#EAI_SYSTEM
 11

	)

69 
	#ödex
(
a
,
b
Ë
	`°rchr
◊,b)

	)

70 
	#rödex
(
a
,
b
Ë
	`°ºchr
◊,b)

	)

71 
	#øndom
(Ë
	`ønd
()

	)

72 
	#§™dom
(
a
Ë
Ál£
Ë{}

	)

73 
	#kûl
(
a
, 
b
Ë
Ál£
Ë{}

	)

74 
	#f‹k
(Ë(-1)

	)

75 
	#waôpid
(
a
,
b
,
c
Ë(-1)

	)

76 
	#‚m©ch
(
a
,
b
,
c
Ë(-1)

	)

77 
	#¶ìp
(
a
Ë
	`SÀï
◊*1000)

	)

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/event.h

27 #i‚de‡
_EVENT_H_


28 
	#_EVENT_H_


	)

40 #ifde‡
__˝lu•lus


44 
	~<evít2/evít-c⁄fig.h
>

45 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


46 
	~<sys/ty≥s.h
>

48 #ifde‡
_EVENT_HAVE_SYS_TIME_H


49 
	~<sys/time.h
>

51 #ifde‡
_EVENT_HAVE_STDINT_H


52 
	~<°döt.h
>

54 
	~<°d¨g.h
>

57 
	~<evutû.h
>

59 #ifde‡
WIN32


60 #i‚de‡
WIN32_LEAN_AND_MEAN


61 
	#WIN32_LEAN_AND_MEAN


	)

63 
	~<wösock2.h
>

64 
	~<wödows.h
>

65 #unde‡
WIN32_LEAN_AND_MEAN


66 
	tu_ch¨
;

67 
	tu_sh‹t
;

70 
	~<evít2/evít_°ru˘.h
>

71 
	~<evít2/evít.h
>

72 
	~<evít2/evít_com∑t.h
>

73 
	~<evít2/buf„r.h
>

74 
	~<evít2/buf„r_com∑t.h
>

75 
	~<evít2/buf„ªvít.h
>

76 
	~<evít2/buf„ªvít_°ru˘.h
>

77 
	~<evít2/buf„ªvít_com∑t.h
>

78 
	~<evít2/èg.h
>

79 
	~<evít2/èg_com∑t.h
>

81 #ifde‡
__˝lu•lus


	@/usr/include/execinfo.h

19 #i‚de‡
_EXECINFO_H


20 
	#_EXECINFO_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


28 
	$backåa˚
 (**
__¨øy
, 
__size
Ë
	`__n⁄nuŒ
 ((1));

33 **
	$backåa˚_symbﬁs
 (*
__c⁄°
 *
__¨øy
, 
__size
)

34 
__THROW
 
	`__n⁄nuŒ
 ((1));

39 
	$backåa˚_symbﬁs_fd
 (*
__c⁄°
 *
__¨øy
, 
__size
, 
__fd
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1));

42 
__END_DECLS


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/fnmatch.h

19 #i‚def 
_FNMATCH_H


20 
	#_FNMATCH_H
 1

	)

22 #ifdef 
__˝lu•lus


27 #i‡(
deföed
 
__STDC__
 && __STDC__Ë|| deföed 
__˝lu•lus


28 
	#__c⁄°
 c⁄°

	)

30 
	#__c⁄°


	)

36 #unde‡
FNM_PATHNAME


37 #unde‡
FNM_NOESCAPE


38 #unde‡
FNM_PERIOD


41 
	#FNM_PATHNAME
 (1 << 0Ë

	)

42 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

43 
	#FNM_PERIOD
 (1 << 2Ë

	)

45 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


46 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

47 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

48 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

49 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

53 
	#FNM_NOMATCH
 1

	)

59 #ifde‡
_XOPEN_SOURCE


60 
	#FNM_NOSYS
 (-1)

	)

65 
‚m©ch
 (
__c⁄°
 *
__∑âîn
, __c⁄° *
__«me
,

66 
__Êags
);

68 #ifdef 
__˝lu•lus


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

40 #ifde‡
_LIBC


41 
	#__MALLOC_HOOK_VOLATILE


	)

42 
	#__MALLOC_DEPRECATED


	)

44 
	#__MALLOC_HOOK_VOLATILE
 
__vﬁ©ûe


	)

45 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

50 
	#__MALLOC_P
(
¨gs
Ë
	)
args

51 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

52 
	#__MALLOC_HOOK_VOLATILE


	)

53 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

58 
__BEGIN_DECLS


61 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

64 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

73 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

76 
	$‰ì
 (*
__±r
Ë
__THROW
;

79 
	$c‰ì
 (*
__±r
Ë
__THROW
;

82 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

83 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

86 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

90 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

94 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

97 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

98 
__THROW
 
__©åibuã_mÆloc__
;

102 
	smÆlöfo


104 
¨ía
;

105 
‹dblks
;

106 
smblks
;

107 
hblks
;

108 
hblkhd
;

109 
usmblks
;

110 
fsmblks
;

111 
u‹dblks
;

112 
f‹dblks
;

113 
kìpco°
;

117 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

120 #i‚de‡
M_MXFAST


121 
	#M_MXFAST
 1

	)

123 #i‚de‡
M_NLBLKS


124 
	#M_NLBLKS
 2

	)

126 #i‚de‡
M_GRAIN


127 
	#M_GRAIN
 3

	)

129 #i‚de‡
M_KEEP


130 
	#M_KEEP
 4

	)

134 
	#M_TRIM_THRESHOLD
 -1

	)

135 
	#M_TOP_PAD
 -2

	)

136 
	#M_MMAP_THRESHOLD
 -3

	)

137 
	#M_MMAP_MAX
 -4

	)

138 
	#M_CHECK_ACTION
 -5

	)

139 
	#M_PERTURB
 -6

	)

140 
	#M_ARENA_TEST
 -7

	)

141 
	#M_ARENA_MAX
 -8

	)

144 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

148 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

152 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

155 
	$mÆloc_°©s
 (Ë
__THROW
;

158 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

161 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

165 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

170 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

171 
__MALLOC_DEPRECATED
;

173 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

174 
__c⁄°
 
__mÆloc_±r_t
)

175 
__MALLOC_DEPRECATED
;

176 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

177 
__c⁄°
 
__mÆloc_±r_t
)

178 
__MALLOC_DEPRECATED
;

179 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

180 
size_t
 
__size
,

181 
__c⁄°
 
__mÆloc_±r_t
)

182 
__MALLOC_DEPRECATED
;

183 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

184 
size_t
 
__size
,

185 
__c⁄°
 
__mÆloc_±r_t
)

186 
__MALLOC_DEPRECATED
;

187 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

190 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

193 
__END_DECLS


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

102 || 
deföed
 
__LDBL_COMPAT
)

103 #ifde‡
__LDBL_COMPAT


105 #ifde‡
__USE_ISOC99


106 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

107 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

108 #ifde‡
__REDIRECT_NTH


109 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

110 
__∆dbl_√xâow¨df
)

111 
	`__©åibuã__
 ((
__c⁄°__
));

112 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

113 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

115 (
__x
, 
__y
),

116 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


123 #unde‡
__MATHDECL_1


124 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

125 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

126 
¨gs
, 
Æüs
)

	)

127 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

128 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
,

206 
	#FP_NAN
 
FP_NAN


	)

207 
FP_INFINITE
,

208 
	#FP_INFINITE
 
FP_INFINITE


	)

209 
FP_ZERO
,

210 
	#FP_ZERO
 
FP_ZERO


	)

211 
FP_SUBNORMAL
,

212 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

213 
FP_NORMAL


214 
	#FP_NORMAL
 
FP_NORMAL


	)

218 #ifde‡
__NO_LONG_DOUBLE_MATH


219 
	#Â˛assify
(
x
) \

220 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

222 
	#Â˛assify
(
x
) \

223 ( (
x
) ==  () \

224 ? 
	`__Â˛assifyf
 (
x
) \

225 :  (
x
) ==  () \

226 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

230 #ifde‡
__NO_LONG_DOUBLE_MATH


231 
	#signbô
(
x
) \

232 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

234 
	#signbô
(
x
) \

235 ( (
x
) ==  () \

236 ? 
	`__signbôf
 (
x
) \

237 :  (
x
) ==  () \

238 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

242 #ifde‡
__NO_LONG_DOUBLE_MATH


243 
	#isföôe
(
x
) \

244 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

246 
	#isföôe
(
x
) \

247 ( (
x
) ==  () \

248 ? 
	`__föôef
 (
x
) \

249 :  (
x
) ==  () \

250 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

254 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

258 #ifde‡
__NO_LONG_DOUBLE_MATH


259 
	#i¢™
(
x
) \

260 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

262 
	#i¢™
(
x
) \

263 ( (
x
) ==  () \

264 ? 
	`__i¢™f
 (
x
) \

265 :  (
x
) ==  () \

266 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

270 #ifde‡
__NO_LONG_DOUBLE_MATH


271 
	#isöf
(
x
) \

272 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

274 
	#isöf
(
x
) \

275 ( (
x
) ==  () \

276 ? 
	`__isöff
 (
x
) \

277 :  (
x
) ==  () \

278 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

282 
	#MATH_ERRNO
 1

	)

283 
	#MATH_ERREXCEPT
 2

	)

288 #i‚de‡
__FAST_MATH__


289 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

294 #ifdef 
__USE_MISC


298 
_IEEE_
 = -1,

299 
_SVID_
,

300 
_XOPEN_
,

301 
_POSIX_
,

302 
_ISOC_


303 } 
	t_LIB_VERSION_TYPE
;

308 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

312 #ifde‡
__USE_SVID


318 #ifde‡
__˝lu•lus


319 
__ex˚±i⁄


321 
ex˚±i⁄


324 
ty≥
;

325 *
«me
;

326 
¨g1
;

327 
¨g2
;

328 
ªtvÆ
;

329 
	}
};

331 #ifde‡
__˝lu•lus


332 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

334 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

337 
	#X_TLOSS
 1.41484755040568800000e+16

	)

340 
	#DOMAIN
 1

	)

341 
	#SING
 2

	)

342 
	#OVERFLOW
 3

	)

343 
	#UNDERFLOW
 4

	)

344 
	#TLOSS
 5

	)

345 
	#PLOSS
 6

	)

348 
	#HUGE
 3.40282347e+38F

	)

352 #ifde‡
__USE_XOPEN


354 
	#MAXFLOAT
 3.40282347e+38F

	)

361 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


362 
	#M_E
 2.7182818284590452354

	)

363 
	#M_LOG2E
 1.4426950408889634074

	)

364 
	#M_LOG10E
 0.43429448190325182765

	)

365 
	#M_LN2
 0.69314718055994530942

	)

366 
	#M_LN10
 2.30258509299404568402

	)

367 
	#M_PI
 3.14159265358979323846

	)

368 
	#M_PI_2
 1.57079632679489661923

	)

369 
	#M_PI_4
 0.78539816339744830962

	)

370 
	#M_1_PI
 0.31830988618379067154

	)

371 
	#M_2_PI
 0.63661977236758134308

	)

372 
	#M_2_SQRTPI
 1.12837916709551257390

	)

373 
	#M_SQRT2
 1.41421356237309504880

	)

374 
	#M_SQRT1_2
 0.70710678118654752440

	)

380 #ifde‡
__USE_GNU


381 
	#M_El
 2.7182818284590452353602874713526625L

	)

382 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

383 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

384 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

385 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

386 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

387 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

388 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

389 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

390 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

391 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

392 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

393 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

400 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


401 
	#__NO_MATH_INLINES
 1

	)

404 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

411 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

412 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

413 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

414 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

415 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

416 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

420 #ifde‡
__USE_EXTERN_INLINES


421 
	~<bôs/m©hölöe.h
>

426 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

427 
	~<bôs/m©h-föôe.h
>

430 #ifde‡
__USE_ISOC99


434 #i‚de‡
isgª©î


435 
	#isgª©î
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

442 #i‚de‡
isgª©îequÆ


443 
	#isgª©îequÆ
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

450 #i‚de‡
i¶ess


451 
	#i¶ess
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

458 #i‚de‡
i¶es£quÆ


459 
	#i¶es£quÆ
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

466 #i‚de‡
i¶essgª©î


467 
	#i¶essgª©î
(
x
, 
y
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

470 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

474 #i‚de‡
isun‹dîed


475 
	#isun‹dîed
(
u
, 
v
) \

476 (
__exãnsi⁄__
 \

477 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

478 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

483 
	g__END_DECLS


	@/usr/include/memory.h

23 #i‚def 
_MEMORY_H


24 
	#_MEMORY_H
 1

	)

26 
	~<„©uªs.h
>

29 #i‚def 
_STRING_H


30 
	~<°rög.h
>

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

55 #ifde‡
__USE_MISC


56 
	~<sys/ty≥s.h
>

57 
	~<sys/sockë.h
>

59 #ifde‡
__FAVOR_BSD


60 
u_öt32_t
 
	tt˝_£q
;

65 
	st˝hdr


67 
u_öt16_t
 
	mth_•‹t
;

68 
u_öt16_t
 
	mth_dp‹t
;

69 
t˝_£q
 
	mth_£q
;

70 
t˝_£q
 
	mth_ack
;

71 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
u_öt8_t
 
	mth_x2
:4;

73 
u_öt8_t
 
	mth_off
:4;

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
u_öt8_t
 
	mth_off
:4;

77 
u_öt8_t
 
	mth_x2
:4;

79 
u_öt8_t
 
	mth_Êags
;

80 
	#TH_FIN
 0x01

	)

81 
	#TH_SYN
 0x02

	)

82 
	#TH_RST
 0x04

	)

83 
	#TH_PUSH
 0x08

	)

84 
	#TH_ACK
 0x10

	)

85 
	#TH_URG
 0x20

	)

86 
u_öt16_t
 
	mth_wö
;

87 
u_öt16_t
 
	mth_sum
;

88 
u_öt16_t
 
	mth_uΩ
;

92 
	st˝hdr


94 
u_öt16_t
 
	msour˚
;

95 
u_öt16_t
 
	mde°
;

96 
u_öt32_t
 
	m£q
;

97 
u_öt32_t
 
	mack_£q
;

98 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


99 
u_öt16_t
 
	mªs1
:4;

100 
u_öt16_t
 
	mdoff
:4;

101 
u_öt16_t
 
	mfö
:1;

102 
u_öt16_t
 
	msyn
:1;

103 
u_öt16_t
 
	mr°
:1;

104 
u_öt16_t
 
	mpsh
:1;

105 
u_öt16_t
 
	mack
:1;

106 
u_öt16_t
 
	murg
:1;

107 
u_öt16_t
 
	mªs2
:2;

108 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


109 
u_öt16_t
 
	mdoff
:4;

110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mªs2
:2;

112 
u_öt16_t
 
	murg
:1;

113 
u_öt16_t
 
	mack
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mr°
:1;

116 
u_öt16_t
 
	msyn
:1;

117 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	mwödow
;

122 
u_öt16_t
 
	mcheck
;

123 
u_öt16_t
 
	murg_±r
;

129 
	mTCP_ESTABLISHED
 = 1,

130 
	mTCP_SYN_SENT
,

131 
	mTCP_SYN_RECV
,

132 
	mTCP_FIN_WAIT1
,

133 
	mTCP_FIN_WAIT2
,

134 
	mTCP_TIME_WAIT
,

135 
	mTCP_CLOSE
,

136 
	mTCP_CLOSE_WAIT
,

137 
	mTCP_LAST_ACK
,

138 
	mTCP_LISTEN
,

139 
	mTCP_CLOSING


142 
	#TCPOPT_EOL
 0

	)

143 
	#TCPOPT_NOP
 1

	)

144 
	#TCPOPT_MAXSEG
 2

	)

145 
	#TCPOLEN_MAXSEG
 4

	)

146 
	#TCPOPT_WINDOW
 3

	)

147 
	#TCPOLEN_WINDOW
 3

	)

148 
	#TCPOPT_SACK_PERMITTED
 4

	)

149 
	#TCPOLEN_SACK_PERMITTED
 2

	)

150 
	#TCPOPT_SACK
 5

	)

151 
	#TCPOPT_TIMESTAMP
 8

	)

152 
	#TCPOLEN_TIMESTAMP
 10

	)

153 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

155 
	#TCPOPT_TSTAMP_HDR
 \

156 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

164 
	#TCP_MSS
 512

	)

166 
	#TCP_MAXWIN
 65535

	)

168 
	#TCP_MAX_WINSHIFT
 14

	)

170 
	#SOL_TCP
 6

	)

173 
	#TCPI_OPT_TIMESTAMPS
 1

	)

174 
	#TCPI_OPT_SACK
 2

	)

175 
	#TCPI_OPT_WSCALE
 4

	)

176 
	#TCPI_OPT_ECN
 8

	)

179 
	et˝_ˇ_°©e


181 
	mTCP_CA_O≥n
 = 0,

182 
	mTCP_CA_Dis‹dî
 = 1,

183 
	mTCP_CA_CWR
 = 2,

184 
	mTCP_CA_Recovîy
 = 3,

185 
	mTCP_CA_Loss
 = 4

188 
	st˝_öfo


190 
u_öt8_t
 
	mt˝i_°©e
;

191 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

192 
u_öt8_t
 
	mt˝i_ªå™smôs
;

193 
u_öt8_t
 
	mt˝i_¥obes
;

194 
u_öt8_t
 
	mt˝i_backoff
;

195 
u_öt8_t
 
	mt˝i_›ti⁄s
;

196 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

198 
u_öt32_t
 
	mt˝i_πo
;

199 
u_öt32_t
 
	mt˝i_©o
;

200 
u_öt32_t
 
	mt˝i_¢d_mss
;

201 
u_öt32_t
 
	mt˝i_rcv_mss
;

203 
u_öt32_t
 
	mt˝i_u«cked
;

204 
u_öt32_t
 
	mt˝i_ßcked
;

205 
u_öt32_t
 
	mt˝i_lo°
;

206 
u_öt32_t
 
	mt˝i_ªå™s
;

207 
u_öt32_t
 
	mt˝i_Áckës
;

210 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

212 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

213 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

216 
u_öt32_t
 
	mt˝i_pmtu
;

217 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

218 
u_öt32_t
 
	mt˝i_πt
;

219 
u_öt32_t
 
	mt˝i_πtv¨
;

220 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

221 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

222 
u_öt32_t
 
	mt˝i_advmss
;

223 
u_öt32_t
 
	mt˝i_ª‹dîög
;

225 
u_öt32_t
 
	mt˝i_rcv_πt
;

226 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

228 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

233 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

235 
	st˝_md5sig


237 
sockaddr_°‹age
 
	mt˝m_addr
;

238 
u_öt16_t
 
	m__t˝m_∑d1
;

239 
u_öt16_t
 
	mt˝m_keyÀn
;

240 
u_öt32_t
 
	m__t˝m_∑d2
;

241 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/pwd.h

23 #i‚def 
_PWD_H


24 
	#_PWD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

35 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


38 #i‚de‡
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

43 #i‚de‡
__uid_t_deföed


44 
__uid_t
 
	tuid_t
;

45 
	#__uid_t_deföed


	)

50 
	s∑sswd


52 *
	mpw_«me
;

53 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


63 
	#__√ed_FILE


	)

64 
	~<°dio.h
>

68 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


73 
£çwít
 ();

79 
ídpwít
 ();

85 
∑sswd
 *
gëpwít
 ();

88 #ifdef 
__USE_SVID


95 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

103 
puçwít
 (
__c⁄°
 
∑sswd
 *
__ª°ri˘
 
__p
,

104 
FILE
 *
__ª°ri˘
 
__f
);

111 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

117 
∑sswd
 *
gëpw«m
 (
__c⁄°
 *
__«me
);

119 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


121 #ifde‡
__USE_MISC


124 
	#NSS_BUFLEN_PASSWD
 1024

	)

135 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


140 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

145 
gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

150 
gëpw«m_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_SVID


164 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

172 #ifde‡
__USE_GNU


181 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

184 
	g__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/spawn.h

20 #i‚def 
_SPAWN_H


21 
	#_SPAWN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sched.h
>

25 
	~<sig«l.h
>

26 
	~<sys/ty≥s.h
>

32 
	m__Êags
;

33 
pid_t
 
	m__pgΩ
;

34 
sig£t_t
 
	m__sd
;

35 
sig£t_t
 
	m__ss
;

36 
sched_∑øm
 
	m__•
;

37 
	m__pﬁicy
;

38 
	m__∑d
[16];

39 } 
	tposix_•aw«âr_t
;

46 
	m__Æloˇãd
;

47 
	m__u£d
;

48 
__•awn_a˘i⁄
 *
	m__a˘i⁄s
;

49 
	m__∑d
[16];

50 } 
	tposix_•awn_fûe_a˘i⁄s_t
;

54 
	#POSIX_SPAWN_RESETIDS
 0x01

	)

55 
	#POSIX_SPAWN_SETPGROUP
 0x02

	)

56 
	#POSIX_SPAWN_SETSIGDEF
 0x04

	)

57 
	#POSIX_SPAWN_SETSIGMASK
 0x08

	)

58 
	#POSIX_SPAWN_SETSCHEDPARAM
 0x10

	)

59 
	#POSIX_SPAWN_SETSCHEDULER
 0x20

	)

60 #ifde‡
__USE_GNU


61 
	#POSIX_SPAWN_USEVFORK
 0x40

	)

65 
__BEGIN_DECLS


72 
posix_•awn
 (
pid_t
 *
__ª°ri˘
 
__pid
,

73 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

74 
__c⁄°
 
posix_•awn_fûe_a˘i⁄s_t
 *
__ª°ri˘


75 
__fûe_a˘i⁄s
,

76 
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘
 
__©åp
,

77 *
__c⁄°
 
__¨gv
[
__ª°ri˘_¨r
],

78 *
__c⁄°
 
__ívp
[
__ª°ri˘_¨r
]);

84 
posix_•aw≈
 (
pid_t
 *
__pid
, 
__c⁄°
 *
__fûe
,

85 
__c⁄°
 
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

86 
__c⁄°
 
posix_•aw«âr_t
 *
__©åp
,

87 *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[]);

91 
	$posix_•aw«âr_öô
 (
posix_•aw«âr_t
 *
__©å
Ë
__THROW
;

94 
	$posix_•aw«âr_de°roy
 (
posix_•aw«âr_t
 *
__©å
Ë
__THROW
;

98 
	$posix_•aw«âr_gësigdeÁu…
 (
__c⁄°
 
posix_•aw«âr_t
 *

99 
__ª°ri˘
 
__©å
,

100 
sig£t_t
 *
__ª°ri˘
 
__sigdeÁu…
)

101 
__THROW
;

104 
	$posix_•aw«âr_£tsigdeÁu…
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

105 
__c⁄°
 
sig£t_t
 *
__ª°ri˘


106 
__sigdeÁu…
)

107 
__THROW
;

110 
	$posix_•aw«âr_gësigmask
 (
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘


111 
__©å
,

112 
sig£t_t
 *
__ª°ri˘
 
__sigmask
Ë
__THROW
;

115 
	$posix_•aw«âr_£tsigmask
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

116 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__sigmask
)

117 
__THROW
;

120 
	$posix_•aw«âr_gëÊags
 (
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘


121 
__©å
,

122 *
__ª°ri˘
 
__Êags
Ë
__THROW
;

125 
	$posix_•aw«âr_£tÊags
 (
posix_•aw«âr_t
 *
_©å
,

126 
__Êags
Ë
__THROW
;

129 
	$posix_•aw«âr_gëpgroup
 (
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘


130 
__©å
, 
pid_t
 *
__ª°ri˘
 
__pgroup
)

131 
__THROW
;

134 
	$posix_•aw«âr_£çgroup
 (
posix_•aw«âr_t
 *
__©å
,

135 
pid_t
 
__pgroup
Ë
__THROW
;

138 
	$posix_•aw«âr_gëschedpﬁicy
 (
__c⁄°
 
posix_•aw«âr_t
 *

139 
__ª°ri˘
 
__©å
,

140 *
__ª°ri˘
 
__schedpﬁicy
)

141 
__THROW
;

144 
	$posix_•aw«âr_£tschedpﬁicy
 (
posix_•aw«âr_t
 *
__©å
,

145 
__schedpﬁicy
Ë
__THROW
;

148 
	$posix_•aw«âr_gësched∑øm
 (
__c⁄°
 
posix_•aw«âr_t
 *

149 
__ª°ri˘
 
__©å
,

150 
sched_∑øm
 *
__ª°ri˘


151 
__sched∑øm
Ë
__THROW
;

154 
	$posix_•aw«âr_£tsched∑øm
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

155 c⁄° 
sched_∑øm
 *

156 
__ª°ri˘
 
__sched∑øm
Ë
__THROW
;

160 
	$posix_•awn_fûe_a˘i⁄s_öô
 (
posix_•awn_fûe_a˘i⁄s_t
 *

161 
__fûe_a˘i⁄s
Ë
__THROW
;

164 
	$posix_•awn_fûe_a˘i⁄s_de°roy
 (
posix_•awn_fûe_a˘i⁄s_t
 *

165 
__fûe_a˘i⁄s
Ë
__THROW
;

169 
	$posix_•awn_fûe_a˘i⁄s_add›í
 (
posix_•awn_fûe_a˘i⁄s_t
 *

170 
__ª°ri˘
 
__fûe_a˘i⁄s
,

171 
__fd
,

172 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

173 
__oÊag
, 
mode_t
 
__mode
)

174 
__THROW
;

178 
	$posix_•awn_fûe_a˘i⁄s_add˛o£
 (
posix_•awn_fûe_a˘i⁄s_t
 *

179 
__fûe_a˘i⁄s
, 
__fd
)

180 
__THROW
;

184 
	$posix_•awn_fûe_a˘i⁄s_adddup2
 (
posix_•awn_fûe_a˘i⁄s_t
 *

185 
__fûe_a˘i⁄s
,

186 
__fd
, 
__√wfd
Ë
__THROW
;

188 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/event2/buffer.h

26 #i‚de‡
_EVENT2_BUFFER_H_


27 
	#_EVENT2_BUFFER_H_


	)

75 #ifde‡
__˝lu•lus


79 
	~<evít2/evít-c⁄fig.h
>

80 
	~<°d¨g.h
>

81 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


82 
	~<sys/ty≥s.h
>

84 #ifde‡
_EVENT_HAVE_SYS_UIO_H


85 
	~<sys/uio.h
>

87 
	~<evít2/utû.h
>

95 
evbuf„r


96 #ifde‡
_EVENT_IN_DOXYGEN


109 
	sevbuf„r_±r
 {

110 
ev_ssize_t
 
pos
;

114 *
chaö
;

115 
size_t
 
pos_ö_chaö
;

116 } 
_öã∫Æ
;

124 #ifde‡
_EVENT_HAVE_SYS_UIO_H


125 
	#evbuf„r_iovec
 
iovec


	)

127 
	#_EVBUFFER_IOVEC_IS_NATIVE


	)

129 
	sevbuf„r_iovec
 {

131 *
iov_ba£
;

133 
size_t
 
iov_Àn
;

143 
evbuf„r
 *
evbuf„r_√w
();

149 
evbuf„r_‰ì
(
evbuf„r
 *
buf
);

163 
evbuf„r_íabÀ_lockög
(
evbuf„r
 *
buf
, *
lock
);

169 
evbuf„r_lock
(
evbuf„r
 *
buf
);

175 
evbuf„r_u∆ock
(
evbuf„r
 *
buf
);

193 
	#EVBUFFER_FLAG_DRAINS_TO_FD
 1

	)

202 
evbuf„r_£t_Êags
(
evbuf„r
 *
buf
, 
ev_uöt64_t
 
Êags
);

210 
evbuf„r_˛ór_Êags
(
evbuf„r
 *
buf
, 
ev_uöt64_t
 
Êags
);

218 
size_t
 
evbuf„r_gë_Àngth
(c⁄° 
evbuf„r
 *
buf
);

232 
size_t
 
evbuf„r_gë_c⁄tiguous_•a˚
(c⁄° 
evbuf„r
 *
buf
);

244 
evbuf„r_ex∑nd
(
evbuf„r
 *
buf
, 
size_t
 
d©Àn
);

280 
evbuf„r_ª£rve_•a˚
(
evbuf„r
 *
buf
, 
ev_ssize_t
 
size
,

281 
evbuf„r_iovec
 *
vec
, 
n_vec
);

304 
evbuf„r_commô_•a˚
(
evbuf„r
 *
buf
,

305 
evbuf„r_iovec
 *
vec
, 
n_vecs
);

315 
evbuf„r_add
(
evbuf„r
 *
buf
, c⁄° *
d©a
, 
size_t
 
d©Àn
);

329 
evbuf„r_ªmove
(
evbuf„r
 *
buf
, *
d©a
, 
size_t
 
d©Àn
);

342 
ev_ssize_t
 
evbuf„r_c›yout
(
evbuf„r
 *
buf
, *
d©a_out
, 
size_t
 
d©Àn
);

357 
evbuf„r_ªmove_buf„r
(
evbuf„r
 *
§c
, evbuf„∏*
d°
,

358 
size_t
 
d©Àn
);

362 
	eevbuf„r_eﬁ_°yÀ
 {

372 
EVBUFFER_EOL_ANY
,

375 
EVBUFFER_EOL_CRLF
,

377 
EVBUFFER_EOL_CRLF_STRICT
,

379 
EVBUFFER_EOL_LF


396 *
evbuf„r_ªad 
(
evbuf„r
 *
buf„r
, 
size_t
 *
n_ªad_out
,

397 
evbuf„r_eﬁ_°yÀ
 
eﬁ_°yÀ
);

411 
evbuf„r_add_buf„r
(
evbuf„r
 *
outbuf
, evbuf„∏*
öbuf
);

419 (*
evbuf„r_ªf_˛ónup_cb
)(c⁄° *
	td©a
,

420 
	tsize_t
 
	td©Æí
, *
	texåa
);

437 
evbuf„r_add_ª„ªn˚
(
evbuf„r
 *
outbuf
,

438 c⁄° *
d©a
, 
size_t
 
d©Àn
,

439 
evbuf„r_ªf_˛ónup_cb
 
˛ónup‚
, *
˛ónup‚_¨g
);

462 
evbuf„r_add_fûe
(
evbuf„r
 *
outbuf
, 
fd
, 
ev_off_t
 
off£t
,

463 
ev_off_t
 
Àngth
);

477 
evbuf„r_add_¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, ...)

478 #ifde‡
__GNUC__


479 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

491 
evbuf„r_add_v¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, 
va_li°
 
≠
);

501 
evbuf„r_døö
(
evbuf„r
 *
buf
, 
size_t
 
Àn
);

514 
evbuf„r_wrôe
(
evbuf„r
 *
buf„r
, 
evutû_sockë_t
 
fd
);

528 
evbuf„r_wrôe_©mo°
(
evbuf„r
 *
buf„r
, 
evutû_sockë_t
 
fd
,

529 
ev_ssize_t
 
howmuch
);

540 
evbuf„r_ªad
(
evbuf„r
 *
buf„r
, 
evutû_sockë_t
 
fd
, 
howmuch
);

553 
evbuf„r_±r
 
evbuf„r_£¨ch
(
evbuf„r
 *
buf„r
, c⁄° *
wh©
, 
size_t
 
Àn
, c⁄° evbuf„r_±∏*
°¨t
);

569 
evbuf„r_±r
 
evbuf„r_£¨ch_ønge
(
evbuf„r
 *
buf„r
, c⁄° *
wh©
, 
size_t
 
Àn
, c⁄° evbuf„r_±∏*
°¨t
, c⁄° evbuf„r_±∏*
íd
);

575 
	eevbuf„r_±r_how
 {

578 
EVBUFFER_PTR_SET
,

580 
EVBUFFER_PTR_ADD


596 
evbuf„r_±r_£t
(
evbuf„r
 *
buf„r
, 
evbuf„r_±r
 *
±r
,

597 
size_t
 
posôi⁄
, 
evbuf„r_±r_how
 
how
);

613 
evbuf„r_±r
 
evbuf„r_£¨ch_eﬁ
(
evbuf„r
 *
buf„r
,

614 
evbuf„r_±r
 *
°¨t
, 
size_t
 *
eﬁ_Àn_out
,

615 
evbuf„r_eﬁ_°yÀ
 
eﬁ_°yÀ
);

643 
evbuf„r_≥ek
(
evbuf„r
 *
buf„r
, 
ev_ssize_t
 
Àn
,

644 
evbuf„r_±r
 *
°¨t_©
,

645 
evbuf„r_iovec
 *
vec_out
, 
n_vec
);

652 
	sevbuf„r_cb_öfo
 {

655 
size_t
 
‹ig_size
;

657 
size_t
 
n_added
;

659 
size_t
 
n_dñëed
;

681 (*
evbuf„r_cb_func
)(
	tevbuf„r
 *
	tbuf„r
, c⁄° 
	tevbuf„r_cb_öfo
 *
	töfo
, *
	t¨g
);

683 
evbuf„r_cb_íåy
;

695 
evbuf„r_cb_íåy
 *
evbuf„r_add_cb
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb_func
 
cb
, *
cb¨g
);

705 
evbuf„r_ªmove_cb_íåy
(
evbuf„r
 *
buf„r
,

706 
evbuf„r_cb_íåy
 *
ít
);

714 
evbuf„r_ªmove_cb
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb_func
 
cb
, *
cb¨g
);

721 
	#EVBUFFER_CB_ENABLED
 1

	)

730 
evbuf„r_cb_£t_Êags
(
evbuf„r
 *
buf„r
,

731 
evbuf„r_cb_íåy
 *
cb
, 
ev_uöt32_t
 
Êags
);

740 
evbuf„r_cb_˛ór_Êags
(
evbuf„r
 *
buf„r
,

741 
evbuf„r_cb_íåy
 *
cb
, 
ev_uöt32_t
 
Êags
);

753 
evbuf„r_cb_su•íd
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb_íåy
 *
cb
);

762 
evbuf„r_cb_unsu•íd
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb_íåy
 *
cb
);

774 *
evbuf„r_puŒup
(
evbuf„r
 *
buf
, 
ev_ssize_t
 
size
);

785 
evbuf„r_¥ïíd
(
evbuf„r
 *
buf
, c⁄° *
d©a
, 
size_t
 
size
);

795 
evbuf„r_¥ïíd_buf„r
(
evbuf„r
 *
d°
, evbuf„r* 
§c
);

811 
evbuf„r_‰ìze
(
evbuf„r
 *
buf
, 
©_‰⁄t
);

820 
evbuf„r_un‰ìze
(
evbuf„r
 *
buf
, 
©_‰⁄t
);

822 
evít_ba£
;

830 
evbuf„r_de„r_ˇŒbacks
(
evbuf„r
 *
buf„r
, 
evít_ba£
 *
ba£
);

832 #ifde‡
__˝lu•lus


	@/usr/include/event2/buffer_compat.h

27 #i‚de‡
_EVENT2_BUFFER_COMPAT_H_


28 
	#_EVENT2_BUFFER_COMPAT_H_


	)

48 *
evbuf„r_ªadlöe
(
evbuf„r
 *
buf„r
);

70 (*
	tevbuf„r_cb
)(
	tevbuf„r
 *
	tbuf„r
, 
	tsize_t
 
	tﬁd_Àn
, size_à
	t√w_Àn
, *
	t¨g
);

91 
	`evbuf„r_£tcb
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb
 
cb
, *
cb¨g
);

102 *
	`evbuf„r_föd
(
evbuf„r
 *
buf„r
, c⁄° *
wh©
, 
size_t
 
Àn
);

105 
	#EVBUFFER_LENGTH
(
x
Ë
	`evbuf„r_gë_Àngth
(x)

	)

107 
	#EVBUFFER_DATA
(
x
Ë
	`evbuf„r_puŒup
((x), -1)

	)

	@/usr/include/event2/bufferevent.h

27 #i‚de‡
_EVENT2_BUFFEREVENT_H_


28 
	#_EVENT2_BUFFEREVENT_H_


	)

77 #ifde‡
__˝lu•lus


81 
	~<evít2/evít-c⁄fig.h
>

82 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


83 
	~<sys/ty≥s.h
>

85 #ifde‡
_EVENT_HAVE_SYS_TIME_H


86 
	~<sys/time.h
>

90 
	~<evít2/utû.h
>

98 
	#BEV_EVENT_READING
 0x01

	)

99 
	#BEV_EVENT_WRITING
 0x02

	)

100 
	#BEV_EVENT_EOF
 0x10

	)

101 
	#BEV_EVENT_ERROR
 0x20

	)

102 
	#BEV_EVENT_TIMEOUT
 0x40

	)

103 
	#BEV_EVENT_CONNECTED
 0x80

	)

111 
buf„ªvít


112 #ifde‡
_EVENT_IN_DOXYGEN


116 
evít_ba£
;

117 
evbuf„r
;

118 
sockaddr
;

133 (*
buf„ªvít_d©a_cb
)(
	tbuf„ªvít
 *
	tbev
, *
	t˘x
);

149 (*
buf„ªvít_evít_cb
)(
	tbuf„ªvít
 *
	tbev
, 
	twh©
, *
	t˘x
);

152 
	ebuf„ªvít_›ti⁄s
 {

155 
BEV_OPT_CLOSE_ON_FREE
 = (1<<0),

159 
BEV_OPT_THREADSAFE
 = (1<<1),

162 
BEV_OPT_DEFER_CALLBACKS
 = (1<<2),

168 
BEV_OPT_UNLOCK_CALLBACKS
 = (1<<3)

184 
buf„ªvít
 *
buf„ªvít_sockë_√w
(
evít_ba£
 *
ba£
, 
evutû_sockë_t
 
fd
, 
›ti⁄s
);

205 
buf„ªvít_sockë_c⁄√˘
(
buf„ªvít
 *, 
sockaddr
 *, );

207 
evdns_ba£
;

234 
buf„ªvít_sockë_c⁄√˘_ho°«me
(
buf„ªvít
 *,

235 
evdns_ba£
 *, , const *, );

245 
buf„ªvít_sockë_gë_dns_îr‹
(
buf„ªvít
 *
bev
);

258 
buf„ªvít_ba£_£t
(
evít_ba£
 *
ba£
, 
buf„ªvít
 *
bu„v
);

263 
evít_ba£
 *
buf„ªvít_gë_ba£
(
buf„ªvít
 *
bev
);

274 
buf„ªvít_¥i‹ôy_£t
(
buf„ªvít
 *
bu„v
, 
¥i
);

282 
buf„ªvít_‰ì
(
buf„ªvít
 *
bu„v
);

299 
buf„ªvít_£tcb
(
buf„ªvít
 *
bu„v
,

300 
buf„ªvít_d©a_cb
 
ªadcb
, buf„ªvít_d©a_cb 
wrôecb
,

301 
buf„ªvít_evít_cb
 
evítcb
, *
cb¨g
);

310 
buf„ªvít_£tfd
(
buf„ªvít
 *
bu„v
, 
evutû_sockë_t
 
fd
);

316 
evutû_sockë_t
 
buf„ªvít_gëfd
(
buf„ªvít
 *
bu„v
);

322 
buf„ªvít
 *
buf„ªvít_gë_undîlyög
(buf„ªvíà*
bu„v
);

337 
buf„ªvít_wrôe
(
buf„ªvít
 *
bu„v
,

338 c⁄° *
d©a
, 
size_t
 
size
);

350 
buf„ªvít_wrôe_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
);

363 
size_t
 
buf„ªvít_ªad
(
buf„ªvít
 *
bu„v
, *
d©a
, size_à
size
);

373 
buf„ªvít_ªad_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
);

384 
evbuf„r
 *
buf„ªvít_gë_öput
(
buf„ªvít
 *
bu„v
);

398 
evbuf„r
 *
buf„ªvít_gë_ouçut
(
buf„ªvít
 *
bu„v
);

408 
buf„ªvít_íabÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

418 
buf„ªvít_dißbÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

426 
buf„ªvít_gë_íabÀd
(
buf„ªvít
 *
bu„v
);

454 
buf„ªvít_£t_timeouts
(
buf„ªvít
 *
bu„v
,

455 c⁄° 
timevÆ
 *
timeout_ªad
, c⁄° timevÆ *
timeout_wrôe
);

475 
buf„ªvít_£tw©îm¨k
(
buf„ªvít
 *
bu„v
, 
evíts
,

476 
size_t
 
lowm¨k
, size_à
highm¨k
);

482 
buf„ªvít_lock
(
buf„ªvít
 *
bu„v
);

488 
buf„ªvít_u∆ock
(
buf„ªvít
 *
bu„v
);

494 
	ebuf„ªvít_Êush_mode
 {

496 
BEV_NORMAL
 = 0,

499 
BEV_FLUSH
 = 1,

502 
BEV_FINISHED
 = 2

513 
buf„ªvít_Êush
(
buf„ªvít
 *
bu„v
,

514 
iŸy≥
,

515 
buf„ªvít_Êush_mode
 
mode
);

525 
	ebuf„ªvít_fûãr_ªsu…
 {

527 
BEV_OK
 = 0,

530 
BEV_NEED_MORE
 = 1,

534 
BEV_ERROR
 = 2

555 
buf„ªvít_fûãr_ªsu…
 (*
	tbuf„ªvít_fûãr_cb
)(

556 
	tevbuf„r
 *
	t§c
, evbuf„∏*
	td°
, 
	tev_ssize_t
 
	td°_limô
,

557 
	tbuf„ªvít_Êush_mode
 
	tmode
, *
	t˘x
);

572 
buf„ªvít
 *

573 
buf„ªvít_fûãr_√w
(
buf„ªvít
 *
undîlyög
,

574 
buf„ªvít_fûãr_cb
 
öput_fûãr
,

575 
buf„ªvít_fûãr_cb
 
ouçut_fûãr
,

576 
›ti⁄s
,

577 (*
‰ì_c⁄ãxt
)(*),

578 *
˘x
);

591 
buf„ªvít_∑ú_√w
(
evít_ba£
 *
ba£
, 
›ti⁄s
,

592 
buf„ªvít
 *
∑ú
[2]);

598 
buf„ªvít
 *
buf„ªvít_∑ú_gë_∑π√r
(buf„ªvíà*
bev
);

604 
ev_tokí_buckë_cfg
;

610 
buf„ªvít_øã_limô_group
;

613 
	#EV_RATE_LIMIT_MAX
 
EV_SSIZE_MAX


	)

631 
ev_tokí_buckë_cfg
 *
ev_tokí_buckë_cfg_√w
(

632 
size_t
 
ªad_øã
, size_à
ªad_bur°
,

633 
size_t
 
wrôe_øã
, size_à
wrôe_bur°
,

634 c⁄° 
timevÆ
 *
tick_Àn
);

641 
ev_tokí_buckë_cfg_‰ì
(
ev_tokí_buckë_cfg
 *
cfg
);

654 
buf„ªvít_£t_øã_limô
(
buf„ªvít
 *
bev
,

655 
ev_tokí_buckë_cfg
 *
cfg
);

674 
buf„ªvít_øã_limô_group
 *
buf„ªvít_øã_limô_group_√w
(

675 
evít_ba£
 *
ba£
,

676 c⁄° 
ev_tokí_buckë_cfg
 *
cfg
);

682 
buf„ªvít_øã_limô_group_£t_cfg
(

683 
buf„ªvít_øã_limô_group
 *,

684 c⁄° 
ev_tokí_buckë_cfg
 *);

702 
buf„ªvít_øã_limô_group_£t_mö_sh¨e
(

703 
buf„ªvít_øã_limô_group
 *, 
size_t
);

709 
buf„ªvít_øã_limô_group_‰ì
(
buf„ªvít_øã_limô_group
 *);

721 
buf„ªvít_add_to_øã_limô_group
(
buf„ªvít
 *
bev
,

722 
buf„ªvít_øã_limô_group
 *
g
);

725 
buf„ªvít_ªmove_‰om_øã_limô_group
(
buf„ªvít
 *
bev
);

738 
ev_ssize_t
 
buf„ªvít_gë_ªad_limô
(
buf„ªvít
 *
bev
);

739 
ev_ssize_t
 
buf„ªvít_gë_wrôe_limô
(
buf„ªvít
 *
bev
);

742 
ev_ssize_t
 
buf„ªvít_gë_max_to_ªad
(
buf„ªvít
 *
bev
);

743 
ev_ssize_t
 
buf„ªvít_gë_max_to_wrôe
(
buf„ªvít
 *
bev
);

754 
ev_ssize_t
 
buf„ªvít_øã_limô_group_gë_ªad_limô
(

755 
buf„ªvít_øã_limô_group
 *);

756 
ev_ssize_t
 
buf„ªvít_øã_limô_group_gë_wrôe_limô
(

757 
buf„ªvít_øã_limô_group
 *);

774 
buf„ªvít_de¸emít_ªad_limô
(
buf„ªvít
 *
bev
, 
ev_ssize_t
 
de¸
);

775 
buf„ªvít_de¸emít_wrôe_limô
(
buf„ªvít
 *
bev
, 
ev_ssize_t
 
de¸
);

791 
buf„ªvít_øã_limô_group_de¸emít_ªad
(

792 
buf„ªvít_øã_limô_group
 *, 
ev_ssize_t
);

793 
buf„ªvít_øã_limô_group_de¸emít_wrôe
(

794 
buf„ªvít_øã_limô_group
 *, 
ev_ssize_t
);

804 
buf„ªvít_øã_limô_group_gë_tŸÆs
(

805 
buf„ªvít_øã_limô_group
 *
gΩ
,

806 
ev_uöt64_t
 *
tŸÆ_ªad_out
,Év_uöt64_à*
tŸÆ_wrôãn_out
);

814 
buf„ªvít_øã_limô_group_ª£t_tŸÆs
(

815 
buf„ªvít_øã_limô_group
 *
gΩ
);

817 #ifde‡
__˝lu•lus


	@/usr/include/event2/bufferevent_compat.h

28 #i‚de‡
_EVENT2_BUFFEREVENT_COMPAT_H_


29 
	#_EVENT2_BUFFEREVENT_COMPAT_H_


	)

31 
	#evbuf„rcb
 
buf„ªvít_d©a_cb


	)

32 
	#evîr‹cb
 
buf„ªvít_evít_cb


	)

75 
buf„ªvít
 *
buf„ªvít_√w
(
evutû_sockë_t
 
fd
,

76 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
);

86 
buf„ªvít_£âimeout
(
buf„ªvít
 *
bu„v
,

87 
timeout_ªad
, 
timeout_wrôe
);

89 
	#EVBUFFER_READ
 
BEV_EVENT_READING


	)

90 
	#EVBUFFER_WRITE
 
BEV_EVENT_WRITING


	)

91 
	#EVBUFFER_EOF
 
BEV_EVENT_EOF


	)

92 
	#EVBUFFER_ERROR
 
BEV_EVENT_ERROR


	)

93 
	#EVBUFFER_TIMEOUT
 
BEV_EVENT_TIMEOUT


	)

96 
	#EVBUFFER_INPUT
(
x
Ë
	`buf„ªvít_gë_öput
(x)

	)

98 
	#EVBUFFER_OUTPUT
(
x
Ë
	`buf„ªvít_gë_ouçut
(x)

	)

	@/usr/include/event2/bufferevent_struct.h

27 #i‚de‡
_EVENT2_BUFFEREVENT_STRUCT_H_


28 
	#_EVENT2_BUFFEREVENT_STRUCT_H_


	)

40 #ifde‡
__˝lu•lus


44 
	~<evít2/evít-c⁄fig.h
>

45 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


46 
	~<sys/ty≥s.h
>

48 #ifde‡
_EVENT_HAVE_SYS_TIME_H


49 
	~<sys/time.h
>

53 
	~<evít2/utû.h
>

55 
	~<evít2/evít_°ru˘.h
>

57 
	sevít_w©îm¨k
 {

58 
size_t
 
low
;

59 
size_t
 
high
;

70 
	sbuf„ªvít
 {

72 
evít_ba£
 *
ev_ba£
;

75 c⁄° 
buf„ªvít_›s
 *
be_›s
;

80 
evít
 
ev_ªad
;

84 
evít
 
ev_wrôe
;

88 
evbuf„r
 *
öput
;

92 
evbuf„r
 *
ouçut
;

94 
evít_w©îm¨k
 
wm_ªad
;

95 
evít_w©îm¨k
 
wm_wrôe
;

97 
buf„ªvít_d©a_cb
 
ªadcb
;

98 
buf„ªvít_d©a_cb
 
wrôecb
;

101 
buf„ªvít_evít_cb
 
îr‹cb
;

102 *
cb¨g
;

104 
timevÆ
 
timeout_ªad
;

105 
timevÆ
 
timeout_wrôe
;

109 
íabÀd
;

112 #ifde‡
__˝lu•lus


	@/usr/include/event2/event-config.h

10 #i‚de‡
_EVENT2_EVENT_CONFIG_H_


11 
	#_EVENT2_EVENT_CONFIG_H_


	)

31 
	#_EVENT_HAVE_ARPA_INET_H
 1

	)

34 
	#_EVENT_HAVE_CLOCK_GETTIME
 1

	)

38 
	#_EVENT_HAVE_DECL_CTL_KERN
 1

	)

42 
	#_EVENT_HAVE_DECL_KERN_ARND
 0

	)

46 
	#_EVENT_HAVE_DECL_KERN_RANDOM
 1

	)

50 
	#_EVENT_HAVE_DECL_RANDOM_UUID
 1

	)

56 
	#_EVENT_HAVE_DLFCN_H
 1

	)

59 
	#_EVENT_HAVE_EPOLL
 1

	)

62 
	#_EVENT_HAVE_EPOLL_CTL
 1

	)

65 
	#_EVENT_HAVE_EVENTFD
 1

	)

71 
	#_EVENT_HAVE_FCNTL
 1

	)

74 
	#_EVENT_HAVE_FCNTL_H
 1

	)

77 
	#_EVENT_HAVE_FD_MASK
 1

	)

80 
	#_EVENT_HAVE_GETADDRINFO
 1

	)

83 
	#_EVENT_HAVE_GETEGID
 1

	)

86 
	#_EVENT_HAVE_GETEUID
 1

	)

101 
	#_EVENT_HAVE_GETNAMEINFO
 1

	)

104 
	#_EVENT_HAVE_GETPROTOBYNUMBER
 1

	)

110 
	#_EVENT_HAVE_GETTIMEOFDAY
 1

	)

113 
	#_EVENT_HAVE_INET_ATON
 1

	)

116 
	#_EVENT_HAVE_INET_NTOP
 1

	)

119 
	#_EVENT_HAVE_INET_PTON
 1

	)

122 
	#_EVENT_HAVE_INTTYPES_H
 1

	)

131 
	#_EVENT_HAVE_LIBZ
 1

	)

134 
	#_EVENT_HAVE_MEMORY_H
 1

	)

137 
	#_EVENT_HAVE_MMAP
 1

	)

140 
	#_EVENT_HAVE_NETDB_H
 1

	)

146 
	#_EVENT_HAVE_NETINET_IN_H
 1

	)

149 
	#_EVENT_HAVE_OPENSSL
 1

	)

152 
	#_EVENT_HAVE_OPENSSL_BIO_H
 1

	)

155 
	#_EVENT_HAVE_PIPE
 1

	)

158 
	#_EVENT_HAVE_POLL
 1

	)

161 
	#_EVENT_HAVE_POLL_H
 1

	)

173 
	#_EVENT_HAVE_PTHREADS
 1

	)

176 
	#_EVENT_HAVE_PUTENV
 1

	)

179 
	#_EVENT_HAVE_SA_FAMILY_T
 1

	)

182 
	#_EVENT_HAVE_SELECT
 1

	)

185 
	#_EVENT_HAVE_SENDFILE
 1

	)

188 
	#_EVENT_HAVE_SETENV
 1

	)

191 
	#_EVENT_HAVE_SETFD
 1

	)

194 
	#_EVENT_HAVE_SIGACTION
 1

	)

197 
	#_EVENT_HAVE_SIGNAL
 1

	)

200 
	#_EVENT_HAVE_SPLICE
 1

	)

203 
	#_EVENT_HAVE_STDARG_H
 1

	)

206 
	#_EVENT_HAVE_STDDEF_H
 1

	)

209 
	#_EVENT_HAVE_STDINT_H
 1

	)

212 
	#_EVENT_HAVE_STDLIB_H
 1

	)

215 
	#_EVENT_HAVE_STRINGS_H
 1

	)

218 
	#_EVENT_HAVE_STRING_H
 1

	)

224 
	#_EVENT_HAVE_STRSEP
 1

	)

227 
	#_EVENT_HAVE_STRTOK_R
 1

	)

230 
	#_EVENT_HAVE_STRTOLL
 1

	)

233 
	#_EVENT_HAVE_STRUCT_ADDRINFO
 1

	)

236 
	#_EVENT_HAVE_STRUCT_IN6_ADDR
 1

	)

239 
	#_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR16
 1

	)

242 
	#_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR32
 1

	)

245 
	#_EVENT_HAVE_STRUCT_SOCKADDR_IN6
 1

	)

254 
	#_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE
 1

	)

257 
	#_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY
 1

	)

266 
	#_EVENT_HAVE_SYS_EPOLL_H
 1

	)

269 
	#_EVENT_HAVE_SYS_EVENTFD_H
 1

	)

275 
	#_EVENT_HAVE_SYS_IOCTL_H
 1

	)

278 
	#_EVENT_HAVE_SYS_MMAN_H
 1

	)

281 
	#_EVENT_HAVE_SYS_PARAM_H
 1

	)

284 
	#_EVENT_HAVE_SYS_QUEUE_H
 1

	)

287 
	#_EVENT_HAVE_SYS_SELECT_H
 1

	)

290 
	#_EVENT_HAVE_SYS_SENDFILE_H
 1

	)

293 
	#_EVENT_HAVE_SYS_SOCKET_H
 1

	)

296 
	#_EVENT_HAVE_SYS_STAT_H
 1

	)

299 
	#_EVENT_HAVE_SYS_SYSCTL_H
 1

	)

302 
	#_EVENT_HAVE_SYS_TIME_H
 1

	)

305 
	#_EVENT_HAVE_SYS_TYPES_H
 1

	)

308 
	#_EVENT_HAVE_SYS_UIO_H
 1

	)

311 
	#_EVENT_HAVE_SYS_WAIT_H
 1

	)

314 
	#_EVENT_HAVE_TAILQFOREACH
 1

	)

317 
	#_EVENT_HAVE_TIMERADD
 1

	)

320 
	#_EVENT_HAVE_TIMERCLEAR
 1

	)

323 
	#_EVENT_HAVE_TIMERCMP
 1

	)

326 
	#_EVENT_HAVE_TIMERISSET
 1

	)

329 
	#_EVENT_HAVE_UINT16_T
 1

	)

332 
	#_EVENT_HAVE_UINT32_T
 1

	)

335 
	#_EVENT_HAVE_UINT64_T
 1

	)

338 
	#_EVENT_HAVE_UINT8_T
 1

	)

341 
	#_EVENT_HAVE_UINTPTR_T
 1

	)

344 
	#_EVENT_HAVE_UNISTD_H
 1

	)

347 
	#_EVENT_HAVE_UNSETENV
 1

	)

350 
	#_EVENT_HAVE_VASPRINTF
 1

	)

356 
	#_EVENT_HAVE_ZLIB_H
 1

	)

360 
	#_EVENT_LT_OBJDIR
 ".libs/"

	)

366 
	#_EVENT_NUMERIC_VERSION
 0x02001000

	)

369 
	#_EVENT_PACKAGE
 "libevít"

	)

372 
	#_EVENT_PACKAGE_BUGREPORT
 ""

	)

375 
	#_EVENT_PACKAGE_NAME
 ""

	)

378 
	#_EVENT_PACKAGE_STRING
 ""

	)

381 
	#_EVENT_PACKAGE_TARNAME
 ""

	)

384 
	#_EVENT_PACKAGE_URL
 ""

	)

387 
	#_EVENT_PACKAGE_VERSION
 ""

	)

394 
	#_EVENT_SIZEOF_INT
 4

	)

397 
	#_EVENT_SIZEOF_LONG
 8

	)

400 
	#_EVENT_SIZEOF_LONG_LONG
 8

	)

403 
	#_EVENT_SIZEOF_PTHREAD_T
 8

	)

406 
	#_EVENT_SIZEOF_SHORT
 2

	)

409 
	#_EVENT_SIZEOF_SIZE_T
 8

	)

412 
	#_EVENT_SIZEOF_VOID_P
 8

	)

415 
	#_EVENT_STDC_HEADERS
 1

	)

418 
	#_EVENT_TIME_WITH_SYS_TIME
 1

	)

421 
	#_EVENT_VERSION
 "2.0.16-°abÀ"

	)

431 #i‚de‡
_EVENT___˝lu•lus


	@/usr/include/event2/event.h

27 #i‚de‡
_EVENT2_EVENT_H_


28 
	#_EVENT2_EVENT_H_


	)

183 #ifde‡
__˝lu•lus


187 
	~<evít2/evít-c⁄fig.h
>

188 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


189 
	~<sys/ty≥s.h
>

191 #ifde‡
_EVENT_HAVE_SYS_TIME_H


192 
	~<sys/time.h
>

195 
	~<°dio.h
>

198 
	~<evít2/utû.h
>

213 
evít_ba£


214 #ifde‡
_EVENT_IN_DOXYGEN


272 
evít


273 #ifde‡
_EVENT_IN_DOXYGEN


291 
evít_c⁄fig


292 #ifde‡
_EVENT_IN_DOXYGEN


317 
evít_íabÀ_debug_mode
();

328 
evít_debug_u«ssign
(
evít
 *);

337 
evít_ba£
 *
evít_ba£_√w
();

349 
evít_ªöô
(
evít_ba£
 *
ba£
);

364 
evít_ba£_di•©ch
(
evít_ba£
 *);

372 c⁄° *
evít_ba£_gë_mëhod
(c⁄° 
evít_ba£
 *);

386 c⁄° **
evít_gë_suµ‹ãd_mëhods
();

398 
evít_c⁄fig
 *
evít_c⁄fig_√w
();

405 
evít_c⁄fig_‰ì
(
evít_c⁄fig
 *
cfg
);

419 
evít_c⁄fig_avoid_mëhod
(
evít_c⁄fig
 *
cfg
, c⁄° *
mëhod
);

430 
	eevít_mëhod_„©uª
 {

432 
EV_FEATURE_ET
 = 0x01,

437 
EV_FEATURE_O1
 = 0x02,

440 
EV_FEATURE_FDS
 = 0x04

451 
	eevít_ba£_c⁄fig_Êag
 {

454 
EVENT_BASE_FLAG_NOLOCK
 = 0x01,

457 
EVENT_BASE_FLAG_IGNORE_ENV
 = 0x02,

464 
EVENT_BASE_FLAG_STARTUP_IOCP
 = 0x04,

468 
EVENT_BASE_FLAG_NO_CACHE_TIME
 = 0x08,

484 
EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST
 = 0x10

494 
evít_ba£_gë_„©uªs
(c⁄° 
evít_ba£
 *
ba£
);

518 
evít_c⁄fig_ªquúe_„©uªs
(
evít_c⁄fig
 *
cfg
, 
„©uª
);

526 
evít_c⁄fig_£t_Êag
(
evít_c⁄fig
 *
cfg
, 
Êag
);

537 
evít_c⁄fig_£t_num_˝us_höt
(
evít_c⁄fig
 *
cfg
, 
˝us
);

551 
evít_ba£
 *
evít_ba£_√w_wôh_c⁄fig
(c⁄° 
evít_c⁄fig
 *);

561 
evít_ba£_‰ì
(
evít_ba£
 *);

566 
	#_EVENT_LOG_DEBUG
 0

	)

567 
	#_EVENT_LOG_MSG
 1

	)

568 
	#_EVENT_LOG_WARN
 2

	)

569 
	#_EVENT_LOG_ERR
 3

	)

577 (*
evít_log_cb
)(
	t£vîôy
, c⁄° *
	tmsg
);

588 
evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
);

595 (*
evít_Áèl_cb
)(
	tîr
);

609 
evít_£t_Áèl_ˇŒback
(
evít_Áèl_cb
 
cb
);

620 
evít_ba£_£t
(
evít_ba£
 *, 
evít
 *);

629 
	#EVLOOP_ONCE
 0x01

	)

632 
	#EVLOOP_NONBLOCK
 0x02

	)

653 
evít_ba£_lo›
(
evít_ba£
 *, );

670 
evít_ba£_lo›exô
(
evít_ba£
 *, c⁄° 
timevÆ
 *);

685 
evít_ba£_lo›bªak
(
evít_ba£
 *);

699 
evít_ba£_gŸ_exô
(
evít_ba£
 *);

713 
evít_ba£_gŸ_bªak
(
evít_ba£
 *);

724 
	#EV_TIMEOUT
 0x01

	)

726 
	#EV_READ
 0x02

	)

728 
	#EV_WRITE
 0x04

	)

730 
	#EV_SIGNAL
 0x08

	)

737 
	#EV_PERSIST
 0x10

	)

739 
	#EV_ET
 0x20

	)

747 
	#evtimî_assign
(
ev
, 
b
, 
cb
, 
¨g
) \

748 
	`evít_assign
((
ev
), (
b
), -1, 0, (
cb
), (
¨g
))

	)

749 
	#evtimî_√w
(
b
, 
cb
, 
¨g
Ë
	`evít_√w
((b), -1, 0, (cb), (¨g))

	)

750 
	#evtimî_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

751 
	#evtimî_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

752 
	#evtimî_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_TIMEOUT
, (tv))

	)

753 
	#evtimî_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

762 
	#evsig«l_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

763 
	#evsig«l_assign
(
ev
, 
b
, 
x
, 
cb
, 
¨g
) \

764 
	`evít_assign
((
ev
), (
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, 
cb
, (
¨g
))

	)

765 
	#evsig«l_√w
(
b
, 
x
, 
cb
, 
¨g
) \

766 
	`evít_√w
((
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
¨g
))

	)

767 
	#evsig«l_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

768 
	#evsig«l_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_SIGNAL
, (tv))

	)

769 
	#evsig«l_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

783 (*
evít_ˇŒback_‚
)(
	tevutû_sockë_t
, , *);

833 
evít
 *
evít_√w
(
evít_ba£
 *, 
evutû_sockë_t
, , 
evít_ˇŒback_‚
, *);

874 
evít_assign
(
evít
 *, 
evít_ba£
 *, 
evutû_sockë_t
, , 
evít_ˇŒback_‚
, *);

882 
evít_‰ì
(
evít
 *);

906 
evít_ba£_⁄˚
(
evít_ba£
 *, 
evutû_sockë_t
, , 
evít_ˇŒback_‚
, *, c⁄° 
timevÆ
 *);

930 
evít_add
(
evít
 *
ev
, c⁄° 
timevÆ
 *
timeout
);

943 
evít_dñ
(
evít
 *);

960 
evít_a˘ive
(
evít
 *
ev
, 
ªs
, 
nˇŒs
);

975 
evít_≥ndög
(c⁄° 
evít
 *
ev
, 
evíts
, 
timevÆ
 *
tv
);

993 
evít_öôülized
(c⁄° 
evít
 *
ev
);

998 
	#evít_gë_sig«l
(
ev
Ë(()
	`evít_gë_fd
”v))

	)

1004 
evutû_sockë_t
 
evít_gë_fd
(c⁄° 
evít
 *
ev
);

1009 
evít_ba£
 *
evít_gë_ba£
(c⁄° 
evít
 *
ev
);

1014 
evít_gë_evíts
(c⁄° 
evít
 *
ev
);

1019 
evít_ˇŒback_‚
 
evít_gë_ˇŒback
(c⁄° 
evít
 *
ev
);

1024 *
evít_gë_ˇŒback_¨g
(c⁄° 
evít
 *
ev
);

1033 
evít_gë_assignmít
(c⁄° 
evít
 *event,

1034 
evít_ba£
 **
ba£_out
, 
evutû_sockë_t
 *
fd_out
, *
evíts_out
,

1035 
evít_ˇŒback_‚
 *
ˇŒback_out
, **
¨g_out
);

1050 
size_t
 
evít_gë_°ru˘_evít_size
();

1061 c⁄° *
evít_gë_vîsi⁄
();

1074 
ev_uöt32_t
 
evít_gë_vîsi⁄_numbî
();

1077 
	#LIBEVENT_VERSION
 
_EVENT_VERSION


	)

1080 
	#LIBEVENT_VERSION_NUMBER
 
_EVENT_NUMERIC_VERSION


	)

1083 
	#EVENT_MAX_PRIORITIES
 256

	)

1111 
evít_ba£_¥i‹ôy_öô
(
evít_ba£
 *, );

1121 
evít_¥i‹ôy_£t
(
evít
 *, );

1142 c⁄° 
timevÆ
 *
evít_ba£_öô_comm⁄_timeout
(
evít_ba£
 *
ba£
,

1143 c⁄° 
timevÆ
 *
duøti⁄
);

1145 #i‡!
deföed
(
_EVENT_DISABLE_MM_REPLACEMENT
Ë|| deföed(
_EVENT_IN_DOXYGEN
)

1168 
evít_£t_mem_fun˘i⁄s
(

1169 *(*
mÆloc_‚
)(
size_t
 
sz
),

1170 *(*
ªÆloc_‚
)(*
±r
, 
size_t
 
sz
),

1171 (*
‰ì_‚
)(*
±r
));

1174 
	#EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED


	)

1177 
evít_ba£_dump_evíts
(
evít_ba£
 *, 
FILE
 *);

1190 
evít_ba£_gëtimeofday_ˇched
(
evít_ba£
 *
ba£
,

1191 
timevÆ
 *
tv
);

1193 #ifde‡
__˝lu•lus


	@/usr/include/event2/event_compat.h

27 #i‚de‡
_EVENT2_EVENT_COMPAT_H_


28 
	#_EVENT2_EVENT_COMPAT_H_


	)

45 #ifde‡
__˝lu•lus


49 
	~<evít2/evít-c⁄fig.h
>

50 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


51 
	~<sys/ty≥s.h
>

53 #ifde‡
_EVENT_HAVE_SYS_TIME_H


54 
	~<sys/time.h
>

58 
	~<evít2/utû.h
>

73 
evít_ba£
 *
evít_öô
();

86 
evít_di•©ch
();

99 
evít_lo›
();

114 
evít_lo›exô
(c⁄° 
timevÆ
 *);

129 
evít_lo›bªak
();

140 
evít_⁄˚
(
evutû_sockë_t
 , ,

141 (*)(
evutû_sockë_t
, , *), *, c⁄° 
timevÆ
 *);

153 c⁄° *
evít_gë_mëhod
();

165 
evít_¥i‹ôy_öô
();

174 
evít_£t
(
evít
 *, 
evutû_sockë_t
, , (*)(evutil_socket_t, , *), *);

176 
	#evtimî_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
(”v), -1, 0, (cb), (¨g))

	)

177 
	#evsig«l_£t
(
ev
, 
x
, 
cb
, 
¨g
) \

178 
	`evít_£t
((
ev
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
¨g
))

	)

188 
	#timeout_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

189 
	#timeout_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
(”v), -1, 0, (cb), (¨g))

	)

190 
	#timeout_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

191 
	#timeout_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_TIMEOUT
, (tv))

	)

192 
	#timeout_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

202 
	#sig«l_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

203 
	#sig«l_£t
(
ev
, 
x
, 
cb
, 
¨g
) \

204 
	`evít_£t
((
ev
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
¨g
))

	)

205 
	#sig«l_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

206 
	#sig«l_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_SIGNAL
, (tv))

	)

207 
	#sig«l_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

210 #i‚de‡
EVENT_FD


212 
	#EVENT_FD
(
ev
Ë(()
	`evít_gë_fd
”v))

	)

213 
	#EVENT_SIGNAL
(
ev
Ë
	`evít_gë_sig«l
”v)

	)

216 #ifde‡
__˝lu•lus


	@/usr/include/event2/event_struct.h

27 #i‚de‡
_EVENT2_EVENT_STRUCT_H_


28 
	#_EVENT2_EVENT_STRUCT_H_


	)

39 #ifde‡
__˝lu•lus


43 
	~<evít2/evít-c⁄fig.h
>

44 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


45 
	~<sys/ty≥s.h
>

47 #ifde‡
_EVENT_HAVE_SYS_TIME_H


48 
	~<sys/time.h
>

52 
	~<evít2/utû.h
>

55 
	~<evít2/keyvÆq_°ru˘.h
>

57 
	#EVLIST_TIMEOUT
 0x01

	)

58 
	#EVLIST_INSERTED
 0x02

	)

59 
	#EVLIST_SIGNAL
 0x04

	)

60 
	#EVLIST_ACTIVE
 0x08

	)

61 
	#EVLIST_INTERNAL
 0x10

	)

62 
	#EVLIST_INIT
 0x80

	)

65 
	#EVLIST_ALL
 (0xf000 | 0x9f)

	)

68 #i‚de‡
TAILQ_ENTRY


69 
	#_EVENT_DEFINED_TQENTRY


	)

70 
	#TAILQ_ENTRY
(
ty≥
) \

72 
ty≥
 *
tqe_√xt
; \

73 
ty≥
 **
tqe_¥ev
; \

74 }

	)

77 #i‚de‡
TAILQ_HEAD


78 
	#_EVENT_DEFINED_TQHEAD


	)

79 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

80 
	s«me
 { \

81 
ty≥
 *
tqh_fú°
; \

82 
ty≥
 **
tqh_œ°
; \

83 }

	)

86 
evít_ba£
;

87 
	sevít
 {

88 
TAILQ_ENTRY
(
evít
Ë
ev_a˘ive_√xt
;

89 
TAILQ_ENTRY
(
evít
Ë
ev_√xt
;

92 
TAILQ_ENTRY
(
evít
Ë
ev_√xt_wôh_comm⁄_timeout
;

93 
mö_hóp_idx
;

94 } 
ev_timeout_pos
;

95 
evutû_sockë_t
 
ev_fd
;

97 
evít_ba£
 *
ev_ba£
;

102 
TAILQ_ENTRY
(
evít
Ë
ev_io_√xt
;

103 
timevÆ
 
ev_timeout
;

104 } 
ev_io
;

108 
TAILQ_ENTRY
(
evít
Ë
ev_sig«l_√xt
;

109 
ev_nˇŒs
;

111 *
ev_≤ˇŒs
;

112 } 
ev_sig«l
;

113 } 
_ev
;

115 
ev_evíts
;

116 
ev_ªs
;

117 
ev_Êags
;

118 
ev_uöt8_t
 
ev_¥i
;

119 
ev_uöt8_t
 
ev_˛osuª
;

120 
timevÆ
 
ev_timeout
;

123 (*
ev_ˇŒback
)(
evutû_sockë_t
, , *
¨g
);

124 *
ev_¨g
;

127 
TAILQ_HEAD
 (
evít_li°
, 
evít
);

129 #ifde‡
_EVENT_DEFINED_TQENTRY


130 #unde‡
TAILQ_ENTRY


133 #ifde‡
_EVENT_DEFINED_TQHEAD


134 #unde‡
TAILQ_HEAD


137 #ifde‡
__˝lu•lus


	@/usr/include/event2/tag.h

27 #i‚de‡
_EVENT2_TAG_H_


28 
	#_EVENT2_TAG_H_


	)

36 #ifde‡
__˝lu•lus


40 
	~<evít2/evít-c⁄fig.h
>

41 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


42 
	~<sys/ty≥s.h
>

44 #ifde‡
_EVENT_HAVE_SYS_TIME_H


45 
	~<sys/time.h
>

49 
	~<evít2/utû.h
>

51 
evbuf„r
;

59 
evèg_öô
();

68 
evèg_unm¨shÆ_hódî
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
);

70 
evèg_m¨shÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° *
d©a
,

71 
ev_uöt32_t
 
Àn
);

72 
evèg_m¨shÆ_buf„r
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

73 
evbuf„r
 *
d©a
);

85 
evèg_ícode_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
numbî
);

86 
evèg_ícode_öt64
(
evbuf„r
 *
evbuf
, 
ev_uöt64_t
 
numbî
);

88 
evèg_m¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

89 
ev_uöt32_t
 
öãgî
);

90 
evèg_m¨shÆ_öt64
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

91 
ev_uöt64_t
 
öãgî
);

93 
evèg_m¨shÆ_°rög
(
evbuf„r
 *
buf
, 
ev_uöt32_t
 
èg
,

94 c⁄° *
°rög
);

96 
evèg_m¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

97 
timevÆ
 *
tv
);

99 
evèg_unm¨shÆ
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 *
±ag
,

100 
evbuf„r
 *
d°
);

101 
evèg_≥ek
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
);

102 
evèg_≥ek_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

103 
evèg_∑ylﬂd_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

104 
evèg_c⁄sume
(
evbuf„r
 *
evbuf
);

106 
evèg_unm¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

107 
ev_uöt32_t
 *
pöãgî
);

108 
evèg_unm¨shÆ_öt64
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

109 
ev_uöt64_t
 *
pöãgî
);

111 
evèg_unm¨shÆ_fixed
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 
√ed_èg
,

112 *
d©a
, 
size_t
 
Àn
);

114 
evèg_unm¨shÆ_°rög
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

115 **
p°rög
);

117 
evèg_unm¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

118 
timevÆ
 *
±v
);

120 #ifde‡
__˝lu•lus


	@/usr/include/event2/tag_compat.h

27 #i‚de‡
_EVENT2_TAG_COMPAT_H_


28 
	#_EVENT2_TAG_COMPAT_H_


	)

45 
	#ícode_öt
(
evbuf
, 
numbî
Ë
	`evèg_ícode_öt
(”vbuf), (numbî))

	)

46 
	#ícode_öt64
(
evbuf
, 
numbî
Ë
	`evèg_ícode_öt64
(”vbuf), (numbî))

	)

	@/usr/include/evutil.h

26 #i‚de‡
_EVUTIL_H_


27 
	#_EVUTIL_H_


	)

37 
	~<evít2/utû.h
>

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/event2/keyvalq_struct.h

27 #i‚de‡
_EVENT2_EVENT_KEYVALQ_STRUCT_H_


28 
	#_EVENT2_EVENT_KEYVALQ_STRUCT_H_


	)

30 #ifde‡
__˝lu•lus


36 #i‚de‡
TAILQ_ENTRY


37 
	#_EVENT_DEFINED_TQENTRY


	)

38 
	#TAILQ_ENTRY
(
ty≥
) \

40 
ty≥
 *
tqe_√xt
; \

41 
ty≥
 **
tqe_¥ev
; \

42 }

	)

45 #i‚de‡
TAILQ_HEAD


46 
	#_EVENT_DEFINED_TQHEAD


	)

47 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

48 
	s«me
 { \

49 
ty≥
 *
tqh_fú°
; \

50 
ty≥
 **
tqh_œ°
; \

51 }

	)

58 
	sevkeyvÆ
 {

59 
TAILQ_ENTRY
(
evkeyvÆ
Ë
√xt
;

61 *
key
;

62 *
vÆue
;

65 
TAILQ_HEAD
 (
evkeyvÆq
, 
evkeyvÆ
);

68 #ifde‡
_EVENT_DEFINED_TQENTRY


69 #unde‡
TAILQ_ENTRY


72 #ifde‡
_EVENT_DEFINED_TQHEAD


73 #unde‡
TAILQ_HEAD


76 #ifde‡
__˝lu•lus


	@/usr/include/event2/util.h

26 #i‚de‡
_EVENT2_UTIL_H_


27 
	#_EVENT2_UTIL_H_


	)

36 #ifde‡
__˝lu•lus


40 
	~<evít2/evít-c⁄fig.h
>

41 #ifde‡
_EVENT_HAVE_SYS_TIME_H


42 
	~<sys/time.h
>

44 #ifde‡
_EVENT_HAVE_STDINT_H


45 
	~<°döt.h
>

46 #ñi‡
deföed
(
_EVENT_HAVE_INTTYPES_H
)

47 
	~<öây≥s.h
>

49 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


50 
	~<sys/ty≥s.h
>

52 #ifde‡
_EVENT_HAVE_STDDEF_H


53 
	~<°ddef.h
>

55 #ifde‡
_MSC_VER


56 
	~<Ba£Tsd.h
>

58 
	~<°d¨g.h
>

59 #ifde‡
_EVENT_HAVE_NETDB_H


60 #i‡!
deföed
(
_GNU_SOURCE
)

61 
	#_GNU_SOURCE


	)

63 
	~<√tdb.h
>

66 #ifde‡
WIN32


67 
	~<wösock2.h
>

69 
	~<sys/sockë.h
>

73 #i‡
deföed
(
_EVENT_SIZEOF_VOID__
Ë&& !deföed(
_EVENT_SIZEOF_VOID_P
)

74 
	#_EVENT_SIZEOF_VOID_P
 
_EVENT_SIZEOF_VOID__


	)

106 #ifde‡
_EVENT_HAVE_UINT64_T


107 
	#ev_uöt64_t
 
uöt64_t


	)

108 
	#ev_öt64_t
 
öt64_t


	)

109 #ñi‡
deföed
(
WIN32
)

110 
	#ev_uöt64_t
 
__öt64


	)

111 
	#ev_öt64_t
 sig√d 
__öt64


	)

112 #ñi‡
_EVENT_SIZEOF_LONG_LONG
 == 8

113 
	#ev_uöt64_t
 

	)

114 
	#ev_öt64_t
 

	)

115 #ñi‡
_EVENT_SIZEOF_LONG
 == 8

116 
	#ev_uöt64_t
 

	)

117 
	#ev_öt64_t
 

	)

118 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

119 
	#ev_uöt64_t
 ...

	)

120 
	#ev_öt64_t
 ...

	)

125 #ifde‡
_EVENT_HAVE_UINT32_T


126 
	#ev_uöt32_t
 
uöt32_t


	)

127 
	#ev_öt32_t
 
öt32_t


	)

128 #ñi‡
deföed
(
WIN32
)

129 
	#ev_uöt32_t
 

	)

130 
	#ev_öt32_t
 sig√d 

	)

131 #ñi‡
_EVENT_SIZEOF_LONG
 == 4

132 
	#ev_uöt32_t
 

	)

133 
	#ev_öt32_t
 sig√d 

	)

134 #ñi‡
_EVENT_SIZEOF_INT
 == 4

135 
	#ev_uöt32_t
 

	)

136 
	#ev_öt32_t
 sig√d 

	)

137 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

138 
	#ev_uöt32_t
 ...

	)

139 
	#ev_öt32_t
 ...

	)

144 #ifde‡
_EVENT_HAVE_UINT16_T


145 
	#ev_uöt16_t
 
uöt16_t


	)

146 
	#ev_öt16_t
 
öt16_t


	)

147 #ñi‡
deföed
(
WIN32
)

148 
	#ev_uöt16_t
 

	)

149 
	#ev_öt16_t
 sig√d 

	)

150 #ñi‡
_EVENT_SIZEOF_INT
 == 2

151 
	#ev_uöt16_t
 

	)

152 
	#ev_öt16_t
 sig√d 

	)

153 #ñi‡
_EVENT_SIZEOF_SHORT
 == 2

154 
	#ev_uöt16_t
 

	)

155 
	#ev_öt16_t
 sig√d 

	)

156 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

157 
	#ev_uöt16_t
 ...

	)

158 
	#ev_öt16_t
 ...

	)

163 #ifde‡
_EVENT_HAVE_UINT8_T


164 
	#ev_uöt8_t
 
uöt8_t


	)

165 
	#ev_öt8_t
 
öt8_t


	)

166 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

167 
	#ev_uöt8_t
 ...

	)

168 
	#ev_öt8_t
 ...

	)

170 
	#ev_uöt8_t
 

	)

171 
	#ev_öt8_t
 sig√d 

	)

174 #ifde‡
_EVENT_HAVE_UINTPTR_T


175 
	#ev_uöçå_t
 
uöçå_t


	)

176 
	#ev_öçå_t
 
öçå_t


	)

177 #ñi‡
_EVENT_SIZEOF_VOID_P
 <= 4

178 
	#ev_uöçå_t
 
ev_uöt32_t


	)

179 
	#ev_öçå_t
 
ev_öt32_t


	)

180 #ñi‡
_EVENT_SIZEOF_VOID_P
 <= 8

181 
	#ev_uöçå_t
 
ev_uöt64_t


	)

182 
	#ev_öçå_t
 
ev_öt64_t


	)

183 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

184 
	#ev_uöçå_t
 ...

	)

185 
	#ev_öçå_t
 ...

	)

190 #ifde‡
_EVENT_ssize_t


191 
	#ev_ssize_t
 
_EVENT_ssize_t


	)

193 
	#ev_ssize_t
 
ssize_t


	)

196 #ifde‡
WIN32


197 
	#ev_off_t
 
ev_öt64_t


	)

199 
	#ev_off_t
 
off_t


	)

218 
	#EV_UINT64_MAX
 ((((
ev_uöt64_t
)0xffffffffULË<< 32Ë| 0xffffffffUL)

	)

219 
	#EV_INT64_MAX
 ((((
ev_öt64_t
Ë0x7fffffffLË<< 32Ë| 0xffffffffL)

	)

220 
	#EV_INT64_MIN
 ((-
EV_INT64_MAX
Ë- 1)

	)

221 
	#EV_UINT32_MAX
 ((
ev_uöt32_t
)0xffffffffUL)

	)

222 
	#EV_INT32_MAX
 ((
ev_öt32_t
Ë0x7fffffffL)

	)

223 
	#EV_INT32_MIN
 ((-
EV_INT32_MAX
Ë- 1)

	)

224 
	#EV_UINT16_MAX
 ((
ev_uöt16_t
)0xffffUL)

	)

225 
	#EV_INT16_MAX
 ((
ev_öt16_t
Ë0x7fffL)

	)

226 
	#EV_INT16_MIN
 ((-
EV_INT16_MAX
Ë- 1)

	)

227 
	#EV_UINT8_MAX
 255

	)

228 
	#EV_INT8_MAX
 127

	)

229 
	#EV_INT8_MIN
 ((-
EV_INT8_MAX
Ë- 1)

	)

237 #i‡
_EVENT_SIZEOF_SIZE_T
 == 8

238 
	#EV_SIZE_MAX
 
EV_UINT64_MAX


	)

239 
	#EV_SSIZE_MAX
 
EV_INT64_MAX


	)

240 #ñi‡
_EVENT_SIZEOF_SIZE_T
 == 4

241 
	#EV_SIZE_MAX
 
EV_UINT32_MAX


	)

242 
	#EV_SSIZE_MAX
 
EV_INT32_MAX


	)

243 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

244 
	#EV_SIZE_MAX
 ...

	)

245 
	#EV_SSIZE_MAX
 ...

	)

250 
	#EV_SSIZE_MIN
 ((-
EV_SSIZE_MAX
Ë- 1)

	)

253 #ifde‡
WIN32


254 
	#ev_sockÀn_t
 

	)

255 #ñi‡
deföed
(
_EVENT_sockÀn_t
)

256 
	#ev_sockÀn_t
 
_EVENT_sockÀn_t


	)

258 
	#ev_sockÀn_t
 
sockÀn_t


	)

261 #ifde‡
_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE___SS_FAMILY


262 #i‡!
deföed
(
_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY
) \

263 && !
deföed
(
ss_Ámûy
)

264 
	#ss_Ámûy
 
__ss_Ámûy


	)

271 #ifde‡
WIN32


272 
	#evutû_sockë_t
 
öçå_t


	)

274 
	#evutû_sockë_t
 

	)

288 
evutû_sockë∑ú
(
d
, 
ty≥
, 
¥Ÿocﬁ
, 
evutû_sockë_t
 
sv
[2]);

294 
evutû_make_sockë_n⁄blockög
(
evutû_sockë_t
 
sock
);

307 
evutû_make_li°í_sockë_ªu£abÀ
(
evutû_sockë_t
 
sock
);

315 
evutû_make_sockë_˛o£⁄exec
(
evutû_sockë_t
 
sock
);

323 
evutû_˛o£sockë
(
evutû_sockë_t
 
sock
);

324 
	#EVUTIL_CLOSESOCKET
(
s
Ë
	`evutû_˛o£sockë
(s)

	)

327 #ifde‡
WIN32


329 
	#EVUTIL_SOCKET_ERROR
(Ë
	`WSAGëLa°Eº‹
()

	)

331 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

332 dÿ{ 
	`WSASëLa°Eº‹
(
îrcode
); } 0)

	)

334 
evutû_sockë_gëîr‹
(
evutû_sockë_t
 
sock
);

336 c⁄° *
evutû_sockë_îr‹_to_°rög
(
îrcode
);

337 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

353 
	#EVUTIL_SOCKET_ERROR
(Ë...

	)

355 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
Ë...

	)

357 
	#evutû_sockë_gëîr‹
(
sock
Ë...

	)

359 
	#evutû_sockë_îr‹_to_°rög
(
îrcode
Ë...

	)

362 
	#EVUTIL_SOCKET_ERROR
(Ë(
î∫o
)

	)

363 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

364 dÿ{ 
î∫o
 = (
îrcode
); } 0)

	)

365 
	#evutû_sockë_gëîr‹
(
sock
Ë(
î∫o
)

	)

366 
	#evutû_sockë_îr‹_to_°rög
(
îrcode
Ë(
	`°ªº‹
”ºcode))

	)

378 #ifde‡
_EVENT_HAVE_TIMERADD


379 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
Ë
	`timîadd
(—vp), (uvp), (vvp))

	)

380 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
Ë
	`timîsub
(—vp), (uvp), (vvp))

	)

382 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
) \

384 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

385 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

386 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

387 (
vvp
)->
tv_£c
++; \

388 (
vvp
)->
tv_u£c
 -= 1000000; \

390 } 0)

	)

391 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
) \

393 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

394 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

395 i‡((
vvp
)->
tv_u£c
 < 0) { \

396 (
vvp
)->
tv_£c
--; \

397 (
vvp
)->
tv_u£c
 += 1000000; \

399 } 0)

	)

402 #ifde‡
_EVENT_HAVE_TIMERCLEAR


403 
	#evutû_timî˛ór
(
tvp
Ë
	`timî˛ór
—vp)

	)

405 
	#evutû_timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

411 
	#evutû_timîcmp
(
tvp
, 
uvp
, 
cmp
) \

412 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

413 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

414 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

416 #ifde‡
_EVENT_HAVE_TIMERISSET


417 
	#evutû_timîis£t
(
tvp
Ë
	`timîis£t
—vp)

	)

419 
	#evutû_timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

423 #ifde‡
off£tof


424 
	#evutû_off£tof
(
ty≥
, 
fõld
Ë
	`off£tof
—y≥, fõld)

	)

426 
	#evutû_off£tof
(
ty≥
, 
fõld
Ë((
off_t
)(&(—y≥ *)0)->fõld))

	)

431 
ev_öt64_t
 
evutû_°πﬁl
(c⁄° *
s
, **
íd±r
, 
ba£
);

434 #ifde‡
_EVENT_HAVE_GETTIMEOFDAY


435 
	#evutû_gëtimeofday
(
tv
, 
tz
Ë
	`gëtimeofday
(—v), (tz))

	)

437 
timez⁄e
;

438 
evutû_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

444 
evutû_¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, ...)

445 #ifde‡
__GNUC__


446 
__©åibuã__
((
f‹m©
(
¥ötf
, 3, 4)))

452 
evutû_v¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

455 c⁄° *
evutû_öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
size_t
 
Àn
);

457 
evutû_öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

458 
sockaddr
;

480 
evutû_∑r£_sockaddr_p‹t
(c⁄° *
°r
, 
sockaddr
 *
out
, *
ouéí
);

487 
evutû_sockaddr_cmp
(c⁄° 
sockaddr
 *
ß1
, c⁄° sockadd∏*
ß2
,

488 
ö˛ude_p‹t
);

493 
evutû_ascii_°rˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
);

497 
evutû_ascii_°∫ˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
n
);

501 #ifde‡
_EVENT_HAVE_STRUCT_ADDRINFO


502 
	#evutû_addröfo
 
addröfo


	)

509 
	sevutû_addröfo
 {

510 
ai_Êags
;

511 
ai_Ámûy
;

512 
ai_sockty≥
;

513 
ai_¥Ÿocﬁ
;

514 
size_t
 
ai_addæí
;

515 *
ai_ˇn⁄«me
;

516 
sockaddr
 *
ai_addr
;

517 
evutû_addröfo
 *
ai_√xt
;

527 #ifde‡
EAI_ADDRFAMILY


528 
	#EVUTIL_EAI_ADDRFAMILY
 
EAI_ADDRFAMILY


	)

530 
	#EVUTIL_EAI_ADDRFAMILY
 -901

	)

532 #ifde‡
EAI_AGAIN


533 
	#EVUTIL_EAI_AGAIN
 
EAI_AGAIN


	)

535 
	#EVUTIL_EAI_AGAIN
 -902

	)

537 #ifde‡
EAI_BADFLAGS


538 
	#EVUTIL_EAI_BADFLAGS
 
EAI_BADFLAGS


	)

540 
	#EVUTIL_EAI_BADFLAGS
 -903

	)

542 #ifde‡
EAI_FAIL


543 
	#EVUTIL_EAI_FAIL
 
EAI_FAIL


	)

545 
	#EVUTIL_EAI_FAIL
 -904

	)

547 #ifde‡
EAI_FAMILY


548 
	#EVUTIL_EAI_FAMILY
 
EAI_FAMILY


	)

550 
	#EVUTIL_EAI_FAMILY
 -905

	)

552 #ifde‡
EAI_MEMORY


553 
	#EVUTIL_EAI_MEMORY
 
EAI_MEMORY


	)

555 
	#EVUTIL_EAI_MEMORY
 -906

	)

560 #i‡
deföed
(
EAI_NODATA
Ë&& (!deföed(
EAI_NONAME
) || EAI_NODATA != EAI_NONAME)

561 
	#EVUTIL_EAI_NODATA
 
EAI_NODATA


	)

563 
	#EVUTIL_EAI_NODATA
 -907

	)

565 #ifde‡
EAI_NONAME


566 
	#EVUTIL_EAI_NONAME
 
EAI_NONAME


	)

568 
	#EVUTIL_EAI_NONAME
 -908

	)

570 #ifde‡
EAI_SERVICE


571 
	#EVUTIL_EAI_SERVICE
 
EAI_SERVICE


	)

573 
	#EVUTIL_EAI_SERVICE
 -909

	)

575 #ifde‡
EAI_SOCKTYPE


576 
	#EVUTIL_EAI_SOCKTYPE
 
EAI_SOCKTYPE


	)

578 
	#EVUTIL_EAI_SOCKTYPE
 -910

	)

580 #ifde‡
EAI_SYSTEM


581 
	#EVUTIL_EAI_SYSTEM
 
EAI_SYSTEM


	)

583 
	#EVUTIL_EAI_SYSTEM
 -911

	)

586 
	#EVUTIL_EAI_CANCEL
 -90001

	)

588 #ifde‡
AI_PASSIVE


589 
	#EVUTIL_AI_PASSIVE
 
AI_PASSIVE


	)

591 
	#EVUTIL_AI_PASSIVE
 0x1000

	)

593 #ifde‡
AI_CANONNAME


594 
	#EVUTIL_AI_CANONNAME
 
AI_CANONNAME


	)

596 
	#EVUTIL_AI_CANONNAME
 0x2000

	)

598 #ifde‡
AI_NUMERICHOST


599 
	#EVUTIL_AI_NUMERICHOST
 
AI_NUMERICHOST


	)

601 
	#EVUTIL_AI_NUMERICHOST
 0x4000

	)

603 #ifde‡
AI_NUMERICSERV


604 
	#EVUTIL_AI_NUMERICSERV
 
AI_NUMERICSERV


	)

606 
	#EVUTIL_AI_NUMERICSERV
 0x8000

	)

608 #ifde‡
AI_V4MAPPED


609 
	#EVUTIL_AI_V4MAPPED
 
AI_V4MAPPED


	)

611 
	#EVUTIL_AI_V4MAPPED
 0x10000

	)

613 #ifde‡
AI_ALL


614 
	#EVUTIL_AI_ALL
 
AI_ALL


	)

616 
	#EVUTIL_AI_ALL
 0x20000

	)

618 #ifde‡
AI_ADDRCONFIG


619 
	#EVUTIL_AI_ADDRCONFIG
 
AI_ADDRCONFIG


	)

621 
	#EVUTIL_AI_ADDRCONFIG
 0x40000

	)

625 
evutû_addröfo
;

637 
evutû_gëaddröfo
(c⁄° *
nodíame
, c⁄° *
£rv«me
,

638 c⁄° 
evutû_addröfo
 *
höts_ö
, evutû_addröfÿ**
ªs
);

641 
evutû_‰ìaddröfo
(
evutû_addröfo
 *
ai
);

643 c⁄° *
evutû_gai_°ªº‹
(
îr
);

651 
evutû_£cuª_∫g_gë_byãs
(*
buf
, 
size_t
 
n
);

669 
evutû_£cuª_∫g_öô
();

685 
evutû_£cuª_∫g_add_byãs
(c⁄° *
d©
, 
size_t
 
d©Àn
);

687 #ifde‡
__˝lu•lus


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
533
12908
clients/client_options.h
clients/execute.cc
clients/execute.h
clients/generator.cc
clients/generator.h
clients/memaslap.c
clients/memcapable.cc
clients/memcat.cc
clients/memcp.cc
clients/memdump.cc
clients/memerror.cc
clients/memexist.cc
clients/memflush.cc
clients/memparse.cc
clients/memping.cc
clients/memrm.cc
clients/memslap.cc
clients/memstat.cc
clients/memtouch.cc
clients/ms_atomic.h
clients/ms_conn.c
clients/ms_conn.h
clients/ms_memslap.h
clients/ms_setting.c
clients/ms_setting.h
clients/ms_sigsegv.c
clients/ms_sigsegv.h
clients/ms_stats.c
clients/ms_stats.h
clients/ms_task.c
clients/ms_task.h
clients/ms_thread.c
clients/ms_thread.h
clients/utilities.cc
clients/utilities.h
example/byteorder.cc
example/byteorder.h
example/interface_v0.cc
example/interface_v1.cc
example/memcached_light.cc
example/memcached_light.h
example/storage.cc
example/storage.h
libhashkit-1.0/algorithm.h
libhashkit-1.0/behavior.h
libhashkit-1.0/configure.h
libhashkit-1.0/digest.h
libhashkit-1.0/function.h
libhashkit-1.0/has.h
libhashkit-1.0/hashkit.h
libhashkit-1.0/hashkit.hpp
libhashkit-1.0/str_algorithm.h
libhashkit-1.0/strerror.h
libhashkit-1.0/string.h
libhashkit-1.0/types.h
libhashkit-1.0/visibility.h
libhashkit/aes.cc
libhashkit/aes.h
libhashkit/algorithm.cc
libhashkit/algorithm.h
libhashkit/behavior.cc
libhashkit/common.h
libhashkit/crc32.cc
libhashkit/digest.cc
libhashkit/encrypt.cc
libhashkit/fnv_32.cc
libhashkit/fnv_64.cc
libhashkit/function.cc
libhashkit/has.cc
libhashkit/hashkit.cc
libhashkit/hashkit.h
libhashkit/hashkitcon.h
libhashkit/hsieh.cc
libhashkit/is.h
libhashkit/jenkins.cc
libhashkit/ketama.cc
libhashkit/md5.cc
libhashkit/murmur.cc
libhashkit/murmur3.cc
libhashkit/murmur3.h
libhashkit/murmur3_api.cc
libhashkit/nohsieh.cc
libhashkit/one_at_a_time.cc
libhashkit/rijndael.cc
libhashkit/rijndael.hpp
libhashkit/str_algorithm.cc
libhashkit/strerror.cc
libhashkit/string.cc
libhashkit/string.h
libmemcached-1.0/alloc.h
libmemcached-1.0/allocators.h
libmemcached-1.0/analyze.h
libmemcached-1.0/auto.h
libmemcached-1.0/basic_string.h
libmemcached-1.0/behavior.h
libmemcached-1.0/callback.h
libmemcached-1.0/callbacks.h
libmemcached-1.0/configure.h
libmemcached-1.0/defaults.h
libmemcached-1.0/delete.h
libmemcached-1.0/deprecated_types.h
libmemcached-1.0/dump.h
libmemcached-1.0/encoding_key.h
libmemcached-1.0/error.h
libmemcached-1.0/exception.hpp
libmemcached-1.0/exist.h
libmemcached-1.0/fetch.h
libmemcached-1.0/flush.h
libmemcached-1.0/flush_buffers.h
libmemcached-1.0/get.h
libmemcached-1.0/hash.h
libmemcached-1.0/limits.h
libmemcached-1.0/memcached.h
libmemcached-1.0/memcached.hpp
libmemcached-1.0/options.h
libmemcached-1.0/parse.h
libmemcached-1.0/platform.h
libmemcached-1.0/quit.h
libmemcached-1.0/result.h
libmemcached-1.0/return.h
libmemcached-1.0/sasl.h
libmemcached-1.0/server.h
libmemcached-1.0/server_list.h
libmemcached-1.0/stats.h
libmemcached-1.0/storage.h
libmemcached-1.0/strerror.h
libmemcached-1.0/struct/allocator.h
libmemcached-1.0/struct/analysis.h
libmemcached-1.0/struct/callback.h
libmemcached-1.0/struct/memcached.h
libmemcached-1.0/struct/result.h
libmemcached-1.0/struct/sasl.h
libmemcached-1.0/struct/server.h
libmemcached-1.0/struct/stat.h
libmemcached-1.0/struct/string.h
libmemcached-1.0/t/c_sasl_test.c
libmemcached-1.0/t/c_test.c
libmemcached-1.0/t/cc_test.cc
libmemcached-1.0/touch.h
libmemcached-1.0/triggers.h
libmemcached-1.0/types.h
libmemcached-1.0/types/behavior.h
libmemcached-1.0/types/callback.h
libmemcached-1.0/types/connection.h
libmemcached-1.0/types/hash.h
libmemcached-1.0/types/return.h
libmemcached-1.0/types/server_distribution.h
libmemcached-1.0/verbosity.h
libmemcached-1.0/version.h
libmemcached-1.0/visibility.h
libmemcached/allocators.cc
libmemcached/allocators.hpp
libmemcached/analyze.cc
libmemcached/array.c
libmemcached/array.h
libmemcached/assert.hpp
libmemcached/auto.cc
libmemcached/backtrace.cc
libmemcached/backtrace.hpp
libmemcached/behavior.cc
libmemcached/behavior.hpp
libmemcached/byteorder.cc
libmemcached/byteorder.h
libmemcached/callback.cc
libmemcached/common.h
libmemcached/connect.cc
libmemcached/connect.hpp
libmemcached/continuum.hpp
libmemcached/csl/common.h
libmemcached/csl/context.cc
libmemcached/csl/context.h
libmemcached/csl/parser.cc
libmemcached/csl/parser.h
libmemcached/csl/scanner.cc
libmemcached/csl/scanner.h
libmemcached/csl/scanner.l
libmemcached/csl/server.h
libmemcached/csl/symbol.h
libmemcached/delete.cc
libmemcached/do.cc
libmemcached/do.hpp
libmemcached/dump.cc
libmemcached/encoding_key.cc
libmemcached/encoding_key.h
libmemcached/error.cc
libmemcached/error.hpp
libmemcached/exist.cc
libmemcached/fetch.cc
libmemcached/flag.cc
libmemcached/flag.hpp
libmemcached/flush.cc
libmemcached/flush_buffers.cc
libmemcached/get.cc
libmemcached/hash.cc
libmemcached/hash.hpp
libmemcached/hosts.cc
libmemcached/initialize_query.cc
libmemcached/initialize_query.h
libmemcached/instance.cc
libmemcached/instance.hpp
libmemcached/internal.h
libmemcached/io.cc
libmemcached/io.h
libmemcached/io.hpp
libmemcached/is.h
libmemcached/key.cc
libmemcached/key.hpp
libmemcached/libmemcached_probes.h
libmemcached/memcached.cc
libmemcached/memcached.h
libmemcached/memcached.hpp
libmemcached/memcached/protocol_binary.h
libmemcached/memcached/vbucket.h
libmemcached/memory.h
libmemcached/namespace.cc
libmemcached/namespace.h
libmemcached/options.cc
libmemcached/options.hpp
libmemcached/parse.cc
libmemcached/poll.cc
libmemcached/poll.h
libmemcached/purge.cc
libmemcached/quit.cc
libmemcached/quit.hpp
libmemcached/response.cc
libmemcached/response.h
libmemcached/result.cc
libmemcached/result.h
libmemcached/sasl.cc
libmemcached/sasl.hpp
libmemcached/server.cc
libmemcached/server.hpp
libmemcached/server_instance.h
libmemcached/server_list.cc
libmemcached/server_list.hpp
libmemcached/socket.hpp
libmemcached/stats.cc
libmemcached/storage.cc
libmemcached/strerror.cc
libmemcached/string.cc
libmemcached/string.hpp
libmemcached/touch.cc
libmemcached/udp.cc
libmemcached/udp.hpp
libmemcached/util.h
libmemcached/verbosity.cc
libmemcached/version.cc
libmemcached/version.hpp
libmemcached/virtual_bucket.c
libmemcached/virtual_bucket.h
libmemcached/watchpoint.h
libmemcached/windows.hpp
libmemcachedprotocol-0.0/binary.h
libmemcachedprotocol-0.0/callback.h
libmemcachedprotocol-0.0/handler.h
libmemcachedprotocol-0.0/vbucket.h
libmemcachedprotocol/ascii_handler.c
libmemcachedprotocol/ascii_handler.h
libmemcachedprotocol/binary_handler.c
libmemcachedprotocol/binary_handler.h
libmemcachedprotocol/cache.c
libmemcachedprotocol/cache.h
libmemcachedprotocol/common.h
libmemcachedprotocol/handler.c
libmemcachedprotocol/pedantic.c
libmemcachedutil-1.0/flush.h
libmemcachedutil-1.0/ostream.hpp
libmemcachedutil-1.0/pid.h
libmemcachedutil-1.0/ping.h
libmemcachedutil-1.0/pool.h
libmemcachedutil-1.0/util.h
libmemcachedutil-1.0/version.h
libmemcachedutil/common.h
libmemcachedutil/flush.cc
libmemcachedutil/pid.cc
libmemcachedutil/ping.cc
libmemcachedutil/pool.cc
libmemcachedutil/version.cc
libtest/abort.cc
libtest/alarm.cc
libtest/alarm.h
libtest/backtrace_test.cc
libtest/binaries.cc
libtest/binaries.h
libtest/blobslap_worker.cc
libtest/blobslap_worker.h
libtest/callbacks.h
libtest/client.cc
libtest/client.hpp
libtest/cmdline.cc
libtest/cmdline.h
libtest/collection.cc
libtest/collection.h
libtest/common.h
libtest/comparison.cc
libtest/comparison.hpp
libtest/core.cc
libtest/core.h
libtest/core_count.cc
libtest/cpu.cc
libtest/cpu.hpp
libtest/dns.cc
libtest/dns.hpp
libtest/dream.cc
libtest/dream.h
libtest/drizzled.cc
libtest/drizzled.h
libtest/error.h
libtest/failed.h
libtest/fatal.cc
libtest/fatal.hpp
libtest/formatter.cc
libtest/formatter.hpp
libtest/framework.cc
libtest/framework.h
libtest/gearmand.cc
libtest/gearmand.h
libtest/get.h
libtest/has.cc
libtest/has.hpp
libtest/http.cc
libtest/http.hpp
libtest/is_local.cc
libtest/is_local.hpp
libtest/is_pid.hpp
libtest/killpid.cc
libtest/killpid.h
libtest/libtool.cc
libtest/libtool.hpp
libtest/lite.h
libtest/main.cc
libtest/memcached.cc
libtest/memcached.h
libtest/memcached.hpp
libtest/poll_error.hpp
libtest/port.cc
libtest/port.h
libtest/result.cc
libtest/result.hpp
libtest/result/base.hpp
libtest/result/fail.hpp
libtest/result/fatal.hpp
libtest/result/skip.hpp
libtest/result/success.hpp
libtest/runner.cc
libtest/runner.h
libtest/server.cc
libtest/server.h
libtest/server_container.cc
libtest/server_container.h
libtest/signal.cc
libtest/signal.h
libtest/skiptest.cc
libtest/socket.cc
libtest/socket.hpp
libtest/stream.h
libtest/strerror.cc
libtest/strerror.h
libtest/string.hpp
libtest/test.h
libtest/test.hpp
libtest/thread.hpp
libtest/timer.cc
libtest/timer.hpp
libtest/tmpfile.cc
libtest/tmpfile.hpp
libtest/unittest.cc
libtest/vchar.cc
libtest/vchar.hpp
libtest/version.h
libtest/visibility.h
libtest/wait.cc
libtest/wait.h
libtest/yatl.h
libtest/yatlcon.h
mem_config.h
tests/basic.h
tests/callbacks.h
tests/cpp_example.cc
tests/cycle.cc
tests/debug.h
tests/deprecated.h
tests/error_conditions.h
tests/exist.h
tests/failure.cc
tests/hash_plus.cc
tests/hash_results.h
tests/hashkit_functions.cc
tests/ketama.h
tests/ketama_test_cases.h
tests/ketama_test_cases_spy.h
tests/keys.hpp
tests/libmemcached-1.0/all_tests.cc
tests/libmemcached-1.0/all_tests.h
tests/libmemcached-1.0/all_tests_socket.cc
tests/libmemcached-1.0/atomsmasher.cc
tests/libmemcached-1.0/basic.cc
tests/libmemcached-1.0/callback_counter.cc
tests/libmemcached-1.0/callback_counter.h
tests/libmemcached-1.0/callbacks.cc
tests/libmemcached-1.0/debug.cc
tests/libmemcached-1.0/deprecated.cc
tests/libmemcached-1.0/dump.cc
tests/libmemcached-1.0/dump.h
tests/libmemcached-1.0/encoding_key.cc
tests/libmemcached-1.0/encoding_key.h
tests/libmemcached-1.0/error_conditions.cc
tests/libmemcached-1.0/exist.cc
tests/libmemcached-1.0/fetch_all_results.cc
tests/libmemcached-1.0/fetch_all_results.h
tests/libmemcached-1.0/generate.cc
tests/libmemcached-1.0/generate.h
tests/libmemcached-1.0/haldenbrand.cc
tests/libmemcached-1.0/haldenbrand.h
tests/libmemcached-1.0/internals.cc
tests/libmemcached-1.0/ketama.cc
tests/libmemcached-1.0/mem_functions.cc
tests/libmemcached-1.0/mem_functions.h
tests/libmemcached-1.0/memcached_get.cc
tests/libmemcached-1.0/memcached_get.h
tests/libmemcached-1.0/namespace.cc
tests/libmemcached-1.0/parser.cc
tests/libmemcached-1.0/parser.h
tests/libmemcached-1.0/plus.cpp
tests/libmemcached-1.0/pool.cc
tests/libmemcached-1.0/print.cc
tests/libmemcached-1.0/replication.cc
tests/libmemcached-1.0/sasl.cc
tests/libmemcached-1.0/server_add.cc
tests/libmemcached-1.0/setup_and_teardowns.cc
tests/libmemcached-1.0/setup_and_teardowns.h
tests/libmemcached-1.0/stat.cc
tests/libmemcached-1.0/stat.h
tests/libmemcached-1.0/string.cc
tests/libmemcached-1.0/touch.cc
tests/libmemcached-1.0/virtual_buckets.cc
tests/libmemcached_test_container.h
tests/libmemcached_world.h
tests/libmemcached_world_socket.h
tests/mem_udp.cc
tests/memc.hpp
tests/memcapable.cc
tests/memcat.cc
tests/memcp.cc
tests/memdump.cc
tests/memerror.cc
tests/memexist.cc
tests/memflush.cc
tests/memping.cc
tests/memrm.cc
tests/memslap.cc
tests/memstat.cc
tests/memtouch.cc
tests/namespace.h
tests/parser.cc
tests/pool.h
tests/print.h
tests/replication.h
tests/runner.h
tests/server_add.h
tests/string.h
tests/touch.h
tests/virtual_buckets.h
util/daemon.cc
util/daemon.hpp
util/instance.hpp
util/log.hpp
util/logfile.hpp
util/operation.hpp
util/pidfile.cc
util/pidfile.hpp
util/signal.hpp
util/string.hpp
win32/wrappers.h
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/event.h
/usr/include/execinfo.h
/usr/include/fcntl.h
/usr/include/fnmatch.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/spawn.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/endian.h
/usr/include/event2/buffer.h
/usr/include/event2/buffer_compat.h
/usr/include/event2/bufferevent.h
/usr/include/event2/bufferevent_compat.h
/usr/include/event2/bufferevent_struct.h
/usr/include/event2/event-config.h
/usr/include/event2/event.h
/usr/include/event2/event_compat.h
/usr/include/event2/event_struct.h
/usr/include/event2/tag.h
/usr/include/event2/tag_compat.h
/usr/include/evutil.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/locale.h
/usr/include/rpc/netdb.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/event2/keyvalq_struct.h
/usr/include/event2/util.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
